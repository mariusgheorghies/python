# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_instance_status import AwsK8sServicesEc2V1alpha1InstanceStatus  # noqa: E501
from kubernetes.client.rest import ApiException

class TestAwsK8sServicesEc2V1alpha1InstanceStatus(unittest.TestCase):
    """AwsK8sServicesEc2V1alpha1InstanceStatus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test AwsK8sServicesEc2V1alpha1InstanceStatus
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_instance_status.AwsK8sServicesEc2V1alpha1InstanceStatus()  # noqa: E501
        if include_optional :
            return AwsK8sServicesEc2V1alpha1InstanceStatus(
                ack_resource_metadata = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_dhcp_options_status_ack_resource_metadata.aws_k8s_services_ec2_v1alpha1_DHCPOptions_status_ackResourceMetadata(
                    arn = '0', 
                    owner_account_id = '0', 
                    region = '0', ), 
                ami_launch_index = 56, 
                architecture = '0', 
                boot_mode = '0', 
                capacity_reservation_id = '0', 
                conditions = [
                    kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_dhcp_options_status_conditions.aws_k8s_services_ec2_v1alpha1_DHCPOptions_status_conditions(
                        last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        message = '0', 
                        reason = '0', 
                        status = '0', 
                        type = '0', )
                    ], 
                elastic_gpu_associations = [
                    kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_instance_status_elastic_gpu_associations.aws_k8s_services_ec2_v1alpha1_Instance_status_elasticGPUAssociations(
                        elastic_gpu_association_id = '0', 
                        elastic_gpu_association_state = '0', 
                        elastic_gpu_association_time = '0', 
                        elastic_gpuid = '0', )
                    ], 
                elastic_inference_accelerator_associations = [
                    kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_instance_status_elastic_inference_accelerator_associations.aws_k8s_services_ec2_v1alpha1_Instance_status_elasticInferenceAcceleratorAssociations(
                        elastic_inference_accelerator_arn = '0', 
                        elastic_inference_accelerator_association_id = '0', 
                        elastic_inference_accelerator_association_state = '0', 
                        elastic_inference_accelerator_association_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ], 
                ena_support = True, 
                hypervisor = '0', 
                instance_id = '0', 
                instance_lifecycle = '0', 
                ipv6_address = '0', 
                launch_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                licenses = [
                    kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_instance_spec_license_specifications.aws_k8s_services_ec2_v1alpha1_Instance_spec_licenseSpecifications(
                        license_configuration_arn = '0', )
                    ], 
                outpost_arn = '0', 
                platform = '0', 
                platform_details = '0', 
                private_dns_name = '0', 
                product_codes = [
                    kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_instance_status_product_codes.aws_k8s_services_ec2_v1alpha1_Instance_status_productCodes(
                        product_code_id = '0', 
                        product_code_type = '0', )
                    ], 
                public_dns_name = '0', 
                public_ip_address = '0', 
                root_device_name = '0', 
                root_device_type = '0', 
                source_dest_check = True, 
                spot_instance_request_id = '0', 
                sriov_net_support = '0', 
                state = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_instance_status_state.aws_k8s_services_ec2_v1alpha1_Instance_status_state(
                    code = 56, 
                    name = '0', ), 
                state_reason = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_instance_status_state_reason.aws_k8s_services_ec2_v1alpha1_Instance_status_stateReason(
                    code = '0', 
                    message = '0', ), 
                state_transition_reason = '0', 
                tpm_support = '0', 
                usage_operation = '0', 
                usage_operation_update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                virtualization_type = '0', 
                vpc_id = '0'
            )
        else :
            return AwsK8sServicesEc2V1alpha1InstanceStatus(
        )

    def testAwsK8sServicesEc2V1alpha1InstanceStatus(self):
        """Test AwsK8sServicesEc2V1alpha1InstanceStatus"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
