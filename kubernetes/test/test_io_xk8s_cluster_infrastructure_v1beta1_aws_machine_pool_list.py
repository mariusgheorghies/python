# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.io_xk8s_cluster_infrastructure_v1beta1_aws_machine_pool_list import IoXK8sClusterInfrastructureV1beta1AWSMachinePoolList  # noqa: E501
from kubernetes.client.rest import ApiException

class TestIoXK8sClusterInfrastructureV1beta1AWSMachinePoolList(unittest.TestCase):
    """IoXK8sClusterInfrastructureV1beta1AWSMachinePoolList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test IoXK8sClusterInfrastructureV1beta1AWSMachinePoolList
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.io_xk8s_cluster_infrastructure_v1beta1_aws_machine_pool_list.IoXK8sClusterInfrastructureV1beta1AWSMachinePoolList()  # noqa: E501
        if include_optional :
            return IoXK8sClusterInfrastructureV1beta1AWSMachinePoolList(
                api_version = '0', 
                items = [
                    kubernetes.client.models.io/x_k8s/cluster/infrastructure/v1beta1/aws_machine_pool.io.x-k8s.cluster.infrastructure.v1beta1.AWSMachinePool(
                        api_version = '0', 
                        kind = '0', 
                        metadata = kubernetes.client.models.v1/object_meta_v2.v1.ObjectMeta_v2(
                            annotations = {
                                'key' : '0'
                                }, 
                            cluster_name = '0', 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                '0'
                                ], 
                            generate_name = '0', 
                            generation = 56, 
                            labels = {
                                'key' : '0'
                                }, 
                            managed_fields = [
                                kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                                    api_version = '0', 
                                    fields_type = '0', 
                                    fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                                    manager = '0', 
                                    operation = '0', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '0', 
                            namespace = '0', 
                            owner_references = [
                                kubernetes.client.models.v1/owner_reference_v2.v1.OwnerReference_v2(
                                    api_version = '0', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '0', 
                                    name = '0', 
                                    uid = '0', )
                                ], 
                            resource_version = '0', 
                            self_link = '0', 
                            uid = '0', ), 
                        spec = kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1beta1_aws_machine_pool_spec.io_x_k8s_cluster_infrastructure_v1beta1_AWSMachinePool_spec(
                            additional_tags = {
                                'key' : '0'
                                }, 
                            availability_zones = [
                                '0'
                                ], 
                            aws_launch_template = kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1beta1_aws_machine_pool_spec_aws_launch_template.io_x_k8s_cluster_infrastructure_v1beta1_AWSMachinePool_spec_awsLaunchTemplate(
                                additional_security_groups = [
                                    kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1beta1_aws_machine_spec_additional_security_groups.io_x_k8s_cluster_infrastructure_v1beta1_AWSMachine_spec_additionalSecurityGroups(
                                        arn = '0', 
                                        filters = [
                                            kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1beta1_aws_machine_spec_filters.io_x_k8s_cluster_infrastructure_v1beta1_AWSMachine_spec_filters(
                                                name = '0', 
                                                values = [
                                                    '0'
                                                    ], )
                                            ], 
                                        id = '0', )
                                    ], 
                                ami = kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1alpha4_aws_machine_spec_ami.io_x_k8s_cluster_infrastructure_v1alpha4_AWSMachine_spec_ami(
                                    eks_lookup_type = 'AmazonLinux', 
                                    id = '0', ), 
                                iam_instance_profile = '0', 
                                image_lookup_base_os = '0', 
                                image_lookup_format = '0', 
                                image_lookup_org = '0', 
                                instance_type = '0', 
                                name = '0', 
                                root_volume = kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1alpha4_aws_machine_spec_root_volume.io_x_k8s_cluster_infrastructure_v1alpha4_AWSMachine_spec_rootVolume(
                                    device_name = '0', 
                                    encrypted = True, 
                                    encryption_key = '0', 
                                    iops = 56, 
                                    size = 8, 
                                    throughput = 56, 
                                    type = '0', ), 
                                ssh_key_name = '0', 
                                version_number = 56, ), 
                            capacity_rebalance = True, 
                            default_cool_down = '0', 
                            max_size = 1, 
                            min_size = 1, 
                            mixed_instances_policy = kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1alpha3_aws_machine_pool_spec_mixed_instances_policy.io_x_k8s_cluster_infrastructure_v1alpha3_AWSMachinePool_spec_mixedInstancesPolicy(
                                instances_distribution = kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1alpha3_aws_machine_pool_spec_mixed_instances_policy_instances_distribution.io_x_k8s_cluster_infrastructure_v1alpha3_AWSMachinePool_spec_mixedInstancesPolicy_instancesDistribution(
                                    on_demand_allocation_strategy = 'prioritized', 
                                    on_demand_base_capacity = 56, 
                                    on_demand_percentage_above_base_capacity = 56, 
                                    spot_allocation_strategy = 'lowest-price', ), 
                                overrides = [
                                    kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1alpha3_aws_machine_pool_spec_mixed_instances_policy_overrides.io_x_k8s_cluster_infrastructure_v1alpha3_AWSMachinePool_spec_mixedInstancesPolicy_overrides(
                                        instance_type = '0', )
                                    ], ), 
                            provider_id = '0', 
                            provider_id_list = [
                                '0'
                                ], 
                            refresh_preferences = kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1alpha3_aws_machine_pool_spec_refresh_preferences.io_x_k8s_cluster_infrastructure_v1alpha3_AWSMachinePool_spec_refreshPreferences(
                                instance_warmup = 56, 
                                min_healthy_percentage = 56, 
                                strategy = '0', ), 
                            subnets = [
                                kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1beta1_aws_machine_spec_additional_security_groups.io_x_k8s_cluster_infrastructure_v1beta1_AWSMachine_spec_additionalSecurityGroups(
                                    arn = '0', 
                                    id = '0', )
                                ], ), 
                        status = kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1beta1_aws_machine_pool_status.io_x_k8s_cluster_infrastructure_v1beta1_AWSMachinePool_status(
                            asg_status = '0', 
                            conditions = [
                                kubernetes.client.models.io_x_k8s_cluster_addons_v1beta1_cluster_resource_set_status_conditions.io_x_k8s_cluster_addons_v1beta1_ClusterResourceSet_status_conditions(
                                    last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    message = '0', 
                                    reason = '0', 
                                    severity = '0', 
                                    status = '0', 
                                    type = '0', )
                                ], 
                            failure_message = '0', 
                            failure_reason = '0', 
                            instances = [
                                kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1alpha3_aws_machine_pool_status_instances.io_x_k8s_cluster_infrastructure_v1alpha3_AWSMachinePool_status_instances(
                                    instance_id = '0', 
                                    version = '0', )
                                ], 
                            launch_template_id = '0', 
                            ready = True, 
                            replicas = 56, ), )
                    ], 
                kind = '0', 
                metadata = kubernetes.client.models.v1/list_meta.v1.ListMeta(
                    continue = '0', 
                    remaining_item_count = 56, 
                    resource_version = '0', 
                    self_link = '0', )
            )
        else :
            return IoXK8sClusterInfrastructureV1beta1AWSMachinePoolList(
                items = [
                    kubernetes.client.models.io/x_k8s/cluster/infrastructure/v1beta1/aws_machine_pool.io.x-k8s.cluster.infrastructure.v1beta1.AWSMachinePool(
                        api_version = '0', 
                        kind = '0', 
                        metadata = kubernetes.client.models.v1/object_meta_v2.v1.ObjectMeta_v2(
                            annotations = {
                                'key' : '0'
                                }, 
                            cluster_name = '0', 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                '0'
                                ], 
                            generate_name = '0', 
                            generation = 56, 
                            labels = {
                                'key' : '0'
                                }, 
                            managed_fields = [
                                kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                                    api_version = '0', 
                                    fields_type = '0', 
                                    fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                                    manager = '0', 
                                    operation = '0', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '0', 
                            namespace = '0', 
                            owner_references = [
                                kubernetes.client.models.v1/owner_reference_v2.v1.OwnerReference_v2(
                                    api_version = '0', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '0', 
                                    name = '0', 
                                    uid = '0', )
                                ], 
                            resource_version = '0', 
                            self_link = '0', 
                            uid = '0', ), 
                        spec = kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1beta1_aws_machine_pool_spec.io_x_k8s_cluster_infrastructure_v1beta1_AWSMachinePool_spec(
                            additional_tags = {
                                'key' : '0'
                                }, 
                            availability_zones = [
                                '0'
                                ], 
                            aws_launch_template = kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1beta1_aws_machine_pool_spec_aws_launch_template.io_x_k8s_cluster_infrastructure_v1beta1_AWSMachinePool_spec_awsLaunchTemplate(
                                additional_security_groups = [
                                    kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1beta1_aws_machine_spec_additional_security_groups.io_x_k8s_cluster_infrastructure_v1beta1_AWSMachine_spec_additionalSecurityGroups(
                                        arn = '0', 
                                        filters = [
                                            kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1beta1_aws_machine_spec_filters.io_x_k8s_cluster_infrastructure_v1beta1_AWSMachine_spec_filters(
                                                name = '0', 
                                                values = [
                                                    '0'
                                                    ], )
                                            ], 
                                        id = '0', )
                                    ], 
                                ami = kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1alpha4_aws_machine_spec_ami.io_x_k8s_cluster_infrastructure_v1alpha4_AWSMachine_spec_ami(
                                    eks_lookup_type = 'AmazonLinux', 
                                    id = '0', ), 
                                iam_instance_profile = '0', 
                                image_lookup_base_os = '0', 
                                image_lookup_format = '0', 
                                image_lookup_org = '0', 
                                instance_type = '0', 
                                name = '0', 
                                root_volume = kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1alpha4_aws_machine_spec_root_volume.io_x_k8s_cluster_infrastructure_v1alpha4_AWSMachine_spec_rootVolume(
                                    device_name = '0', 
                                    encrypted = True, 
                                    encryption_key = '0', 
                                    iops = 56, 
                                    size = 8, 
                                    throughput = 56, 
                                    type = '0', ), 
                                ssh_key_name = '0', 
                                version_number = 56, ), 
                            capacity_rebalance = True, 
                            default_cool_down = '0', 
                            max_size = 1, 
                            min_size = 1, 
                            mixed_instances_policy = kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1alpha3_aws_machine_pool_spec_mixed_instances_policy.io_x_k8s_cluster_infrastructure_v1alpha3_AWSMachinePool_spec_mixedInstancesPolicy(
                                instances_distribution = kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1alpha3_aws_machine_pool_spec_mixed_instances_policy_instances_distribution.io_x_k8s_cluster_infrastructure_v1alpha3_AWSMachinePool_spec_mixedInstancesPolicy_instancesDistribution(
                                    on_demand_allocation_strategy = 'prioritized', 
                                    on_demand_base_capacity = 56, 
                                    on_demand_percentage_above_base_capacity = 56, 
                                    spot_allocation_strategy = 'lowest-price', ), 
                                overrides = [
                                    kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1alpha3_aws_machine_pool_spec_mixed_instances_policy_overrides.io_x_k8s_cluster_infrastructure_v1alpha3_AWSMachinePool_spec_mixedInstancesPolicy_overrides(
                                        instance_type = '0', )
                                    ], ), 
                            provider_id = '0', 
                            provider_id_list = [
                                '0'
                                ], 
                            refresh_preferences = kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1alpha3_aws_machine_pool_spec_refresh_preferences.io_x_k8s_cluster_infrastructure_v1alpha3_AWSMachinePool_spec_refreshPreferences(
                                instance_warmup = 56, 
                                min_healthy_percentage = 56, 
                                strategy = '0', ), 
                            subnets = [
                                kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1beta1_aws_machine_spec_additional_security_groups.io_x_k8s_cluster_infrastructure_v1beta1_AWSMachine_spec_additionalSecurityGroups(
                                    arn = '0', 
                                    id = '0', )
                                ], ), 
                        status = kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1beta1_aws_machine_pool_status.io_x_k8s_cluster_infrastructure_v1beta1_AWSMachinePool_status(
                            asg_status = '0', 
                            conditions = [
                                kubernetes.client.models.io_x_k8s_cluster_addons_v1beta1_cluster_resource_set_status_conditions.io_x_k8s_cluster_addons_v1beta1_ClusterResourceSet_status_conditions(
                                    last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    message = '0', 
                                    reason = '0', 
                                    severity = '0', 
                                    status = '0', 
                                    type = '0', )
                                ], 
                            failure_message = '0', 
                            failure_reason = '0', 
                            instances = [
                                kubernetes.client.models.io_x_k8s_cluster_infrastructure_v1alpha3_aws_machine_pool_status_instances.io_x_k8s_cluster_infrastructure_v1alpha3_AWSMachinePool_status_instances(
                                    instance_id = '0', 
                                    version = '0', )
                                ], 
                            launch_template_id = '0', 
                            ready = True, 
                            replicas = 56, ), )
                    ],
        )

    def testIoXK8sClusterInfrastructureV1beta1AWSMachinePoolList(self):
        """Test IoXK8sClusterInfrastructureV1beta1AWSMachinePoolList"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
