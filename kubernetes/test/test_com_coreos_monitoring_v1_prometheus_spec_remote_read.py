# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.com_coreos_monitoring_v1_prometheus_spec_remote_read import ComCoreosMonitoringV1PrometheusSpecRemoteRead  # noqa: E501
from kubernetes.client.rest import ApiException

class TestComCoreosMonitoringV1PrometheusSpecRemoteRead(unittest.TestCase):
    """ComCoreosMonitoringV1PrometheusSpecRemoteRead unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ComCoreosMonitoringV1PrometheusSpecRemoteRead
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.com_coreos_monitoring_v1_prometheus_spec_remote_read.ComCoreosMonitoringV1PrometheusSpecRemoteRead()  # noqa: E501
        if include_optional :
            return ComCoreosMonitoringV1PrometheusSpecRemoteRead(
                authorization = kubernetes.client.models.com_coreos_monitoring_v1_prometheus_spec_authorization.com_coreos_monitoring_v1_Prometheus_spec_authorization(
                    credentials = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_authorization_credentials.com_coreos_monitoring_v1_PodMonitor_spec_authorization_credentials(
                        key = '0', 
                        name = '0', 
                        optional = True, ), 
                    credentials_file = '0', 
                    type = '0', ), 
                basic_auth = kubernetes.client.models.com_coreos_monitoring_v1_prometheus_spec_basic_auth.com_coreos_monitoring_v1_Prometheus_spec_basicAuth(
                    password = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_basic_auth_password.com_coreos_monitoring_v1_PodMonitor_spec_basicAuth_password(
                        key = '0', 
                        name = '0', 
                        optional = True, ), 
                    username = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_basic_auth_username.com_coreos_monitoring_v1_PodMonitor_spec_basicAuth_username(
                        key = '0', 
                        name = '0', 
                        optional = True, ), ), 
                bearer_token = '0', 
                bearer_token_file = '0', 
                name = '0', 
                oauth2 = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_oauth2.com_coreos_monitoring_v1_PodMonitor_spec_oauth2(
                    kubernetes.client_id = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_oauth2_client_id.com_coreos_monitoring_v1_PodMonitor_spec_oauth2_clientId(
                        config_map = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_oauth2_client_id_config_map.com_coreos_monitoring_v1_PodMonitor_spec_oauth2_clientId_configMap(
                            key = '0', 
                            name = '0', 
                            optional = True, ), 
                        secret = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_oauth2_client_id_secret.com_coreos_monitoring_v1_PodMonitor_spec_oauth2_clientId_secret(
                            key = '0', 
                            name = '0', 
                            optional = True, ), ), 
                    kubernetes.client_secret = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_oauth2_client_secret.com_coreos_monitoring_v1_PodMonitor_spec_oauth2_clientSecret(
                        key = '0', 
                        name = '0', 
                        optional = True, ), 
                    endpoint_params = {
                        'key' : '0'
                        }, 
                    scopes = [
                        '0'
                        ], 
                    token_url = '0', ), 
                proxy_url = '0', 
                read_recent = True, 
                remote_timeout = '0', 
                required_matchers = {
                    'key' : '0'
                    }, 
                tls_config = kubernetes.client.models.com_coreos_monitoring_v1_prometheus_spec_tls_config.com_coreos_monitoring_v1_Prometheus_spec_tlsConfig(
                    ca = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_tls_config_ca.com_coreos_monitoring_v1_PodMonitor_spec_tlsConfig_ca(
                        config_map = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_oauth2_client_id_config_map.com_coreos_monitoring_v1_PodMonitor_spec_oauth2_clientId_configMap(
                            key = '0', 
                            name = '0', 
                            optional = True, ), 
                        secret = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_oauth2_client_id_secret.com_coreos_monitoring_v1_PodMonitor_spec_oauth2_clientId_secret(
                            key = '0', 
                            name = '0', 
                            optional = True, ), ), 
                    ca_file = '0', 
                    cert = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_tls_config_cert.com_coreos_monitoring_v1_PodMonitor_spec_tlsConfig_cert(), 
                    cert_file = '0', 
                    insecure_skip_verify = True, 
                    key_file = '0', 
                    key_secret = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_tls_config_key_secret.com_coreos_monitoring_v1_PodMonitor_spec_tlsConfig_keySecret(
                        key = '0', 
                        name = '0', 
                        optional = True, ), 
                    server_name = '0', ), 
                url = '0'
            )
        else :
            return ComCoreosMonitoringV1PrometheusSpecRemoteRead(
                url = '0',
        )

    def testComCoreosMonitoringV1PrometheusSpecRemoteRead(self):
        """Test ComCoreosMonitoringV1PrometheusSpecRemoteRead"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
