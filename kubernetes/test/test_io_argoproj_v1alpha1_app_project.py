# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.io_argoproj_v1alpha1_app_project import IoArgoprojV1alpha1AppProject  # noqa: E501
from kubernetes.client.rest import ApiException

class TestIoArgoprojV1alpha1AppProject(unittest.TestCase):
    """IoArgoprojV1alpha1AppProject unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test IoArgoprojV1alpha1AppProject
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.io_argoproj_v1alpha1_app_project.IoArgoprojV1alpha1AppProject()  # noqa: E501
        if include_optional :
            return IoArgoprojV1alpha1AppProject(
                api_version = '0', 
                kind = '0', 
                metadata = kubernetes.client.models.v1/object_meta.v1.ObjectMeta(
                    annotations = {
                        'key' : '0'
                        }, 
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_grace_period_seconds = 56, 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    finalizers = [
                        '0'
                        ], 
                    generate_name = '0', 
                    generation = 56, 
                    labels = {
                        'key' : '0'
                        }, 
                    managed_fields = [
                        kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                            api_version = '0', 
                            fields_type = '0', 
                            fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                            manager = '0', 
                            operation = '0', 
                            subresource = '0', 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    name = '0', 
                    namespace = '0', 
                    owner_references = [
                        kubernetes.client.models.v1/owner_reference.v1.OwnerReference(
                            api_version = '0', 
                            block_owner_deletion = True, 
                            controller = True, 
                            kind = '0', 
                            name = '0', 
                            uid = '0', )
                        ], 
                    resource_version = '0', 
                    self_link = '0', 
                    uid = '0', ), 
                spec = kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec.io_argoproj_v1alpha1_AppProject_spec(
                    cluster_resource_blacklist = [
                        kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec_cluster_resource_blacklist.io_argoproj_v1alpha1_AppProject_spec_clusterResourceBlacklist(
                            group = '0', 
                            kind = '0', )
                        ], 
                    cluster_resource_whitelist = [
                        kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec_cluster_resource_blacklist.io_argoproj_v1alpha1_AppProject_spec_clusterResourceBlacklist(
                            group = '0', 
                            kind = '0', )
                        ], 
                    description = '0', 
                    destinations = [
                        kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec_destinations.io_argoproj_v1alpha1_AppProject_spec_destinations(
                            name = '0', 
                            namespace = '0', 
                            server = '0', )
                        ], 
                    namespace_resource_blacklist = [
                        kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec_cluster_resource_blacklist.io_argoproj_v1alpha1_AppProject_spec_clusterResourceBlacklist(
                            group = '0', 
                            kind = '0', )
                        ], 
                    namespace_resource_whitelist = [
                        kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec_cluster_resource_blacklist.io_argoproj_v1alpha1_AppProject_spec_clusterResourceBlacklist(
                            group = '0', 
                            kind = '0', )
                        ], 
                    orphaned_resources = kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec_orphaned_resources.io_argoproj_v1alpha1_AppProject_spec_orphanedResources(
                        ignore = [
                            kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec_orphaned_resources_ignore.io_argoproj_v1alpha1_AppProject_spec_orphanedResources_ignore(
                                group = '0', 
                                kind = '0', 
                                name = '0', )
                            ], 
                        warn = True, ), 
                    permit_only_project_scoped_clusters = True, 
                    roles = [
                        kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec_roles.io_argoproj_v1alpha1_AppProject_spec_roles(
                            description = '0', 
                            groups = [
                                '0'
                                ], 
                            jwt_tokens = [
                                kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec_jwt_tokens.io_argoproj_v1alpha1_AppProject_spec_jwtTokens(
                                    exp = 56, 
                                    iat = 56, 
                                    id = '0', )
                                ], 
                            name = '0', 
                            policies = [
                                '0'
                                ], )
                        ], 
                    signature_keys = [
                        kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec_signature_keys.io_argoproj_v1alpha1_AppProject_spec_signatureKeys(
                            key_id = '0', )
                        ], 
                    source_namespaces = [
                        '0'
                        ], 
                    source_repos = [
                        '0'
                        ], 
                    sync_windows = [
                        kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec_sync_windows.io_argoproj_v1alpha1_AppProject_spec_syncWindows(
                            applications = [
                                '0'
                                ], 
                            clusters = [
                                '0'
                                ], 
                            duration = '0', 
                            kind = '0', 
                            manual_sync = True, 
                            namespaces = [
                                '0'
                                ], 
                            schedule = '0', 
                            time_zone = '0', )
                        ], ), 
                status = kubernetes.client.models.io_argoproj_v1alpha1_app_project_status.io_argoproj_v1alpha1_AppProject_status(
                    jwt_tokens_by_role = {
                        'key' : kubernetes.client.models.io_argoproj_v1alpha1_app_project_status_jwt_tokens_by_role.io_argoproj_v1alpha1_AppProject_status_jwtTokensByRole(
                            items = [
                                kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec_jwt_tokens.io_argoproj_v1alpha1_AppProject_spec_jwtTokens(
                                    exp = 56, 
                                    iat = 56, 
                                    id = '0', )
                                ], )
                        }, )
            )
        else :
            return IoArgoprojV1alpha1AppProject(
                metadata = kubernetes.client.models.v1/object_meta.v1.ObjectMeta(
                    annotations = {
                        'key' : '0'
                        }, 
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_grace_period_seconds = 56, 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    finalizers = [
                        '0'
                        ], 
                    generate_name = '0', 
                    generation = 56, 
                    labels = {
                        'key' : '0'
                        }, 
                    managed_fields = [
                        kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                            api_version = '0', 
                            fields_type = '0', 
                            fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                            manager = '0', 
                            operation = '0', 
                            subresource = '0', 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    name = '0', 
                    namespace = '0', 
                    owner_references = [
                        kubernetes.client.models.v1/owner_reference.v1.OwnerReference(
                            api_version = '0', 
                            block_owner_deletion = True, 
                            controller = True, 
                            kind = '0', 
                            name = '0', 
                            uid = '0', )
                        ], 
                    resource_version = '0', 
                    self_link = '0', 
                    uid = '0', ),
                spec = kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec.io_argoproj_v1alpha1_AppProject_spec(
                    cluster_resource_blacklist = [
                        kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec_cluster_resource_blacklist.io_argoproj_v1alpha1_AppProject_spec_clusterResourceBlacklist(
                            group = '0', 
                            kind = '0', )
                        ], 
                    cluster_resource_whitelist = [
                        kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec_cluster_resource_blacklist.io_argoproj_v1alpha1_AppProject_spec_clusterResourceBlacklist(
                            group = '0', 
                            kind = '0', )
                        ], 
                    description = '0', 
                    destinations = [
                        kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec_destinations.io_argoproj_v1alpha1_AppProject_spec_destinations(
                            name = '0', 
                            namespace = '0', 
                            server = '0', )
                        ], 
                    namespace_resource_blacklist = [
                        kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec_cluster_resource_blacklist.io_argoproj_v1alpha1_AppProject_spec_clusterResourceBlacklist(
                            group = '0', 
                            kind = '0', )
                        ], 
                    namespace_resource_whitelist = [
                        kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec_cluster_resource_blacklist.io_argoproj_v1alpha1_AppProject_spec_clusterResourceBlacklist(
                            group = '0', 
                            kind = '0', )
                        ], 
                    orphaned_resources = kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec_orphaned_resources.io_argoproj_v1alpha1_AppProject_spec_orphanedResources(
                        ignore = [
                            kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec_orphaned_resources_ignore.io_argoproj_v1alpha1_AppProject_spec_orphanedResources_ignore(
                                group = '0', 
                                kind = '0', 
                                name = '0', )
                            ], 
                        warn = True, ), 
                    permit_only_project_scoped_clusters = True, 
                    roles = [
                        kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec_roles.io_argoproj_v1alpha1_AppProject_spec_roles(
                            description = '0', 
                            groups = [
                                '0'
                                ], 
                            jwt_tokens = [
                                kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec_jwt_tokens.io_argoproj_v1alpha1_AppProject_spec_jwtTokens(
                                    exp = 56, 
                                    iat = 56, 
                                    id = '0', )
                                ], 
                            name = '0', 
                            policies = [
                                '0'
                                ], )
                        ], 
                    signature_keys = [
                        kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec_signature_keys.io_argoproj_v1alpha1_AppProject_spec_signatureKeys(
                            key_id = '0', )
                        ], 
                    source_namespaces = [
                        '0'
                        ], 
                    source_repos = [
                        '0'
                        ], 
                    sync_windows = [
                        kubernetes.client.models.io_argoproj_v1alpha1_app_project_spec_sync_windows.io_argoproj_v1alpha1_AppProject_spec_syncWindows(
                            applications = [
                                '0'
                                ], 
                            clusters = [
                                '0'
                                ], 
                            duration = '0', 
                            kind = '0', 
                            manual_sync = True, 
                            namespaces = [
                                '0'
                                ], 
                            schedule = '0', 
                            time_zone = '0', )
                        ], ),
        )

    def testIoArgoprojV1alpha1AppProject(self):
        """Test IoArgoprojV1alpha1AppProject"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
