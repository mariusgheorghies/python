# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_subnet_list import AwsK8sServicesEc2V1alpha1SubnetList  # noqa: E501
from kubernetes.client.rest import ApiException

class TestAwsK8sServicesEc2V1alpha1SubnetList(unittest.TestCase):
    """AwsK8sServicesEc2V1alpha1SubnetList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test AwsK8sServicesEc2V1alpha1SubnetList
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_subnet_list.AwsK8sServicesEc2V1alpha1SubnetList()  # noqa: E501
        if include_optional :
            return AwsK8sServicesEc2V1alpha1SubnetList(
                api_version = '0', 
                items = [
                    kubernetes.client.models.aws/k8s/services/ec2/v1alpha1/subnet.aws.k8s.services.ec2.v1alpha1.Subnet(
                        api_version = '0', 
                        kind = '0', 
                        metadata = kubernetes.client.models.v1/object_meta.v1.ObjectMeta(
                            annotations = {
                                'key' : '0'
                                }, 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                '0'
                                ], 
                            generate_name = '0', 
                            generation = 56, 
                            labels = {
                                'key' : '0'
                                }, 
                            managed_fields = [
                                kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                                    api_version = '0', 
                                    fields_type = '0', 
                                    fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                                    manager = '0', 
                                    operation = '0', 
                                    subresource = '0', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '0', 
                            namespace = '0', 
                            owner_references = [
                                kubernetes.client.models.v1/owner_reference.v1.OwnerReference(
                                    api_version = '0', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '0', 
                                    name = '0', 
                                    uid = '0', )
                                ], 
                            resource_version = '0', 
                            self_link = '0', 
                            uid = '0', ), 
                        spec = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_subnet_spec.aws_k8s_services_ec2_v1alpha1_Subnet_spec(
                            assign_i_pv6_address_on_creation = True, 
                            availability_zone = '0', 
                            availability_zone_id = '0', 
                            cidr_block = '0', 
                            customer_owned_i_pv4_pool = '0', 
                            enable_dns64 = True, 
                            enable_resource_name_dnsaaaa_record = True, 
                            enable_resource_name_dnsa_record = True, 
                            hostname_type = '0', 
                            ipv6_cidr_block = '0', 
                            ipv6_native = True, 
                            map_public_ip_on_launch = True, 
                            outpost_arn = '0', 
                            route_table_refs = [
                                kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_dhcp_options_spec_vpc_refs.aws_k8s_services_ec2_v1alpha1_DHCPOptions_spec_vpcRefs(
                                    from = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_dhcp_options_spec_from.aws_k8s_services_ec2_v1alpha1_DHCPOptions_spec_from(
                                        name = '0', ), )
                                ], 
                            route_tables = [
                                '0'
                                ], 
                            tags = [
                                kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_dhcp_options_spec_tags.aws_k8s_services_ec2_v1alpha1_DHCPOptions_spec_tags(
                                    key = '0', 
                                    value = '0', )
                                ], 
                            vpc_id = '0', 
                            vpc_ref = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_dhcp_options_spec_vpc_refs.aws_k8s_services_ec2_v1alpha1_DHCPOptions_spec_vpcRefs(), ), 
                        status = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_subnet_status.aws_k8s_services_ec2_v1alpha1_Subnet_status(
                            ack_resource_metadata = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_dhcp_options_status_ack_resource_metadata.aws_k8s_services_ec2_v1alpha1_DHCPOptions_status_ackResourceMetadata(
                                arn = '0', 
                                owner_account_id = '0', 
                                region = '0', ), 
                            available_ip_address_count = 56, 
                            conditions = [
                                kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_dhcp_options_status_conditions.aws_k8s_services_ec2_v1alpha1_DHCPOptions_status_conditions(
                                    last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    message = '0', 
                                    reason = '0', 
                                    status = '0', 
                                    type = '0', )
                                ], 
                            default_for_az = True, 
                            enable_lni_at_device_index = 56, 
                            ipv6_cidr_block_association_set = [
                                kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_subnet_status_ipv6_cidr_block_association_set.aws_k8s_services_ec2_v1alpha1_Subnet_status_ipv6CIDRBlockAssociationSet(
                                    association_id = '0', 
                                    ipv6_cidr_block = '0', 
                                    ipv6_cidr_block_state = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_subnet_status_ipv6_cidr_block_state.aws_k8s_services_ec2_v1alpha1_Subnet_status_ipv6CIDRBlockState(
                                        state = '0', 
                                        status_message = '0', ), )
                                ], 
                            map_customer_owned_ip_on_launch = True, 
                            owner_id = '0', 
                            private_dns_name_options_on_launch = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_subnet_status_private_dns_name_options_on_launch.aws_k8s_services_ec2_v1alpha1_Subnet_status_privateDNSNameOptionsOnLaunch(
                                enable_resource_name_dnsaaaa_record = True, 
                                enable_resource_name_dnsa_record = True, 
                                hostname_type = '0', ), 
                            state = '0', 
                            subnet_id = '0', ), )
                    ], 
                kind = '0', 
                metadata = kubernetes.client.models.v1/list_meta.v1.ListMeta(
                    continue = '0', 
                    remaining_item_count = 56, 
                    resource_version = '0', 
                    self_link = '0', )
            )
        else :
            return AwsK8sServicesEc2V1alpha1SubnetList(
                items = [
                    kubernetes.client.models.aws/k8s/services/ec2/v1alpha1/subnet.aws.k8s.services.ec2.v1alpha1.Subnet(
                        api_version = '0', 
                        kind = '0', 
                        metadata = kubernetes.client.models.v1/object_meta.v1.ObjectMeta(
                            annotations = {
                                'key' : '0'
                                }, 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                '0'
                                ], 
                            generate_name = '0', 
                            generation = 56, 
                            labels = {
                                'key' : '0'
                                }, 
                            managed_fields = [
                                kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                                    api_version = '0', 
                                    fields_type = '0', 
                                    fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                                    manager = '0', 
                                    operation = '0', 
                                    subresource = '0', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '0', 
                            namespace = '0', 
                            owner_references = [
                                kubernetes.client.models.v1/owner_reference.v1.OwnerReference(
                                    api_version = '0', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '0', 
                                    name = '0', 
                                    uid = '0', )
                                ], 
                            resource_version = '0', 
                            self_link = '0', 
                            uid = '0', ), 
                        spec = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_subnet_spec.aws_k8s_services_ec2_v1alpha1_Subnet_spec(
                            assign_i_pv6_address_on_creation = True, 
                            availability_zone = '0', 
                            availability_zone_id = '0', 
                            cidr_block = '0', 
                            customer_owned_i_pv4_pool = '0', 
                            enable_dns64 = True, 
                            enable_resource_name_dnsaaaa_record = True, 
                            enable_resource_name_dnsa_record = True, 
                            hostname_type = '0', 
                            ipv6_cidr_block = '0', 
                            ipv6_native = True, 
                            map_public_ip_on_launch = True, 
                            outpost_arn = '0', 
                            route_table_refs = [
                                kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_dhcp_options_spec_vpc_refs.aws_k8s_services_ec2_v1alpha1_DHCPOptions_spec_vpcRefs(
                                    from = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_dhcp_options_spec_from.aws_k8s_services_ec2_v1alpha1_DHCPOptions_spec_from(
                                        name = '0', ), )
                                ], 
                            route_tables = [
                                '0'
                                ], 
                            tags = [
                                kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_dhcp_options_spec_tags.aws_k8s_services_ec2_v1alpha1_DHCPOptions_spec_tags(
                                    key = '0', 
                                    value = '0', )
                                ], 
                            vpc_id = '0', 
                            vpc_ref = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_dhcp_options_spec_vpc_refs.aws_k8s_services_ec2_v1alpha1_DHCPOptions_spec_vpcRefs(), ), 
                        status = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_subnet_status.aws_k8s_services_ec2_v1alpha1_Subnet_status(
                            ack_resource_metadata = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_dhcp_options_status_ack_resource_metadata.aws_k8s_services_ec2_v1alpha1_DHCPOptions_status_ackResourceMetadata(
                                arn = '0', 
                                owner_account_id = '0', 
                                region = '0', ), 
                            available_ip_address_count = 56, 
                            conditions = [
                                kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_dhcp_options_status_conditions.aws_k8s_services_ec2_v1alpha1_DHCPOptions_status_conditions(
                                    last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    message = '0', 
                                    reason = '0', 
                                    status = '0', 
                                    type = '0', )
                                ], 
                            default_for_az = True, 
                            enable_lni_at_device_index = 56, 
                            ipv6_cidr_block_association_set = [
                                kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_subnet_status_ipv6_cidr_block_association_set.aws_k8s_services_ec2_v1alpha1_Subnet_status_ipv6CIDRBlockAssociationSet(
                                    association_id = '0', 
                                    ipv6_cidr_block = '0', 
                                    ipv6_cidr_block_state = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_subnet_status_ipv6_cidr_block_state.aws_k8s_services_ec2_v1alpha1_Subnet_status_ipv6CIDRBlockState(
                                        state = '0', 
                                        status_message = '0', ), )
                                ], 
                            map_customer_owned_ip_on_launch = True, 
                            owner_id = '0', 
                            private_dns_name_options_on_launch = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_subnet_status_private_dns_name_options_on_launch.aws_k8s_services_ec2_v1alpha1_Subnet_status_privateDNSNameOptionsOnLaunch(
                                enable_resource_name_dnsaaaa_record = True, 
                                enable_resource_name_dnsa_record = True, 
                                hostname_type = '0', ), 
                            state = '0', 
                            subnet_id = '0', ), )
                    ],
        )

    def testAwsK8sServicesEc2V1alpha1SubnetList(self):
        """Test AwsK8sServicesEc2V1alpha1SubnetList"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
