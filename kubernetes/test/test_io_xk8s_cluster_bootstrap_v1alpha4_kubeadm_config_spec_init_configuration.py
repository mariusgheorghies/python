# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.io_xk8s_cluster_bootstrap_v1alpha4_kubeadm_config_spec_init_configuration import IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfiguration  # noqa: E501
from kubernetes.client.rest import ApiException

class TestIoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfiguration(unittest.TestCase):
    """IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfiguration unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfiguration
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.io_xk8s_cluster_bootstrap_v1alpha4_kubeadm_config_spec_init_configuration.IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfiguration()  # noqa: E501
        if include_optional :
            return IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfiguration(
                api_version = '0', 
                bootstrap_tokens = [
                    kubernetes.client.models.io_x_k8s_cluster_bootstrap_v1alpha3_kubeadm_config_spec_init_configuration_bootstrap_tokens.io_x_k8s_cluster_bootstrap_v1alpha3_KubeadmConfig_spec_initConfiguration_bootstrapTokens(
                        description = '0', 
                        expires = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        groups = [
                            '0'
                            ], 
                        token = '0', 
                        ttl = '0', 
                        usages = [
                            '0'
                            ], )
                    ], 
                kind = '0', 
                local_api_endpoint = kubernetes.client.models.io_x_k8s_cluster_bootstrap_v1alpha4_kubeadm_config_spec_init_configuration_local_api_endpoint.io_x_k8s_cluster_bootstrap_v1alpha4_KubeadmConfig_spec_initConfiguration_localAPIEndpoint(
                    advertise_address = '0', 
                    bind_port = 56, ), 
                node_registration = kubernetes.client.models.io_x_k8s_cluster_bootstrap_v1alpha4_kubeadm_config_spec_init_configuration_node_registration.io_x_k8s_cluster_bootstrap_v1alpha4_KubeadmConfig_spec_initConfiguration_nodeRegistration(
                    cri_socket = '0', 
                    ignore_preflight_errors = [
                        '0'
                        ], 
                    kubelet_extra_args = {
                        'key' : '0'
                        }, 
                    name = '0', 
                    taints = [
                        kubernetes.client.models.io_x_k8s_cluster_bootstrap_v1alpha3_kubeadm_config_spec_init_configuration_node_registration_taints.io_x_k8s_cluster_bootstrap_v1alpha3_KubeadmConfig_spec_initConfiguration_nodeRegistration_taints(
                            effect = '0', 
                            key = '0', 
                            time_added = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            value = '0', )
                        ], )
            )
        else :
            return IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfiguration(
        )

    def testIoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfiguration(self):
        """Test IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfiguration"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
