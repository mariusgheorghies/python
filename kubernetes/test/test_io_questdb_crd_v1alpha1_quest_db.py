# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.io_questdb_crd_v1alpha1_quest_db import IoQuestdbCrdV1alpha1QuestDB  # noqa: E501
from kubernetes.client.rest import ApiException

class TestIoQuestdbCrdV1alpha1QuestDB(unittest.TestCase):
    """IoQuestdbCrdV1alpha1QuestDB unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test IoQuestdbCrdV1alpha1QuestDB
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.io_questdb_crd_v1alpha1_quest_db.IoQuestdbCrdV1alpha1QuestDB()  # noqa: E501
        if include_optional :
            return IoQuestdbCrdV1alpha1QuestDB(
                api_version = '0', 
                kind = '0', 
                metadata = kubernetes.client.models.v1/object_meta.v1.ObjectMeta(
                    annotations = {
                        'key' : '0'
                        }, 
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_grace_period_seconds = 56, 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    finalizers = [
                        '0'
                        ], 
                    generate_name = '0', 
                    generation = 56, 
                    labels = {
                        'key' : '0'
                        }, 
                    managed_fields = [
                        kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                            api_version = '0', 
                            fields_type = '0', 
                            fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                            manager = '0', 
                            operation = '0', 
                            subresource = '0', 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    name = '0', 
                    namespace = '0', 
                    owner_references = [
                        kubernetes.client.models.v1/owner_reference.v1.OwnerReference(
                            api_version = '0', 
                            block_owner_deletion = True, 
                            controller = True, 
                            kind = '0', 
                            name = '0', 
                            uid = '0', )
                        ], 
                    resource_version = '0', 
                    self_link = '0', 
                    uid = '0', ), 
                spec = kubernetes.client.models.io_questdb_crd_v1alpha1_quest_db_spec.io_questdb_crd_v1alpha1_QuestDB_spec(
                    allowed_cidr = [
                        '0'
                        ], 
                    aws = kubernetes.client.models.io_questdb_crd_v1alpha1_quest_db_spec_aws.io_questdb_crd_v1alpha1_QuestDB_spec_aws(
                        iam_instance_profile_arn = '0', 
                        image_id = '0', 
                        instance_type = '0', 
                        key_name = '0', 
                        region = '0', 
                        region_az = '0', 
                        security_group_ids = [
                            '0'
                            ], 
                        subnet_id = '0', ), 
                    config = '0', 
                    container = kubernetes.client.models.io_questdb_crd_v1alpha1_quest_db_spec_container.io_questdb_crd_v1alpha1_QuestDB_spec_container(
                        name = '0', 
                        registry = '0', 
                        tag = '0', ), 
                    ilp_auth = kubernetes.client.models.io_questdb_crd_v1alpha1_quest_db_spec_ilp_auth.io_questdb_crd_v1alpha1_QuestDB_spec_ilpAuth(
                        kid = '0', 
                        x = '0', 
                        y = '0', ), 
                    maintenance_mode = True, 
                    stateful_set = kubernetes.client.models.io_questdb_crd_v1alpha1_quest_db_spec_stateful_set.io_questdb_crd_v1alpha1_QuestDB_spec_statefulSet(
                        extra_volume_mounts = [
                            kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_volume_mounts.com_coreos_monitoring_v1_Alertmanager_spec_volumeMounts(
                                mount_path = '0', 
                                mount_propagation = '0', 
                                name = '0', 
                                read_only = True, 
                                sub_path = '0', 
                                sub_path_expr = '0', )
                            ], 
                        extra_volumes = [
                            kubernetes.client.models.io_questdb_crd_v1alpha1_quest_db_spec_stateful_set_extra_volumes.io_questdb_crd_v1alpha1_QuestDB_spec_statefulSet_extraVolumes(
                                aws_elastic_block_store = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_aws_elastic_block_store.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_awsElasticBlockStore(
                                    fs_type = '0', 
                                    partition = 56, 
                                    read_only = True, 
                                    volume_id = '0', ), 
                                azure_disk = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_azure_disk.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_azureDisk(
                                    caching_mode = '0', 
                                    disk_name = '0', 
                                    disk_uri = '0', 
                                    fs_type = '0', 
                                    kind = '0', 
                                    read_only = True, ), 
                                azure_file = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_azure_file.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_azureFile(
                                    read_only = True, 
                                    secret_name = '0', 
                                    share_name = '0', ), 
                                cephfs = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_cephfs.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_cephfs(
                                    monitors = [
                                        '0'
                                        ], 
                                    path = '0', 
                                    read_only = True, 
                                    secret_file = '0', 
                                    secret_ref = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_cephfs_secret_ref.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_cephfs_secretRef(
                                        name = '0', ), 
                                    user = '0', ), 
                                cinder = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_cinder.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_cinder(
                                    fs_type = '0', 
                                    read_only = True, 
                                    volume_id = '0', ), 
                                config_map = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_config_map.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_configMap(
                                    default_mode = 56, 
                                    items = [
                                        kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_config_map_items.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_configMap_items(
                                            key = '0', 
                                            mode = 56, 
                                            path = '0', )
                                        ], 
                                    name = '0', 
                                    optional = True, ), 
                                csi = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_csi.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_csi(
                                    driver = '0', 
                                    fs_type = '0', 
                                    node_publish_secret_ref = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_csi_node_publish_secret_ref.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_csi_nodePublishSecretRef(
                                        name = '0', ), 
                                    read_only = True, 
                                    volume_attributes = {
                                        'key' : '0'
                                        }, ), 
                                downward_api = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_downward_api.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_downwardAPI(
                                    default_mode = 56, ), 
                                empty_dir = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_empty_dir.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_emptyDir(
                                    medium = '0', 
                                    size_limit = kubernetes.client.models.size_limit.sizeLimit(), ), 
                                ephemeral = kubernetes.client.models.io_questdb_crd_v1alpha1_quest_db_spec_stateful_set_ephemeral.io_questdb_crd_v1alpha1_QuestDB_spec_statefulSet_ephemeral(
                                    volume_claim_template = kubernetes.client.models.io_questdb_crd_v1alpha1_quest_db_spec_stateful_set_ephemeral_volume_claim_template.io_questdb_crd_v1alpha1_QuestDB_spec_statefulSet_ephemeral_volumeClaimTemplate(
                                        metadata = kubernetes.client.models.metadata.metadata(), 
                                        spec = kubernetes.client.models.io_questdb_crd_v1alpha1_quest_db_spec_stateful_set_ephemeral_volume_claim_template_spec.io_questdb_crd_v1alpha1_QuestDB_spec_statefulSet_ephemeral_volumeClaimTemplate_spec(
                                            access_modes = [
                                                '0'
                                                ], 
                                            data_source = kubernetes.client.models.io_questdb_crd_v1alpha1_quest_db_spec_stateful_set_ephemeral_volume_claim_template_spec_data_source.io_questdb_crd_v1alpha1_QuestDB_spec_statefulSet_ephemeral_volumeClaimTemplate_spec_dataSource(
                                                api_group = '0', 
                                                kind = '0', 
                                                name = '0', ), 
                                            data_source_ref = kubernetes.client.models.io_questdb_crd_v1alpha1_quest_db_spec_stateful_set_ephemeral_volume_claim_template_spec_data_source_ref.io_questdb_crd_v1alpha1_QuestDB_spec_statefulSet_ephemeral_volumeClaimTemplate_spec_dataSourceRef(
                                                api_group = '0', 
                                                kind = '0', 
                                                name = '0', ), 
                                            resources = kubernetes.client.models.io_questdb_crd_v1alpha1_quest_db_spec_stateful_set_ephemeral_volume_claim_template_spec_resources.io_questdb_crd_v1alpha1_QuestDB_spec_statefulSet_ephemeral_volumeClaimTemplate_spec_resources(
                                                limits = {
                                                    'key' : None
                                                    }, 
                                                requests = {
                                                    'key' : None
                                                    }, ), 
                                            selector = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_storage_ephemeral_volume_claim_template_spec_selector.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_storage_ephemeral_volumeClaimTemplate_spec_selector(
                                                match_expressions = [
                                                    kubernetes.client.models.aws_k8s_networking_v1alpha1_policy_endpoint_spec_pod_selector_match_expressions.aws_k8s_networking_v1alpha1_PolicyEndpoint_spec_podSelector_matchExpressions(
                                                        key = '0', 
                                                        operator = '0', 
                                                        values = [
                                                            '0'
                                                            ], )
                                                    ], 
                                                match_labels = {
                                                    'key' : '0'
                                                    }, ), 
                                            storage_class_name = '0', 
                                            volume_mode = '0', 
                                            volume_name = '0', ), ), ), 
                                fc = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_fc.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_fc(
                                    fs_type = '0', 
                                    lun = 56, 
                                    read_only = True, 
                                    target_ww_ns = [
                                        '0'
                                        ], 
                                    wwids = [
                                        '0'
                                        ], ), 
                                flex_volume = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_flex_volume.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_flexVolume(
                                    driver = '0', 
                                    fs_type = '0', 
                                    options = {
                                        'key' : '0'
                                        }, 
                                    read_only = True, ), 
                                flocker = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_flocker.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_flocker(
                                    dataset_name = '0', 
                                    dataset_uuid = '0', ), 
                                gce_persistent_disk = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_gce_persistent_disk.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_gcePersistentDisk(
                                    fs_type = '0', 
                                    partition = 56, 
                                    pd_name = '0', 
                                    read_only = True, ), 
                                git_repo = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_git_repo.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_gitRepo(
                                    directory = '0', 
                                    repository = '0', 
                                    revision = '0', ), 
                                glusterfs = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_glusterfs.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_glusterfs(
                                    endpoints = '0', 
                                    path = '0', 
                                    read_only = True, ), 
                                host_path = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_host_path.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_hostPath(
                                    path = '0', 
                                    type = '0', ), 
                                iscsi = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_iscsi.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_iscsi(
                                    chap_auth_discovery = True, 
                                    chap_auth_session = True, 
                                    fs_type = '0', 
                                    initiator_name = '0', 
                                    iqn = '0', 
                                    iscsi_interface = '0', 
                                    lun = 56, 
                                    portals = [
                                        '0'
                                        ], 
                                    read_only = True, 
                                    target_portal = '0', ), 
                                name = '0', 
                                nfs = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_nfs.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_nfs(
                                    path = '0', 
                                    read_only = True, 
                                    server = '0', ), 
                                persistent_volume_claim = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_persistent_volume_claim.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_persistentVolumeClaim(
                                    claim_name = '0', 
                                    read_only = True, ), 
                                photon_persistent_disk = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_photon_persistent_disk.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_photonPersistentDisk(
                                    fs_type = '0', 
                                    pd_id = '0', ), 
                                portworx_volume = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_portworx_volume.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_portworxVolume(
                                    fs_type = '0', 
                                    read_only = True, 
                                    volume_id = '0', ), 
                                projected = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_projected.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_projected(
                                    default_mode = 56, 
                                    sources = [
                                        kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_projected_sources.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_projected_sources(
                                            secret = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_projected_secret.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_projected_secret(
                                                name = '0', 
                                                optional = True, ), 
                                            service_account_token = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_projected_service_account_token.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_projected_serviceAccountToken(
                                                audience = '0', 
                                                expiration_seconds = 56, 
                                                path = '0', ), )
                                        ], ), 
                                quobyte = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_quobyte.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_quobyte(
                                    group = '0', 
                                    read_only = True, 
                                    registry = '0', 
                                    tenant = '0', 
                                    user = '0', 
                                    volume = '0', ), 
                                rbd = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_rbd.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_rbd(
                                    fs_type = '0', 
                                    image = '0', 
                                    keyring = '0', 
                                    monitors = [
                                        '0'
                                        ], 
                                    pool = '0', 
                                    read_only = True, 
                                    user = '0', ), 
                                scale_io = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_scale_io.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_scaleIO(
                                    fs_type = '0', 
                                    gateway = '0', 
                                    protection_domain = '0', 
                                    read_only = True, 
                                    secret_ref = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_scale_io_secret_ref.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_scaleIO_secretRef(
                                        name = '0', ), 
                                    ssl_enabled = True, 
                                    storage_mode = '0', 
                                    storage_pool = '0', 
                                    system = '0', 
                                    volume_name = '0', ), 
                                secret = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_secret.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_secret(
                                    default_mode = 56, 
                                    optional = True, 
                                    secret_name = '0', ), 
                                storageos = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_storageos.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_storageos(
                                    fs_type = '0', 
                                    read_only = True, 
                                    volume_name = '0', 
                                    volume_namespace = '0', ), 
                                vsphere_volume = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_vsphere_volume.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_vsphereVolume(
                                    fs_type = '0', 
                                    storage_policy_id = '0', 
                                    storage_policy_name = '0', 
                                    volume_path = '0', ), )
                            ], ), 
                    stopped = True, 
                    subdomain = '0', 
                    volume = kubernetes.client.models.io_questdb_crd_v1alpha1_quest_db_spec_volume.io_questdb_crd_v1alpha1_QuestDB_spec_volume(
                        encrypted = True, 
                        filesystem = '0', 
                        iops = 56, 
                        size = kubernetes.client.models.size.size(), 
                        snapshot = kubernetes.client.models.io_questdb_crd_v1alpha1_quest_db_spec_volume_snapshot.io_questdb_crd_v1alpha1_QuestDB_spec_volume_snapshot(), 
                        throughput = 56, 
                        type = '0', ), ), 
                status = kubernetes.client.models.io_questdb_crd_v1alpha1_quest_db_status.io_questdb_crd_v1alpha1_QuestDB_status(
                    aws = kubernetes.client.models.io_questdb_crd_v1alpha1_quest_db_status_aws.io_questdb_crd_v1alpha1_QuestDB_status_aws(
                        hz_id = '0', 
                        hz_name = '0', 
                        sg_id = '0', 
                        sg_ready = True, ), 
                    conditions = [
                        kubernetes.client.models.io_questdb_crd_v1alpha1_quest_db_status_conditions.io_questdb_crd_v1alpha1_QuestDB_status_conditions(
                            last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            message = '0', 
                            observed_generation = 0, 
                            reason = 'a', 
                            status = 'True', 
                            type = 'a', )
                        ], 
                    dns_ready = True, 
                    ilp_node_port = 56, 
                    next_volume_modification_attempt = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    node_ip = '0', 
                    node_name = '0', 
                    node_ready = True, 
                    psql_node_port = 56, )
            )
        else :
            return IoQuestdbCrdV1alpha1QuestDB(
        )

    def testIoQuestdbCrdV1alpha1QuestDB(self):
        """Test IoQuestdbCrdV1alpha1QuestDB"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
