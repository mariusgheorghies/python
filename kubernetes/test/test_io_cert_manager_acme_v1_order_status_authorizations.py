# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.io_cert_manager_acme_v1_order_status_authorizations import IoCertManagerAcmeV1OrderStatusAuthorizations  # noqa: E501
from kubernetes.client.rest import ApiException

class TestIoCertManagerAcmeV1OrderStatusAuthorizations(unittest.TestCase):
    """IoCertManagerAcmeV1OrderStatusAuthorizations unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test IoCertManagerAcmeV1OrderStatusAuthorizations
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.io_cert_manager_acme_v1_order_status_authorizations.IoCertManagerAcmeV1OrderStatusAuthorizations()  # noqa: E501
        if include_optional :
            return IoCertManagerAcmeV1OrderStatusAuthorizations(
                challenges = [
                    kubernetes.client.models.io_cert_manager_acme_v1_order_status_challenges.io_cert_manager_acme_v1_Order_status_challenges(
                        token = '0', 
                        type = '0', 
                        url = '0', )
                    ], 
                identifier = '0', 
                initial_state = 'valid', 
                url = '0', 
                wildcard = True
            )
        else :
            return IoCertManagerAcmeV1OrderStatusAuthorizations(
                url = '0',
        )

    def testIoCertManagerAcmeV1OrderStatusAuthorizations(self):
        """Test IoCertManagerAcmeV1OrderStatusAuthorizations"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
