# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.com_grafana_monitoring_v1alpha1_pod_logs import ComGrafanaMonitoringV1alpha1PodLogs  # noqa: E501
from kubernetes.client.rest import ApiException

class TestComGrafanaMonitoringV1alpha1PodLogs(unittest.TestCase):
    """ComGrafanaMonitoringV1alpha1PodLogs unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ComGrafanaMonitoringV1alpha1PodLogs
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.com_grafana_monitoring_v1alpha1_pod_logs.ComGrafanaMonitoringV1alpha1PodLogs()  # noqa: E501
        if include_optional :
            return ComGrafanaMonitoringV1alpha1PodLogs(
                api_version = '0', 
                kind = '0', 
                metadata = kubernetes.client.models.v1/object_meta.v1.ObjectMeta(
                    annotations = {
                        'key' : '0'
                        }, 
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_grace_period_seconds = 56, 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    finalizers = [
                        '0'
                        ], 
                    generate_name = '0', 
                    generation = 56, 
                    labels = {
                        'key' : '0'
                        }, 
                    managed_fields = [
                        kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                            api_version = '0', 
                            fields_type = '0', 
                            fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                            manager = '0', 
                            operation = '0', 
                            subresource = '0', 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    name = '0', 
                    namespace = '0', 
                    owner_references = [
                        kubernetes.client.models.v1/owner_reference.v1.OwnerReference(
                            api_version = '0', 
                            block_owner_deletion = True, 
                            controller = True, 
                            kind = '0', 
                            name = '0', 
                            uid = '0', )
                        ], 
                    resource_version = '0', 
                    self_link = '0', 
                    uid = '0', ), 
                spec = kubernetes.client.models.com_grafana_monitoring_v1alpha1_pod_logs_spec.com_grafana_monitoring_v1alpha1_PodLogs_spec(
                    job_label = '0', 
                    namespace_selector = kubernetes.client.models.com_grafana_monitoring_v1alpha1_pod_logs_spec_namespace_selector.com_grafana_monitoring_v1alpha1_PodLogs_spec_namespaceSelector(
                        any = True, 
                        match_names = [
                            '0'
                            ], ), 
                    pipeline_stages = [
                        kubernetes.client.models.com_grafana_monitoring_v1alpha1_pod_logs_spec_pipeline_stages.com_grafana_monitoring_v1alpha1_PodLogs_spec_pipelineStages(
                            cri = kubernetes.client.models.cri.cri(), 
                            docker = kubernetes.client.models.docker.docker(), 
                            drop = kubernetes.client.models.com_grafana_monitoring_v1alpha1_pod_logs_spec_drop.com_grafana_monitoring_v1alpha1_PodLogs_spec_drop(
                                drop_counter_reason = '0', 
                                expression = '0', 
                                longer_than = '0', 
                                older_than = '0', 
                                source = '0', 
                                value = '0', ), 
                            json = kubernetes.client.models.com_grafana_monitoring_v1alpha1_pod_logs_spec_json.com_grafana_monitoring_v1alpha1_PodLogs_spec_json(
                                expressions = {
                                    'key' : '0'
                                    }, 
                                source = '0', ), 
                            label_allow = [
                                '0'
                                ], 
                            label_drop = [
                                '0'
                                ], 
                            labels = {
                                'key' : '0'
                                }, 
                            limit = kubernetes.client.models.com_grafana_monitoring_v1alpha1_pod_logs_spec_limit.com_grafana_monitoring_v1alpha1_PodLogs_spec_limit(
                                burst = 56, 
                                rate = 56, ), 
                            match = kubernetes.client.models.com_grafana_monitoring_v1alpha1_pod_logs_spec_match.com_grafana_monitoring_v1alpha1_PodLogs_spec_match(
                                action = '0', 
                                drop_counter_reason = '0', 
                                pipeline_name = '0', 
                                selector = '0', 
                                stages = '0', ), 
                            metrics = {
                                'key' : kubernetes.client.models.com_grafana_monitoring_v1alpha1_pod_logs_spec_metrics.com_grafana_monitoring_v1alpha1_PodLogs_spec_metrics(
                                    action = '0', 
                                    buckets = [
                                        '0'
                                        ], 
                                    count_entry_bytes = True, 
                                    description = '0', 
                                    match_all = True, 
                                    max_idle_duration = '0', 
                                    prefix = '0', 
                                    source = '0', 
                                    type = '0', 
                                    value = '0', )
                                }, 
                            multiline = kubernetes.client.models.com_grafana_monitoring_v1alpha1_pod_logs_spec_multiline.com_grafana_monitoring_v1alpha1_PodLogs_spec_multiline(
                                first_line = '0', 
                                max_lines = 56, 
                                max_wait_time = '0', ), 
                            output = kubernetes.client.models.com_grafana_monitoring_v1alpha1_pod_logs_spec_output.com_grafana_monitoring_v1alpha1_PodLogs_spec_output(
                                source = '0', ), 
                            pack = kubernetes.client.models.com_grafana_monitoring_v1alpha1_pod_logs_spec_pack.com_grafana_monitoring_v1alpha1_PodLogs_spec_pack(
                                ingest_timestamp = True, 
                                labels = [
                                    '0'
                                    ], ), 
                            regex = kubernetes.client.models.com_grafana_monitoring_v1alpha1_pod_logs_spec_regex.com_grafana_monitoring_v1alpha1_PodLogs_spec_regex(
                                expression = '0', 
                                source = '0', ), 
                            replace = kubernetes.client.models.com_grafana_monitoring_v1alpha1_pod_logs_spec_replace.com_grafana_monitoring_v1alpha1_PodLogs_spec_replace(
                                expression = '0', 
                                source = '0', ), 
                            template = kubernetes.client.models.com_grafana_monitoring_v1alpha1_pod_logs_spec_template.com_grafana_monitoring_v1alpha1_PodLogs_spec_template(
                                source = '0', 
                                template = '0', ), 
                            tenant = kubernetes.client.models.com_grafana_monitoring_v1alpha1_pod_logs_spec_tenant.com_grafana_monitoring_v1alpha1_PodLogs_spec_tenant(
                                label = '0', 
                                source = '0', 
                                value = '0', ), 
                            timestamp = kubernetes.client.models.com_grafana_monitoring_v1alpha1_pod_logs_spec_timestamp.com_grafana_monitoring_v1alpha1_PodLogs_spec_timestamp(
                                action_on_failure = '0', 
                                fallback_formats = [
                                    '0'
                                    ], 
                                format = '0', 
                                location = '0', 
                                source = '0', ), )
                        ], 
                    pod_target_labels = [
                        '0'
                        ], 
                    relabelings = [
                        kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_metric_relabelings.com_coreos_monitoring_v1_PodMonitor_spec_metricRelabelings(
                            action = 'replace', 
                            modulus = 56, 
                            replacement = '0', 
                            separator = '0', 
                            source_labels = [
                                'a'
                                ], 
                            target_label = '0', )
                        ], 
                    selector = kubernetes.client.models.com_grafana_monitoring_v1alpha1_pod_logs_spec_selector.com_grafana_monitoring_v1alpha1_PodLogs_spec_selector(
                        match_expressions = [
                            kubernetes.client.models.aws_k8s_networking_v1alpha1_policy_endpoint_spec_pod_selector_match_expressions.aws_k8s_networking_v1alpha1_PolicyEndpoint_spec_podSelector_matchExpressions(
                                key = '0', 
                                operator = '0', 
                                values = [
                                    '0'
                                    ], )
                            ], 
                        match_labels = {
                            'key' : '0'
                            }, ), )
            )
        else :
            return ComGrafanaMonitoringV1alpha1PodLogs(
        )

    def testComGrafanaMonitoringV1alpha1PodLogs(self):
        """Test ComGrafanaMonitoringV1alpha1PodLogs"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
