# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.io_xk8s_cluster_infrastructure_v1alpha4_aws_cluster_status_bastion import IoXK8sClusterInfrastructureV1alpha4AWSClusterStatusBastion  # noqa: E501
from kubernetes.client.rest import ApiException

class TestIoXK8sClusterInfrastructureV1alpha4AWSClusterStatusBastion(unittest.TestCase):
    """IoXK8sClusterInfrastructureV1alpha4AWSClusterStatusBastion unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test IoXK8sClusterInfrastructureV1alpha4AWSClusterStatusBastion
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.io_xk8s_cluster_infrastructure_v1alpha4_aws_cluster_status_bastion.IoXK8sClusterInfrastructureV1alpha4AWSClusterStatusBastion()  # noqa: E501
        if include_optional :
            return IoXK8sClusterInfrastructureV1alpha4AWSClusterStatusBastion(
                addresses = [
                    kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_status_bastion_addresses.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_status_bastion_addresses(
                        address = '0', 
                        type = '0', )
                    ], 
                availability_zone = '0', 
                ebs_optimized = True, 
                ena_support = True, 
                iam_profile = '0', 
                id = '0', 
                image_id = '0', 
                instance_state = '0', 
                network_interfaces = [
                    '0'
                    ], 
                non_root_volumes = [
                    kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha4_aws_managed_control_plane_status_bastion_non_root_volumes.io_x_k8s_cluster_controlplane_v1alpha4_AWSManagedControlPlane_status_bastion_nonRootVolumes(
                        device_name = '0', 
                        encrypted = True, 
                        encryption_key = '0', 
                        iops = 56, 
                        size = 8, 
                        throughput = 56, 
                        type = '0', )
                    ], 
                private_ip = '0', 
                public_ip = '0', 
                root_volume = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha4_aws_managed_control_plane_status_bastion_root_volume.io_x_k8s_cluster_controlplane_v1alpha4_AWSManagedControlPlane_status_bastion_rootVolume(
                    device_name = '0', 
                    encrypted = True, 
                    encryption_key = '0', 
                    iops = 56, 
                    size = 8, 
                    throughput = 56, 
                    type = '0', ), 
                security_group_ids = [
                    '0'
                    ], 
                spot_market_options = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_status_bastion_spot_market_options.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_status_bastion_spotMarketOptions(
                    max_price = '0', ), 
                ssh_key_name = '0', 
                subnet_id = '0', 
                tags = {
                    'key' : '0'
                    }, 
                tenancy = '0', 
                type = '0', 
                user_data = '0', 
                volume_i_ds = [
                    '0'
                    ]
            )
        else :
            return IoXK8sClusterInfrastructureV1alpha4AWSClusterStatusBastion(
                id = '0',
        )

    def testIoXK8sClusterInfrastructureV1alpha4AWSClusterStatusBastion(self):
        """Test IoXK8sClusterInfrastructureV1alpha4AWSClusterStatusBastion"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
