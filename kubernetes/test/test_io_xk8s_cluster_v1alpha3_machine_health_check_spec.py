# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.io_xk8s_cluster_v1alpha3_machine_health_check_spec import IoXK8sClusterV1alpha3MachineHealthCheckSpec  # noqa: E501
from kubernetes.client.rest import ApiException

class TestIoXK8sClusterV1alpha3MachineHealthCheckSpec(unittest.TestCase):
    """IoXK8sClusterV1alpha3MachineHealthCheckSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test IoXK8sClusterV1alpha3MachineHealthCheckSpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.io_xk8s_cluster_v1alpha3_machine_health_check_spec.IoXK8sClusterV1alpha3MachineHealthCheckSpec()  # noqa: E501
        if include_optional :
            return IoXK8sClusterV1alpha3MachineHealthCheckSpec(
                cluster_name = '0', 
                max_unhealthy = kubernetes.client.models.max_unhealthy.maxUnhealthy(), 
                node_startup_timeout = '0', 
                remediation_template = kubernetes.client.models.io_x_k8s_cluster_v1alpha3_machine_health_check_spec_remediation_template.io_x_k8s_cluster_v1alpha3_MachineHealthCheck_spec_remediationTemplate(
                    api_version = '0', 
                    field_path = '0', 
                    kind = '0', 
                    name = '0', 
                    namespace = '0', 
                    resource_version = '0', 
                    uid = '0', ), 
                selector = kubernetes.client.models.io_x_k8s_cluster_v1alpha3_machine_health_check_spec_selector.io_x_k8s_cluster_v1alpha3_MachineHealthCheck_spec_selector(
                    match_expressions = [
                        kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_affinity_pod_affinity_pod_affinity_term_label_selector_match_expressions.com_coreos_monitoring_v1_Alertmanager_spec_affinity_podAffinity_podAffinityTerm_labelSelector_matchExpressions(
                            key = '0', 
                            operator = '0', 
                            values = [
                                '0'
                                ], )
                        ], 
                    match_labels = {
                        'key' : '0'
                        }, ), 
                unhealthy_conditions = [
                    kubernetes.client.models.io_x_k8s_cluster_v1alpha3_machine_health_check_spec_unhealthy_conditions.io_x_k8s_cluster_v1alpha3_MachineHealthCheck_spec_unhealthyConditions(
                        status = '0', 
                        timeout = '0', 
                        type = '0', )
                    ]
            )
        else :
            return IoXK8sClusterV1alpha3MachineHealthCheckSpec(
                cluster_name = '0',
                selector = kubernetes.client.models.io_x_k8s_cluster_v1alpha3_machine_health_check_spec_selector.io_x_k8s_cluster_v1alpha3_MachineHealthCheck_spec_selector(
                    match_expressions = [
                        kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_affinity_pod_affinity_pod_affinity_term_label_selector_match_expressions.com_coreos_monitoring_v1_Alertmanager_spec_affinity_podAffinity_podAffinityTerm_labelSelector_matchExpressions(
                            key = '0', 
                            operator = '0', 
                            values = [
                                '0'
                                ], )
                        ], 
                    match_labels = {
                        'key' : '0'
                        }, ),
                unhealthy_conditions = [
                    kubernetes.client.models.io_x_k8s_cluster_v1alpha3_machine_health_check_spec_unhealthy_conditions.io_x_k8s_cluster_v1alpha3_MachineHealthCheck_spec_unhealthyConditions(
                        status = '0', 
                        timeout = '0', 
                        type = '0', )
                    ],
        )

    def testIoXK8sClusterV1alpha3MachineHealthCheckSpec(self):
        """Test IoXK8sClusterV1alpha3MachineHealthCheckSpec"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
