# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.io_xk8s_cluster_v1alpha3_cluster_list import IoXK8sClusterV1alpha3ClusterList  # noqa: E501
from kubernetes.client.rest import ApiException

class TestIoXK8sClusterV1alpha3ClusterList(unittest.TestCase):
    """IoXK8sClusterV1alpha3ClusterList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test IoXK8sClusterV1alpha3ClusterList
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.io_xk8s_cluster_v1alpha3_cluster_list.IoXK8sClusterV1alpha3ClusterList()  # noqa: E501
        if include_optional :
            return IoXK8sClusterV1alpha3ClusterList(
                api_version = '0', 
                items = [
                    kubernetes.client.models.io/x_k8s/cluster/v1alpha3/cluster.io.x-k8s.cluster.v1alpha3.Cluster(
                        api_version = '0', 
                        kind = '0', 
                        metadata = kubernetes.client.models.v1/object_meta_v2.v1.ObjectMeta_v2(
                            annotations = {
                                'key' : '0'
                                }, 
                            cluster_name = '0', 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                '0'
                                ], 
                            generate_name = '0', 
                            generation = 56, 
                            labels = {
                                'key' : '0'
                                }, 
                            managed_fields = [
                                kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                                    api_version = '0', 
                                    fields_type = '0', 
                                    fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                                    manager = '0', 
                                    operation = '0', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '0', 
                            namespace = '0', 
                            owner_references = [
                                kubernetes.client.models.v1/owner_reference_v2.v1.OwnerReference_v2(
                                    api_version = '0', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '0', 
                                    name = '0', 
                                    uid = '0', )
                                ], 
                            resource_version = '0', 
                            self_link = '0', 
                            uid = '0', ), 
                        spec = kubernetes.client.models.io_x_k8s_cluster_v1alpha3_cluster_spec.io_x_k8s_cluster_v1alpha3_Cluster_spec(
                            cluster_network = kubernetes.client.models.io_x_k8s_cluster_v1alpha3_cluster_spec_cluster_network.io_x_k8s_cluster_v1alpha3_Cluster_spec_clusterNetwork(
                                api_server_port = 56, 
                                pods = kubernetes.client.models.io_x_k8s_cluster_v1alpha3_cluster_spec_cluster_network_pods.io_x_k8s_cluster_v1alpha3_Cluster_spec_clusterNetwork_pods(
                                    cidr_blocks = [
                                        '0'
                                        ], ), 
                                service_domain = '0', 
                                services = kubernetes.client.models.io_x_k8s_cluster_v1alpha3_cluster_spec_cluster_network_services.io_x_k8s_cluster_v1alpha3_Cluster_spec_clusterNetwork_services(
                                    cidr_blocks = [
                                        '0'
                                        ], ), ), 
                            control_plane_endpoint = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_control_plane_endpoint.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_controlPlaneEndpoint(
                                host = '0', 
                                port = 56, ), 
                            control_plane_ref = kubernetes.client.models.io_x_k8s_cluster_v1alpha3_cluster_spec_control_plane_ref.io_x_k8s_cluster_v1alpha3_Cluster_spec_controlPlaneRef(
                                api_version = '0', 
                                field_path = '0', 
                                kind = '0', 
                                name = '0', 
                                namespace = '0', 
                                resource_version = '0', 
                                uid = '0', ), 
                            infrastructure_ref = kubernetes.client.models.io_x_k8s_cluster_v1alpha3_cluster_spec_infrastructure_ref.io_x_k8s_cluster_v1alpha3_Cluster_spec_infrastructureRef(
                                api_version = '0', 
                                field_path = '0', 
                                kind = '0', 
                                name = '0', 
                                namespace = '0', 
                                resource_version = '0', 
                                uid = '0', ), 
                            paused = True, ), 
                        status = kubernetes.client.models.io_x_k8s_cluster_v1alpha3_cluster_status.io_x_k8s_cluster_v1alpha3_Cluster_status(
                            conditions = [
                                kubernetes.client.models.io_x_k8s_cluster_addons_v1alpha3_cluster_resource_set_status_conditions.io_x_k8s_cluster_addons_v1alpha3_ClusterResourceSet_status_conditions(
                                    last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    message = '0', 
                                    reason = '0', 
                                    severity = '0', 
                                    status = '0', 
                                    type = '0', )
                                ], 
                            control_plane_initialized = True, 
                            control_plane_ready = True, 
                            failure_domains = {
                                'key' : kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_status_failure_domains.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_status_failureDomains(
                                    attributes = {
                                        'key' : '0'
                                        }, 
                                    control_plane = True, )
                                }, 
                            failure_message = '0', 
                            failure_reason = '0', 
                            infrastructure_ready = True, 
                            observed_generation = 56, 
                            phase = '0', ), )
                    ], 
                kind = '0', 
                metadata = kubernetes.client.models.v1/list_meta.v1.ListMeta(
                    continue = '0', 
                    remaining_item_count = 56, 
                    resource_version = '0', 
                    self_link = '0', )
            )
        else :
            return IoXK8sClusterV1alpha3ClusterList(
                items = [
                    kubernetes.client.models.io/x_k8s/cluster/v1alpha3/cluster.io.x-k8s.cluster.v1alpha3.Cluster(
                        api_version = '0', 
                        kind = '0', 
                        metadata = kubernetes.client.models.v1/object_meta_v2.v1.ObjectMeta_v2(
                            annotations = {
                                'key' : '0'
                                }, 
                            cluster_name = '0', 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                '0'
                                ], 
                            generate_name = '0', 
                            generation = 56, 
                            labels = {
                                'key' : '0'
                                }, 
                            managed_fields = [
                                kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                                    api_version = '0', 
                                    fields_type = '0', 
                                    fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                                    manager = '0', 
                                    operation = '0', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '0', 
                            namespace = '0', 
                            owner_references = [
                                kubernetes.client.models.v1/owner_reference_v2.v1.OwnerReference_v2(
                                    api_version = '0', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '0', 
                                    name = '0', 
                                    uid = '0', )
                                ], 
                            resource_version = '0', 
                            self_link = '0', 
                            uid = '0', ), 
                        spec = kubernetes.client.models.io_x_k8s_cluster_v1alpha3_cluster_spec.io_x_k8s_cluster_v1alpha3_Cluster_spec(
                            cluster_network = kubernetes.client.models.io_x_k8s_cluster_v1alpha3_cluster_spec_cluster_network.io_x_k8s_cluster_v1alpha3_Cluster_spec_clusterNetwork(
                                api_server_port = 56, 
                                pods = kubernetes.client.models.io_x_k8s_cluster_v1alpha3_cluster_spec_cluster_network_pods.io_x_k8s_cluster_v1alpha3_Cluster_spec_clusterNetwork_pods(
                                    cidr_blocks = [
                                        '0'
                                        ], ), 
                                service_domain = '0', 
                                services = kubernetes.client.models.io_x_k8s_cluster_v1alpha3_cluster_spec_cluster_network_services.io_x_k8s_cluster_v1alpha3_Cluster_spec_clusterNetwork_services(
                                    cidr_blocks = [
                                        '0'
                                        ], ), ), 
                            control_plane_endpoint = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_control_plane_endpoint.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_controlPlaneEndpoint(
                                host = '0', 
                                port = 56, ), 
                            control_plane_ref = kubernetes.client.models.io_x_k8s_cluster_v1alpha3_cluster_spec_control_plane_ref.io_x_k8s_cluster_v1alpha3_Cluster_spec_controlPlaneRef(
                                api_version = '0', 
                                field_path = '0', 
                                kind = '0', 
                                name = '0', 
                                namespace = '0', 
                                resource_version = '0', 
                                uid = '0', ), 
                            infrastructure_ref = kubernetes.client.models.io_x_k8s_cluster_v1alpha3_cluster_spec_infrastructure_ref.io_x_k8s_cluster_v1alpha3_Cluster_spec_infrastructureRef(
                                api_version = '0', 
                                field_path = '0', 
                                kind = '0', 
                                name = '0', 
                                namespace = '0', 
                                resource_version = '0', 
                                uid = '0', ), 
                            paused = True, ), 
                        status = kubernetes.client.models.io_x_k8s_cluster_v1alpha3_cluster_status.io_x_k8s_cluster_v1alpha3_Cluster_status(
                            conditions = [
                                kubernetes.client.models.io_x_k8s_cluster_addons_v1alpha3_cluster_resource_set_status_conditions.io_x_k8s_cluster_addons_v1alpha3_ClusterResourceSet_status_conditions(
                                    last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    message = '0', 
                                    reason = '0', 
                                    severity = '0', 
                                    status = '0', 
                                    type = '0', )
                                ], 
                            control_plane_initialized = True, 
                            control_plane_ready = True, 
                            failure_domains = {
                                'key' : kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_status_failure_domains.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_status_failureDomains(
                                    attributes = {
                                        'key' : '0'
                                        }, 
                                    control_plane = True, )
                                }, 
                            failure_message = '0', 
                            failure_reason = '0', 
                            infrastructure_ready = True, 
                            observed_generation = 56, 
                            phase = '0', ), )
                    ],
        )

    def testIoXK8sClusterV1alpha3ClusterList(self):
        """Test IoXK8sClusterV1alpha3ClusterList"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
