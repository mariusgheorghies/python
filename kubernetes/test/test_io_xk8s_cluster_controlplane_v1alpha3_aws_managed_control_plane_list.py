# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.io_xk8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_list import IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneList  # noqa: E501
from kubernetes.client.rest import ApiException

class TestIoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneList(unittest.TestCase):
    """IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneList
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.io_xk8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_list.IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneList()  # noqa: E501
        if include_optional :
            return IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneList(
                api_version = '0', 
                items = [
                    kubernetes.client.models.io/x_k8s/cluster/controlplane/v1alpha3/aws_managed_control_plane.io.x-k8s.cluster.controlplane.v1alpha3.AWSManagedControlPlane(
                        api_version = '0', 
                        kind = '0', 
                        metadata = kubernetes.client.models.v1/object_meta_v2.v1.ObjectMeta_v2(
                            annotations = {
                                'key' : '0'
                                }, 
                            cluster_name = '0', 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                '0'
                                ], 
                            generate_name = '0', 
                            generation = 56, 
                            labels = {
                                'key' : '0'
                                }, 
                            managed_fields = [
                                kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                                    api_version = '0', 
                                    fields_type = '0', 
                                    fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                                    manager = '0', 
                                    operation = '0', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '0', 
                            namespace = '0', 
                            owner_references = [
                                kubernetes.client.models.v1/owner_reference_v2.v1.OwnerReference_v2(
                                    api_version = '0', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '0', 
                                    name = '0', 
                                    uid = '0', )
                                ], 
                            resource_version = '0', 
                            self_link = '0', 
                            uid = '0', ), 
                        spec = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec(
                            additional_tags = {
                                'key' : '0'
                                }, 
                            addons = [
                                kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_addons.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_addons(
                                    conflict_resolution = 'overwrite', 
                                    name = '01', 
                                    service_account_role_arn = '0', 
                                    version = '0', )
                                ], 
                            associate_oidc_provider = True, 
                            bastion = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_bastion.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_bastion(
                                allowed_cidr_blocks = [
                                    '0'
                                    ], 
                                ami = '0', 
                                disable_ingress_rules = True, 
                                enabled = True, 
                                instance_type = '0', ), 
                            control_plane_endpoint = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_control_plane_endpoint.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_controlPlaneEndpoint(
                                host = '0', 
                                port = 56, ), 
                            disable_vpccni = True, 
                            eks_cluster_name = '0', 
                            encryption_config = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_encryption_config.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_encryptionConfig(
                                provider = '0', 
                                resources = [
                                    '0'
                                    ], ), 
                            endpoint_access = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_endpoint_access.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_endpointAccess(
                                private = True, 
                                public = True, 
                                public_cid_rs = [
                                    '0'
                                    ], ), 
                            iam_authenticator_config = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_iam_authenticator_config.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_iamAuthenticatorConfig(
                                map_roles = [
                                    kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_iam_authenticator_config_map_roles.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_iamAuthenticatorConfig_mapRoles(
                                        groups = [
                                            '0'
                                            ], 
                                        rolearn = '0123456789101112131415161718192021222324252627282930', 
                                        username = '0', )
                                    ], 
                                map_users = [
                                    kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_iam_authenticator_config_map_users.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_iamAuthenticatorConfig_mapUsers(
                                        groups = [
                                            '0'
                                            ], 
                                        userarn = '0123456789101112131415161718192021222324252627282930', 
                                        username = '0', )
                                    ], ), 
                            identity_ref = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_identity_ref.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_identityRef(
                                kind = 'AWSClusterControllerIdentity', 
                                name = '0', ), 
                            image_lookup_base_os = '0', 
                            image_lookup_format = '0', 
                            image_lookup_org = '0', 
                            logging = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_logging.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_logging(
                                api_server = True, 
                                audit = True, 
                                authenticator = True, 
                                controller_manager = True, 
                                scheduler = True, ), 
                            network_spec = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_network_spec.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_networkSpec(
                                cni = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_network_spec_cni.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_networkSpec_cni(
                                    cni_ingress_rules = [
                                        kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_network_spec_cni_cni_ingress_rules.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_networkSpec_cni_cniIngressRules(
                                            description = '0', 
                                            from_port = 56, 
                                            protocol = '0', 
                                            to_port = 56, )
                                        ], ), 
                                security_group_overrides = {
                                    'key' : '0'
                                    }, 
                                subnets = [
                                    kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_network_spec_subnets.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_networkSpec_subnets(
                                        availability_zone = '0', 
                                        cidr_block = '0', 
                                        id = '0', 
                                        is_public = True, 
                                        nat_gateway_id = '0', 
                                        route_table_id = '0', 
                                        tags = {
                                            'key' : '0'
                                            }, )
                                    ], 
                                vpc = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_network_spec_vpc.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_networkSpec_vpc(
                                    availability_zone_selection = 'Ordered', 
                                    availability_zone_usage_limit = 1, 
                                    cidr_block = '0', 
                                    id = '0', 
                                    internet_gateway_id = '0', ), ), 
                            region = '0', 
                            role_additional_policies = [
                                '0'
                                ], 
                            role_name = '01', 
                            secondary_cidr_block = '0', 
                            ssh_key_name = '0', 
                            token_method = 'iam-authenticator', 
                            version = 'a', ), 
                        status = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_status.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_status(
                            conditions = [
                                kubernetes.client.models.io_x_k8s_cluster_addons_v1alpha3_cluster_resource_set_status_conditions.io_x_k8s_cluster_addons_v1alpha3_ClusterResourceSet_status_conditions(
                                    last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    message = '0', 
                                    reason = '0', 
                                    severity = '0', 
                                    status = '0', 
                                    type = '0', )
                                ], 
                            external_managed_control_plane = True, 
                            failure_domains = {
                                'key' : kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_status_failure_domains.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_status_failureDomains(
                                    attributes = {
                                        'key' : '0'
                                        }, 
                                    control_plane = True, )
                                }, 
                            failure_message = '0', 
                            initialized = True, 
                            network = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_status_network.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_status_network(
                                api_server_elb = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_status_network_api_server_elb.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_status_network_apiServerElb(
                                    availability_zones = [
                                        '0'
                                        ], 
                                    dns_name = '0', 
                                    health_checks = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_status_network_api_server_elb_health_checks.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_status_network_apiServerElb_healthChecks(
                                        healthy_threshold = 56, 
                                        interval = 56, 
                                        target = '0', 
                                        timeout = 56, 
                                        unhealthy_threshold = 56, ), 
                                    listeners = [
                                        kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_status_network_api_server_elb_listeners.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_status_network_apiServerElb_listeners(
                                            instance_port = 56, 
                                            instance_protocol = '0', 
                                            port = 56, 
                                            protocol = '0', )
                                        ], 
                                    name = '0', 
                                    scheme = '0', 
                                    security_group_ids = [
                                        '0'
                                        ], 
                                    subnet_ids = [
                                        '0'
                                        ], ), 
                                security_groups = {
                                    'key' : kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_status_network_security_groups.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_status_network_securityGroups(
                                        id = '0', 
                                        ingress_rule = [
                                            kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_status_network_ingress_rule.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_status_network_ingressRule(
                                                cidr_blocks = [
                                                    '0'
                                                    ], 
                                                description = '0', 
                                                from_port = 56, 
                                                protocol = '0', 
                                                source_security_group_ids = [
                                                    '0'
                                                    ], 
                                                to_port = 56, )
                                            ], 
                                        name = '0', )
                                    }, ), 
                            oidc_provider = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_status_oidc_provider.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_status_oidcProvider(
                                arn = '0', 
                                trust_policy = '0', ), 
                            ready = True, ), )
                    ], 
                kind = '0', 
                metadata = kubernetes.client.models.v1/list_meta.v1.ListMeta(
                    continue = '0', 
                    remaining_item_count = 56, 
                    resource_version = '0', 
                    self_link = '0', )
            )
        else :
            return IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneList(
                items = [
                    kubernetes.client.models.io/x_k8s/cluster/controlplane/v1alpha3/aws_managed_control_plane.io.x-k8s.cluster.controlplane.v1alpha3.AWSManagedControlPlane(
                        api_version = '0', 
                        kind = '0', 
                        metadata = kubernetes.client.models.v1/object_meta_v2.v1.ObjectMeta_v2(
                            annotations = {
                                'key' : '0'
                                }, 
                            cluster_name = '0', 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                '0'
                                ], 
                            generate_name = '0', 
                            generation = 56, 
                            labels = {
                                'key' : '0'
                                }, 
                            managed_fields = [
                                kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                                    api_version = '0', 
                                    fields_type = '0', 
                                    fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                                    manager = '0', 
                                    operation = '0', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '0', 
                            namespace = '0', 
                            owner_references = [
                                kubernetes.client.models.v1/owner_reference_v2.v1.OwnerReference_v2(
                                    api_version = '0', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '0', 
                                    name = '0', 
                                    uid = '0', )
                                ], 
                            resource_version = '0', 
                            self_link = '0', 
                            uid = '0', ), 
                        spec = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec(
                            additional_tags = {
                                'key' : '0'
                                }, 
                            addons = [
                                kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_addons.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_addons(
                                    conflict_resolution = 'overwrite', 
                                    name = '01', 
                                    service_account_role_arn = '0', 
                                    version = '0', )
                                ], 
                            associate_oidc_provider = True, 
                            bastion = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_bastion.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_bastion(
                                allowed_cidr_blocks = [
                                    '0'
                                    ], 
                                ami = '0', 
                                disable_ingress_rules = True, 
                                enabled = True, 
                                instance_type = '0', ), 
                            control_plane_endpoint = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_control_plane_endpoint.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_controlPlaneEndpoint(
                                host = '0', 
                                port = 56, ), 
                            disable_vpccni = True, 
                            eks_cluster_name = '0', 
                            encryption_config = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_encryption_config.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_encryptionConfig(
                                provider = '0', 
                                resources = [
                                    '0'
                                    ], ), 
                            endpoint_access = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_endpoint_access.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_endpointAccess(
                                private = True, 
                                public = True, 
                                public_cid_rs = [
                                    '0'
                                    ], ), 
                            iam_authenticator_config = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_iam_authenticator_config.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_iamAuthenticatorConfig(
                                map_roles = [
                                    kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_iam_authenticator_config_map_roles.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_iamAuthenticatorConfig_mapRoles(
                                        groups = [
                                            '0'
                                            ], 
                                        rolearn = '0123456789101112131415161718192021222324252627282930', 
                                        username = '0', )
                                    ], 
                                map_users = [
                                    kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_iam_authenticator_config_map_users.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_iamAuthenticatorConfig_mapUsers(
                                        groups = [
                                            '0'
                                            ], 
                                        userarn = '0123456789101112131415161718192021222324252627282930', 
                                        username = '0', )
                                    ], ), 
                            identity_ref = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_identity_ref.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_identityRef(
                                kind = 'AWSClusterControllerIdentity', 
                                name = '0', ), 
                            image_lookup_base_os = '0', 
                            image_lookup_format = '0', 
                            image_lookup_org = '0', 
                            logging = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_logging.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_logging(
                                api_server = True, 
                                audit = True, 
                                authenticator = True, 
                                controller_manager = True, 
                                scheduler = True, ), 
                            network_spec = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_network_spec.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_networkSpec(
                                cni = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_network_spec_cni.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_networkSpec_cni(
                                    cni_ingress_rules = [
                                        kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_network_spec_cni_cni_ingress_rules.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_networkSpec_cni_cniIngressRules(
                                            description = '0', 
                                            from_port = 56, 
                                            protocol = '0', 
                                            to_port = 56, )
                                        ], ), 
                                security_group_overrides = {
                                    'key' : '0'
                                    }, 
                                subnets = [
                                    kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_network_spec_subnets.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_networkSpec_subnets(
                                        availability_zone = '0', 
                                        cidr_block = '0', 
                                        id = '0', 
                                        is_public = True, 
                                        nat_gateway_id = '0', 
                                        route_table_id = '0', 
                                        tags = {
                                            'key' : '0'
                                            }, )
                                    ], 
                                vpc = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_network_spec_vpc.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_networkSpec_vpc(
                                    availability_zone_selection = 'Ordered', 
                                    availability_zone_usage_limit = 1, 
                                    cidr_block = '0', 
                                    id = '0', 
                                    internet_gateway_id = '0', ), ), 
                            region = '0', 
                            role_additional_policies = [
                                '0'
                                ], 
                            role_name = '01', 
                            secondary_cidr_block = '0', 
                            ssh_key_name = '0', 
                            token_method = 'iam-authenticator', 
                            version = 'a', ), 
                        status = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_status.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_status(
                            conditions = [
                                kubernetes.client.models.io_x_k8s_cluster_addons_v1alpha3_cluster_resource_set_status_conditions.io_x_k8s_cluster_addons_v1alpha3_ClusterResourceSet_status_conditions(
                                    last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    message = '0', 
                                    reason = '0', 
                                    severity = '0', 
                                    status = '0', 
                                    type = '0', )
                                ], 
                            external_managed_control_plane = True, 
                            failure_domains = {
                                'key' : kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_status_failure_domains.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_status_failureDomains(
                                    attributes = {
                                        'key' : '0'
                                        }, 
                                    control_plane = True, )
                                }, 
                            failure_message = '0', 
                            initialized = True, 
                            network = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_status_network.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_status_network(
                                api_server_elb = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_status_network_api_server_elb.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_status_network_apiServerElb(
                                    availability_zones = [
                                        '0'
                                        ], 
                                    dns_name = '0', 
                                    health_checks = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_status_network_api_server_elb_health_checks.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_status_network_apiServerElb_healthChecks(
                                        healthy_threshold = 56, 
                                        interval = 56, 
                                        target = '0', 
                                        timeout = 56, 
                                        unhealthy_threshold = 56, ), 
                                    listeners = [
                                        kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_status_network_api_server_elb_listeners.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_status_network_apiServerElb_listeners(
                                            instance_port = 56, 
                                            instance_protocol = '0', 
                                            port = 56, 
                                            protocol = '0', )
                                        ], 
                                    name = '0', 
                                    scheme = '0', 
                                    security_group_ids = [
                                        '0'
                                        ], 
                                    subnet_ids = [
                                        '0'
                                        ], ), 
                                security_groups = {
                                    'key' : kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_status_network_security_groups.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_status_network_securityGroups(
                                        id = '0', 
                                        ingress_rule = [
                                            kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_status_network_ingress_rule.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_status_network_ingressRule(
                                                cidr_blocks = [
                                                    '0'
                                                    ], 
                                                description = '0', 
                                                from_port = 56, 
                                                protocol = '0', 
                                                source_security_group_ids = [
                                                    '0'
                                                    ], 
                                                to_port = 56, )
                                            ], 
                                        name = '0', )
                                    }, ), 
                            oidc_provider = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_status_oidc_provider.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_status_oidcProvider(
                                arn = '0', 
                                trust_policy = '0', ), 
                            ready = True, ), )
                    ],
        )

    def testIoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneList(self):
        """Test IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneList"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
