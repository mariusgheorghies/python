# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_route_table_spec import AwsK8sServicesEc2V1alpha1RouteTableSpec  # noqa: E501
from kubernetes.client.rest import ApiException

class TestAwsK8sServicesEc2V1alpha1RouteTableSpec(unittest.TestCase):
    """AwsK8sServicesEc2V1alpha1RouteTableSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test AwsK8sServicesEc2V1alpha1RouteTableSpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_route_table_spec.AwsK8sServicesEc2V1alpha1RouteTableSpec()  # noqa: E501
        if include_optional :
            return AwsK8sServicesEc2V1alpha1RouteTableSpec(
                routes = [
                    kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_route_table_spec_routes.aws_k8s_services_ec2_v1alpha1_RouteTable_spec_routes(
                        carrier_gateway_id = '0', 
                        core_network_arn = '0', 
                        destination_cidr_block = '0', 
                        destination_i_pv6_cidr_block = '0', 
                        destination_prefix_list_id = '0', 
                        egress_only_internet_gateway_id = '0', 
                        gateway_id = '0', 
                        gateway_ref = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_route_table_spec_gateway_ref.aws_k8s_services_ec2_v1alpha1_RouteTable_spec_gatewayRef(
                            from = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_dhcp_options_spec_from.aws_k8s_services_ec2_v1alpha1_DHCPOptions_spec_from(
                                name = '0', ), ), 
                        instance_id = '0', 
                        local_gateway_id = '0', 
                        nat_gateway_id = '0', 
                        nat_gateway_ref = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_route_table_spec_nat_gateway_ref.aws_k8s_services_ec2_v1alpha1_RouteTable_spec_natGatewayRef(), 
                        network_interface_id = '0', 
                        transit_gateway_id = '0', 
                        transit_gateway_ref = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_route_table_spec_transit_gateway_ref.aws_k8s_services_ec2_v1alpha1_RouteTable_spec_transitGatewayRef(), 
                        vpc_endpoint_id = '0', 
                        vpc_endpoint_ref = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_route_table_spec_vpc_endpoint_ref.aws_k8s_services_ec2_v1alpha1_RouteTable_spec_vpcEndpointRef(), 
                        vpc_peering_connection_id = '0', )
                    ], 
                tags = [
                    kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_dhcp_options_spec_tags.aws_k8s_services_ec2_v1alpha1_DHCPOptions_spec_tags(
                        key = '0', 
                        value = '0', )
                    ], 
                vpc_id = '0', 
                vpc_ref = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_dhcp_options_spec_vpc_refs.aws_k8s_services_ec2_v1alpha1_DHCPOptions_spec_vpcRefs(
                    from = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_dhcp_options_spec_from.aws_k8s_services_ec2_v1alpha1_DHCPOptions_spec_from(
                        name = '0', ), )
            )
        else :
            return AwsK8sServicesEc2V1alpha1RouteTableSpec(
        )

    def testAwsK8sServicesEc2V1alpha1RouteTableSpec(self):
        """Test AwsK8sServicesEc2V1alpha1RouteTableSpec"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
