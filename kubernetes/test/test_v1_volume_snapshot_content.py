# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.v1_volume_snapshot_content import V1VolumeSnapshotContent  # noqa: E501
from kubernetes.client.rest import ApiException

class TestV1VolumeSnapshotContent(unittest.TestCase):
    """V1VolumeSnapshotContent unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1VolumeSnapshotContent
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.v1_volume_snapshot_content.V1VolumeSnapshotContent()  # noqa: E501
        if include_optional :
            return V1VolumeSnapshotContent(
                api_version = '0', 
                kind = '0', 
                metadata = kubernetes.client.models.v1/object_meta.v1.ObjectMeta(
                    annotations = {
                        'key' : '0'
                        }, 
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_grace_period_seconds = 56, 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    finalizers = [
                        '0'
                        ], 
                    generate_name = '0', 
                    generation = 56, 
                    labels = {
                        'key' : '0'
                        }, 
                    managed_fields = [
                        kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                            api_version = '0', 
                            fields_type = '0', 
                            fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                            manager = '0', 
                            operation = '0', 
                            subresource = '0', 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    name = '0', 
                    namespace = '0', 
                    owner_references = [
                        kubernetes.client.models.v1/owner_reference.v1.OwnerReference(
                            api_version = '0', 
                            block_owner_deletion = True, 
                            controller = True, 
                            kind = '0', 
                            name = '0', 
                            uid = '0', )
                        ], 
                    resource_version = '0', 
                    self_link = '0', 
                    uid = '0', ), 
                spec = kubernetes.client.models.v1_volume_snapshot_content_spec.v1_VolumeSnapshotContent_spec(
                    deletion_policy = 'Delete', 
                    driver = '0', 
                    source = kubernetes.client.models.v1_volume_snapshot_content_spec_source.v1_VolumeSnapshotContent_spec_source(
                        snapshot_handle = '0', 
                        volume_handle = '0', ), 
                    source_volume_mode = '0', 
                    volume_snapshot_class_name = '0', 
                    volume_snapshot_ref = kubernetes.client.models.v1_volume_snapshot_content_spec_volume_snapshot_ref.v1_VolumeSnapshotContent_spec_volumeSnapshotRef(
                        api_version = '0', 
                        field_path = '0', 
                        kind = '0', 
                        name = '0', 
                        namespace = '0', 
                        resource_version = '0', 
                        uid = '0', ), ), 
                status = kubernetes.client.models.v1_volume_snapshot_content_status.v1_VolumeSnapshotContent_status(
                    creation_time = 56, 
                    error = kubernetes.client.models.v1_volume_snapshot_content_status_error.v1_VolumeSnapshotContent_status_error(
                        message = '0', 
                        time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    ready_to_use = True, 
                    restore_size = 0, 
                    snapshot_handle = '0', )
            )
        else :
            return V1VolumeSnapshotContent(
                spec = kubernetes.client.models.v1_volume_snapshot_content_spec.v1_VolumeSnapshotContent_spec(
                    deletion_policy = 'Delete', 
                    driver = '0', 
                    source = kubernetes.client.models.v1_volume_snapshot_content_spec_source.v1_VolumeSnapshotContent_spec_source(
                        snapshot_handle = '0', 
                        volume_handle = '0', ), 
                    source_volume_mode = '0', 
                    volume_snapshot_class_name = '0', 
                    volume_snapshot_ref = kubernetes.client.models.v1_volume_snapshot_content_spec_volume_snapshot_ref.v1_VolumeSnapshotContent_spec_volumeSnapshotRef(
                        api_version = '0', 
                        field_path = '0', 
                        kind = '0', 
                        name = '0', 
                        namespace = '0', 
                        resource_version = '0', 
                        uid = '0', ), ),
        )

    def testV1VolumeSnapshotContent(self):
        """Test V1VolumeSnapshotContent"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
