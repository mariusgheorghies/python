# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.com_grafana_monitoring_v1alpha1_logs_instance_list import ComGrafanaMonitoringV1alpha1LogsInstanceList  # noqa: E501
from kubernetes.client.rest import ApiException

class TestComGrafanaMonitoringV1alpha1LogsInstanceList(unittest.TestCase):
    """ComGrafanaMonitoringV1alpha1LogsInstanceList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ComGrafanaMonitoringV1alpha1LogsInstanceList
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.com_grafana_monitoring_v1alpha1_logs_instance_list.ComGrafanaMonitoringV1alpha1LogsInstanceList()  # noqa: E501
        if include_optional :
            return ComGrafanaMonitoringV1alpha1LogsInstanceList(
                api_version = '0', 
                items = [
                    kubernetes.client.models.com/grafana/monitoring/v1alpha1/logs_instance.com.grafana.monitoring.v1alpha1.LogsInstance(
                        api_version = '0', 
                        kind = '0', 
                        metadata = kubernetes.client.models.v1/object_meta.v1.ObjectMeta(
                            annotations = {
                                'key' : '0'
                                }, 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                '0'
                                ], 
                            generate_name = '0', 
                            generation = 56, 
                            labels = {
                                'key' : '0'
                                }, 
                            managed_fields = [
                                kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                                    api_version = '0', 
                                    fields_type = '0', 
                                    fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                                    manager = '0', 
                                    operation = '0', 
                                    subresource = '0', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '0', 
                            namespace = '0', 
                            owner_references = [
                                kubernetes.client.models.v1/owner_reference.v1.OwnerReference(
                                    api_version = '0', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '0', 
                                    name = '0', 
                                    uid = '0', )
                                ], 
                            resource_version = '0', 
                            self_link = '0', 
                            uid = '0', ), 
                        spec = kubernetes.client.models.com_grafana_monitoring_v1alpha1_logs_instance_spec.com_grafana_monitoring_v1alpha1_LogsInstance_spec(
                            additional_scrape_configs = kubernetes.client.models.com_grafana_monitoring_v1alpha1_logs_instance_spec_additional_scrape_configs.com_grafana_monitoring_v1alpha1_LogsInstance_spec_additionalScrapeConfigs(
                                key = '0', 
                                name = '0', 
                                optional = True, ), 
                            kubernetes.clients = [
                                kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_logs_clients.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_logs_clients(
                                    backoff_config = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_logs_backoff_config.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_logs_backoffConfig(
                                        max_period = '0', 
                                        max_retries = 56, 
                                        min_period = '0', ), 
                                    basic_auth = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_logs_basic_auth.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_logs_basicAuth(
                                        password = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_basic_auth_password.com_coreos_monitoring_v1_PodMonitor_spec_basicAuth_password(
                                            key = '0', 
                                            name = '0', 
                                            optional = True, ), 
                                        username = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_basic_auth_username.com_coreos_monitoring_v1_PodMonitor_spec_basicAuth_username(
                                            key = '0', 
                                            name = '0', 
                                            optional = True, ), ), 
                                    batch_size = 56, 
                                    batch_wait = '0', 
                                    bearer_token = '0', 
                                    bearer_token_file = '0', 
                                    external_labels = {
                                        'key' : '0'
                                        }, 
                                    oauth2 = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_logs_oauth2.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_logs_oauth2(
                                        kubernetes.client_id = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_oauth2_client_id.com_coreos_monitoring_v1_PodMonitor_spec_oauth2_clientId(
                                            config_map = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_oauth2_client_id_config_map.com_coreos_monitoring_v1_PodMonitor_spec_oauth2_clientId_configMap(
                                                key = '0', 
                                                name = '0', 
                                                optional = True, ), 
                                            secret = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_oauth2_client_id_secret.com_coreos_monitoring_v1_PodMonitor_spec_oauth2_clientId_secret(
                                                key = '0', 
                                                name = '0', 
                                                optional = True, ), ), 
                                        kubernetes.client_secret = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_oauth2_client_secret.com_coreos_monitoring_v1_PodMonitor_spec_oauth2_clientSecret(
                                            key = '0', 
                                            name = '0', 
                                            optional = True, ), 
                                        endpoint_params = {
                                            'key' : '0'
                                            }, 
                                        scopes = [
                                            '0'
                                            ], 
                                        token_url = '0', ), 
                                    proxy_url = '0', 
                                    tenant_id = '0', 
                                    timeout = '0', 
                                    tls_config = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_logs_tls_config.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_logs_tlsConfig(
                                        ca = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_tls_config_ca.com_coreos_monitoring_v1_PodMonitor_spec_tlsConfig_ca(), 
                                        ca_file = '0', 
                                        cert = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_tls_config_cert.com_coreos_monitoring_v1_PodMonitor_spec_tlsConfig_cert(), 
                                        cert_file = '0', 
                                        insecure_skip_verify = True, 
                                        key_file = '0', 
                                        key_secret = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_tls_config_key_secret.com_coreos_monitoring_v1_PodMonitor_spec_tlsConfig_keySecret(
                                            key = '0', 
                                            name = '0', 
                                            optional = True, ), 
                                        server_name = '0', ), 
                                    url = '0', )
                                ], 
                            pod_logs_namespace_selector = kubernetes.client.models.com_grafana_monitoring_v1alpha1_logs_instance_spec_pod_logs_namespace_selector.com_grafana_monitoring_v1alpha1_LogsInstance_spec_podLogsNamespaceSelector(
                                match_expressions = [
                                    kubernetes.client.models.aws_k8s_networking_v1alpha1_policy_endpoint_spec_pod_selector_match_expressions.aws_k8s_networking_v1alpha1_PolicyEndpoint_spec_podSelector_matchExpressions(
                                        key = '0', 
                                        operator = '0', 
                                        values = [
                                            '0'
                                            ], )
                                    ], 
                                match_labels = {
                                    'key' : '0'
                                    }, ), 
                            pod_logs_selector = kubernetes.client.models.com_grafana_monitoring_v1alpha1_logs_instance_spec_pod_logs_selector.com_grafana_monitoring_v1alpha1_LogsInstance_spec_podLogsSelector(), 
                            target_config = kubernetes.client.models.com_grafana_monitoring_v1alpha1_logs_instance_spec_target_config.com_grafana_monitoring_v1alpha1_LogsInstance_spec_targetConfig(
                                sync_period = '0', ), ), )
                    ], 
                kind = '0', 
                metadata = kubernetes.client.models.v1/list_meta.v1.ListMeta(
                    continue = '0', 
                    remaining_item_count = 56, 
                    resource_version = '0', 
                    self_link = '0', )
            )
        else :
            return ComGrafanaMonitoringV1alpha1LogsInstanceList(
                items = [
                    kubernetes.client.models.com/grafana/monitoring/v1alpha1/logs_instance.com.grafana.monitoring.v1alpha1.LogsInstance(
                        api_version = '0', 
                        kind = '0', 
                        metadata = kubernetes.client.models.v1/object_meta.v1.ObjectMeta(
                            annotations = {
                                'key' : '0'
                                }, 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                '0'
                                ], 
                            generate_name = '0', 
                            generation = 56, 
                            labels = {
                                'key' : '0'
                                }, 
                            managed_fields = [
                                kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                                    api_version = '0', 
                                    fields_type = '0', 
                                    fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                                    manager = '0', 
                                    operation = '0', 
                                    subresource = '0', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '0', 
                            namespace = '0', 
                            owner_references = [
                                kubernetes.client.models.v1/owner_reference.v1.OwnerReference(
                                    api_version = '0', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '0', 
                                    name = '0', 
                                    uid = '0', )
                                ], 
                            resource_version = '0', 
                            self_link = '0', 
                            uid = '0', ), 
                        spec = kubernetes.client.models.com_grafana_monitoring_v1alpha1_logs_instance_spec.com_grafana_monitoring_v1alpha1_LogsInstance_spec(
                            additional_scrape_configs = kubernetes.client.models.com_grafana_monitoring_v1alpha1_logs_instance_spec_additional_scrape_configs.com_grafana_monitoring_v1alpha1_LogsInstance_spec_additionalScrapeConfigs(
                                key = '0', 
                                name = '0', 
                                optional = True, ), 
                            kubernetes.clients = [
                                kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_logs_clients.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_logs_clients(
                                    backoff_config = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_logs_backoff_config.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_logs_backoffConfig(
                                        max_period = '0', 
                                        max_retries = 56, 
                                        min_period = '0', ), 
                                    basic_auth = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_logs_basic_auth.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_logs_basicAuth(
                                        password = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_basic_auth_password.com_coreos_monitoring_v1_PodMonitor_spec_basicAuth_password(
                                            key = '0', 
                                            name = '0', 
                                            optional = True, ), 
                                        username = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_basic_auth_username.com_coreos_monitoring_v1_PodMonitor_spec_basicAuth_username(
                                            key = '0', 
                                            name = '0', 
                                            optional = True, ), ), 
                                    batch_size = 56, 
                                    batch_wait = '0', 
                                    bearer_token = '0', 
                                    bearer_token_file = '0', 
                                    external_labels = {
                                        'key' : '0'
                                        }, 
                                    oauth2 = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_logs_oauth2.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_logs_oauth2(
                                        kubernetes.client_id = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_oauth2_client_id.com_coreos_monitoring_v1_PodMonitor_spec_oauth2_clientId(
                                            config_map = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_oauth2_client_id_config_map.com_coreos_monitoring_v1_PodMonitor_spec_oauth2_clientId_configMap(
                                                key = '0', 
                                                name = '0', 
                                                optional = True, ), 
                                            secret = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_oauth2_client_id_secret.com_coreos_monitoring_v1_PodMonitor_spec_oauth2_clientId_secret(
                                                key = '0', 
                                                name = '0', 
                                                optional = True, ), ), 
                                        kubernetes.client_secret = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_oauth2_client_secret.com_coreos_monitoring_v1_PodMonitor_spec_oauth2_clientSecret(
                                            key = '0', 
                                            name = '0', 
                                            optional = True, ), 
                                        endpoint_params = {
                                            'key' : '0'
                                            }, 
                                        scopes = [
                                            '0'
                                            ], 
                                        token_url = '0', ), 
                                    proxy_url = '0', 
                                    tenant_id = '0', 
                                    timeout = '0', 
                                    tls_config = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_logs_tls_config.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_logs_tlsConfig(
                                        ca = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_tls_config_ca.com_coreos_monitoring_v1_PodMonitor_spec_tlsConfig_ca(), 
                                        ca_file = '0', 
                                        cert = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_tls_config_cert.com_coreos_monitoring_v1_PodMonitor_spec_tlsConfig_cert(), 
                                        cert_file = '0', 
                                        insecure_skip_verify = True, 
                                        key_file = '0', 
                                        key_secret = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_tls_config_key_secret.com_coreos_monitoring_v1_PodMonitor_spec_tlsConfig_keySecret(
                                            key = '0', 
                                            name = '0', 
                                            optional = True, ), 
                                        server_name = '0', ), 
                                    url = '0', )
                                ], 
                            pod_logs_namespace_selector = kubernetes.client.models.com_grafana_monitoring_v1alpha1_logs_instance_spec_pod_logs_namespace_selector.com_grafana_monitoring_v1alpha1_LogsInstance_spec_podLogsNamespaceSelector(
                                match_expressions = [
                                    kubernetes.client.models.aws_k8s_networking_v1alpha1_policy_endpoint_spec_pod_selector_match_expressions.aws_k8s_networking_v1alpha1_PolicyEndpoint_spec_podSelector_matchExpressions(
                                        key = '0', 
                                        operator = '0', 
                                        values = [
                                            '0'
                                            ], )
                                    ], 
                                match_labels = {
                                    'key' : '0'
                                    }, ), 
                            pod_logs_selector = kubernetes.client.models.com_grafana_monitoring_v1alpha1_logs_instance_spec_pod_logs_selector.com_grafana_monitoring_v1alpha1_LogsInstance_spec_podLogsSelector(), 
                            target_config = kubernetes.client.models.com_grafana_monitoring_v1alpha1_logs_instance_spec_target_config.com_grafana_monitoring_v1alpha1_LogsInstance_spec_targetConfig(
                                sync_period = '0', ), ), )
                    ],
        )

    def testComGrafanaMonitoringV1alpha1LogsInstanceList(self):
        """Test ComGrafanaMonitoringV1alpha1LogsInstanceList"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
