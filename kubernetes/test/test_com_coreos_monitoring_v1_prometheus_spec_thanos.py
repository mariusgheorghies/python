# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.com_coreos_monitoring_v1_prometheus_spec_thanos import ComCoreosMonitoringV1PrometheusSpecThanos  # noqa: E501
from kubernetes.client.rest import ApiException

class TestComCoreosMonitoringV1PrometheusSpecThanos(unittest.TestCase):
    """ComCoreosMonitoringV1PrometheusSpecThanos unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ComCoreosMonitoringV1PrometheusSpecThanos
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.com_coreos_monitoring_v1_prometheus_spec_thanos.ComCoreosMonitoringV1PrometheusSpecThanos()  # noqa: E501
        if include_optional :
            return ComCoreosMonitoringV1PrometheusSpecThanos(
                base_image = '0', 
                grpc_server_tls_config = kubernetes.client.models.com_coreos_monitoring_v1_prometheus_spec_thanos_grpc_server_tls_config.com_coreos_monitoring_v1_Prometheus_spec_thanos_grpcServerTlsConfig(
                    ca = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_tls_config_ca.com_coreos_monitoring_v1_PodMonitor_spec_tlsConfig_ca(
                        config_map = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_oauth2_client_id_config_map.com_coreos_monitoring_v1_PodMonitor_spec_oauth2_clientId_configMap(
                            key = '0', 
                            name = '0', 
                            optional = True, ), 
                        secret = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_oauth2_client_id_secret.com_coreos_monitoring_v1_PodMonitor_spec_oauth2_clientId_secret(
                            key = '0', 
                            name = '0', 
                            optional = True, ), ), 
                    ca_file = '0', 
                    cert = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_tls_config_cert.com_coreos_monitoring_v1_PodMonitor_spec_tlsConfig_cert(), 
                    cert_file = '0', 
                    insecure_skip_verify = True, 
                    key_file = '0', 
                    key_secret = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_tls_config_key_secret.com_coreos_monitoring_v1_PodMonitor_spec_tlsConfig_keySecret(
                        key = '0', 
                        name = '0', 
                        optional = True, ), 
                    server_name = '0', ), 
                image = '0', 
                listen_local = True, 
                log_format = '0', 
                log_level = '0', 
                min_time = '0', 
                object_storage_config = kubernetes.client.models.com_coreos_monitoring_v1_prometheus_spec_thanos_object_storage_config.com_coreos_monitoring_v1_Prometheus_spec_thanos_objectStorageConfig(
                    key = '0', 
                    name = '0', 
                    optional = True, ), 
                object_storage_config_file = '0', 
                ready_timeout = '0', 
                resources = kubernetes.client.models.com_coreos_monitoring_v1_prometheus_spec_thanos_resources.com_coreos_monitoring_v1_Prometheus_spec_thanos_resources(
                    limits = {
                        'key' : None
                        }, 
                    requests = {
                        'key' : None
                        }, ), 
                sha = '0', 
                tag = '0', 
                tracing_config = kubernetes.client.models.com_coreos_monitoring_v1_prometheus_spec_thanos_tracing_config.com_coreos_monitoring_v1_Prometheus_spec_thanos_tracingConfig(
                    key = '0', 
                    name = '0', 
                    optional = True, ), 
                tracing_config_file = '0', 
                version = '0'
            )
        else :
            return ComCoreosMonitoringV1PrometheusSpecThanos(
        )

    def testComCoreosMonitoringV1PrometheusSpecThanos(self):
        """Test ComCoreosMonitoringV1PrometheusSpecThanos"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
