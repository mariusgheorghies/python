# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_route_table_status import AwsK8sServicesEc2V1alpha1RouteTableStatus  # noqa: E501
from kubernetes.client.rest import ApiException

class TestAwsK8sServicesEc2V1alpha1RouteTableStatus(unittest.TestCase):
    """AwsK8sServicesEc2V1alpha1RouteTableStatus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test AwsK8sServicesEc2V1alpha1RouteTableStatus
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_route_table_status.AwsK8sServicesEc2V1alpha1RouteTableStatus()  # noqa: E501
        if include_optional :
            return AwsK8sServicesEc2V1alpha1RouteTableStatus(
                ack_resource_metadata = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_dhcp_options_status_ack_resource_metadata.aws_k8s_services_ec2_v1alpha1_DHCPOptions_status_ackResourceMetadata(
                    arn = '0', 
                    owner_account_id = '0', 
                    region = '0', ), 
                associations = [
                    kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_route_table_status_associations.aws_k8s_services_ec2_v1alpha1_RouteTable_status_associations(
                        association_state = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_route_table_status_association_state.aws_k8s_services_ec2_v1alpha1_RouteTable_status_associationState(
                            state = '0', 
                            status_message = '0', ), 
                        gateway_id = '0', 
                        main = True, 
                        route_table_association_id = '0', 
                        route_table_id = '0', 
                        subnet_id = '0', )
                    ], 
                conditions = [
                    kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_dhcp_options_status_conditions.aws_k8s_services_ec2_v1alpha1_DHCPOptions_status_conditions(
                        last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        message = '0', 
                        reason = '0', 
                        status = '0', 
                        type = '0', )
                    ], 
                owner_id = '0', 
                propagating_vg_ws = [
                    kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_route_table_status_propagating_vg_ws.aws_k8s_services_ec2_v1alpha1_RouteTable_status_propagatingVGWs(
                        gateway_id = '0', )
                    ], 
                route_statuses = [
                    kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_route_table_status_route_statuses.aws_k8s_services_ec2_v1alpha1_RouteTable_status_routeStatuses(
                        carrier_gateway_id = '0', 
                        core_network_arn = '0', 
                        destination_cidr_block = '0', 
                        destination_i_pv6_cidr_block = '0', 
                        destination_prefix_list_id = '0', 
                        egress_only_internet_gateway_id = '0', 
                        gateway_id = '0', 
                        instance_id = '0', 
                        instance_owner_id = '0', 
                        local_gateway_id = '0', 
                        nat_gateway_id = '0', 
                        network_interface_id = '0', 
                        origin = '0', 
                        state = '0', 
                        transit_gateway_id = '0', 
                        vpc_peering_connection_id = '0', )
                    ], 
                route_table_id = '0'
            )
        else :
            return AwsK8sServicesEc2V1alpha1RouteTableStatus(
        )

    def testAwsK8sServicesEc2V1alpha1RouteTableStatus(self):
        """Test AwsK8sServicesEc2V1alpha1RouteTableStatus"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
