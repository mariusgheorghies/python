# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_containers import ComCoreosMonitoringV1AlertmanagerSpecContainers  # noqa: E501
from kubernetes.client.rest import ApiException

class TestComCoreosMonitoringV1AlertmanagerSpecContainers(unittest.TestCase):
    """ComCoreosMonitoringV1AlertmanagerSpecContainers unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ComCoreosMonitoringV1AlertmanagerSpecContainers
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_containers.ComCoreosMonitoringV1AlertmanagerSpecContainers()  # noqa: E501
        if include_optional :
            return ComCoreosMonitoringV1AlertmanagerSpecContainers(
                args = [
                    '0'
                    ], 
                command = [
                    '0'
                    ], 
                env = [
                    kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_env.com_coreos_monitoring_v1_Alertmanager_spec_env(
                        name = '0', 
                        value = '0', 
                        value_from = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_value_from.com_coreos_monitoring_v1_Alertmanager_spec_valueFrom(
                            config_map_key_ref = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_value_from_config_map_key_ref.com_coreos_monitoring_v1_Alertmanager_spec_valueFrom_configMapKeyRef(
                                key = '0', 
                                name = '0', 
                                optional = True, ), 
                            field_ref = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_value_from_field_ref.com_coreos_monitoring_v1_Alertmanager_spec_valueFrom_fieldRef(
                                api_version = '0', 
                                field_path = '0', ), 
                            resource_field_ref = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_value_from_resource_field_ref.com_coreos_monitoring_v1_Alertmanager_spec_valueFrom_resourceFieldRef(
                                container_name = '0', 
                                divisor = kubernetes.client.models.divisor.divisor(), 
                                resource = '0', ), 
                            secret_key_ref = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_value_from_secret_key_ref.com_coreos_monitoring_v1_Alertmanager_spec_valueFrom_secretKeyRef(
                                key = '0', 
                                name = '0', 
                                optional = True, ), ), )
                    ], 
                env_from = [
                    kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_env_from.com_coreos_monitoring_v1_Alertmanager_spec_envFrom(
                        config_map_ref = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_config_map_ref.com_coreos_monitoring_v1_Alertmanager_spec_configMapRef(
                            name = '0', 
                            optional = True, ), 
                        prefix = '0', 
                        secret_ref = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_secret_ref.com_coreos_monitoring_v1_Alertmanager_spec_secretRef(
                            name = '0', 
                            optional = True, ), )
                    ], 
                image = '0', 
                image_pull_policy = '0', 
                lifecycle = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_lifecycle.com_coreos_monitoring_v1_Alertmanager_spec_lifecycle(
                    post_start = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_lifecycle_post_start.com_coreos_monitoring_v1_Alertmanager_spec_lifecycle_postStart(
                        exec = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_lifecycle_post_start_exec.com_coreos_monitoring_v1_Alertmanager_spec_lifecycle_postStart_exec(
                            command = [
                                '0'
                                ], ), 
                        http_get = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_lifecycle_post_start_http_get.com_coreos_monitoring_v1_Alertmanager_spec_lifecycle_postStart_httpGet(
                            host = '0', 
                            http_headers = [
                                kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_lifecycle_post_start_http_get_http_headers.com_coreos_monitoring_v1_Alertmanager_spec_lifecycle_postStart_httpGet_httpHeaders(
                                    name = '0', 
                                    value = '0', )
                                ], 
                            path = '0', 
                            port = kubernetes.client.models.port.port(), 
                            scheme = '0', ), 
                        tcp_socket = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_lifecycle_post_start_tcp_socket.com_coreos_monitoring_v1_Alertmanager_spec_lifecycle_postStart_tcpSocket(
                            host = '0', 
                            port = kubernetes.client.models.port.port(), ), ), 
                    pre_stop = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_lifecycle_pre_stop.com_coreos_monitoring_v1_Alertmanager_spec_lifecycle_preStop(), ), 
                liveness_probe = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_liveness_probe.com_coreos_monitoring_v1_Alertmanager_spec_livenessProbe(
                    exec = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_lifecycle_post_start_exec.com_coreos_monitoring_v1_Alertmanager_spec_lifecycle_postStart_exec(
                        command = [
                            '0'
                            ], ), 
                    failure_threshold = 56, 
                    grpc = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_liveness_probe_grpc.com_coreos_monitoring_v1_Alertmanager_spec_livenessProbe_grpc(
                        port = 56, 
                        service = '0', ), 
                    http_get = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_lifecycle_post_start_http_get.com_coreos_monitoring_v1_Alertmanager_spec_lifecycle_postStart_httpGet(
                        host = '0', 
                        http_headers = [
                            kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_lifecycle_post_start_http_get_http_headers.com_coreos_monitoring_v1_Alertmanager_spec_lifecycle_postStart_httpGet_httpHeaders(
                                name = '0', 
                                value = '0', )
                            ], 
                        path = '0', 
                        port = kubernetes.client.models.port.port(), 
                        scheme = '0', ), 
                    initial_delay_seconds = 56, 
                    period_seconds = 56, 
                    success_threshold = 56, 
                    tcp_socket = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_liveness_probe_tcp_socket.com_coreos_monitoring_v1_Alertmanager_spec_livenessProbe_tcpSocket(
                        host = '0', 
                        port = kubernetes.client.models.port.port(), ), 
                    termination_grace_period_seconds = 56, 
                    timeout_seconds = 56, ), 
                name = '0', 
                ports = [
                    kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_ports.com_coreos_monitoring_v1_Alertmanager_spec_ports(
                        container_port = 56, 
                        host_ip = '0', 
                        host_port = 56, 
                        name = '0', 
                        protocol = '0', )
                    ], 
                readiness_probe = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_readiness_probe.com_coreos_monitoring_v1_Alertmanager_spec_readinessProbe(
                    exec = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_lifecycle_post_start_exec.com_coreos_monitoring_v1_Alertmanager_spec_lifecycle_postStart_exec(
                        command = [
                            '0'
                            ], ), 
                    failure_threshold = 56, 
                    grpc = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_liveness_probe_grpc.com_coreos_monitoring_v1_Alertmanager_spec_livenessProbe_grpc(
                        port = 56, 
                        service = '0', ), 
                    http_get = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_lifecycle_post_start_http_get.com_coreos_monitoring_v1_Alertmanager_spec_lifecycle_postStart_httpGet(
                        host = '0', 
                        http_headers = [
                            kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_lifecycle_post_start_http_get_http_headers.com_coreos_monitoring_v1_Alertmanager_spec_lifecycle_postStart_httpGet_httpHeaders(
                                name = '0', 
                                value = '0', )
                            ], 
                        path = '0', 
                        port = kubernetes.client.models.port.port(), 
                        scheme = '0', ), 
                    initial_delay_seconds = 56, 
                    period_seconds = 56, 
                    success_threshold = 56, 
                    tcp_socket = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_liveness_probe_tcp_socket.com_coreos_monitoring_v1_Alertmanager_spec_livenessProbe_tcpSocket(
                        host = '0', 
                        port = kubernetes.client.models.port.port(), ), 
                    termination_grace_period_seconds = 56, 
                    timeout_seconds = 56, ), 
                resources = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_resources.com_coreos_monitoring_v1_Alertmanager_spec_resources(
                    limits = {
                        'key' : None
                        }, 
                    requests = {
                        'key' : None
                        }, ), 
                security_context = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_security_context.com_coreos_monitoring_v1_Alertmanager_spec_securityContext(
                    allow_privilege_escalation = True, 
                    capabilities = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_security_context_capabilities.com_coreos_monitoring_v1_Alertmanager_spec_securityContext_capabilities(
                        add = [
                            '0'
                            ], 
                        drop = [
                            '0'
                            ], ), 
                    privileged = True, 
                    proc_mount = '0', 
                    read_only_root_filesystem = True, 
                    run_as_group = 56, 
                    run_as_non_root = True, 
                    run_as_user = 56, 
                    se_linux_options = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_security_context_se_linux_options.com_coreos_monitoring_v1_Alertmanager_spec_securityContext_seLinuxOptions(
                        level = '0', 
                        role = '0', 
                        type = '0', 
                        user = '0', ), 
                    seccomp_profile = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_security_context_seccomp_profile.com_coreos_monitoring_v1_Alertmanager_spec_securityContext_seccompProfile(
                        localhost_profile = '0', 
                        type = '0', ), 
                    windows_options = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_security_context_windows_options.com_coreos_monitoring_v1_Alertmanager_spec_securityContext_windowsOptions(
                        gmsa_credential_spec = '0', 
                        gmsa_credential_spec_name = '0', 
                        host_process = True, 
                        run_as_user_name = '0', ), ), 
                startup_probe = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_startup_probe.com_coreos_monitoring_v1_Alertmanager_spec_startupProbe(
                    exec = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_lifecycle_post_start_exec.com_coreos_monitoring_v1_Alertmanager_spec_lifecycle_postStart_exec(
                        command = [
                            '0'
                            ], ), 
                    failure_threshold = 56, 
                    grpc = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_liveness_probe_grpc.com_coreos_monitoring_v1_Alertmanager_spec_livenessProbe_grpc(
                        port = 56, 
                        service = '0', ), 
                    http_get = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_lifecycle_post_start_http_get.com_coreos_monitoring_v1_Alertmanager_spec_lifecycle_postStart_httpGet(
                        host = '0', 
                        http_headers = [
                            kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_lifecycle_post_start_http_get_http_headers.com_coreos_monitoring_v1_Alertmanager_spec_lifecycle_postStart_httpGet_httpHeaders(
                                name = '0', 
                                value = '0', )
                            ], 
                        path = '0', 
                        port = kubernetes.client.models.port.port(), 
                        scheme = '0', ), 
                    initial_delay_seconds = 56, 
                    period_seconds = 56, 
                    success_threshold = 56, 
                    tcp_socket = kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_liveness_probe_tcp_socket.com_coreos_monitoring_v1_Alertmanager_spec_livenessProbe_tcpSocket(
                        host = '0', 
                        port = kubernetes.client.models.port.port(), ), 
                    termination_grace_period_seconds = 56, 
                    timeout_seconds = 56, ), 
                stdin = True, 
                stdin_once = True, 
                termination_message_path = '0', 
                termination_message_policy = '0', 
                tty = True, 
                volume_devices = [
                    kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_volume_devices.com_coreos_monitoring_v1_Alertmanager_spec_volumeDevices(
                        device_path = '0', 
                        name = '0', )
                    ], 
                volume_mounts = [
                    kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_volume_mounts.com_coreos_monitoring_v1_Alertmanager_spec_volumeMounts(
                        mount_path = '0', 
                        mount_propagation = '0', 
                        name = '0', 
                        read_only = True, 
                        sub_path = '0', 
                        sub_path_expr = '0', )
                    ], 
                working_dir = '0'
            )
        else :
            return ComCoreosMonitoringV1AlertmanagerSpecContainers(
                name = '0',
        )

    def testComCoreosMonitoringV1AlertmanagerSpecContainers(self):
        """Test ComCoreosMonitoringV1AlertmanagerSpecContainers"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
