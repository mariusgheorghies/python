# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_flow_log import AwsK8sServicesEc2V1alpha1FlowLog  # noqa: E501
from kubernetes.client.rest import ApiException

class TestAwsK8sServicesEc2V1alpha1FlowLog(unittest.TestCase):
    """AwsK8sServicesEc2V1alpha1FlowLog unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test AwsK8sServicesEc2V1alpha1FlowLog
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_flow_log.AwsK8sServicesEc2V1alpha1FlowLog()  # noqa: E501
        if include_optional :
            return AwsK8sServicesEc2V1alpha1FlowLog(
                api_version = '0', 
                kind = '0', 
                metadata = kubernetes.client.models.v1/object_meta.v1.ObjectMeta(
                    annotations = {
                        'key' : '0'
                        }, 
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_grace_period_seconds = 56, 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    finalizers = [
                        '0'
                        ], 
                    generate_name = '0', 
                    generation = 56, 
                    labels = {
                        'key' : '0'
                        }, 
                    managed_fields = [
                        kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                            api_version = '0', 
                            fields_type = '0', 
                            fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                            manager = '0', 
                            operation = '0', 
                            subresource = '0', 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    name = '0', 
                    namespace = '0', 
                    owner_references = [
                        kubernetes.client.models.v1/owner_reference.v1.OwnerReference(
                            api_version = '0', 
                            block_owner_deletion = True, 
                            controller = True, 
                            kind = '0', 
                            name = '0', 
                            uid = '0', )
                        ], 
                    resource_version = '0', 
                    self_link = '0', 
                    uid = '0', ), 
                spec = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_flow_log_spec.aws_k8s_services_ec2_v1alpha1_FlowLog_spec(
                    deliver_logs_permission_arn = '0', 
                    destination_options = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_flow_log_spec_destination_options.aws_k8s_services_ec2_v1alpha1_FlowLog_spec_destinationOptions(
                        file_format = '0', 
                        hive_compatible_partitions = True, 
                        per_hour_partition = True, ), 
                    log_destination = '0', 
                    log_destination_type = '0', 
                    log_format = '0', 
                    log_group_name = '0', 
                    max_aggregation_interval = 56, 
                    resource_id = '0', 
                    resource_type = '0', 
                    tags = [
                        kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_dhcp_options_spec_tags.aws_k8s_services_ec2_v1alpha1_DHCPOptions_spec_tags(
                            key = '0', 
                            value = '0', )
                        ], 
                    traffic_type = '0', ), 
                status = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_flow_log_status.aws_k8s_services_ec2_v1alpha1_FlowLog_status(
                    ack_resource_metadata = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_dhcp_options_status_ack_resource_metadata.aws_k8s_services_ec2_v1alpha1_DHCPOptions_status_ackResourceMetadata(
                        arn = '0', 
                        owner_account_id = '0', 
                        region = '0', ), 
                    kubernetes.client_token = '0', 
                    conditions = [
                        kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_dhcp_options_status_conditions.aws_k8s_services_ec2_v1alpha1_DHCPOptions_status_conditions(
                            last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            message = '0', 
                            reason = '0', 
                            status = '0', 
                            type = '0', )
                        ], 
                    flow_log_id = '0', 
                    unsuccessful = [
                        kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_flow_log_status_unsuccessful.aws_k8s_services_ec2_v1alpha1_FlowLog_status_unsuccessful(
                            error = kubernetes.client.models.aws_k8s_services_ec2_v1alpha1_flow_log_status_error.aws_k8s_services_ec2_v1alpha1_FlowLog_status_error(
                                code = '0', 
                                message = '0', ), 
                            resource_id = '0', )
                        ], )
            )
        else :
            return AwsK8sServicesEc2V1alpha1FlowLog(
        )

    def testAwsK8sServicesEc2V1alpha1FlowLog(self):
        """Test AwsK8sServicesEc2V1alpha1FlowLog"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
