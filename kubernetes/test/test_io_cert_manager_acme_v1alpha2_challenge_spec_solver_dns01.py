# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.io_cert_manager_acme_v1alpha2_challenge_spec_solver_dns01 import IoCertManagerAcmeV1alpha2ChallengeSpecSolverDns01  # noqa: E501
from kubernetes.client.rest import ApiException

class TestIoCertManagerAcmeV1alpha2ChallengeSpecSolverDns01(unittest.TestCase):
    """IoCertManagerAcmeV1alpha2ChallengeSpecSolverDns01 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test IoCertManagerAcmeV1alpha2ChallengeSpecSolverDns01
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.io_cert_manager_acme_v1alpha2_challenge_spec_solver_dns01.IoCertManagerAcmeV1alpha2ChallengeSpecSolverDns01()  # noqa: E501
        if include_optional :
            return IoCertManagerAcmeV1alpha2ChallengeSpecSolverDns01(
                acmedns = kubernetes.client.models.io_cert_manager_acme_v1_challenge_spec_solver_dns01_acme_dns.io_cert_manager_acme_v1_Challenge_spec_solver_dns01_acmeDNS(
                    account_secret_ref = kubernetes.client.models.io_cert_manager_acme_v1_challenge_spec_solver_dns01_acme_dns_account_secret_ref.io_cert_manager_acme_v1_Challenge_spec_solver_dns01_acmeDNS_accountSecretRef(
                        key = '0', 
                        name = '0', ), 
                    host = '0', ), 
                akamai = kubernetes.client.models.io_cert_manager_acme_v1_challenge_spec_solver_dns01_akamai.io_cert_manager_acme_v1_Challenge_spec_solver_dns01_akamai(
                    access_token_secret_ref = kubernetes.client.models.io_cert_manager_acme_v1_challenge_spec_solver_dns01_acme_dns_account_secret_ref.io_cert_manager_acme_v1_Challenge_spec_solver_dns01_acmeDNS_accountSecretRef(
                        key = '0', 
                        name = '0', ), 
                    kubernetes.client_secret_secret_ref = kubernetes.client.models.io_cert_manager_acme_v1_challenge_spec_solver_dns01_acme_dns_account_secret_ref.io_cert_manager_acme_v1_Challenge_spec_solver_dns01_acmeDNS_accountSecretRef(
                        key = '0', 
                        name = '0', ), 
                    kubernetes.client_token_secret_ref = kubernetes.client.models.io_cert_manager_acme_v1_challenge_spec_solver_dns01_acme_dns_account_secret_ref.io_cert_manager_acme_v1_Challenge_spec_solver_dns01_acmeDNS_accountSecretRef(
                        key = '0', 
                        name = '0', ), 
                    service_consumer_domain = '0', ), 
                azuredns = kubernetes.client.models.io_cert_manager_acme_v1_challenge_spec_solver_dns01_azure_dns.io_cert_manager_acme_v1_Challenge_spec_solver_dns01_azureDNS(
                    kubernetes.client_id = '0', 
                    kubernetes.client_secret_secret_ref = kubernetes.client.models.io_cert_manager_acme_v1_challenge_spec_solver_dns01_azure_dns_client_secret_secret_ref.io_cert_manager_acme_v1_Challenge_spec_solver_dns01_azureDNS_clientSecretSecretRef(
                        key = '0', 
                        name = '0', ), 
                    environment = 'AzurePublicCloud', 
                    hosted_zone_name = '0', 
                    resource_group_name = '0', 
                    subscription_id = '0', 
                    tenant_id = '0', ), 
                clouddns = kubernetes.client.models.io_cert_manager_acme_v1_challenge_spec_solver_dns01_cloud_dns.io_cert_manager_acme_v1_Challenge_spec_solver_dns01_cloudDNS(
                    hosted_zone_name = '0', 
                    project = '0', 
                    service_account_secret_ref = kubernetes.client.models.io_cert_manager_acme_v1_challenge_spec_solver_dns01_acme_dns_account_secret_ref.io_cert_manager_acme_v1_Challenge_spec_solver_dns01_acmeDNS_accountSecretRef(
                        key = '0', 
                        name = '0', ), ), 
                cloudflare = kubernetes.client.models.io_cert_manager_acme_v1_challenge_spec_solver_dns01_cloudflare.io_cert_manager_acme_v1_Challenge_spec_solver_dns01_cloudflare(
                    api_key_secret_ref = kubernetes.client.models.io_cert_manager_acme_v1_challenge_spec_solver_dns01_cloudflare_api_key_secret_ref.io_cert_manager_acme_v1_Challenge_spec_solver_dns01_cloudflare_apiKeySecretRef(
                        key = '0', 
                        name = '0', ), 
                    api_token_secret_ref = kubernetes.client.models.io_cert_manager_acme_v1_challenge_spec_solver_dns01_cloudflare_api_token_secret_ref.io_cert_manager_acme_v1_Challenge_spec_solver_dns01_cloudflare_apiTokenSecretRef(
                        key = '0', 
                        name = '0', ), 
                    email = '0', ), 
                cname_strategy = 'None', 
                digitalocean = kubernetes.client.models.io_cert_manager_acme_v1_challenge_spec_solver_dns01_digitalocean.io_cert_manager_acme_v1_Challenge_spec_solver_dns01_digitalocean(
                    token_secret_ref = kubernetes.client.models.io_cert_manager_acme_v1_challenge_spec_solver_dns01_acme_dns_account_secret_ref.io_cert_manager_acme_v1_Challenge_spec_solver_dns01_acmeDNS_accountSecretRef(
                        key = '0', 
                        name = '0', ), ), 
                rfc2136 = kubernetes.client.models.io_cert_manager_acme_v1_challenge_spec_solver_dns01_rfc2136.io_cert_manager_acme_v1_Challenge_spec_solver_dns01_rfc2136(
                    nameserver = '0', 
                    tsig_algorithm = '0', 
                    tsig_key_name = '0', 
                    tsig_secret_secret_ref = kubernetes.client.models.io_cert_manager_acme_v1_challenge_spec_solver_dns01_rfc2136_tsig_secret_secret_ref.io_cert_manager_acme_v1_Challenge_spec_solver_dns01_rfc2136_tsigSecretSecretRef(
                        key = '0', 
                        name = '0', ), ), 
                route53 = kubernetes.client.models.io_cert_manager_acme_v1_challenge_spec_solver_dns01_route53.io_cert_manager_acme_v1_Challenge_spec_solver_dns01_route53(
                    access_key_id = '0', 
                    hosted_zone_id = '0', 
                    region = '0', 
                    role = '0', 
                    secret_access_key_secret_ref = kubernetes.client.models.io_cert_manager_acme_v1_challenge_spec_solver_dns01_route53_secret_access_key_secret_ref.io_cert_manager_acme_v1_Challenge_spec_solver_dns01_route53_secretAccessKeySecretRef(
                        key = '0', 
                        name = '0', ), ), 
                webhook = kubernetes.client.models.io_cert_manager_acme_v1_challenge_spec_solver_dns01_webhook.io_cert_manager_acme_v1_Challenge_spec_solver_dns01_webhook(
                    config = kubernetes.client.models.config.config(), 
                    group_name = '0', 
                    solver_name = '0', )
            )
        else :
            return IoCertManagerAcmeV1alpha2ChallengeSpecSolverDns01(
        )

    def testIoCertManagerAcmeV1alpha2ChallengeSpecSolverDns01(self):
        """Test IoCertManagerAcmeV1alpha2ChallengeSpecSolverDns01"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
