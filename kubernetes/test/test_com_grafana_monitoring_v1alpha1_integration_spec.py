# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.com_grafana_monitoring_v1alpha1_integration_spec import ComGrafanaMonitoringV1alpha1IntegrationSpec  # noqa: E501
from kubernetes.client.rest import ApiException

class TestComGrafanaMonitoringV1alpha1IntegrationSpec(unittest.TestCase):
    """ComGrafanaMonitoringV1alpha1IntegrationSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ComGrafanaMonitoringV1alpha1IntegrationSpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.com_grafana_monitoring_v1alpha1_integration_spec.ComGrafanaMonitoringV1alpha1IntegrationSpec()  # noqa: E501
        if include_optional :
            return ComGrafanaMonitoringV1alpha1IntegrationSpec(
                config = kubernetes.client.models.config.config(), 
                config_maps = [
                    kubernetes.client.models.com_grafana_monitoring_v1alpha1_integration_spec_config_maps.com_grafana_monitoring_v1alpha1_Integration_spec_configMaps(
                        key = '0', 
                        name = '0', 
                        optional = True, )
                    ], 
                name = '0', 
                secrets = [
                    kubernetes.client.models.com_grafana_monitoring_v1alpha1_integration_spec_secrets.com_grafana_monitoring_v1alpha1_Integration_spec_secrets(
                        key = '0', 
                        name = '0', 
                        optional = True, )
                    ], 
                type = kubernetes.client.models.com_grafana_monitoring_v1alpha1_integration_spec_type.com_grafana_monitoring_v1alpha1_Integration_spec_type(
                    all_nodes = True, 
                    unique = True, ), 
                volume_mounts = [
                    kubernetes.client.models.com_coreos_monitoring_v1_alertmanager_spec_volume_mounts.com_coreos_monitoring_v1_Alertmanager_spec_volumeMounts(
                        mount_path = '0', 
                        mount_propagation = '0', 
                        name = '0', 
                        read_only = True, 
                        sub_path = '0', 
                        sub_path_expr = '0', )
                    ], 
                volumes = [
                    kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_volumes.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_volumes(
                        aws_elastic_block_store = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_aws_elastic_block_store.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_awsElasticBlockStore(
                            fs_type = '0', 
                            partition = 56, 
                            read_only = True, 
                            volume_id = '0', ), 
                        azure_disk = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_azure_disk.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_azureDisk(
                            caching_mode = '0', 
                            disk_name = '0', 
                            disk_uri = '0', 
                            fs_type = '0', 
                            kind = '0', 
                            read_only = True, ), 
                        azure_file = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_azure_file.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_azureFile(
                            read_only = True, 
                            secret_name = '0', 
                            share_name = '0', ), 
                        cephfs = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_cephfs.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_cephfs(
                            monitors = [
                                '0'
                                ], 
                            path = '0', 
                            read_only = True, 
                            secret_file = '0', 
                            secret_ref = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_cephfs_secret_ref.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_cephfs_secretRef(
                                name = '0', ), 
                            user = '0', ), 
                        cinder = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_cinder.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_cinder(
                            fs_type = '0', 
                            read_only = True, 
                            volume_id = '0', ), 
                        config_map = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_config_map.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_configMap(
                            default_mode = 56, 
                            items = [
                                kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_config_map_items.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_configMap_items(
                                    key = '0', 
                                    mode = 56, 
                                    path = '0', )
                                ], 
                            name = '0', 
                            optional = True, ), 
                        csi = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_csi.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_csi(
                            driver = '0', 
                            fs_type = '0', 
                            node_publish_secret_ref = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_csi_node_publish_secret_ref.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_csi_nodePublishSecretRef(
                                name = '0', ), 
                            read_only = True, 
                            volume_attributes = {
                                'key' : '0'
                                }, ), 
                        downward_api = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_downward_api.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_downwardAPI(
                            default_mode = 56, ), 
                        empty_dir = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_empty_dir.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_emptyDir(
                            medium = '0', 
                            size_limit = kubernetes.client.models.size_limit.sizeLimit(), ), 
                        ephemeral = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_ephemeral.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_ephemeral(
                            volume_claim_template = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_storage_ephemeral_volume_claim_template.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_storage_ephemeral_volumeClaimTemplate(
                                metadata = kubernetes.client.models.metadata.metadata(), 
                                spec = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_storage_ephemeral_volume_claim_template_spec.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_storage_ephemeral_volumeClaimTemplate_spec(
                                    access_modes = [
                                        '0'
                                        ], 
                                    data_source = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_storage_ephemeral_volume_claim_template_spec_data_source.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_storage_ephemeral_volumeClaimTemplate_spec_dataSource(
                                        api_group = '0', 
                                        kind = '0', 
                                        name = '0', ), 
                                    data_source_ref = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_storage_ephemeral_volume_claim_template_spec_data_source_ref.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_storage_ephemeral_volumeClaimTemplate_spec_dataSourceRef(
                                        api_group = '0', 
                                        kind = '0', 
                                        name = '0', 
                                        namespace = '0', ), 
                                    resources = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_storage_ephemeral_volume_claim_template_spec_resources.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_storage_ephemeral_volumeClaimTemplate_spec_resources(
                                        claims = [
                                            kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_resources_claims.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_resources_claims(
                                                name = '0', )
                                            ], 
                                        limits = {
                                            'key' : None
                                            }, 
                                        requests = {
                                            'key' : None
                                            }, ), 
                                    selector = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_storage_ephemeral_volume_claim_template_spec_selector.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_storage_ephemeral_volumeClaimTemplate_spec_selector(
                                        match_expressions = [
                                            kubernetes.client.models.aws_k8s_networking_v1alpha1_policy_endpoint_spec_pod_selector_match_expressions.aws_k8s_networking_v1alpha1_PolicyEndpoint_spec_podSelector_matchExpressions(
                                                key = '0', 
                                                operator = '0', 
                                                values = [
                                                    '0'
                                                    ], )
                                            ], 
                                        match_labels = {
                                            'key' : '0'
                                            }, ), 
                                    storage_class_name = '0', 
                                    volume_mode = '0', 
                                    volume_name = '0', ), ), ), 
                        fc = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_fc.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_fc(
                            fs_type = '0', 
                            lun = 56, 
                            read_only = True, 
                            target_ww_ns = [
                                '0'
                                ], 
                            wwids = [
                                '0'
                                ], ), 
                        flex_volume = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_flex_volume.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_flexVolume(
                            driver = '0', 
                            fs_type = '0', 
                            options = {
                                'key' : '0'
                                }, 
                            read_only = True, ), 
                        flocker = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_flocker.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_flocker(
                            dataset_name = '0', 
                            dataset_uuid = '0', ), 
                        gce_persistent_disk = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_gce_persistent_disk.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_gcePersistentDisk(
                            fs_type = '0', 
                            partition = 56, 
                            pd_name = '0', 
                            read_only = True, ), 
                        git_repo = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_git_repo.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_gitRepo(
                            directory = '0', 
                            repository = '0', 
                            revision = '0', ), 
                        glusterfs = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_glusterfs.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_glusterfs(
                            endpoints = '0', 
                            path = '0', 
                            read_only = True, ), 
                        host_path = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_host_path.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_hostPath(
                            path = '0', 
                            type = '0', ), 
                        iscsi = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_iscsi.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_iscsi(
                            chap_auth_discovery = True, 
                            chap_auth_session = True, 
                            fs_type = '0', 
                            initiator_name = '0', 
                            iqn = '0', 
                            iscsi_interface = '0', 
                            lun = 56, 
                            portals = [
                                '0'
                                ], 
                            read_only = True, 
                            target_portal = '0', ), 
                        name = '0', 
                        nfs = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_nfs.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_nfs(
                            path = '0', 
                            read_only = True, 
                            server = '0', ), 
                        persistent_volume_claim = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_persistent_volume_claim.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_persistentVolumeClaim(
                            claim_name = '0', 
                            read_only = True, ), 
                        photon_persistent_disk = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_photon_persistent_disk.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_photonPersistentDisk(
                            fs_type = '0', 
                            pd_id = '0', ), 
                        portworx_volume = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_portworx_volume.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_portworxVolume(
                            fs_type = '0', 
                            read_only = True, 
                            volume_id = '0', ), 
                        projected = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_projected.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_projected(
                            default_mode = 56, 
                            sources = [
                                kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_projected_sources.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_projected_sources(
                                    secret = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_projected_secret.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_projected_secret(
                                        name = '0', 
                                        optional = True, ), 
                                    service_account_token = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_projected_service_account_token.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_projected_serviceAccountToken(
                                        audience = '0', 
                                        expiration_seconds = 56, 
                                        path = '0', ), )
                                ], ), 
                        quobyte = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_quobyte.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_quobyte(
                            group = '0', 
                            read_only = True, 
                            registry = '0', 
                            tenant = '0', 
                            user = '0', 
                            volume = '0', ), 
                        rbd = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_rbd.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_rbd(
                            fs_type = '0', 
                            image = '0', 
                            keyring = '0', 
                            monitors = [
                                '0'
                                ], 
                            pool = '0', 
                            read_only = True, 
                            user = '0', ), 
                        scale_io = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_scale_io.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_scaleIO(
                            fs_type = '0', 
                            gateway = '0', 
                            protection_domain = '0', 
                            read_only = True, 
                            secret_ref = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_scale_io_secret_ref.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_scaleIO_secretRef(
                                name = '0', ), 
                            ssl_enabled = True, 
                            storage_mode = '0', 
                            storage_pool = '0', 
                            system = '0', 
                            volume_name = '0', ), 
                        secret = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_secret.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_secret(
                            default_mode = 56, 
                            optional = True, 
                            secret_name = '0', ), 
                        storageos = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_storageos.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_storageos(
                            fs_type = '0', 
                            read_only = True, 
                            volume_name = '0', 
                            volume_namespace = '0', ), 
                        vsphere_volume = kubernetes.client.models.com_grafana_monitoring_v1alpha1_grafana_agent_spec_vsphere_volume.com_grafana_monitoring_v1alpha1_GrafanaAgent_spec_vsphereVolume(
                            fs_type = '0', 
                            storage_policy_id = '0', 
                            storage_policy_name = '0', 
                            volume_path = '0', ), )
                    ]
            )
        else :
            return ComGrafanaMonitoringV1alpha1IntegrationSpec(
                config = kubernetes.client.models.config.config(),
                name = '0',
                type = kubernetes.client.models.com_grafana_monitoring_v1alpha1_integration_spec_type.com_grafana_monitoring_v1alpha1_Integration_spec_type(
                    all_nodes = True, 
                    unique = True, ),
        )

    def testComGrafanaMonitoringV1alpha1IntegrationSpec(self):
        """Test ComGrafanaMonitoringV1alpha1IntegrationSpec"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
