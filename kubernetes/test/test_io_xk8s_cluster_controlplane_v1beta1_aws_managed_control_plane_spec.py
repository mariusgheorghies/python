# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.io_xk8s_cluster_controlplane_v1beta1_aws_managed_control_plane_spec import IoXK8sClusterControlplaneV1beta1AWSManagedControlPlaneSpec  # noqa: E501
from kubernetes.client.rest import ApiException

class TestIoXK8sClusterControlplaneV1beta1AWSManagedControlPlaneSpec(unittest.TestCase):
    """IoXK8sClusterControlplaneV1beta1AWSManagedControlPlaneSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test IoXK8sClusterControlplaneV1beta1AWSManagedControlPlaneSpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.io_xk8s_cluster_controlplane_v1beta1_aws_managed_control_plane_spec.IoXK8sClusterControlplaneV1beta1AWSManagedControlPlaneSpec()  # noqa: E501
        if include_optional :
            return IoXK8sClusterControlplaneV1beta1AWSManagedControlPlaneSpec(
                additional_tags = {
                    'key' : '0'
                    }, 
                addons = [
                    kubernetes.client.models.io_x_k8s_cluster_controlplane_v1beta1_aws_managed_control_plane_spec_addons.io_x_k8s_cluster_controlplane_v1beta1_AWSManagedControlPlane_spec_addons(
                        conflict_resolution = 'overwrite', 
                        name = '01', 
                        service_account_role_arn = '0', 
                        version = '0', )
                    ], 
                associate_oidc_provider = True, 
                bastion = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_bastion.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_bastion(
                    allowed_cidr_blocks = [
                        '0'
                        ], 
                    ami = '0', 
                    disable_ingress_rules = True, 
                    enabled = True, 
                    instance_type = '0', ), 
                control_plane_endpoint = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_control_plane_endpoint.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_controlPlaneEndpoint(
                    host = '0', 
                    port = 56, ), 
                disable_vpccni = True, 
                eks_cluster_name = '0', 
                encryption_config = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_encryption_config.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_encryptionConfig(
                    provider = '0', 
                    resources = [
                        '0'
                        ], ), 
                endpoint_access = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_endpoint_access.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_endpointAccess(
                    private = True, 
                    public = True, 
                    public_cid_rs = [
                        '0'
                        ], ), 
                iam_authenticator_config = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1beta1_aws_managed_control_plane_spec_iam_authenticator_config.io_x_k8s_cluster_controlplane_v1beta1_AWSManagedControlPlane_spec_iamAuthenticatorConfig(
                    map_roles = [
                        kubernetes.client.models.io_x_k8s_cluster_controlplane_v1beta1_aws_managed_control_plane_spec_iam_authenticator_config_map_roles.io_x_k8s_cluster_controlplane_v1beta1_AWSManagedControlPlane_spec_iamAuthenticatorConfig_mapRoles(
                            groups = [
                                '0'
                                ], 
                            rolearn = '0123456789101112131415161718192021222324252627282930', 
                            username = '0', )
                        ], 
                    map_users = [
                        kubernetes.client.models.io_x_k8s_cluster_controlplane_v1beta1_aws_managed_control_plane_spec_iam_authenticator_config_map_users.io_x_k8s_cluster_controlplane_v1beta1_AWSManagedControlPlane_spec_iamAuthenticatorConfig_mapUsers(
                            groups = [
                                '0'
                                ], 
                            userarn = '0123456789101112131415161718192021222324252627282930', 
                            username = '0', )
                        ], ), 
                identity_ref = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_identity_ref.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_identityRef(
                    kind = 'AWSClusterControllerIdentity', 
                    name = '0', ), 
                image_lookup_base_os = '0', 
                image_lookup_format = '0', 
                image_lookup_org = '0', 
                logging = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_logging.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_logging(
                    api_server = True, 
                    audit = True, 
                    authenticator = True, 
                    controller_manager = True, 
                    scheduler = True, ), 
                network = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_network_spec.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_networkSpec(
                    cni = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_network_spec_cni.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_networkSpec_cni(
                        cni_ingress_rules = [
                            kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_network_spec_cni_cni_ingress_rules.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_networkSpec_cni_cniIngressRules(
                                description = '0', 
                                from_port = 56, 
                                protocol = '0', 
                                to_port = 56, )
                            ], ), 
                    security_group_overrides = {
                        'key' : '0'
                        }, 
                    subnets = [
                        kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_network_spec_subnets.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_networkSpec_subnets(
                            availability_zone = '0', 
                            cidr_block = '0', 
                            id = '0', 
                            is_public = True, 
                            nat_gateway_id = '0', 
                            route_table_id = '0', 
                            tags = {
                                'key' : '0'
                                }, )
                        ], 
                    vpc = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha3_aws_managed_control_plane_spec_network_spec_vpc.io_x_k8s_cluster_controlplane_v1alpha3_AWSManagedControlPlane_spec_networkSpec_vpc(
                        availability_zone_selection = 'Ordered', 
                        availability_zone_usage_limit = 1, 
                        cidr_block = '0', 
                        id = '0', 
                        internet_gateway_id = '0', ), ), 
                oidc_identity_provider_config = kubernetes.client.models.io_x_k8s_cluster_controlplane_v1alpha4_aws_managed_control_plane_spec_oidc_identity_provider_config.io_x_k8s_cluster_controlplane_v1alpha4_AWSManagedControlPlane_spec_oidcIdentityProviderConfig(
                    kubernetes.client_id = '0', 
                    groups_claim = '0', 
                    groups_prefix = '0', 
                    identity_provider_config_name = '0', 
                    issuer_url = '0', 
                    required_claims = {
                        'key' : '0'
                        }, 
                    tags = {
                        'key' : '0'
                        }, 
                    username_claim = '0', 
                    username_prefix = '0', ), 
                region = '0', 
                role_additional_policies = [
                    '0'
                    ], 
                role_name = '01', 
                secondary_cidr_block = '0', 
                ssh_key_name = '0', 
                token_method = 'iam-authenticator', 
                version = 'a'
            )
        else :
            return IoXK8sClusterControlplaneV1beta1AWSManagedControlPlaneSpec(
        )

    def testIoXK8sClusterControlplaneV1beta1AWSManagedControlPlaneSpec(self):
        """Test IoXK8sClusterControlplaneV1beta1AWSManagedControlPlaneSpec"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
