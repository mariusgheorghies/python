# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.io_questdb_questdb_v1alpha1_quest_db import IoQuestdbQuestdbV1alpha1QuestDB  # noqa: E501
from kubernetes.client.rest import ApiException

class TestIoQuestdbQuestdbV1alpha1QuestDB(unittest.TestCase):
    """IoQuestdbQuestdbV1alpha1QuestDB unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test IoQuestdbQuestdbV1alpha1QuestDB
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.io_questdb_questdb_v1alpha1_quest_db.IoQuestdbQuestdbV1alpha1QuestDB()  # noqa: E501
        if include_optional :
            return IoQuestdbQuestdbV1alpha1QuestDB(
                api_version = '0', 
                kind = '0', 
                metadata = kubernetes.client.models.v1/object_meta.v1.ObjectMeta(
                    annotations = {
                        'key' : '0'
                        }, 
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_grace_period_seconds = 56, 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    finalizers = [
                        '0'
                        ], 
                    generate_name = '0', 
                    generation = 56, 
                    labels = {
                        'key' : '0'
                        }, 
                    managed_fields = [
                        kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                            api_version = '0', 
                            fields_type = '0', 
                            fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                            manager = '0', 
                            operation = '0', 
                            subresource = '0', 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    name = '0', 
                    namespace = '0', 
                    owner_references = [
                        kubernetes.client.models.v1/owner_reference.v1.OwnerReference(
                            api_version = '0', 
                            block_owner_deletion = True, 
                            controller = True, 
                            kind = '0', 
                            name = '0', 
                            uid = '0', )
                        ], 
                    resource_version = '0', 
                    self_link = '0', 
                    uid = '0', ), 
                spec = kubernetes.client.models.io_questdb_questdb_v1alpha1_quest_db_spec.io_questdb_questdb_v1alpha1_QuestDB_spec(
                    aws = kubernetes.client.models.io_questdb_questdb_v1alpha1_quest_db_spec_aws.io_questdb_questdb_v1alpha1_QuestDB_spec_aws(
                        eks_ca = '0', 
                        eks_url = '0', 
                        iam_instance_profile_arn = '0', 
                        image_id = '0', 
                        key_name = '0', 
                        region = '0', 
                        region_az = '0', 
                        security_group_ids = [
                            '0'
                            ], 
                        subnet_id = '0', ), 
                    cluster_name = '0', 
                    config = kubernetes.client.models.io_questdb_questdb_v1alpha1_quest_db_spec_config.io_questdb_questdb_v1alpha1_QuestDB_spec_config(
                        cairo = kubernetes.client.models.io_questdb_questdb_v1alpha1_quest_db_spec_config_cairo.io_questdb_questdb_v1alpha1_QuestDB_spec_config_cairo(
                            commit_lag = 56, 
                            max_uncommitted_rows = 56, 
                            out_of_order_column_memory_size = '0', 
                            table_writer_append_page_size = '0', ), 
                        http = kubernetes.client.models.io_questdb_questdb_v1alpha1_quest_db_spec_config_http.io_questdb_questdb_v1alpha1_QuestDB_spec_config_http(
                            cache_block_count = 56, 
                            cache_enabled = True, 
                            cache_row_count = 56, 
                            connection_limit = 56, 
                            read_only_mode = True, 
                            worker_count = 56, ), 
                        ilp = kubernetes.client.models.io_questdb_questdb_v1alpha1_quest_db_spec_config_ilp.io_questdb_questdb_v1alpha1_QuestDB_spec_config_ilp(
                            tcp_commit_interval_default = 56, 
                            tcp_commit_interval_fraction = '0', 
                            tcp_default_partition_by = '0', 
                            tcp_disconnect_on_error = True, 
                            tcp_io_worker_count = 56, 
                            tcp_net_connection_limit = 56, 
                            tcp_writer_worker_count = 56, ), 
                        postgres = kubernetes.client.models.io_questdb_questdb_v1alpha1_quest_db_spec_config_postgres.io_questdb_questdb_v1alpha1_QuestDB_spec_config_postgres(
                            connection_limit = 56, 
                            insert_cache_block_count = 56, 
                            insert_cache_enabled = True, 
                            insert_cache_row_count = 56, 
                            select_cache_block_count = 56, 
                            select_cache_enabled = True, 
                            select_cache_row_count = 56, 
                            update_cache_block_count = 56, 
                            update_cache_enabled = True, 
                            update_cache_row_count = 56, 
                            worker_count = 56, ), 
                        query_timeout_seconds = 56, 
                        shared_worker_count = 56, ), 
                    container = kubernetes.client.models.io_questdb_questdb_v1alpha1_quest_db_spec_container.io_questdb_questdb_v1alpha1_QuestDB_spec_container(
                        name = '0', 
                        registry = '0', 
                        tag = '0', ), 
                    db_name = '0', 
                    instance_type = '0', 
                    instance_uuid = '0', 
                    monitoring_enabled = True, 
                    org_id = '0', 
                    single_tenant = True, 
                    subdomain = '0', 
                    tenant_app = True, 
                    volume = kubernetes.client.models.io_questdb_questdb_v1alpha1_quest_db_spec_volume.io_questdb_questdb_v1alpha1_QuestDB_spec_volume(
                        encrypted = True, 
                        iops = 56, 
                        size = kubernetes.client.models.size.size(), 
                        throughput = 56, 
                        type = '0', ), 
                    volume_uuid = '0', ), 
                status = kubernetes.client.models.io_questdb_questdb_v1alpha1_quest_db_status.io_questdb_questdb_v1alpha1_QuestDB_status(
                    conditions = [
                        kubernetes.client.models.io_questdb_crd_v1alpha1_quest_db_status_conditions.io_questdb_crd_v1alpha1_QuestDB_status_conditions(
                            last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            message = '0', 
                            observed_generation = 0, 
                            reason = 'a', 
                            status = 'True', 
                            type = 'a', )
                        ], 
                    dns_ready = True, 
                    node_ip = '0', 
                    node_ready = True, )
            )
        else :
            return IoQuestdbQuestdbV1alpha1QuestDB(
        )

    def testIoQuestdbQuestdbV1alpha1QuestDB(self):
        """Test IoQuestdbQuestdbV1alpha1QuestDB"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
