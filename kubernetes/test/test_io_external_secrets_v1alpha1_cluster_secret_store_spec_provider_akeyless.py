# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.io_external_secrets_v1alpha1_cluster_secret_store_spec_provider_akeyless import IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless  # noqa: E501
from kubernetes.client.rest import ApiException

class TestIoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless(unittest.TestCase):
    """IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.io_external_secrets_v1alpha1_cluster_secret_store_spec_provider_akeyless.IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless()  # noqa: E501
        if include_optional :
            return IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless(
                akeyless_gw_api_url = '0', 
                auth_secret_ref = kubernetes.client.models.io_external_secrets_v1alpha1_cluster_secret_store_spec_provider_akeyless_auth_secret_ref.io_external_secrets_v1alpha1_ClusterSecretStore_spec_provider_akeyless_authSecretRef(
                    kubernetes_auth = kubernetes.client.models.io_external_secrets_v1alpha1_cluster_secret_store_spec_provider_akeyless_auth_secret_ref_kubernetes_auth.io_external_secrets_v1alpha1_ClusterSecretStore_spec_provider_akeyless_authSecretRef_kubernetesAuth(
                        access_id = '0', 
                        k8s_conf_name = '0', 
                        secret_ref = kubernetes.client.models.io_external_secrets_v1alpha1_cluster_secret_store_spec_provider_akeyless_auth_secret_ref_kubernetes_auth_secret_ref.io_external_secrets_v1alpha1_ClusterSecretStore_spec_provider_akeyless_authSecretRef_kubernetesAuth_secretRef(
                            key = '0', 
                            name = '0', 
                            namespace = '0', ), 
                        service_account_ref = kubernetes.client.models.io_external_secrets_v1alpha1_cluster_secret_store_spec_provider_akeyless_auth_secret_ref_kubernetes_auth_service_account_ref.io_external_secrets_v1alpha1_ClusterSecretStore_spec_provider_akeyless_authSecretRef_kubernetesAuth_serviceAccountRef(
                            audiences = [
                                '0'
                                ], 
                            name = '0', 
                            namespace = '0', ), ), 
                    secret_ref = kubernetes.client.models.io_external_secrets_v1alpha1_cluster_secret_store_spec_provider_akeyless_auth_secret_ref_secret_ref.io_external_secrets_v1alpha1_ClusterSecretStore_spec_provider_akeyless_authSecretRef_secretRef(
                        access_id = kubernetes.client.models.io_external_secrets_v1alpha1_cluster_secret_store_spec_provider_akeyless_auth_secret_ref_secret_ref_access_id.io_external_secrets_v1alpha1_ClusterSecretStore_spec_provider_akeyless_authSecretRef_secretRef_accessID(
                            key = '0', 
                            name = '0', 
                            namespace = '0', ), 
                        access_type = kubernetes.client.models.io_external_secrets_v1alpha1_cluster_secret_store_spec_provider_akeyless_auth_secret_ref_secret_ref_access_type.io_external_secrets_v1alpha1_ClusterSecretStore_spec_provider_akeyless_authSecretRef_secretRef_accessType(
                            key = '0', 
                            name = '0', 
                            namespace = '0', ), 
                        access_type_param = kubernetes.client.models.io_external_secrets_v1alpha1_cluster_secret_store_spec_provider_akeyless_auth_secret_ref_secret_ref_access_type.io_external_secrets_v1alpha1_ClusterSecretStore_spec_provider_akeyless_authSecretRef_secretRef_accessType(
                            key = '0', 
                            name = '0', 
                            namespace = '0', ), ), ), 
                ca_bundle = 'YQ==', 
                ca_provider = kubernetes.client.models.io_external_secrets_v1alpha1_cluster_secret_store_spec_provider_akeyless_ca_provider.io_external_secrets_v1alpha1_ClusterSecretStore_spec_provider_akeyless_caProvider(
                    key = '0', 
                    name = '0', 
                    namespace = '0', 
                    type = 'Secret', )
            )
        else :
            return IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless(
                akeyless_gw_api_url = '0',
                auth_secret_ref = kubernetes.client.models.io_external_secrets_v1alpha1_cluster_secret_store_spec_provider_akeyless_auth_secret_ref.io_external_secrets_v1alpha1_ClusterSecretStore_spec_provider_akeyless_authSecretRef(
                    kubernetes_auth = kubernetes.client.models.io_external_secrets_v1alpha1_cluster_secret_store_spec_provider_akeyless_auth_secret_ref_kubernetes_auth.io_external_secrets_v1alpha1_ClusterSecretStore_spec_provider_akeyless_authSecretRef_kubernetesAuth(
                        access_id = '0', 
                        k8s_conf_name = '0', 
                        secret_ref = kubernetes.client.models.io_external_secrets_v1alpha1_cluster_secret_store_spec_provider_akeyless_auth_secret_ref_kubernetes_auth_secret_ref.io_external_secrets_v1alpha1_ClusterSecretStore_spec_provider_akeyless_authSecretRef_kubernetesAuth_secretRef(
                            key = '0', 
                            name = '0', 
                            namespace = '0', ), 
                        service_account_ref = kubernetes.client.models.io_external_secrets_v1alpha1_cluster_secret_store_spec_provider_akeyless_auth_secret_ref_kubernetes_auth_service_account_ref.io_external_secrets_v1alpha1_ClusterSecretStore_spec_provider_akeyless_authSecretRef_kubernetesAuth_serviceAccountRef(
                            audiences = [
                                '0'
                                ], 
                            name = '0', 
                            namespace = '0', ), ), 
                    secret_ref = kubernetes.client.models.io_external_secrets_v1alpha1_cluster_secret_store_spec_provider_akeyless_auth_secret_ref_secret_ref.io_external_secrets_v1alpha1_ClusterSecretStore_spec_provider_akeyless_authSecretRef_secretRef(
                        access_id = kubernetes.client.models.io_external_secrets_v1alpha1_cluster_secret_store_spec_provider_akeyless_auth_secret_ref_secret_ref_access_id.io_external_secrets_v1alpha1_ClusterSecretStore_spec_provider_akeyless_authSecretRef_secretRef_accessID(
                            key = '0', 
                            name = '0', 
                            namespace = '0', ), 
                        access_type = kubernetes.client.models.io_external_secrets_v1alpha1_cluster_secret_store_spec_provider_akeyless_auth_secret_ref_secret_ref_access_type.io_external_secrets_v1alpha1_ClusterSecretStore_spec_provider_akeyless_authSecretRef_secretRef_accessType(
                            key = '0', 
                            name = '0', 
                            namespace = '0', ), 
                        access_type_param = kubernetes.client.models.io_external_secrets_v1alpha1_cluster_secret_store_spec_provider_akeyless_auth_secret_ref_secret_ref_access_type.io_external_secrets_v1alpha1_ClusterSecretStore_spec_provider_akeyless_authSecretRef_secretRef_accessType(
                            key = '0', 
                            name = '0', 
                            namespace = '0', ), ), ),
        )

    def testIoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless(self):
        """Test IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
