# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.com_coreos_monitoring_v1_probe_spec import ComCoreosMonitoringV1ProbeSpec  # noqa: E501
from kubernetes.client.rest import ApiException

class TestComCoreosMonitoringV1ProbeSpec(unittest.TestCase):
    """ComCoreosMonitoringV1ProbeSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ComCoreosMonitoringV1ProbeSpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.com_coreos_monitoring_v1_probe_spec.ComCoreosMonitoringV1ProbeSpec()  # noqa: E501
        if include_optional :
            return ComCoreosMonitoringV1ProbeSpec(
                authorization = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_authorization.com_coreos_monitoring_v1_PodMonitor_spec_authorization(
                    credentials = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_authorization_credentials.com_coreos_monitoring_v1_PodMonitor_spec_authorization_credentials(
                        key = '0', 
                        name = '0', 
                        optional = True, ), 
                    type = '0', ), 
                basic_auth = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_basic_auth.com_coreos_monitoring_v1_PodMonitor_spec_basicAuth(
                    password = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_basic_auth_password.com_coreos_monitoring_v1_PodMonitor_spec_basicAuth_password(
                        key = '0', 
                        name = '0', 
                        optional = True, ), 
                    username = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_basic_auth_username.com_coreos_monitoring_v1_PodMonitor_spec_basicAuth_username(
                        key = '0', 
                        name = '0', 
                        optional = True, ), ), 
                bearer_token_secret = kubernetes.client.models.com_coreos_monitoring_v1_probe_spec_bearer_token_secret.com_coreos_monitoring_v1_Probe_spec_bearerTokenSecret(
                    key = '0', 
                    name = '0', 
                    optional = True, ), 
                interval = 'a', 
                job_name = '0', 
                label_limit = 56, 
                label_name_length_limit = 56, 
                label_value_length_limit = 56, 
                metric_relabelings = [
                    kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_metric_relabelings.com_coreos_monitoring_v1_PodMonitor_spec_metricRelabelings(
                        action = 'replace', 
                        modulus = 56, 
                        regex = '0', 
                        replacement = '0', 
                        separator = '0', 
                        source_labels = [
                            'a'
                            ], 
                        target_label = '0', )
                    ], 
                module = '0', 
                oauth2 = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_oauth2.com_coreos_monitoring_v1_PodMonitor_spec_oauth2(
                    kubernetes.client_id = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_oauth2_client_id.com_coreos_monitoring_v1_PodMonitor_spec_oauth2_clientId(
                        config_map = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_oauth2_client_id_config_map.com_coreos_monitoring_v1_PodMonitor_spec_oauth2_clientId_configMap(
                            key = '0', 
                            name = '0', 
                            optional = True, ), 
                        secret = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_oauth2_client_id_secret.com_coreos_monitoring_v1_PodMonitor_spec_oauth2_clientId_secret(
                            key = '0', 
                            name = '0', 
                            optional = True, ), ), 
                    kubernetes.client_secret = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_oauth2_client_secret.com_coreos_monitoring_v1_PodMonitor_spec_oauth2_clientSecret(
                        key = '0', 
                        name = '0', 
                        optional = True, ), 
                    endpoint_params = {
                        'key' : '0'
                        }, 
                    scopes = [
                        '0'
                        ], 
                    token_url = '0', ), 
                prober = kubernetes.client.models.com_coreos_monitoring_v1_probe_spec_prober.com_coreos_monitoring_v1_Probe_spec_prober(
                    path = '0', 
                    proxy_url = '0', 
                    scheme = '0', 
                    url = '0', ), 
                sample_limit = 56, 
                scrape_timeout = 'a', 
                target_limit = 56, 
                targets = kubernetes.client.models.com_coreos_monitoring_v1_probe_spec_targets.com_coreos_monitoring_v1_Probe_spec_targets(
                    ingress = kubernetes.client.models.com_coreos_monitoring_v1_probe_spec_targets_ingress.com_coreos_monitoring_v1_Probe_spec_targets_ingress(
                        namespace_selector = kubernetes.client.models.com_coreos_monitoring_v1_probe_spec_targets_ingress_namespace_selector.com_coreos_monitoring_v1_Probe_spec_targets_ingress_namespaceSelector(
                            any = True, 
                            match_names = [
                                '0'
                                ], ), 
                        relabeling_configs = [
                            kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_metric_relabelings.com_coreos_monitoring_v1_PodMonitor_spec_metricRelabelings(
                                action = 'replace', 
                                modulus = 56, 
                                regex = '0', 
                                replacement = '0', 
                                separator = '0', 
                                source_labels = [
                                    'a'
                                    ], 
                                target_label = '0', )
                            ], 
                        selector = kubernetes.client.models.com_coreos_monitoring_v1_probe_spec_targets_ingress_selector.com_coreos_monitoring_v1_Probe_spec_targets_ingress_selector(
                            match_expressions = [
                                kubernetes.client.models.aws_k8s_networking_v1alpha1_policy_endpoint_spec_pod_selector_match_expressions.aws_k8s_networking_v1alpha1_PolicyEndpoint_spec_podSelector_matchExpressions(
                                    key = '0', 
                                    operator = '0', 
                                    values = [
                                        '0'
                                        ], )
                                ], 
                            match_labels = {
                                'key' : '0'
                                }, ), ), 
                    static_config = kubernetes.client.models.com_coreos_monitoring_v1_probe_spec_targets_static_config.com_coreos_monitoring_v1_Probe_spec_targets_staticConfig(
                        labels = {
                            'key' : '0'
                            }, 
                        static = [
                            '0'
                            ], ), ), 
                tls_config = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_tls_config.com_coreos_monitoring_v1_PodMonitor_spec_tlsConfig(
                    ca = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_tls_config_ca.com_coreos_monitoring_v1_PodMonitor_spec_tlsConfig_ca(
                        config_map = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_oauth2_client_id_config_map.com_coreos_monitoring_v1_PodMonitor_spec_oauth2_clientId_configMap(
                            key = '0', 
                            name = '0', 
                            optional = True, ), 
                        secret = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_oauth2_client_id_secret.com_coreos_monitoring_v1_PodMonitor_spec_oauth2_clientId_secret(
                            key = '0', 
                            name = '0', 
                            optional = True, ), ), 
                    cert = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_tls_config_cert.com_coreos_monitoring_v1_PodMonitor_spec_tlsConfig_cert(), 
                    insecure_skip_verify = True, 
                    key_secret = kubernetes.client.models.com_coreos_monitoring_v1_pod_monitor_spec_tls_config_key_secret.com_coreos_monitoring_v1_PodMonitor_spec_tlsConfig_keySecret(
                        key = '0', 
                        name = '0', 
                        optional = True, ), 
                    server_name = '0', )
            )
        else :
            return ComCoreosMonitoringV1ProbeSpec(
        )

    def testComCoreosMonitoringV1ProbeSpec(self):
        """Test ComCoreosMonitoringV1ProbeSpec"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
