# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.io_xk8s_cluster_bootstrap_v1alpha3_kubeadm_config_spec_cluster_configuration import IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration  # noqa: E501
from kubernetes.client.rest import ApiException

class TestIoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration(unittest.TestCase):
    """IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.io_xk8s_cluster_bootstrap_v1alpha3_kubeadm_config_spec_cluster_configuration.IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration()  # noqa: E501
        if include_optional :
            return IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration(
                api_server = kubernetes.client.models.io_x_k8s_cluster_bootstrap_v1alpha3_kubeadm_config_spec_cluster_configuration_api_server.io_x_k8s_cluster_bootstrap_v1alpha3_KubeadmConfig_spec_clusterConfiguration_apiServer(
                    cert_sa_ns = [
                        '0'
                        ], 
                    extra_args = {
                        'key' : '0'
                        }, 
                    extra_volumes = [
                        kubernetes.client.models.io_x_k8s_cluster_bootstrap_v1alpha3_kubeadm_config_spec_cluster_configuration_api_server_extra_volumes.io_x_k8s_cluster_bootstrap_v1alpha3_KubeadmConfig_spec_clusterConfiguration_apiServer_extraVolumes(
                            host_path = '0', 
                            mount_path = '0', 
                            name = '0', 
                            path_type = '0', 
                            read_only = True, )
                        ], 
                    timeout_for_control_plane = '0', ), 
                api_version = '0', 
                certificates_dir = '0', 
                cluster_name = '0', 
                control_plane_endpoint = '0', 
                controller_manager = kubernetes.client.models.io_x_k8s_cluster_bootstrap_v1alpha3_kubeadm_config_spec_cluster_configuration_controller_manager.io_x_k8s_cluster_bootstrap_v1alpha3_KubeadmConfig_spec_clusterConfiguration_controllerManager(
                    extra_args = {
                        'key' : '0'
                        }, 
                    extra_volumes = [
                        kubernetes.client.models.io_x_k8s_cluster_bootstrap_v1alpha3_kubeadm_config_spec_cluster_configuration_api_server_extra_volumes.io_x_k8s_cluster_bootstrap_v1alpha3_KubeadmConfig_spec_clusterConfiguration_apiServer_extraVolumes(
                            host_path = '0', 
                            mount_path = '0', 
                            name = '0', 
                            path_type = '0', 
                            read_only = True, )
                        ], ), 
                dns = kubernetes.client.models.io_x_k8s_cluster_bootstrap_v1alpha3_kubeadm_config_spec_cluster_configuration_dns.io_x_k8s_cluster_bootstrap_v1alpha3_KubeadmConfig_spec_clusterConfiguration_dns(
                    image_repository = '0', 
                    image_tag = '0', 
                    type = '0', ), 
                etcd = kubernetes.client.models.io_x_k8s_cluster_bootstrap_v1alpha3_kubeadm_config_spec_cluster_configuration_etcd.io_x_k8s_cluster_bootstrap_v1alpha3_KubeadmConfig_spec_clusterConfiguration_etcd(
                    external = kubernetes.client.models.io_x_k8s_cluster_bootstrap_v1alpha3_kubeadm_config_spec_cluster_configuration_etcd_external.io_x_k8s_cluster_bootstrap_v1alpha3_KubeadmConfig_spec_clusterConfiguration_etcd_external(
                        ca_file = '0', 
                        cert_file = '0', 
                        endpoints = [
                            '0'
                            ], 
                        key_file = '0', ), 
                    local = kubernetes.client.models.io_x_k8s_cluster_bootstrap_v1alpha3_kubeadm_config_spec_cluster_configuration_etcd_local.io_x_k8s_cluster_bootstrap_v1alpha3_KubeadmConfig_spec_clusterConfiguration_etcd_local(
                        data_dir = '0', 
                        extra_args = {
                            'key' : '0'
                            }, 
                        image_repository = '0', 
                        image_tag = '0', 
                        peer_cert_sa_ns = [
                            '0'
                            ], 
                        server_cert_sa_ns = [
                            '0'
                            ], ), ), 
                feature_gates = {
                    'key' : True
                    }, 
                image_repository = '0', 
                kind = '0', 
                kubernetes_version = '0', 
                networking = kubernetes.client.models.io_x_k8s_cluster_bootstrap_v1alpha3_kubeadm_config_spec_cluster_configuration_networking.io_x_k8s_cluster_bootstrap_v1alpha3_KubeadmConfig_spec_clusterConfiguration_networking(
                    dns_domain = '0', 
                    pod_subnet = '0', 
                    service_subnet = '0', ), 
                scheduler = kubernetes.client.models.io_x_k8s_cluster_bootstrap_v1alpha3_kubeadm_config_spec_cluster_configuration_scheduler.io_x_k8s_cluster_bootstrap_v1alpha3_KubeadmConfig_spec_clusterConfiguration_scheduler(
                    extra_args = {
                        'key' : '0'
                        }, 
                    extra_volumes = [
                        kubernetes.client.models.io_x_k8s_cluster_bootstrap_v1alpha3_kubeadm_config_spec_cluster_configuration_api_server_extra_volumes.io_x_k8s_cluster_bootstrap_v1alpha3_KubeadmConfig_spec_clusterConfiguration_apiServer_extraVolumes(
                            host_path = '0', 
                            mount_path = '0', 
                            name = '0', 
                            path_type = '0', 
                            read_only = True, )
                        ], ), 
                use_hyper_kube_image = True
            )
        else :
            return IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration(
        )

    def testIoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration(self):
        """Test IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
