# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'gecos': 'str',
        'groups': 'str',
        'home_dir': 'str',
        'inactive': 'bool',
        'lock_password': 'bool',
        'name': 'str',
        'passwd': 'str',
        'primary_group': 'str',
        'shell': 'str',
        'ssh_authorized_keys': 'list[str]',
        'sudo': 'str'
    }

    attribute_map = {
        'gecos': 'gecos',
        'groups': 'groups',
        'home_dir': 'homeDir',
        'inactive': 'inactive',
        'lock_password': 'lockPassword',
        'name': 'name',
        'passwd': 'passwd',
        'primary_group': 'primaryGroup',
        'shell': 'shell',
        'ssh_authorized_keys': 'sshAuthorizedKeys',
        'sudo': 'sudo'
    }

    def __init__(self, gecos=None, groups=None, home_dir=None, inactive=None, lock_password=None, name=None, passwd=None, primary_group=None, shell=None, ssh_authorized_keys=None, sudo=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._gecos = None
        self._groups = None
        self._home_dir = None
        self._inactive = None
        self._lock_password = None
        self._name = None
        self._passwd = None
        self._primary_group = None
        self._shell = None
        self._ssh_authorized_keys = None
        self._sudo = None
        self.discriminator = None

        if gecos is not None:
            self.gecos = gecos
        if groups is not None:
            self.groups = groups
        if home_dir is not None:
            self.home_dir = home_dir
        if inactive is not None:
            self.inactive = inactive
        if lock_password is not None:
            self.lock_password = lock_password
        self.name = name
        if passwd is not None:
            self.passwd = passwd
        if primary_group is not None:
            self.primary_group = primary_group
        if shell is not None:
            self.shell = shell
        if ssh_authorized_keys is not None:
            self.ssh_authorized_keys = ssh_authorized_keys
        if sudo is not None:
            self.sudo = sudo

    @property
    def gecos(self):
        """Gets the gecos of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501

        Gecos specifies the gecos to use for the user  # noqa: E501

        :return: The gecos of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501
        :rtype: str
        """
        return self._gecos

    @gecos.setter
    def gecos(self, gecos):
        """Sets the gecos of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.

        Gecos specifies the gecos to use for the user  # noqa: E501

        :param gecos: The gecos of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501
        :type: str
        """

        self._gecos = gecos

    @property
    def groups(self):
        """Gets the groups of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501

        Groups specifies the additional groups for the user  # noqa: E501

        :return: The groups of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501
        :rtype: str
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.

        Groups specifies the additional groups for the user  # noqa: E501

        :param groups: The groups of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501
        :type: str
        """

        self._groups = groups

    @property
    def home_dir(self):
        """Gets the home_dir of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501

        HomeDir specifies the home directory to use for the user  # noqa: E501

        :return: The home_dir of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501
        :rtype: str
        """
        return self._home_dir

    @home_dir.setter
    def home_dir(self, home_dir):
        """Sets the home_dir of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.

        HomeDir specifies the home directory to use for the user  # noqa: E501

        :param home_dir: The home_dir of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501
        :type: str
        """

        self._home_dir = home_dir

    @property
    def inactive(self):
        """Gets the inactive of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501

        Inactive specifies whether to mark the user as inactive  # noqa: E501

        :return: The inactive of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501
        :rtype: bool
        """
        return self._inactive

    @inactive.setter
    def inactive(self, inactive):
        """Sets the inactive of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.

        Inactive specifies whether to mark the user as inactive  # noqa: E501

        :param inactive: The inactive of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501
        :type: bool
        """

        self._inactive = inactive

    @property
    def lock_password(self):
        """Gets the lock_password of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501

        LockPassword specifies if password login should be disabled  # noqa: E501

        :return: The lock_password of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501
        :rtype: bool
        """
        return self._lock_password

    @lock_password.setter
    def lock_password(self, lock_password):
        """Sets the lock_password of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.

        LockPassword specifies if password login should be disabled  # noqa: E501

        :param lock_password: The lock_password of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501
        :type: bool
        """

        self._lock_password = lock_password

    @property
    def name(self):
        """Gets the name of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501

        Name specifies the user name  # noqa: E501

        :return: The name of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.

        Name specifies the user name  # noqa: E501

        :param name: The name of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def passwd(self):
        """Gets the passwd of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501

        Passwd specifies a hashed password for the user  # noqa: E501

        :return: The passwd of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501
        :rtype: str
        """
        return self._passwd

    @passwd.setter
    def passwd(self, passwd):
        """Sets the passwd of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.

        Passwd specifies a hashed password for the user  # noqa: E501

        :param passwd: The passwd of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501
        :type: str
        """

        self._passwd = passwd

    @property
    def primary_group(self):
        """Gets the primary_group of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501

        PrimaryGroup specifies the primary group for the user  # noqa: E501

        :return: The primary_group of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501
        :rtype: str
        """
        return self._primary_group

    @primary_group.setter
    def primary_group(self, primary_group):
        """Sets the primary_group of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.

        PrimaryGroup specifies the primary group for the user  # noqa: E501

        :param primary_group: The primary_group of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501
        :type: str
        """

        self._primary_group = primary_group

    @property
    def shell(self):
        """Gets the shell of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501

        Shell specifies the user's shell  # noqa: E501

        :return: The shell of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501
        :rtype: str
        """
        return self._shell

    @shell.setter
    def shell(self, shell):
        """Sets the shell of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.

        Shell specifies the user's shell  # noqa: E501

        :param shell: The shell of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501
        :type: str
        """

        self._shell = shell

    @property
    def ssh_authorized_keys(self):
        """Gets the ssh_authorized_keys of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501

        SSHAuthorizedKeys specifies a list of ssh authorized keys for the user  # noqa: E501

        :return: The ssh_authorized_keys of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501
        :rtype: list[str]
        """
        return self._ssh_authorized_keys

    @ssh_authorized_keys.setter
    def ssh_authorized_keys(self, ssh_authorized_keys):
        """Sets the ssh_authorized_keys of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.

        SSHAuthorizedKeys specifies a list of ssh authorized keys for the user  # noqa: E501

        :param ssh_authorized_keys: The ssh_authorized_keys of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501
        :type: list[str]
        """

        self._ssh_authorized_keys = ssh_authorized_keys

    @property
    def sudo(self):
        """Gets the sudo of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501

        Sudo specifies a sudo role for the user  # noqa: E501

        :return: The sudo of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501
        :rtype: str
        """
        return self._sudo

    @sudo.setter
    def sudo(self, sudo):
        """Sets the sudo of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.

        Sudo specifies a sudo role for the user  # noqa: E501

        :param sudo: The sudo of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers.  # noqa: E501
        :type: str
        """

        self._sudo = sudo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecUsers):
            return True

        return self.to_dict() != other.to_dict()
