# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoQuestdbCrdV1alpha1QuestDBCopySpecCloudIds(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'db_name': 'str',
        'instance_uuid': 'str',
        'org_id': 'str',
        'volume_uuid': 'str'
    }

    attribute_map = {
        'db_name': 'dbName',
        'instance_uuid': 'instanceUuid',
        'org_id': 'orgId',
        'volume_uuid': 'volumeUuid'
    }

    def __init__(self, db_name=None, instance_uuid=None, org_id=None, volume_uuid=None, local_vars_configuration=None):  # noqa: E501
        """IoQuestdbCrdV1alpha1QuestDBCopySpecCloudIds - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._db_name = None
        self._instance_uuid = None
        self._org_id = None
        self._volume_uuid = None
        self.discriminator = None

        self.db_name = db_name
        self.instance_uuid = instance_uuid
        self.org_id = org_id
        self.volume_uuid = volume_uuid

    @property
    def db_name(self):
        """Gets the db_name of this IoQuestdbCrdV1alpha1QuestDBCopySpecCloudIds.  # noqa: E501


        :return: The db_name of this IoQuestdbCrdV1alpha1QuestDBCopySpecCloudIds.  # noqa: E501
        :rtype: str
        """
        return self._db_name

    @db_name.setter
    def db_name(self, db_name):
        """Sets the db_name of this IoQuestdbCrdV1alpha1QuestDBCopySpecCloudIds.


        :param db_name: The db_name of this IoQuestdbCrdV1alpha1QuestDBCopySpecCloudIds.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and db_name is None:  # noqa: E501
            raise ValueError("Invalid value for `db_name`, must not be `None`")  # noqa: E501

        self._db_name = db_name

    @property
    def instance_uuid(self):
        """Gets the instance_uuid of this IoQuestdbCrdV1alpha1QuestDBCopySpecCloudIds.  # noqa: E501


        :return: The instance_uuid of this IoQuestdbCrdV1alpha1QuestDBCopySpecCloudIds.  # noqa: E501
        :rtype: str
        """
        return self._instance_uuid

    @instance_uuid.setter
    def instance_uuid(self, instance_uuid):
        """Sets the instance_uuid of this IoQuestdbCrdV1alpha1QuestDBCopySpecCloudIds.


        :param instance_uuid: The instance_uuid of this IoQuestdbCrdV1alpha1QuestDBCopySpecCloudIds.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and instance_uuid is None:  # noqa: E501
            raise ValueError("Invalid value for `instance_uuid`, must not be `None`")  # noqa: E501

        self._instance_uuid = instance_uuid

    @property
    def org_id(self):
        """Gets the org_id of this IoQuestdbCrdV1alpha1QuestDBCopySpecCloudIds.  # noqa: E501


        :return: The org_id of this IoQuestdbCrdV1alpha1QuestDBCopySpecCloudIds.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this IoQuestdbCrdV1alpha1QuestDBCopySpecCloudIds.


        :param org_id: The org_id of this IoQuestdbCrdV1alpha1QuestDBCopySpecCloudIds.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def volume_uuid(self):
        """Gets the volume_uuid of this IoQuestdbCrdV1alpha1QuestDBCopySpecCloudIds.  # noqa: E501


        :return: The volume_uuid of this IoQuestdbCrdV1alpha1QuestDBCopySpecCloudIds.  # noqa: E501
        :rtype: str
        """
        return self._volume_uuid

    @volume_uuid.setter
    def volume_uuid(self, volume_uuid):
        """Sets the volume_uuid of this IoQuestdbCrdV1alpha1QuestDBCopySpecCloudIds.


        :param volume_uuid: The volume_uuid of this IoQuestdbCrdV1alpha1QuestDBCopySpecCloudIds.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and volume_uuid is None:  # noqa: E501
            raise ValueError("Invalid value for `volume_uuid`, must not be `None`")  # noqa: E501

        self._volume_uuid = volume_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoQuestdbCrdV1alpha1QuestDBCopySpecCloudIds):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoQuestdbCrdV1alpha1QuestDBCopySpecCloudIds):
            return True

        return self.to_dict() != other.to_dict()
