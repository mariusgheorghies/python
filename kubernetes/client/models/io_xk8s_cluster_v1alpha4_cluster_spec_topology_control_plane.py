# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterV1alpha4ClusterSpecTopologyControlPlane(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'metadata': 'IoXK8sClusterV1alpha4ClusterSpecTopologyControlPlaneMetadata',
        'replicas': 'int'
    }

    attribute_map = {
        'metadata': 'metadata',
        'replicas': 'replicas'
    }

    def __init__(self, metadata=None, replicas=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterV1alpha4ClusterSpecTopologyControlPlane - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._metadata = None
        self._replicas = None
        self.discriminator = None

        if metadata is not None:
            self.metadata = metadata
        if replicas is not None:
            self.replicas = replicas

    @property
    def metadata(self):
        """Gets the metadata of this IoXK8sClusterV1alpha4ClusterSpecTopologyControlPlane.  # noqa: E501


        :return: The metadata of this IoXK8sClusterV1alpha4ClusterSpecTopologyControlPlane.  # noqa: E501
        :rtype: IoXK8sClusterV1alpha4ClusterSpecTopologyControlPlaneMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this IoXK8sClusterV1alpha4ClusterSpecTopologyControlPlane.


        :param metadata: The metadata of this IoXK8sClusterV1alpha4ClusterSpecTopologyControlPlane.  # noqa: E501
        :type: IoXK8sClusterV1alpha4ClusterSpecTopologyControlPlaneMetadata
        """

        self._metadata = metadata

    @property
    def replicas(self):
        """Gets the replicas of this IoXK8sClusterV1alpha4ClusterSpecTopologyControlPlane.  # noqa: E501

        Replicas is the number of control plane nodes. If the value is nil, the ControlPlane object is created without the number of Replicas and it's assumed that the control plane controller does not implement support for this field. When specified against a control plane provider that lacks support for this field, this value will be ignored.  # noqa: E501

        :return: The replicas of this IoXK8sClusterV1alpha4ClusterSpecTopologyControlPlane.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this IoXK8sClusterV1alpha4ClusterSpecTopologyControlPlane.

        Replicas is the number of control plane nodes. If the value is nil, the ControlPlane object is created without the number of Replicas and it's assumed that the control plane controller does not implement support for this field. When specified against a control plane provider that lacks support for this field, this value will be ignored.  # noqa: E501

        :param replicas: The replicas of this IoXK8sClusterV1alpha4ClusterSpecTopologyControlPlane.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterV1alpha4ClusterSpecTopologyControlPlane):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterV1alpha4ClusterSpecTopologyControlPlane):
            return True

        return self.to_dict() != other.to_dict()
