# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoCertManagerAcmeV1ChallengeSpecSolverDns01Webhook(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'config': 'object',
        'group_name': 'str',
        'solver_name': 'str'
    }

    attribute_map = {
        'config': 'config',
        'group_name': 'groupName',
        'solver_name': 'solverName'
    }

    def __init__(self, config=None, group_name=None, solver_name=None, local_vars_configuration=None):  # noqa: E501
        """IoCertManagerAcmeV1ChallengeSpecSolverDns01Webhook - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._config = None
        self._group_name = None
        self._solver_name = None
        self.discriminator = None

        if config is not None:
            self.config = config
        self.group_name = group_name
        self.solver_name = solver_name

    @property
    def config(self):
        """Gets the config of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Webhook.  # noqa: E501

        Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.  # noqa: E501

        :return: The config of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Webhook.  # noqa: E501
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Webhook.

        Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.  # noqa: E501

        :param config: The config of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Webhook.  # noqa: E501
        :type: object
        """

        self._config = config

    @property
    def group_name(self):
        """Gets the group_name of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Webhook.  # noqa: E501

        The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.  # noqa: E501

        :return: The group_name of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Webhook.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Webhook.

        The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.  # noqa: E501

        :param group_name: The group_name of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Webhook.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and group_name is None:  # noqa: E501
            raise ValueError("Invalid value for `group_name`, must not be `None`")  # noqa: E501

        self._group_name = group_name

    @property
    def solver_name(self):
        """Gets the solver_name of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Webhook.  # noqa: E501

        The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.  # noqa: E501

        :return: The solver_name of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Webhook.  # noqa: E501
        :rtype: str
        """
        return self._solver_name

    @solver_name.setter
    def solver_name(self, solver_name):
        """Sets the solver_name of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Webhook.

        The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.  # noqa: E501

        :param solver_name: The solver_name of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Webhook.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and solver_name is None:  # noqa: E501
            raise ValueError("Invalid value for `solver_name`, must not be `None`")  # noqa: E501

        self._solver_name = solver_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoCertManagerAcmeV1ChallengeSpecSolverDns01Webhook):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoCertManagerAcmeV1ChallengeSpecSolverDns01Webhook):
            return True

        return self.to_dict() != other.to_dict()
