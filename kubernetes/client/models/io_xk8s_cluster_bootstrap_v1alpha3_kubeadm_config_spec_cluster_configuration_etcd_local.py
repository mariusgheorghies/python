# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data_dir': 'str',
        'extra_args': 'dict(str, str)',
        'image_repository': 'str',
        'image_tag': 'str',
        'peer_cert_sa_ns': 'list[str]',
        'server_cert_sa_ns': 'list[str]'
    }

    attribute_map = {
        'data_dir': 'dataDir',
        'extra_args': 'extraArgs',
        'image_repository': 'imageRepository',
        'image_tag': 'imageTag',
        'peer_cert_sa_ns': 'peerCertSANs',
        'server_cert_sa_ns': 'serverCertSANs'
    }

    def __init__(self, data_dir=None, extra_args=None, image_repository=None, image_tag=None, peer_cert_sa_ns=None, server_cert_sa_ns=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._data_dir = None
        self._extra_args = None
        self._image_repository = None
        self._image_tag = None
        self._peer_cert_sa_ns = None
        self._server_cert_sa_ns = None
        self.discriminator = None

        if data_dir is not None:
            self.data_dir = data_dir
        if extra_args is not None:
            self.extra_args = extra_args
        if image_repository is not None:
            self.image_repository = image_repository
        if image_tag is not None:
            self.image_tag = image_tag
        if peer_cert_sa_ns is not None:
            self.peer_cert_sa_ns = peer_cert_sa_ns
        if server_cert_sa_ns is not None:
            self.server_cert_sa_ns = server_cert_sa_ns

    @property
    def data_dir(self):
        """Gets the data_dir of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal.  # noqa: E501

        DataDir is the directory etcd will place its data. Defaults to \"/var/lib/etcd\".  # noqa: E501

        :return: The data_dir of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal.  # noqa: E501
        :rtype: str
        """
        return self._data_dir

    @data_dir.setter
    def data_dir(self, data_dir):
        """Sets the data_dir of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal.

        DataDir is the directory etcd will place its data. Defaults to \"/var/lib/etcd\".  # noqa: E501

        :param data_dir: The data_dir of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal.  # noqa: E501
        :type: str
        """

        self._data_dir = data_dir

    @property
    def extra_args(self):
        """Gets the extra_args of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal.  # noqa: E501

        ExtraArgs are extra arguments provided to the etcd binary when run inside a static pod.  # noqa: E501

        :return: The extra_args of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._extra_args

    @extra_args.setter
    def extra_args(self, extra_args):
        """Sets the extra_args of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal.

        ExtraArgs are extra arguments provided to the etcd binary when run inside a static pod.  # noqa: E501

        :param extra_args: The extra_args of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal.  # noqa: E501
        :type: dict(str, str)
        """

        self._extra_args = extra_args

    @property
    def image_repository(self):
        """Gets the image_repository of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal.  # noqa: E501

        ImageRepository sets the container registry to pull images from. if not set, the ImageRepository defined in ClusterConfiguration will be used instead.  # noqa: E501

        :return: The image_repository of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal.  # noqa: E501
        :rtype: str
        """
        return self._image_repository

    @image_repository.setter
    def image_repository(self, image_repository):
        """Sets the image_repository of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal.

        ImageRepository sets the container registry to pull images from. if not set, the ImageRepository defined in ClusterConfiguration will be used instead.  # noqa: E501

        :param image_repository: The image_repository of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal.  # noqa: E501
        :type: str
        """

        self._image_repository = image_repository

    @property
    def image_tag(self):
        """Gets the image_tag of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal.  # noqa: E501

        ImageTag allows to specify a tag for the image. In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.  # noqa: E501

        :return: The image_tag of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal.  # noqa: E501
        :rtype: str
        """
        return self._image_tag

    @image_tag.setter
    def image_tag(self, image_tag):
        """Sets the image_tag of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal.

        ImageTag allows to specify a tag for the image. In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.  # noqa: E501

        :param image_tag: The image_tag of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal.  # noqa: E501
        :type: str
        """

        self._image_tag = image_tag

    @property
    def peer_cert_sa_ns(self):
        """Gets the peer_cert_sa_ns of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal.  # noqa: E501

        PeerCertSANs sets extra Subject Alternative Names for the etcd peer signing cert.  # noqa: E501

        :return: The peer_cert_sa_ns of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal.  # noqa: E501
        :rtype: list[str]
        """
        return self._peer_cert_sa_ns

    @peer_cert_sa_ns.setter
    def peer_cert_sa_ns(self, peer_cert_sa_ns):
        """Sets the peer_cert_sa_ns of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal.

        PeerCertSANs sets extra Subject Alternative Names for the etcd peer signing cert.  # noqa: E501

        :param peer_cert_sa_ns: The peer_cert_sa_ns of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal.  # noqa: E501
        :type: list[str]
        """

        self._peer_cert_sa_ns = peer_cert_sa_ns

    @property
    def server_cert_sa_ns(self):
        """Gets the server_cert_sa_ns of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal.  # noqa: E501

        ServerCertSANs sets extra Subject Alternative Names for the etcd server signing cert.  # noqa: E501

        :return: The server_cert_sa_ns of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal.  # noqa: E501
        :rtype: list[str]
        """
        return self._server_cert_sa_ns

    @server_cert_sa_ns.setter
    def server_cert_sa_ns(self, server_cert_sa_ns):
        """Sets the server_cert_sa_ns of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal.

        ServerCertSANs sets extra Subject Alternative Names for the etcd server signing cert.  # noqa: E501

        :param server_cert_sa_ns: The server_cert_sa_ns of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal.  # noqa: E501
        :type: list[str]
        """

        self._server_cert_sa_ns = server_cert_sa_ns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdLocal):
            return True

        return self.to_dict() != other.to_dict()
