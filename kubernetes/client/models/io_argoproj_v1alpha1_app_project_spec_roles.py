# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoArgoprojV1alpha1AppProjectSpecRoles(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'groups': 'list[str]',
        'jwt_tokens': 'list[IoArgoprojV1alpha1AppProjectSpecJwtTokens]',
        'name': 'str',
        'policies': 'list[str]'
    }

    attribute_map = {
        'description': 'description',
        'groups': 'groups',
        'jwt_tokens': 'jwtTokens',
        'name': 'name',
        'policies': 'policies'
    }

    def __init__(self, description=None, groups=None, jwt_tokens=None, name=None, policies=None, local_vars_configuration=None):  # noqa: E501
        """IoArgoprojV1alpha1AppProjectSpecRoles - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._groups = None
        self._jwt_tokens = None
        self._name = None
        self._policies = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if groups is not None:
            self.groups = groups
        if jwt_tokens is not None:
            self.jwt_tokens = jwt_tokens
        self.name = name
        if policies is not None:
            self.policies = policies

    @property
    def description(self):
        """Gets the description of this IoArgoprojV1alpha1AppProjectSpecRoles.  # noqa: E501

        Description is a description of the role  # noqa: E501

        :return: The description of this IoArgoprojV1alpha1AppProjectSpecRoles.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IoArgoprojV1alpha1AppProjectSpecRoles.

        Description is a description of the role  # noqa: E501

        :param description: The description of this IoArgoprojV1alpha1AppProjectSpecRoles.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def groups(self):
        """Gets the groups of this IoArgoprojV1alpha1AppProjectSpecRoles.  # noqa: E501

        Groups are a list of OIDC group claims bound to this role  # noqa: E501

        :return: The groups of this IoArgoprojV1alpha1AppProjectSpecRoles.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this IoArgoprojV1alpha1AppProjectSpecRoles.

        Groups are a list of OIDC group claims bound to this role  # noqa: E501

        :param groups: The groups of this IoArgoprojV1alpha1AppProjectSpecRoles.  # noqa: E501
        :type: list[str]
        """

        self._groups = groups

    @property
    def jwt_tokens(self):
        """Gets the jwt_tokens of this IoArgoprojV1alpha1AppProjectSpecRoles.  # noqa: E501

        JWTTokens are a list of generated JWT tokens bound to this role  # noqa: E501

        :return: The jwt_tokens of this IoArgoprojV1alpha1AppProjectSpecRoles.  # noqa: E501
        :rtype: list[IoArgoprojV1alpha1AppProjectSpecJwtTokens]
        """
        return self._jwt_tokens

    @jwt_tokens.setter
    def jwt_tokens(self, jwt_tokens):
        """Sets the jwt_tokens of this IoArgoprojV1alpha1AppProjectSpecRoles.

        JWTTokens are a list of generated JWT tokens bound to this role  # noqa: E501

        :param jwt_tokens: The jwt_tokens of this IoArgoprojV1alpha1AppProjectSpecRoles.  # noqa: E501
        :type: list[IoArgoprojV1alpha1AppProjectSpecJwtTokens]
        """

        self._jwt_tokens = jwt_tokens

    @property
    def name(self):
        """Gets the name of this IoArgoprojV1alpha1AppProjectSpecRoles.  # noqa: E501

        Name is a name for this role  # noqa: E501

        :return: The name of this IoArgoprojV1alpha1AppProjectSpecRoles.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IoArgoprojV1alpha1AppProjectSpecRoles.

        Name is a name for this role  # noqa: E501

        :param name: The name of this IoArgoprojV1alpha1AppProjectSpecRoles.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def policies(self):
        """Gets the policies of this IoArgoprojV1alpha1AppProjectSpecRoles.  # noqa: E501

        Policies Stores a list of casbin formatted strings that define access policies for the role in the project  # noqa: E501

        :return: The policies of this IoArgoprojV1alpha1AppProjectSpecRoles.  # noqa: E501
        :rtype: list[str]
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this IoArgoprojV1alpha1AppProjectSpecRoles.

        Policies Stores a list of casbin formatted strings that define access policies for the role in the project  # noqa: E501

        :param policies: The policies of this IoArgoprojV1alpha1AppProjectSpecRoles.  # noqa: E501
        :type: list[str]
        """

        self._policies = policies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojV1alpha1AppProjectSpecRoles):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojV1alpha1AppProjectSpecRoles):
            return True

        return self.to_dict() != other.to_dict()
