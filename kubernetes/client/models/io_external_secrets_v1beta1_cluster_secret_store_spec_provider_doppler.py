# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDoppler(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auth': 'IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDopplerAuth',
        'config': 'str',
        'format': 'str',
        'name_transformer': 'str',
        'project': 'str'
    }

    attribute_map = {
        'auth': 'auth',
        'config': 'config',
        'format': 'format',
        'name_transformer': 'nameTransformer',
        'project': 'project'
    }

    def __init__(self, auth=None, config=None, format=None, name_transformer=None, project=None, local_vars_configuration=None):  # noqa: E501
        """IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDoppler - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._auth = None
        self._config = None
        self._format = None
        self._name_transformer = None
        self._project = None
        self.discriminator = None

        self.auth = auth
        if config is not None:
            self.config = config
        if format is not None:
            self.format = format
        if name_transformer is not None:
            self.name_transformer = name_transformer
        if project is not None:
            self.project = project

    @property
    def auth(self):
        """Gets the auth of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDoppler.  # noqa: E501


        :return: The auth of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDoppler.  # noqa: E501
        :rtype: IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDopplerAuth
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDoppler.


        :param auth: The auth of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDoppler.  # noqa: E501
        :type: IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDopplerAuth
        """
        if self.local_vars_configuration.client_side_validation and auth is None:  # noqa: E501
            raise ValueError("Invalid value for `auth`, must not be `None`")  # noqa: E501

        self._auth = auth

    @property
    def config(self):
        """Gets the config of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDoppler.  # noqa: E501

        Doppler config (required if not using a Service Token)  # noqa: E501

        :return: The config of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDoppler.  # noqa: E501
        :rtype: str
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDoppler.

        Doppler config (required if not using a Service Token)  # noqa: E501

        :param config: The config of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDoppler.  # noqa: E501
        :type: str
        """

        self._config = config

    @property
    def format(self):
        """Gets the format of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDoppler.  # noqa: E501

        Format enables the downloading of secrets as a file (string)  # noqa: E501

        :return: The format of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDoppler.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDoppler.

        Format enables the downloading of secrets as a file (string)  # noqa: E501

        :param format: The format of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDoppler.  # noqa: E501
        :type: str
        """
        allowed_values = ["json", "dotnet-json", "env", "yaml", "docker"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and format not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def name_transformer(self):
        """Gets the name_transformer of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDoppler.  # noqa: E501

        Environment variable compatible name transforms that change secret names to a different format  # noqa: E501

        :return: The name_transformer of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDoppler.  # noqa: E501
        :rtype: str
        """
        return self._name_transformer

    @name_transformer.setter
    def name_transformer(self, name_transformer):
        """Sets the name_transformer of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDoppler.

        Environment variable compatible name transforms that change secret names to a different format  # noqa: E501

        :param name_transformer: The name_transformer of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDoppler.  # noqa: E501
        :type: str
        """
        allowed_values = ["upper-camel", "camel", "lower-snake", "tf-var", "dotnet-env"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and name_transformer not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `name_transformer` ({0}), must be one of {1}"  # noqa: E501
                .format(name_transformer, allowed_values)
            )

        self._name_transformer = name_transformer

    @property
    def project(self):
        """Gets the project of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDoppler.  # noqa: E501

        Doppler project (required if not using a Service Token)  # noqa: E501

        :return: The project of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDoppler.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDoppler.

        Doppler project (required if not using a Service Token)  # noqa: E501

        :param project: The project of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDoppler.  # noqa: E501
        :type: str
        """

        self._project = project

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDoppler):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderDoppler):
            return True

        return self.to_dict() != other.to_dict()
