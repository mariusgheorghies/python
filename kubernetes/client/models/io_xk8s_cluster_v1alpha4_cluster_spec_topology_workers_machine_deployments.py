# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterV1alpha4ClusterSpecTopologyWorkersMachineDeployments(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_class': 'str',
        'metadata': 'IoXK8sClusterV1alpha4ClusterSpecTopologyWorkersMetadata',
        'name': 'str',
        'replicas': 'int'
    }

    attribute_map = {
        '_class': 'class',
        'metadata': 'metadata',
        'name': 'name',
        'replicas': 'replicas'
    }

    def __init__(self, _class=None, metadata=None, name=None, replicas=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterV1alpha4ClusterSpecTopologyWorkersMachineDeployments - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self.__class = None
        self._metadata = None
        self._name = None
        self._replicas = None
        self.discriminator = None

        self._class = _class
        if metadata is not None:
            self.metadata = metadata
        self.name = name
        if replicas is not None:
            self.replicas = replicas

    @property
    def _class(self):
        """Gets the _class of this IoXK8sClusterV1alpha4ClusterSpecTopologyWorkersMachineDeployments.  # noqa: E501

        Class is the name of the MachineDeploymentClass used to create the set of worker nodes. This should match one of the deployment classes defined in the ClusterClass object mentioned in the `Cluster.Spec.Class` field.  # noqa: E501

        :return: The _class of this IoXK8sClusterV1alpha4ClusterSpecTopologyWorkersMachineDeployments.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this IoXK8sClusterV1alpha4ClusterSpecTopologyWorkersMachineDeployments.

        Class is the name of the MachineDeploymentClass used to create the set of worker nodes. This should match one of the deployment classes defined in the ClusterClass object mentioned in the `Cluster.Spec.Class` field.  # noqa: E501

        :param _class: The _class of this IoXK8sClusterV1alpha4ClusterSpecTopologyWorkersMachineDeployments.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and _class is None:  # noqa: E501
            raise ValueError("Invalid value for `_class`, must not be `None`")  # noqa: E501

        self.__class = _class

    @property
    def metadata(self):
        """Gets the metadata of this IoXK8sClusterV1alpha4ClusterSpecTopologyWorkersMachineDeployments.  # noqa: E501


        :return: The metadata of this IoXK8sClusterV1alpha4ClusterSpecTopologyWorkersMachineDeployments.  # noqa: E501
        :rtype: IoXK8sClusterV1alpha4ClusterSpecTopologyWorkersMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this IoXK8sClusterV1alpha4ClusterSpecTopologyWorkersMachineDeployments.


        :param metadata: The metadata of this IoXK8sClusterV1alpha4ClusterSpecTopologyWorkersMachineDeployments.  # noqa: E501
        :type: IoXK8sClusterV1alpha4ClusterSpecTopologyWorkersMetadata
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this IoXK8sClusterV1alpha4ClusterSpecTopologyWorkersMachineDeployments.  # noqa: E501

        Name is the unique identifier for this MachineDeploymentTopology. The value is used with other unique identifiers to create a MachineDeployment's Name (e.g. cluster's name, etc). In case the name is greater than the allowed maximum length, the values are hashed together.  # noqa: E501

        :return: The name of this IoXK8sClusterV1alpha4ClusterSpecTopologyWorkersMachineDeployments.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IoXK8sClusterV1alpha4ClusterSpecTopologyWorkersMachineDeployments.

        Name is the unique identifier for this MachineDeploymentTopology. The value is used with other unique identifiers to create a MachineDeployment's Name (e.g. cluster's name, etc). In case the name is greater than the allowed maximum length, the values are hashed together.  # noqa: E501

        :param name: The name of this IoXK8sClusterV1alpha4ClusterSpecTopologyWorkersMachineDeployments.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def replicas(self):
        """Gets the replicas of this IoXK8sClusterV1alpha4ClusterSpecTopologyWorkersMachineDeployments.  # noqa: E501

        Replicas is the number of worker nodes belonging to this set. If the value is nil, the MachineDeployment is created without the number of Replicas (defaulting to zero) and it's assumed that an external entity (like cluster autoscaler) is responsible for the management of this value.  # noqa: E501

        :return: The replicas of this IoXK8sClusterV1alpha4ClusterSpecTopologyWorkersMachineDeployments.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this IoXK8sClusterV1alpha4ClusterSpecTopologyWorkersMachineDeployments.

        Replicas is the number of worker nodes belonging to this set. If the value is nil, the MachineDeployment is created without the number of Replicas (defaulting to zero) and it's assumed that an external entity (like cluster autoscaler) is responsible for the management of this value.  # noqa: E501

        :param replicas: The replicas of this IoXK8sClusterV1alpha4ClusterSpecTopologyWorkersMachineDeployments.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterV1alpha4ClusterSpecTopologyWorkersMachineDeployments):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterV1alpha4ClusterSpecTopologyWorkersMachineDeployments):
            return True

        return self.to_dict() != other.to_dict()
