# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class AwsK8sServicesEc2V1alpha1VPCSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'amazon_provided_i_pv6_cidr_block': 'bool',
        'cidr_blocks': 'list[str]',
        'enable_dns_hostnames': 'bool',
        'enable_dns_support': 'bool',
        'instance_tenancy': 'str',
        'ipv4_ipam_pool_id': 'str',
        'ipv4_netmask_length': 'int',
        'ipv6_cidr_block': 'str',
        'ipv6_cidr_block_network_border_group': 'str',
        'ipv6_ipam_pool_id': 'str',
        'ipv6_netmask_length': 'int',
        'ipv6_pool': 'str',
        'tags': 'list[AwsK8sServicesEc2V1alpha1DHCPOptionsSpecTags]'
    }

    attribute_map = {
        'amazon_provided_i_pv6_cidr_block': 'amazonProvidedIPv6CIDRBlock',
        'cidr_blocks': 'cidrBlocks',
        'enable_dns_hostnames': 'enableDNSHostnames',
        'enable_dns_support': 'enableDNSSupport',
        'instance_tenancy': 'instanceTenancy',
        'ipv4_ipam_pool_id': 'ipv4IPAMPoolID',
        'ipv4_netmask_length': 'ipv4NetmaskLength',
        'ipv6_cidr_block': 'ipv6CIDRBlock',
        'ipv6_cidr_block_network_border_group': 'ipv6CIDRBlockNetworkBorderGroup',
        'ipv6_ipam_pool_id': 'ipv6IPAMPoolID',
        'ipv6_netmask_length': 'ipv6NetmaskLength',
        'ipv6_pool': 'ipv6Pool',
        'tags': 'tags'
    }

    def __init__(self, amazon_provided_i_pv6_cidr_block=None, cidr_blocks=None, enable_dns_hostnames=None, enable_dns_support=None, instance_tenancy=None, ipv4_ipam_pool_id=None, ipv4_netmask_length=None, ipv6_cidr_block=None, ipv6_cidr_block_network_border_group=None, ipv6_ipam_pool_id=None, ipv6_netmask_length=None, ipv6_pool=None, tags=None, local_vars_configuration=None):  # noqa: E501
        """AwsK8sServicesEc2V1alpha1VPCSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._amazon_provided_i_pv6_cidr_block = None
        self._cidr_blocks = None
        self._enable_dns_hostnames = None
        self._enable_dns_support = None
        self._instance_tenancy = None
        self._ipv4_ipam_pool_id = None
        self._ipv4_netmask_length = None
        self._ipv6_cidr_block = None
        self._ipv6_cidr_block_network_border_group = None
        self._ipv6_ipam_pool_id = None
        self._ipv6_netmask_length = None
        self._ipv6_pool = None
        self._tags = None
        self.discriminator = None

        if amazon_provided_i_pv6_cidr_block is not None:
            self.amazon_provided_i_pv6_cidr_block = amazon_provided_i_pv6_cidr_block
        self.cidr_blocks = cidr_blocks
        if enable_dns_hostnames is not None:
            self.enable_dns_hostnames = enable_dns_hostnames
        if enable_dns_support is not None:
            self.enable_dns_support = enable_dns_support
        if instance_tenancy is not None:
            self.instance_tenancy = instance_tenancy
        if ipv4_ipam_pool_id is not None:
            self.ipv4_ipam_pool_id = ipv4_ipam_pool_id
        if ipv4_netmask_length is not None:
            self.ipv4_netmask_length = ipv4_netmask_length
        if ipv6_cidr_block is not None:
            self.ipv6_cidr_block = ipv6_cidr_block
        if ipv6_cidr_block_network_border_group is not None:
            self.ipv6_cidr_block_network_border_group = ipv6_cidr_block_network_border_group
        if ipv6_ipam_pool_id is not None:
            self.ipv6_ipam_pool_id = ipv6_ipam_pool_id
        if ipv6_netmask_length is not None:
            self.ipv6_netmask_length = ipv6_netmask_length
        if ipv6_pool is not None:
            self.ipv6_pool = ipv6_pool
        if tags is not None:
            self.tags = tags

    @property
    def amazon_provided_i_pv6_cidr_block(self):
        """Gets the amazon_provided_i_pv6_cidr_block of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501

        Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block.  # noqa: E501

        :return: The amazon_provided_i_pv6_cidr_block of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :rtype: bool
        """
        return self._amazon_provided_i_pv6_cidr_block

    @amazon_provided_i_pv6_cidr_block.setter
    def amazon_provided_i_pv6_cidr_block(self, amazon_provided_i_pv6_cidr_block):
        """Sets the amazon_provided_i_pv6_cidr_block of this AwsK8sServicesEc2V1alpha1VPCSpec.

        Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block.  # noqa: E501

        :param amazon_provided_i_pv6_cidr_block: The amazon_provided_i_pv6_cidr_block of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :type: bool
        """

        self._amazon_provided_i_pv6_cidr_block = amazon_provided_i_pv6_cidr_block

    @property
    def cidr_blocks(self):
        """Gets the cidr_blocks of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501


        :return: The cidr_blocks of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._cidr_blocks

    @cidr_blocks.setter
    def cidr_blocks(self, cidr_blocks):
        """Sets the cidr_blocks of this AwsK8sServicesEc2V1alpha1VPCSpec.


        :param cidr_blocks: The cidr_blocks of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and cidr_blocks is None:  # noqa: E501
            raise ValueError("Invalid value for `cidr_blocks`, must not be `None`")  # noqa: E501

        self._cidr_blocks = cidr_blocks

    @property
    def enable_dns_hostnames(self):
        """Gets the enable_dns_hostnames of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501

        The attribute value. The valid values are true or false.  # noqa: E501

        :return: The enable_dns_hostnames of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :rtype: bool
        """
        return self._enable_dns_hostnames

    @enable_dns_hostnames.setter
    def enable_dns_hostnames(self, enable_dns_hostnames):
        """Sets the enable_dns_hostnames of this AwsK8sServicesEc2V1alpha1VPCSpec.

        The attribute value. The valid values are true or false.  # noqa: E501

        :param enable_dns_hostnames: The enable_dns_hostnames of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :type: bool
        """

        self._enable_dns_hostnames = enable_dns_hostnames

    @property
    def enable_dns_support(self):
        """Gets the enable_dns_support of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501

        The attribute value. The valid values are true or false.  # noqa: E501

        :return: The enable_dns_support of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :rtype: bool
        """
        return self._enable_dns_support

    @enable_dns_support.setter
    def enable_dns_support(self, enable_dns_support):
        """Sets the enable_dns_support of this AwsK8sServicesEc2V1alpha1VPCSpec.

        The attribute value. The valid values are true or false.  # noqa: E501

        :param enable_dns_support: The enable_dns_support of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :type: bool
        """

        self._enable_dns_support = enable_dns_support

    @property
    def instance_tenancy(self):
        """Gets the instance_tenancy of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501

        The tenancy options for instances launched into the VPC. For default, instances are launched with shared tenancy by default. You can launch instances with any tenancy into a shared tenancy VPC. For dedicated, instances are launched as dedicated tenancy instances by default. You can only launch instances with a tenancy of dedicated or host into a dedicated tenancy VPC.   Important: The host value cannot be used with this parameter. Use the default or dedicated values only.   Default: default  # noqa: E501

        :return: The instance_tenancy of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :rtype: str
        """
        return self._instance_tenancy

    @instance_tenancy.setter
    def instance_tenancy(self, instance_tenancy):
        """Sets the instance_tenancy of this AwsK8sServicesEc2V1alpha1VPCSpec.

        The tenancy options for instances launched into the VPC. For default, instances are launched with shared tenancy by default. You can launch instances with any tenancy into a shared tenancy VPC. For dedicated, instances are launched as dedicated tenancy instances by default. You can only launch instances with a tenancy of dedicated or host into a dedicated tenancy VPC.   Important: The host value cannot be used with this parameter. Use the default or dedicated values only.   Default: default  # noqa: E501

        :param instance_tenancy: The instance_tenancy of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :type: str
        """

        self._instance_tenancy = instance_tenancy

    @property
    def ipv4_ipam_pool_id(self):
        """Gets the ipv4_ipam_pool_id of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501

        The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. For more information, see What is IPAM? (https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html) in the Amazon VPC IPAM User Guide.  # noqa: E501

        :return: The ipv4_ipam_pool_id of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :rtype: str
        """
        return self._ipv4_ipam_pool_id

    @ipv4_ipam_pool_id.setter
    def ipv4_ipam_pool_id(self, ipv4_ipam_pool_id):
        """Sets the ipv4_ipam_pool_id of this AwsK8sServicesEc2V1alpha1VPCSpec.

        The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. For more information, see What is IPAM? (https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html) in the Amazon VPC IPAM User Guide.  # noqa: E501

        :param ipv4_ipam_pool_id: The ipv4_ipam_pool_id of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :type: str
        """

        self._ipv4_ipam_pool_id = ipv4_ipam_pool_id

    @property
    def ipv4_netmask_length(self):
        """Gets the ipv4_netmask_length of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501

        The netmask length of the IPv4 CIDR you want to allocate to this VPC from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see What is IPAM? (https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html) in the Amazon VPC IPAM User Guide.  # noqa: E501

        :return: The ipv4_netmask_length of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :rtype: int
        """
        return self._ipv4_netmask_length

    @ipv4_netmask_length.setter
    def ipv4_netmask_length(self, ipv4_netmask_length):
        """Sets the ipv4_netmask_length of this AwsK8sServicesEc2V1alpha1VPCSpec.

        The netmask length of the IPv4 CIDR you want to allocate to this VPC from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see What is IPAM? (https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html) in the Amazon VPC IPAM User Guide.  # noqa: E501

        :param ipv4_netmask_length: The ipv4_netmask_length of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :type: int
        """

        self._ipv4_netmask_length = ipv4_netmask_length

    @property
    def ipv6_cidr_block(self):
        """Gets the ipv6_cidr_block of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501

        The IPv6 CIDR block from the IPv6 address pool. You must also specify Ipv6Pool in the request.   To let Amazon choose the IPv6 CIDR block for you, omit this parameter.  # noqa: E501

        :return: The ipv6_cidr_block of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_cidr_block

    @ipv6_cidr_block.setter
    def ipv6_cidr_block(self, ipv6_cidr_block):
        """Sets the ipv6_cidr_block of this AwsK8sServicesEc2V1alpha1VPCSpec.

        The IPv6 CIDR block from the IPv6 address pool. You must also specify Ipv6Pool in the request.   To let Amazon choose the IPv6 CIDR block for you, omit this parameter.  # noqa: E501

        :param ipv6_cidr_block: The ipv6_cidr_block of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :type: str
        """

        self._ipv6_cidr_block = ipv6_cidr_block

    @property
    def ipv6_cidr_block_network_border_group(self):
        """Gets the ipv6_cidr_block_network_border_group of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501

        The name of the location from which we advertise the IPV6 CIDR block. Use this parameter to limit the address to this location.   You must set AmazonProvidedIpv6CidrBlock to true to use this parameter.  # noqa: E501

        :return: The ipv6_cidr_block_network_border_group of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_cidr_block_network_border_group

    @ipv6_cidr_block_network_border_group.setter
    def ipv6_cidr_block_network_border_group(self, ipv6_cidr_block_network_border_group):
        """Sets the ipv6_cidr_block_network_border_group of this AwsK8sServicesEc2V1alpha1VPCSpec.

        The name of the location from which we advertise the IPV6 CIDR block. Use this parameter to limit the address to this location.   You must set AmazonProvidedIpv6CidrBlock to true to use this parameter.  # noqa: E501

        :param ipv6_cidr_block_network_border_group: The ipv6_cidr_block_network_border_group of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :type: str
        """

        self._ipv6_cidr_block_network_border_group = ipv6_cidr_block_network_border_group

    @property
    def ipv6_ipam_pool_id(self):
        """Gets the ipv6_ipam_pool_id of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501

        The ID of an IPv6 IPAM pool which will be used to allocate this VPC an IPv6 CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across Amazon Web Services Regions and accounts throughout your Amazon Web Services Organization. For more information, see What is IPAM? (https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html) in the Amazon VPC IPAM User Guide.  # noqa: E501

        :return: The ipv6_ipam_pool_id of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_ipam_pool_id

    @ipv6_ipam_pool_id.setter
    def ipv6_ipam_pool_id(self, ipv6_ipam_pool_id):
        """Sets the ipv6_ipam_pool_id of this AwsK8sServicesEc2V1alpha1VPCSpec.

        The ID of an IPv6 IPAM pool which will be used to allocate this VPC an IPv6 CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across Amazon Web Services Regions and accounts throughout your Amazon Web Services Organization. For more information, see What is IPAM? (https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html) in the Amazon VPC IPAM User Guide.  # noqa: E501

        :param ipv6_ipam_pool_id: The ipv6_ipam_pool_id of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :type: str
        """

        self._ipv6_ipam_pool_id = ipv6_ipam_pool_id

    @property
    def ipv6_netmask_length(self):
        """Gets the ipv6_netmask_length of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501

        The netmask length of the IPv6 CIDR you want to allocate to this VPC from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see What is IPAM? (https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html) in the Amazon VPC IPAM User Guide.  # noqa: E501

        :return: The ipv6_netmask_length of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :rtype: int
        """
        return self._ipv6_netmask_length

    @ipv6_netmask_length.setter
    def ipv6_netmask_length(self, ipv6_netmask_length):
        """Sets the ipv6_netmask_length of this AwsK8sServicesEc2V1alpha1VPCSpec.

        The netmask length of the IPv6 CIDR you want to allocate to this VPC from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see What is IPAM? (https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html) in the Amazon VPC IPAM User Guide.  # noqa: E501

        :param ipv6_netmask_length: The ipv6_netmask_length of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :type: int
        """

        self._ipv6_netmask_length = ipv6_netmask_length

    @property
    def ipv6_pool(self):
        """Gets the ipv6_pool of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501

        The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.  # noqa: E501

        :return: The ipv6_pool of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_pool

    @ipv6_pool.setter
    def ipv6_pool(self, ipv6_pool):
        """Sets the ipv6_pool of this AwsK8sServicesEc2V1alpha1VPCSpec.

        The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.  # noqa: E501

        :param ipv6_pool: The ipv6_pool of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :type: str
        """

        self._ipv6_pool = ipv6_pool

    @property
    def tags(self):
        """Gets the tags of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501

        The tags. The value parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string.  # noqa: E501

        :return: The tags of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1DHCPOptionsSpecTags]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AwsK8sServicesEc2V1alpha1VPCSpec.

        The tags. The value parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string.  # noqa: E501

        :param tags: The tags of this AwsK8sServicesEc2V1alpha1VPCSpec.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1DHCPOptionsSpecTags]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1VPCSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1VPCSpec):
            return True

        return self.to_dict() != other.to_dict()
