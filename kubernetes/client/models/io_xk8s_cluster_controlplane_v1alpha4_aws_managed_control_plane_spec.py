# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'additional_tags': 'dict(str, str)',
        'addons': 'list[IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecAddons]',
        'associate_oidc_provider': 'bool',
        'bastion': 'IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion',
        'control_plane_endpoint': 'IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecControlPlaneEndpoint',
        'disable_vpccni': 'bool',
        'eks_cluster_name': 'str',
        'encryption_config': 'IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecEncryptionConfig',
        'endpoint_access': 'IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecEndpointAccess',
        'iam_authenticator_config': 'IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecIamAuthenticatorConfig',
        'identity_ref': 'IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecIdentityRef',
        'image_lookup_base_os': 'str',
        'image_lookup_format': 'str',
        'image_lookup_org': 'str',
        'logging': 'IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging',
        'network': 'IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpec',
        'oidc_identity_provider_config': 'IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig',
        'region': 'str',
        'role_additional_policies': 'list[str]',
        'role_name': 'str',
        'secondary_cidr_block': 'str',
        'ssh_key_name': 'str',
        'token_method': 'str',
        'version': 'str'
    }

    attribute_map = {
        'additional_tags': 'additionalTags',
        'addons': 'addons',
        'associate_oidc_provider': 'associateOIDCProvider',
        'bastion': 'bastion',
        'control_plane_endpoint': 'controlPlaneEndpoint',
        'disable_vpccni': 'disableVPCCNI',
        'eks_cluster_name': 'eksClusterName',
        'encryption_config': 'encryptionConfig',
        'endpoint_access': 'endpointAccess',
        'iam_authenticator_config': 'iamAuthenticatorConfig',
        'identity_ref': 'identityRef',
        'image_lookup_base_os': 'imageLookupBaseOS',
        'image_lookup_format': 'imageLookupFormat',
        'image_lookup_org': 'imageLookupOrg',
        'logging': 'logging',
        'network': 'network',
        'oidc_identity_provider_config': 'oidcIdentityProviderConfig',
        'region': 'region',
        'role_additional_policies': 'roleAdditionalPolicies',
        'role_name': 'roleName',
        'secondary_cidr_block': 'secondaryCidrBlock',
        'ssh_key_name': 'sshKeyName',
        'token_method': 'tokenMethod',
        'version': 'version'
    }

    def __init__(self, additional_tags=None, addons=None, associate_oidc_provider=None, bastion=None, control_plane_endpoint=None, disable_vpccni=None, eks_cluster_name=None, encryption_config=None, endpoint_access=None, iam_authenticator_config=None, identity_ref=None, image_lookup_base_os=None, image_lookup_format=None, image_lookup_org=None, logging=None, network=None, oidc_identity_provider_config=None, region=None, role_additional_policies=None, role_name=None, secondary_cidr_block=None, ssh_key_name=None, token_method=None, version=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._additional_tags = None
        self._addons = None
        self._associate_oidc_provider = None
        self._bastion = None
        self._control_plane_endpoint = None
        self._disable_vpccni = None
        self._eks_cluster_name = None
        self._encryption_config = None
        self._endpoint_access = None
        self._iam_authenticator_config = None
        self._identity_ref = None
        self._image_lookup_base_os = None
        self._image_lookup_format = None
        self._image_lookup_org = None
        self._logging = None
        self._network = None
        self._oidc_identity_provider_config = None
        self._region = None
        self._role_additional_policies = None
        self._role_name = None
        self._secondary_cidr_block = None
        self._ssh_key_name = None
        self._token_method = None
        self._version = None
        self.discriminator = None

        if additional_tags is not None:
            self.additional_tags = additional_tags
        if addons is not None:
            self.addons = addons
        if associate_oidc_provider is not None:
            self.associate_oidc_provider = associate_oidc_provider
        if bastion is not None:
            self.bastion = bastion
        if control_plane_endpoint is not None:
            self.control_plane_endpoint = control_plane_endpoint
        if disable_vpccni is not None:
            self.disable_vpccni = disable_vpccni
        if eks_cluster_name is not None:
            self.eks_cluster_name = eks_cluster_name
        if encryption_config is not None:
            self.encryption_config = encryption_config
        if endpoint_access is not None:
            self.endpoint_access = endpoint_access
        if iam_authenticator_config is not None:
            self.iam_authenticator_config = iam_authenticator_config
        if identity_ref is not None:
            self.identity_ref = identity_ref
        if image_lookup_base_os is not None:
            self.image_lookup_base_os = image_lookup_base_os
        if image_lookup_format is not None:
            self.image_lookup_format = image_lookup_format
        if image_lookup_org is not None:
            self.image_lookup_org = image_lookup_org
        if logging is not None:
            self.logging = logging
        if network is not None:
            self.network = network
        if oidc_identity_provider_config is not None:
            self.oidc_identity_provider_config = oidc_identity_provider_config
        if region is not None:
            self.region = region
        if role_additional_policies is not None:
            self.role_additional_policies = role_additional_policies
        if role_name is not None:
            self.role_name = role_name
        if secondary_cidr_block is not None:
            self.secondary_cidr_block = secondary_cidr_block
        if ssh_key_name is not None:
            self.ssh_key_name = ssh_key_name
        if token_method is not None:
            self.token_method = token_method
        if version is not None:
            self.version = version

    @property
    def additional_tags(self):
        """Gets the additional_tags of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501

        AdditionalTags is an optional set of tags to add to AWS resources managed by the AWS provider, in addition to the ones added by default.  # noqa: E501

        :return: The additional_tags of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._additional_tags

    @additional_tags.setter
    def additional_tags(self, additional_tags):
        """Sets the additional_tags of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.

        AdditionalTags is an optional set of tags to add to AWS resources managed by the AWS provider, in addition to the ones added by default.  # noqa: E501

        :param additional_tags: The additional_tags of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._additional_tags = additional_tags

    @property
    def addons(self):
        """Gets the addons of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501

        Addons defines the EKS addons to enable with the EKS cluster.  # noqa: E501

        :return: The addons of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :rtype: list[IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecAddons]
        """
        return self._addons

    @addons.setter
    def addons(self, addons):
        """Sets the addons of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.

        Addons defines the EKS addons to enable with the EKS cluster.  # noqa: E501

        :param addons: The addons of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :type: list[IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecAddons]
        """

        self._addons = addons

    @property
    def associate_oidc_provider(self):
        """Gets the associate_oidc_provider of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501

        AssociateOIDCProvider can be enabled to automatically create an identity provider for the controller for use with IAM roles for service accounts  # noqa: E501

        :return: The associate_oidc_provider of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :rtype: bool
        """
        return self._associate_oidc_provider

    @associate_oidc_provider.setter
    def associate_oidc_provider(self, associate_oidc_provider):
        """Sets the associate_oidc_provider of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.

        AssociateOIDCProvider can be enabled to automatically create an identity provider for the controller for use with IAM roles for service accounts  # noqa: E501

        :param associate_oidc_provider: The associate_oidc_provider of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :type: bool
        """

        self._associate_oidc_provider = associate_oidc_provider

    @property
    def bastion(self):
        """Gets the bastion of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501


        :return: The bastion of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :rtype: IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion
        """
        return self._bastion

    @bastion.setter
    def bastion(self, bastion):
        """Sets the bastion of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.


        :param bastion: The bastion of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :type: IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion
        """

        self._bastion = bastion

    @property
    def control_plane_endpoint(self):
        """Gets the control_plane_endpoint of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501


        :return: The control_plane_endpoint of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :rtype: IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecControlPlaneEndpoint
        """
        return self._control_plane_endpoint

    @control_plane_endpoint.setter
    def control_plane_endpoint(self, control_plane_endpoint):
        """Sets the control_plane_endpoint of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.


        :param control_plane_endpoint: The control_plane_endpoint of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :type: IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecControlPlaneEndpoint
        """

        self._control_plane_endpoint = control_plane_endpoint

    @property
    def disable_vpccni(self):
        """Gets the disable_vpccni of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501

        DisableVPCCNI indcates the the Amazon VPC CNI should be disabled. With EKS clusters that the Amazon VPC CNI is automatically installed into the cluster. For clusters where you want to use an alternate CNI this option provides a way to specify that the Amazon VPC CNI should be deleted. You cannot set this to true if you are using the Amazon VPC CNI addon or if you have specified a secondary CIDR block.  # noqa: E501

        :return: The disable_vpccni of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :rtype: bool
        """
        return self._disable_vpccni

    @disable_vpccni.setter
    def disable_vpccni(self, disable_vpccni):
        """Sets the disable_vpccni of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.

        DisableVPCCNI indcates the the Amazon VPC CNI should be disabled. With EKS clusters that the Amazon VPC CNI is automatically installed into the cluster. For clusters where you want to use an alternate CNI this option provides a way to specify that the Amazon VPC CNI should be deleted. You cannot set this to true if you are using the Amazon VPC CNI addon or if you have specified a secondary CIDR block.  # noqa: E501

        :param disable_vpccni: The disable_vpccni of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :type: bool
        """

        self._disable_vpccni = disable_vpccni

    @property
    def eks_cluster_name(self):
        """Gets the eks_cluster_name of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501

        EKSClusterName allows you to specify the name of the EKS cluster in AWS. If you don't specify a name then a default name will be created based on the namespace and name of the managed control plane.  # noqa: E501

        :return: The eks_cluster_name of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :rtype: str
        """
        return self._eks_cluster_name

    @eks_cluster_name.setter
    def eks_cluster_name(self, eks_cluster_name):
        """Sets the eks_cluster_name of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.

        EKSClusterName allows you to specify the name of the EKS cluster in AWS. If you don't specify a name then a default name will be created based on the namespace and name of the managed control plane.  # noqa: E501

        :param eks_cluster_name: The eks_cluster_name of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :type: str
        """

        self._eks_cluster_name = eks_cluster_name

    @property
    def encryption_config(self):
        """Gets the encryption_config of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501


        :return: The encryption_config of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :rtype: IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecEncryptionConfig
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.


        :param encryption_config: The encryption_config of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :type: IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecEncryptionConfig
        """

        self._encryption_config = encryption_config

    @property
    def endpoint_access(self):
        """Gets the endpoint_access of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501


        :return: The endpoint_access of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :rtype: IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecEndpointAccess
        """
        return self._endpoint_access

    @endpoint_access.setter
    def endpoint_access(self, endpoint_access):
        """Sets the endpoint_access of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.


        :param endpoint_access: The endpoint_access of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :type: IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecEndpointAccess
        """

        self._endpoint_access = endpoint_access

    @property
    def iam_authenticator_config(self):
        """Gets the iam_authenticator_config of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501


        :return: The iam_authenticator_config of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :rtype: IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecIamAuthenticatorConfig
        """
        return self._iam_authenticator_config

    @iam_authenticator_config.setter
    def iam_authenticator_config(self, iam_authenticator_config):
        """Sets the iam_authenticator_config of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.


        :param iam_authenticator_config: The iam_authenticator_config of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :type: IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecIamAuthenticatorConfig
        """

        self._iam_authenticator_config = iam_authenticator_config

    @property
    def identity_ref(self):
        """Gets the identity_ref of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501


        :return: The identity_ref of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :rtype: IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecIdentityRef
        """
        return self._identity_ref

    @identity_ref.setter
    def identity_ref(self, identity_ref):
        """Sets the identity_ref of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.


        :param identity_ref: The identity_ref of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :type: IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecIdentityRef
        """

        self._identity_ref = identity_ref

    @property
    def image_lookup_base_os(self):
        """Gets the image_lookup_base_os of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501

        ImageLookupBaseOS is the name of the base operating system used to look up machine images when a machine does not specify an AMI. When set, this will be used for all cluster machines unless a machine specifies a different ImageLookupBaseOS.  # noqa: E501

        :return: The image_lookup_base_os of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :rtype: str
        """
        return self._image_lookup_base_os

    @image_lookup_base_os.setter
    def image_lookup_base_os(self, image_lookup_base_os):
        """Sets the image_lookup_base_os of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.

        ImageLookupBaseOS is the name of the base operating system used to look up machine images when a machine does not specify an AMI. When set, this will be used for all cluster machines unless a machine specifies a different ImageLookupBaseOS.  # noqa: E501

        :param image_lookup_base_os: The image_lookup_base_os of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :type: str
        """

        self._image_lookup_base_os = image_lookup_base_os

    @property
    def image_lookup_format(self):
        """Gets the image_lookup_format of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501

        ImageLookupFormat is the AMI naming format to look up machine images when a machine does not specify an AMI. When set, this will be used for all cluster machines unless a machine specifies a different ImageLookupOrg. Supports substitutions for {{.BaseOS}} and {{.K8sVersion}} with the base OS and kubernetes version, respectively. The BaseOS will be the value in ImageLookupBaseOS or ubuntu (the default), and the kubernetes version as defined by the packages produced by kubernetes/release without v as a prefix: 1.13.0, 1.12.5-mybuild.1, or 1.17.3. For example, the default image format of capa-ami-{{.BaseOS}}-?{{.K8sVersion}}-* will end up searching for AMIs that match the pattern capa-ami-ubuntu-?1.18.0-* for a Machine that is targeting kubernetes v1.18.0 and the ubuntu base OS. See also: https://golang.org/pkg/text/template/  # noqa: E501

        :return: The image_lookup_format of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :rtype: str
        """
        return self._image_lookup_format

    @image_lookup_format.setter
    def image_lookup_format(self, image_lookup_format):
        """Sets the image_lookup_format of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.

        ImageLookupFormat is the AMI naming format to look up machine images when a machine does not specify an AMI. When set, this will be used for all cluster machines unless a machine specifies a different ImageLookupOrg. Supports substitutions for {{.BaseOS}} and {{.K8sVersion}} with the base OS and kubernetes version, respectively. The BaseOS will be the value in ImageLookupBaseOS or ubuntu (the default), and the kubernetes version as defined by the packages produced by kubernetes/release without v as a prefix: 1.13.0, 1.12.5-mybuild.1, or 1.17.3. For example, the default image format of capa-ami-{{.BaseOS}}-?{{.K8sVersion}}-* will end up searching for AMIs that match the pattern capa-ami-ubuntu-?1.18.0-* for a Machine that is targeting kubernetes v1.18.0 and the ubuntu base OS. See also: https://golang.org/pkg/text/template/  # noqa: E501

        :param image_lookup_format: The image_lookup_format of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :type: str
        """

        self._image_lookup_format = image_lookup_format

    @property
    def image_lookup_org(self):
        """Gets the image_lookup_org of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501

        ImageLookupOrg is the AWS Organization ID to look up machine images when a machine does not specify an AMI. When set, this will be used for all cluster machines unless a machine specifies a different ImageLookupOrg.  # noqa: E501

        :return: The image_lookup_org of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :rtype: str
        """
        return self._image_lookup_org

    @image_lookup_org.setter
    def image_lookup_org(self, image_lookup_org):
        """Sets the image_lookup_org of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.

        ImageLookupOrg is the AWS Organization ID to look up machine images when a machine does not specify an AMI. When set, this will be used for all cluster machines unless a machine specifies a different ImageLookupOrg.  # noqa: E501

        :param image_lookup_org: The image_lookup_org of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :type: str
        """

        self._image_lookup_org = image_lookup_org

    @property
    def logging(self):
        """Gets the logging of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501


        :return: The logging of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :rtype: IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging
        """
        return self._logging

    @logging.setter
    def logging(self, logging):
        """Sets the logging of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.


        :param logging: The logging of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :type: IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging
        """

        self._logging = logging

    @property
    def network(self):
        """Gets the network of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501


        :return: The network of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :rtype: IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpec
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.


        :param network: The network of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :type: IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpec
        """

        self._network = network

    @property
    def oidc_identity_provider_config(self):
        """Gets the oidc_identity_provider_config of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501


        :return: The oidc_identity_provider_config of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :rtype: IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig
        """
        return self._oidc_identity_provider_config

    @oidc_identity_provider_config.setter
    def oidc_identity_provider_config(self, oidc_identity_provider_config):
        """Sets the oidc_identity_provider_config of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.


        :param oidc_identity_provider_config: The oidc_identity_provider_config of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :type: IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig
        """

        self._oidc_identity_provider_config = oidc_identity_provider_config

    @property
    def region(self):
        """Gets the region of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501

        The AWS Region the cluster lives in.  # noqa: E501

        :return: The region of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.

        The AWS Region the cluster lives in.  # noqa: E501

        :param region: The region of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def role_additional_policies(self):
        """Gets the role_additional_policies of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501

        RoleAdditionalPolicies allows you to attach additional polices to the control plane role. You must enable the EKSAllowAddRoles feature flag to incorporate these into the created role.  # noqa: E501

        :return: The role_additional_policies of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._role_additional_policies

    @role_additional_policies.setter
    def role_additional_policies(self, role_additional_policies):
        """Sets the role_additional_policies of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.

        RoleAdditionalPolicies allows you to attach additional polices to the control plane role. You must enable the EKSAllowAddRoles feature flag to incorporate these into the created role.  # noqa: E501

        :param role_additional_policies: The role_additional_policies of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :type: list[str]
        """

        self._role_additional_policies = role_additional_policies

    @property
    def role_name(self):
        """Gets the role_name of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501

        RoleName specifies the name of IAM role that gives EKS permission to make API calls. If the role is pre-existing we will treat it as unmanaged and not delete it on deletion. If the EKSEnableIAM feature flag is true and no name is supplied then a role is created.  # noqa: E501

        :return: The role_name of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.

        RoleName specifies the name of IAM role that gives EKS permission to make API calls. If the role is pre-existing we will treat it as unmanaged and not delete it on deletion. If the EKSEnableIAM feature flag is true and no name is supplied then a role is created.  # noqa: E501

        :param role_name: The role_name of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                role_name is not None and len(role_name) < 2):
            raise ValueError("Invalid value for `role_name`, length must be greater than or equal to `2`")  # noqa: E501

        self._role_name = role_name

    @property
    def secondary_cidr_block(self):
        """Gets the secondary_cidr_block of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501

        SecondaryCidrBlock is the additional CIDR range to use for pod IPs. Must be within the 100.64.0.0/10 or 198.19.0.0/16 range.  # noqa: E501

        :return: The secondary_cidr_block of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :rtype: str
        """
        return self._secondary_cidr_block

    @secondary_cidr_block.setter
    def secondary_cidr_block(self, secondary_cidr_block):
        """Sets the secondary_cidr_block of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.

        SecondaryCidrBlock is the additional CIDR range to use for pod IPs. Must be within the 100.64.0.0/10 or 198.19.0.0/16 range.  # noqa: E501

        :param secondary_cidr_block: The secondary_cidr_block of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :type: str
        """

        self._secondary_cidr_block = secondary_cidr_block

    @property
    def ssh_key_name(self):
        """Gets the ssh_key_name of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501

        SSHKeyName is the name of the ssh key to attach to the bastion host. Valid values are empty string (do not use SSH keys), a valid SSH key name, or omitted (use the default SSH key name)  # noqa: E501

        :return: The ssh_key_name of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :rtype: str
        """
        return self._ssh_key_name

    @ssh_key_name.setter
    def ssh_key_name(self, ssh_key_name):
        """Sets the ssh_key_name of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.

        SSHKeyName is the name of the ssh key to attach to the bastion host. Valid values are empty string (do not use SSH keys), a valid SSH key name, or omitted (use the default SSH key name)  # noqa: E501

        :param ssh_key_name: The ssh_key_name of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :type: str
        """

        self._ssh_key_name = ssh_key_name

    @property
    def token_method(self):
        """Gets the token_method of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501

        TokenMethod is used to specify the method for obtaining a client token for communicating with EKS iam-authenticator - obtains a client token using iam-authentictor aws-cli - obtains a client token using the AWS CLI Defaults to iam-authenticator  # noqa: E501

        :return: The token_method of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :rtype: str
        """
        return self._token_method

    @token_method.setter
    def token_method(self, token_method):
        """Sets the token_method of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.

        TokenMethod is used to specify the method for obtaining a client token for communicating with EKS iam-authenticator - obtains a client token using iam-authentictor aws-cli - obtains a client token using the AWS CLI Defaults to iam-authenticator  # noqa: E501

        :param token_method: The token_method of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :type: str
        """
        allowed_values = ["iam-authenticator", "aws-cli"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and token_method not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `token_method` ({0}), must be one of {1}"  # noqa: E501
                .format(token_method, allowed_values)
            )

        self._token_method = token_method

    @property
    def version(self):
        """Gets the version of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501

        Version defines the desired Kubernetes version. If no version number is supplied then the latest version of Kubernetes that EKS supports will be used.  # noqa: E501

        :return: The version of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.

        Version defines the desired Kubernetes version. If no version number is supplied then the latest version of Kubernetes that EKS supports will be used.  # noqa: E501

        :param version: The version of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                version is not None and len(version) < 2):
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `2`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                version is not None and not re.search(r'^v(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.?$', version)):  # noqa: E501
            raise ValueError(r"Invalid value for `version`, must be a follow pattern or equal to `/^v(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.?$/`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpec):
            return True

        return self.to_dict() != other.to_dict()
