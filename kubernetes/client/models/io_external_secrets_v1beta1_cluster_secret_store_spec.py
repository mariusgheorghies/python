# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoExternalSecretsV1beta1ClusterSecretStoreSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'conditions': 'list[IoExternalSecretsV1beta1ClusterSecretStoreSpecConditions]',
        'controller': 'str',
        'provider': 'IoExternalSecretsV1beta1ClusterSecretStoreSpecProvider',
        'refresh_interval': 'int',
        'retry_settings': 'IoExternalSecretsV1alpha1ClusterSecretStoreSpecRetrySettings'
    }

    attribute_map = {
        'conditions': 'conditions',
        'controller': 'controller',
        'provider': 'provider',
        'refresh_interval': 'refreshInterval',
        'retry_settings': 'retrySettings'
    }

    def __init__(self, conditions=None, controller=None, provider=None, refresh_interval=None, retry_settings=None, local_vars_configuration=None):  # noqa: E501
        """IoExternalSecretsV1beta1ClusterSecretStoreSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._conditions = None
        self._controller = None
        self._provider = None
        self._refresh_interval = None
        self._retry_settings = None
        self.discriminator = None

        if conditions is not None:
            self.conditions = conditions
        if controller is not None:
            self.controller = controller
        self.provider = provider
        if refresh_interval is not None:
            self.refresh_interval = refresh_interval
        if retry_settings is not None:
            self.retry_settings = retry_settings

    @property
    def conditions(self):
        """Gets the conditions of this IoExternalSecretsV1beta1ClusterSecretStoreSpec.  # noqa: E501

        Used to constraint a ClusterSecretStore to specific namespaces. Relevant only to ClusterSecretStore  # noqa: E501

        :return: The conditions of this IoExternalSecretsV1beta1ClusterSecretStoreSpec.  # noqa: E501
        :rtype: list[IoExternalSecretsV1beta1ClusterSecretStoreSpecConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this IoExternalSecretsV1beta1ClusterSecretStoreSpec.

        Used to constraint a ClusterSecretStore to specific namespaces. Relevant only to ClusterSecretStore  # noqa: E501

        :param conditions: The conditions of this IoExternalSecretsV1beta1ClusterSecretStoreSpec.  # noqa: E501
        :type: list[IoExternalSecretsV1beta1ClusterSecretStoreSpecConditions]
        """

        self._conditions = conditions

    @property
    def controller(self):
        """Gets the controller of this IoExternalSecretsV1beta1ClusterSecretStoreSpec.  # noqa: E501

        Used to select the correct KES controller (think: ingress.ingressClassName) The KES controller is instantiated with a specific controller name and filters ES based on this property  # noqa: E501

        :return: The controller of this IoExternalSecretsV1beta1ClusterSecretStoreSpec.  # noqa: E501
        :rtype: str
        """
        return self._controller

    @controller.setter
    def controller(self, controller):
        """Sets the controller of this IoExternalSecretsV1beta1ClusterSecretStoreSpec.

        Used to select the correct KES controller (think: ingress.ingressClassName) The KES controller is instantiated with a specific controller name and filters ES based on this property  # noqa: E501

        :param controller: The controller of this IoExternalSecretsV1beta1ClusterSecretStoreSpec.  # noqa: E501
        :type: str
        """

        self._controller = controller

    @property
    def provider(self):
        """Gets the provider of this IoExternalSecretsV1beta1ClusterSecretStoreSpec.  # noqa: E501


        :return: The provider of this IoExternalSecretsV1beta1ClusterSecretStoreSpec.  # noqa: E501
        :rtype: IoExternalSecretsV1beta1ClusterSecretStoreSpecProvider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this IoExternalSecretsV1beta1ClusterSecretStoreSpec.


        :param provider: The provider of this IoExternalSecretsV1beta1ClusterSecretStoreSpec.  # noqa: E501
        :type: IoExternalSecretsV1beta1ClusterSecretStoreSpecProvider
        """
        if self.local_vars_configuration.client_side_validation and provider is None:  # noqa: E501
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def refresh_interval(self):
        """Gets the refresh_interval of this IoExternalSecretsV1beta1ClusterSecretStoreSpec.  # noqa: E501

        Used to configure store refresh interval in seconds. Empty or 0 will default to the controller config.  # noqa: E501

        :return: The refresh_interval of this IoExternalSecretsV1beta1ClusterSecretStoreSpec.  # noqa: E501
        :rtype: int
        """
        return self._refresh_interval

    @refresh_interval.setter
    def refresh_interval(self, refresh_interval):
        """Sets the refresh_interval of this IoExternalSecretsV1beta1ClusterSecretStoreSpec.

        Used to configure store refresh interval in seconds. Empty or 0 will default to the controller config.  # noqa: E501

        :param refresh_interval: The refresh_interval of this IoExternalSecretsV1beta1ClusterSecretStoreSpec.  # noqa: E501
        :type: int
        """

        self._refresh_interval = refresh_interval

    @property
    def retry_settings(self):
        """Gets the retry_settings of this IoExternalSecretsV1beta1ClusterSecretStoreSpec.  # noqa: E501


        :return: The retry_settings of this IoExternalSecretsV1beta1ClusterSecretStoreSpec.  # noqa: E501
        :rtype: IoExternalSecretsV1alpha1ClusterSecretStoreSpecRetrySettings
        """
        return self._retry_settings

    @retry_settings.setter
    def retry_settings(self, retry_settings):
        """Sets the retry_settings of this IoExternalSecretsV1beta1ClusterSecretStoreSpec.


        :param retry_settings: The retry_settings of this IoExternalSecretsV1beta1ClusterSecretStoreSpec.  # noqa: E501
        :type: IoExternalSecretsV1alpha1ClusterSecretStoreSpecRetrySettings
        """

        self._retry_settings = retry_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoExternalSecretsV1beta1ClusterSecretStoreSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoExternalSecretsV1beta1ClusterSecretStoreSpec):
            return True

        return self.to_dict() != other.to_dict()
