# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterInfrastructureV1beta1AWSFargateProfileStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'conditions': 'list[IoXK8sClusterAddonsV1beta1ClusterResourceSetStatusConditions]',
        'failure_message': 'str',
        'failure_reason': 'str',
        'ready': 'bool'
    }

    attribute_map = {
        'conditions': 'conditions',
        'failure_message': 'failureMessage',
        'failure_reason': 'failureReason',
        'ready': 'ready'
    }

    def __init__(self, conditions=None, failure_message=None, failure_reason=None, ready=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterInfrastructureV1beta1AWSFargateProfileStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._conditions = None
        self._failure_message = None
        self._failure_reason = None
        self._ready = None
        self.discriminator = None

        if conditions is not None:
            self.conditions = conditions
        if failure_message is not None:
            self.failure_message = failure_message
        if failure_reason is not None:
            self.failure_reason = failure_reason
        self.ready = ready

    @property
    def conditions(self):
        """Gets the conditions of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileStatus.  # noqa: E501

        Conditions defines current state of the Fargate profile.  # noqa: E501

        :return: The conditions of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileStatus.  # noqa: E501
        :rtype: list[IoXK8sClusterAddonsV1beta1ClusterResourceSetStatusConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileStatus.

        Conditions defines current state of the Fargate profile.  # noqa: E501

        :param conditions: The conditions of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileStatus.  # noqa: E501
        :type: list[IoXK8sClusterAddonsV1beta1ClusterResourceSetStatusConditions]
        """

        self._conditions = conditions

    @property
    def failure_message(self):
        """Gets the failure_message of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileStatus.  # noqa: E501

        FailureMessage will be set in the event that there is a terminal problem reconciling the FargateProfile and will contain a more verbose string suitable for logging and human consumption.   This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the FargateProfile's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.   Any transient errors that occur during the reconciliation of FargateProfiles can be added as events to the FargateProfile object and/or logged in the controller's output.  # noqa: E501

        :return: The failure_message of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileStatus.  # noqa: E501
        :rtype: str
        """
        return self._failure_message

    @failure_message.setter
    def failure_message(self, failure_message):
        """Sets the failure_message of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileStatus.

        FailureMessage will be set in the event that there is a terminal problem reconciling the FargateProfile and will contain a more verbose string suitable for logging and human consumption.   This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the FargateProfile's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.   Any transient errors that occur during the reconciliation of FargateProfiles can be added as events to the FargateProfile object and/or logged in the controller's output.  # noqa: E501

        :param failure_message: The failure_message of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileStatus.  # noqa: E501
        :type: str
        """

        self._failure_message = failure_message

    @property
    def failure_reason(self):
        """Gets the failure_reason of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileStatus.  # noqa: E501

        FailureReason will be set in the event that there is a terminal problem reconciling the FargateProfile and will contain a succinct value suitable for machine interpretation.   This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the FargateProfile's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.   Any transient errors that occur during the reconciliation of FargateProfiles can be added as events to the FargateProfile object and/or logged in the controller's output.  # noqa: E501

        :return: The failure_reason of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileStatus.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileStatus.

        FailureReason will be set in the event that there is a terminal problem reconciling the FargateProfile and will contain a succinct value suitable for machine interpretation.   This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the FargateProfile's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.   Any transient errors that occur during the reconciliation of FargateProfiles can be added as events to the FargateProfile object and/or logged in the controller's output.  # noqa: E501

        :param failure_reason: The failure_reason of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileStatus.  # noqa: E501
        :type: str
        """

        self._failure_reason = failure_reason

    @property
    def ready(self):
        """Gets the ready of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileStatus.  # noqa: E501

        Ready denotes that the FargateProfile is available.  # noqa: E501

        :return: The ready of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileStatus.  # noqa: E501
        :rtype: bool
        """
        return self._ready

    @ready.setter
    def ready(self, ready):
        """Sets the ready of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileStatus.

        Ready denotes that the FargateProfile is available.  # noqa: E501

        :param ready: The ready of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileStatus.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and ready is None:  # noqa: E501
            raise ValueError("Invalid value for `ready`, must not be `None`")  # noqa: E501

        self._ready = ready

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1beta1AWSFargateProfileStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1beta1AWSFargateProfileStatus):
            return True

        return self.to_dict() != other.to_dict()
