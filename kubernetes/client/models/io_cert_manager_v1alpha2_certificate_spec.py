# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoCertManagerV1alpha2CertificateSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'common_name': 'str',
        'dns_names': 'list[str]',
        'duration': 'str',
        'email_sa_ns': 'list[str]',
        'encode_usages_in_request': 'bool',
        'ip_addresses': 'list[str]',
        'is_ca': 'bool',
        'issuer_ref': 'IoCertManagerV1CertificateSpecIssuerRef',
        'key_algorithm': 'str',
        'key_encoding': 'str',
        'key_size': 'int',
        'keystores': 'IoCertManagerV1alpha2CertificateSpecKeystores',
        'organization': 'list[str]',
        'private_key': 'IoCertManagerV1alpha2CertificateSpecPrivateKey',
        'renew_before': 'str',
        'revision_history_limit': 'int',
        'secret_name': 'str',
        'secret_template': 'IoCertManagerV1CertificateSpecSecretTemplate',
        'subject': 'IoCertManagerV1alpha2CertificateSpecSubject',
        'uri_sa_ns': 'list[str]',
        'usages': 'list[str]'
    }

    attribute_map = {
        'common_name': 'commonName',
        'dns_names': 'dnsNames',
        'duration': 'duration',
        'email_sa_ns': 'emailSANs',
        'encode_usages_in_request': 'encodeUsagesInRequest',
        'ip_addresses': 'ipAddresses',
        'is_ca': 'isCA',
        'issuer_ref': 'issuerRef',
        'key_algorithm': 'keyAlgorithm',
        'key_encoding': 'keyEncoding',
        'key_size': 'keySize',
        'keystores': 'keystores',
        'organization': 'organization',
        'private_key': 'privateKey',
        'renew_before': 'renewBefore',
        'revision_history_limit': 'revisionHistoryLimit',
        'secret_name': 'secretName',
        'secret_template': 'secretTemplate',
        'subject': 'subject',
        'uri_sa_ns': 'uriSANs',
        'usages': 'usages'
    }

    def __init__(self, common_name=None, dns_names=None, duration=None, email_sa_ns=None, encode_usages_in_request=None, ip_addresses=None, is_ca=None, issuer_ref=None, key_algorithm=None, key_encoding=None, key_size=None, keystores=None, organization=None, private_key=None, renew_before=None, revision_history_limit=None, secret_name=None, secret_template=None, subject=None, uri_sa_ns=None, usages=None, local_vars_configuration=None):  # noqa: E501
        """IoCertManagerV1alpha2CertificateSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._common_name = None
        self._dns_names = None
        self._duration = None
        self._email_sa_ns = None
        self._encode_usages_in_request = None
        self._ip_addresses = None
        self._is_ca = None
        self._issuer_ref = None
        self._key_algorithm = None
        self._key_encoding = None
        self._key_size = None
        self._keystores = None
        self._organization = None
        self._private_key = None
        self._renew_before = None
        self._revision_history_limit = None
        self._secret_name = None
        self._secret_template = None
        self._subject = None
        self._uri_sa_ns = None
        self._usages = None
        self.discriminator = None

        if common_name is not None:
            self.common_name = common_name
        if dns_names is not None:
            self.dns_names = dns_names
        if duration is not None:
            self.duration = duration
        if email_sa_ns is not None:
            self.email_sa_ns = email_sa_ns
        if encode_usages_in_request is not None:
            self.encode_usages_in_request = encode_usages_in_request
        if ip_addresses is not None:
            self.ip_addresses = ip_addresses
        if is_ca is not None:
            self.is_ca = is_ca
        self.issuer_ref = issuer_ref
        if key_algorithm is not None:
            self.key_algorithm = key_algorithm
        if key_encoding is not None:
            self.key_encoding = key_encoding
        if key_size is not None:
            self.key_size = key_size
        if keystores is not None:
            self.keystores = keystores
        if organization is not None:
            self.organization = organization
        if private_key is not None:
            self.private_key = private_key
        if renew_before is not None:
            self.renew_before = renew_before
        if revision_history_limit is not None:
            self.revision_history_limit = revision_history_limit
        self.secret_name = secret_name
        if secret_template is not None:
            self.secret_template = secret_template
        if subject is not None:
            self.subject = subject
        if uri_sa_ns is not None:
            self.uri_sa_ns = uri_sa_ns
        if usages is not None:
            self.usages = usages

    @property
    def common_name(self):
        """Gets the common_name of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501

        CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4  # noqa: E501

        :return: The common_name of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this IoCertManagerV1alpha2CertificateSpec.

        CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4  # noqa: E501

        :param common_name: The common_name of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :type: str
        """

        self._common_name = common_name

    @property
    def dns_names(self):
        """Gets the dns_names of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501

        DNSNames is a list of DNS subjectAltNames to be set on the Certificate.  # noqa: E501

        :return: The dns_names of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._dns_names

    @dns_names.setter
    def dns_names(self, dns_names):
        """Sets the dns_names of this IoCertManagerV1alpha2CertificateSpec.

        DNSNames is a list of DNS subjectAltNames to be set on the Certificate.  # noqa: E501

        :param dns_names: The dns_names of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :type: list[str]
        """

        self._dns_names = dns_names

    @property
    def duration(self):
        """Gets the duration of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501

        The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If unset this defaults to 90 days. Certificate will be renewed either 2/3 through its duration or `renewBefore` period before its expiry, whichever is later. Minimum accepted duration is 1 hour. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration  # noqa: E501

        :return: The duration of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this IoCertManagerV1alpha2CertificateSpec.

        The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If unset this defaults to 90 days. Certificate will be renewed either 2/3 through its duration or `renewBefore` period before its expiry, whichever is later. Minimum accepted duration is 1 hour. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration  # noqa: E501

        :param duration: The duration of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def email_sa_ns(self):
        """Gets the email_sa_ns of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501

        EmailSANs is a list of email subjectAltNames to be set on the Certificate.  # noqa: E501

        :return: The email_sa_ns of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._email_sa_ns

    @email_sa_ns.setter
    def email_sa_ns(self, email_sa_ns):
        """Sets the email_sa_ns of this IoCertManagerV1alpha2CertificateSpec.

        EmailSANs is a list of email subjectAltNames to be set on the Certificate.  # noqa: E501

        :param email_sa_ns: The email_sa_ns of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :type: list[str]
        """

        self._email_sa_ns = email_sa_ns

    @property
    def encode_usages_in_request(self):
        """Gets the encode_usages_in_request of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501

        EncodeUsagesInRequest controls whether key usages should be present in the CertificateRequest  # noqa: E501

        :return: The encode_usages_in_request of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :rtype: bool
        """
        return self._encode_usages_in_request

    @encode_usages_in_request.setter
    def encode_usages_in_request(self, encode_usages_in_request):
        """Sets the encode_usages_in_request of this IoCertManagerV1alpha2CertificateSpec.

        EncodeUsagesInRequest controls whether key usages should be present in the CertificateRequest  # noqa: E501

        :param encode_usages_in_request: The encode_usages_in_request of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :type: bool
        """

        self._encode_usages_in_request = encode_usages_in_request

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501

        IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.  # noqa: E501

        :return: The ip_addresses of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this IoCertManagerV1alpha2CertificateSpec.

        IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.  # noqa: E501

        :param ip_addresses: The ip_addresses of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :type: list[str]
        """

        self._ip_addresses = ip_addresses

    @property
    def is_ca(self):
        """Gets the is_ca of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501

        IsCA will mark this Certificate as valid for certificate signing. This will automatically add the `cert sign` usage to the list of `usages`.  # noqa: E501

        :return: The is_ca of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :rtype: bool
        """
        return self._is_ca

    @is_ca.setter
    def is_ca(self, is_ca):
        """Sets the is_ca of this IoCertManagerV1alpha2CertificateSpec.

        IsCA will mark this Certificate as valid for certificate signing. This will automatically add the `cert sign` usage to the list of `usages`.  # noqa: E501

        :param is_ca: The is_ca of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :type: bool
        """

        self._is_ca = is_ca

    @property
    def issuer_ref(self):
        """Gets the issuer_ref of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501


        :return: The issuer_ref of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :rtype: IoCertManagerV1CertificateSpecIssuerRef
        """
        return self._issuer_ref

    @issuer_ref.setter
    def issuer_ref(self, issuer_ref):
        """Sets the issuer_ref of this IoCertManagerV1alpha2CertificateSpec.


        :param issuer_ref: The issuer_ref of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :type: IoCertManagerV1CertificateSpecIssuerRef
        """
        if self.local_vars_configuration.client_side_validation and issuer_ref is None:  # noqa: E501
            raise ValueError("Invalid value for `issuer_ref`, must not be `None`")  # noqa: E501

        self._issuer_ref = issuer_ref

    @property
    def key_algorithm(self):
        """Gets the key_algorithm of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501

        KeyAlgorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either `rsa` or `ecdsa` If `keyAlgorithm` is specified and `keySize` is not provided, key size of 256 will be used for `ecdsa` key algorithm and key size of 2048 will be used for `rsa` key algorithm.  # noqa: E501

        :return: The key_algorithm of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :rtype: str
        """
        return self._key_algorithm

    @key_algorithm.setter
    def key_algorithm(self, key_algorithm):
        """Sets the key_algorithm of this IoCertManagerV1alpha2CertificateSpec.

        KeyAlgorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either `rsa` or `ecdsa` If `keyAlgorithm` is specified and `keySize` is not provided, key size of 256 will be used for `ecdsa` key algorithm and key size of 2048 will be used for `rsa` key algorithm.  # noqa: E501

        :param key_algorithm: The key_algorithm of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :type: str
        """
        allowed_values = ["rsa", "ecdsa"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and key_algorithm not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `key_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(key_algorithm, allowed_values)
            )

        self._key_algorithm = key_algorithm

    @property
    def key_encoding(self):
        """Gets the key_encoding of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501

        KeyEncoding is the private key cryptography standards (PKCS) for this certificate's private key to be encoded in. If provided, allowed values are `pkcs1` and `pkcs8` standing for PKCS#1 and PKCS#8, respectively. If KeyEncoding is not specified, then `pkcs1` will be used by default.  # noqa: E501

        :return: The key_encoding of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :rtype: str
        """
        return self._key_encoding

    @key_encoding.setter
    def key_encoding(self, key_encoding):
        """Sets the key_encoding of this IoCertManagerV1alpha2CertificateSpec.

        KeyEncoding is the private key cryptography standards (PKCS) for this certificate's private key to be encoded in. If provided, allowed values are `pkcs1` and `pkcs8` standing for PKCS#1 and PKCS#8, respectively. If KeyEncoding is not specified, then `pkcs1` will be used by default.  # noqa: E501

        :param key_encoding: The key_encoding of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :type: str
        """
        allowed_values = ["pkcs1", "pkcs8"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and key_encoding not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `key_encoding` ({0}), must be one of {1}"  # noqa: E501
                .format(key_encoding, allowed_values)
            )

        self._key_encoding = key_encoding

    @property
    def key_size(self):
        """Gets the key_size of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501

        KeySize is the key bit size of the corresponding private key for this certificate. If `keyAlgorithm` is set to `rsa`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `keyAlgorithm` is set to `ecdsa`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. No other values are allowed.  # noqa: E501

        :return: The key_size of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :rtype: int
        """
        return self._key_size

    @key_size.setter
    def key_size(self, key_size):
        """Sets the key_size of this IoCertManagerV1alpha2CertificateSpec.

        KeySize is the key bit size of the corresponding private key for this certificate. If `keyAlgorithm` is set to `rsa`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `keyAlgorithm` is set to `ecdsa`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. No other values are allowed.  # noqa: E501

        :param key_size: The key_size of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :type: int
        """

        self._key_size = key_size

    @property
    def keystores(self):
        """Gets the keystores of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501


        :return: The keystores of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :rtype: IoCertManagerV1alpha2CertificateSpecKeystores
        """
        return self._keystores

    @keystores.setter
    def keystores(self, keystores):
        """Sets the keystores of this IoCertManagerV1alpha2CertificateSpec.


        :param keystores: The keystores of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :type: IoCertManagerV1alpha2CertificateSpecKeystores
        """

        self._keystores = keystores

    @property
    def organization(self):
        """Gets the organization of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501

        Organization is a list of organizations to be used on the Certificate.  # noqa: E501

        :return: The organization of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this IoCertManagerV1alpha2CertificateSpec.

        Organization is a list of organizations to be used on the Certificate.  # noqa: E501

        :param organization: The organization of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :type: list[str]
        """

        self._organization = organization

    @property
    def private_key(self):
        """Gets the private_key of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501


        :return: The private_key of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :rtype: IoCertManagerV1alpha2CertificateSpecPrivateKey
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this IoCertManagerV1alpha2CertificateSpec.


        :param private_key: The private_key of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :type: IoCertManagerV1alpha2CertificateSpecPrivateKey
        """

        self._private_key = private_key

    @property
    def renew_before(self):
        """Gets the renew_before of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501

        How long before the currently issued certificate's expiry cert-manager should renew the certificate. The default is 2/3 of the issued certificate's duration. Minimum accepted value is 5 minutes. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration  # noqa: E501

        :return: The renew_before of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :rtype: str
        """
        return self._renew_before

    @renew_before.setter
    def renew_before(self, renew_before):
        """Sets the renew_before of this IoCertManagerV1alpha2CertificateSpec.

        How long before the currently issued certificate's expiry cert-manager should renew the certificate. The default is 2/3 of the issued certificate's duration. Minimum accepted value is 5 minutes. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration  # noqa: E501

        :param renew_before: The renew_before of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :type: str
        """

        self._renew_before = renew_before

    @property
    def revision_history_limit(self):
        """Gets the revision_history_limit of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501

        revisionHistoryLimit is the maximum number of CertificateRequest revisions that are maintained in the Certificate's history. Each revision represents a single `CertificateRequest` created by this Certificate, either when it was created, renewed, or Spec was changed. Revisions will be removed by oldest first if the number of revisions exceeds this number. If set, revisionHistoryLimit must be a value of `1` or greater. If unset (`nil`), revisions will not be garbage collected. Default value is `nil`.  # noqa: E501

        :return: The revision_history_limit of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :rtype: int
        """
        return self._revision_history_limit

    @revision_history_limit.setter
    def revision_history_limit(self, revision_history_limit):
        """Sets the revision_history_limit of this IoCertManagerV1alpha2CertificateSpec.

        revisionHistoryLimit is the maximum number of CertificateRequest revisions that are maintained in the Certificate's history. Each revision represents a single `CertificateRequest` created by this Certificate, either when it was created, renewed, or Spec was changed. Revisions will be removed by oldest first if the number of revisions exceeds this number. If set, revisionHistoryLimit must be a value of `1` or greater. If unset (`nil`), revisions will not be garbage collected. Default value is `nil`.  # noqa: E501

        :param revision_history_limit: The revision_history_limit of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :type: int
        """

        self._revision_history_limit = revision_history_limit

    @property
    def secret_name(self):
        """Gets the secret_name of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501

        SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.  # noqa: E501

        :return: The secret_name of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :rtype: str
        """
        return self._secret_name

    @secret_name.setter
    def secret_name(self, secret_name):
        """Sets the secret_name of this IoCertManagerV1alpha2CertificateSpec.

        SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.  # noqa: E501

        :param secret_name: The secret_name of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and secret_name is None:  # noqa: E501
            raise ValueError("Invalid value for `secret_name`, must not be `None`")  # noqa: E501

        self._secret_name = secret_name

    @property
    def secret_template(self):
        """Gets the secret_template of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501


        :return: The secret_template of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :rtype: IoCertManagerV1CertificateSpecSecretTemplate
        """
        return self._secret_template

    @secret_template.setter
    def secret_template(self, secret_template):
        """Sets the secret_template of this IoCertManagerV1alpha2CertificateSpec.


        :param secret_template: The secret_template of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :type: IoCertManagerV1CertificateSpecSecretTemplate
        """

        self._secret_template = secret_template

    @property
    def subject(self):
        """Gets the subject of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501


        :return: The subject of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :rtype: IoCertManagerV1alpha2CertificateSpecSubject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this IoCertManagerV1alpha2CertificateSpec.


        :param subject: The subject of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :type: IoCertManagerV1alpha2CertificateSpecSubject
        """

        self._subject = subject

    @property
    def uri_sa_ns(self):
        """Gets the uri_sa_ns of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501

        URISANs is a list of URI subjectAltNames to be set on the Certificate.  # noqa: E501

        :return: The uri_sa_ns of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._uri_sa_ns

    @uri_sa_ns.setter
    def uri_sa_ns(self, uri_sa_ns):
        """Sets the uri_sa_ns of this IoCertManagerV1alpha2CertificateSpec.

        URISANs is a list of URI subjectAltNames to be set on the Certificate.  # noqa: E501

        :param uri_sa_ns: The uri_sa_ns of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :type: list[str]
        """

        self._uri_sa_ns = uri_sa_ns

    @property
    def usages(self):
        """Gets the usages of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501

        Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.  # noqa: E501

        :return: The usages of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._usages

    @usages.setter
    def usages(self, usages):
        """Sets the usages of this IoCertManagerV1alpha2CertificateSpec.

        Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.  # noqa: E501

        :param usages: The usages of this IoCertManagerV1alpha2CertificateSpec.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["signing", "digital signature", "content commitment", "key encipherment", "key agreement", "data encipherment", "cert sign", "crl sign", "encipher only", "decipher only", "any", "server auth", "client auth", "code signing", "email protection", "s/mime", "ipsec end system", "ipsec tunnel", "ipsec user", "timestamping", "ocsp signing", "microsoft sgc", "netscape sgc"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(usages).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `usages` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(usages) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._usages = usages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoCertManagerV1alpha2CertificateSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoCertManagerV1alpha2CertificateSpec):
            return True

        return self.to_dict() != other.to_dict()
