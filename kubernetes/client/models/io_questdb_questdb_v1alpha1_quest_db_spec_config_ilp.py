# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tcp_commit_interval_default': 'int',
        'tcp_commit_interval_fraction': 'str',
        'tcp_default_partition_by': 'str',
        'tcp_disconnect_on_error': 'bool',
        'tcp_io_worker_count': 'int',
        'tcp_net_connection_limit': 'int',
        'tcp_writer_worker_count': 'int'
    }

    attribute_map = {
        'tcp_commit_interval_default': 'tcpCommitIntervalDefault',
        'tcp_commit_interval_fraction': 'tcpCommitIntervalFraction',
        'tcp_default_partition_by': 'tcpDefaultPartitionBy',
        'tcp_disconnect_on_error': 'tcpDisconnectOnError',
        'tcp_io_worker_count': 'tcpIOWorkerCount',
        'tcp_net_connection_limit': 'tcpNetConnectionLimit',
        'tcp_writer_worker_count': 'tcpWriterWorkerCount'
    }

    def __init__(self, tcp_commit_interval_default=None, tcp_commit_interval_fraction=None, tcp_default_partition_by=None, tcp_disconnect_on_error=None, tcp_io_worker_count=None, tcp_net_connection_limit=None, tcp_writer_worker_count=None, local_vars_configuration=None):  # noqa: E501
        """IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._tcp_commit_interval_default = None
        self._tcp_commit_interval_fraction = None
        self._tcp_default_partition_by = None
        self._tcp_disconnect_on_error = None
        self._tcp_io_worker_count = None
        self._tcp_net_connection_limit = None
        self._tcp_writer_worker_count = None
        self.discriminator = None

        if tcp_commit_interval_default is not None:
            self.tcp_commit_interval_default = tcp_commit_interval_default
        if tcp_commit_interval_fraction is not None:
            self.tcp_commit_interval_fraction = tcp_commit_interval_fraction
        if tcp_default_partition_by is not None:
            self.tcp_default_partition_by = tcp_default_partition_by
        if tcp_disconnect_on_error is not None:
            self.tcp_disconnect_on_error = tcp_disconnect_on_error
        if tcp_io_worker_count is not None:
            self.tcp_io_worker_count = tcp_io_worker_count
        if tcp_net_connection_limit is not None:
            self.tcp_net_connection_limit = tcp_net_connection_limit
        if tcp_writer_worker_count is not None:
            self.tcp_writer_worker_count = tcp_writer_worker_count

    @property
    def tcp_commit_interval_default(self):
        """Gets the tcp_commit_interval_default of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.  # noqa: E501


        :return: The tcp_commit_interval_default of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.  # noqa: E501
        :rtype: int
        """
        return self._tcp_commit_interval_default

    @tcp_commit_interval_default.setter
    def tcp_commit_interval_default(self, tcp_commit_interval_default):
        """Sets the tcp_commit_interval_default of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.


        :param tcp_commit_interval_default: The tcp_commit_interval_default of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.  # noqa: E501
        :type: int
        """

        self._tcp_commit_interval_default = tcp_commit_interval_default

    @property
    def tcp_commit_interval_fraction(self):
        """Gets the tcp_commit_interval_fraction of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.  # noqa: E501


        :return: The tcp_commit_interval_fraction of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.  # noqa: E501
        :rtype: str
        """
        return self._tcp_commit_interval_fraction

    @tcp_commit_interval_fraction.setter
    def tcp_commit_interval_fraction(self, tcp_commit_interval_fraction):
        """Sets the tcp_commit_interval_fraction of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.


        :param tcp_commit_interval_fraction: The tcp_commit_interval_fraction of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.  # noqa: E501
        :type: str
        """

        self._tcp_commit_interval_fraction = tcp_commit_interval_fraction

    @property
    def tcp_default_partition_by(self):
        """Gets the tcp_default_partition_by of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.  # noqa: E501


        :return: The tcp_default_partition_by of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.  # noqa: E501
        :rtype: str
        """
        return self._tcp_default_partition_by

    @tcp_default_partition_by.setter
    def tcp_default_partition_by(self, tcp_default_partition_by):
        """Sets the tcp_default_partition_by of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.


        :param tcp_default_partition_by: The tcp_default_partition_by of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.  # noqa: E501
        :type: str
        """

        self._tcp_default_partition_by = tcp_default_partition_by

    @property
    def tcp_disconnect_on_error(self):
        """Gets the tcp_disconnect_on_error of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.  # noqa: E501


        :return: The tcp_disconnect_on_error of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.  # noqa: E501
        :rtype: bool
        """
        return self._tcp_disconnect_on_error

    @tcp_disconnect_on_error.setter
    def tcp_disconnect_on_error(self, tcp_disconnect_on_error):
        """Sets the tcp_disconnect_on_error of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.


        :param tcp_disconnect_on_error: The tcp_disconnect_on_error of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.  # noqa: E501
        :type: bool
        """

        self._tcp_disconnect_on_error = tcp_disconnect_on_error

    @property
    def tcp_io_worker_count(self):
        """Gets the tcp_io_worker_count of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.  # noqa: E501


        :return: The tcp_io_worker_count of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.  # noqa: E501
        :rtype: int
        """
        return self._tcp_io_worker_count

    @tcp_io_worker_count.setter
    def tcp_io_worker_count(self, tcp_io_worker_count):
        """Sets the tcp_io_worker_count of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.


        :param tcp_io_worker_count: The tcp_io_worker_count of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.  # noqa: E501
        :type: int
        """

        self._tcp_io_worker_count = tcp_io_worker_count

    @property
    def tcp_net_connection_limit(self):
        """Gets the tcp_net_connection_limit of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.  # noqa: E501


        :return: The tcp_net_connection_limit of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.  # noqa: E501
        :rtype: int
        """
        return self._tcp_net_connection_limit

    @tcp_net_connection_limit.setter
    def tcp_net_connection_limit(self, tcp_net_connection_limit):
        """Sets the tcp_net_connection_limit of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.


        :param tcp_net_connection_limit: The tcp_net_connection_limit of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.  # noqa: E501
        :type: int
        """

        self._tcp_net_connection_limit = tcp_net_connection_limit

    @property
    def tcp_writer_worker_count(self):
        """Gets the tcp_writer_worker_count of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.  # noqa: E501


        :return: The tcp_writer_worker_count of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.  # noqa: E501
        :rtype: int
        """
        return self._tcp_writer_worker_count

    @tcp_writer_worker_count.setter
    def tcp_writer_worker_count(self, tcp_writer_worker_count):
        """Sets the tcp_writer_worker_count of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.


        :param tcp_writer_worker_count: The tcp_writer_worker_count of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp.  # noqa: E501
        :type: int
        """

        self._tcp_writer_worker_count = tcp_writer_worker_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoQuestdbQuestdbV1alpha1QuestDBSpecConfigIlp):
            return True

        return self.to_dict() != other.to_dict()
