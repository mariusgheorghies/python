# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoTigeraOperatorV1InstallationSpecCalicoNetwork(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bgp': 'str',
        'container_ip_forwarding': 'str',
        'host_ports': 'str',
        'ip_pools': 'list[IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools]',
        'linux_dataplane': 'str',
        'mtu': 'int',
        'multi_interface_mode': 'str',
        'node_address_autodetection_v4': 'IoTigeraOperatorV1InstallationSpecCalicoNetworkNodeAddressAutodetectionV4',
        'node_address_autodetection_v6': 'IoTigeraOperatorV1InstallationSpecCalicoNetworkNodeAddressAutodetectionV6'
    }

    attribute_map = {
        'bgp': 'bgp',
        'container_ip_forwarding': 'containerIPForwarding',
        'host_ports': 'hostPorts',
        'ip_pools': 'ipPools',
        'linux_dataplane': 'linuxDataplane',
        'mtu': 'mtu',
        'multi_interface_mode': 'multiInterfaceMode',
        'node_address_autodetection_v4': 'nodeAddressAutodetectionV4',
        'node_address_autodetection_v6': 'nodeAddressAutodetectionV6'
    }

    def __init__(self, bgp=None, container_ip_forwarding=None, host_ports=None, ip_pools=None, linux_dataplane=None, mtu=None, multi_interface_mode=None, node_address_autodetection_v4=None, node_address_autodetection_v6=None, local_vars_configuration=None):  # noqa: E501
        """IoTigeraOperatorV1InstallationSpecCalicoNetwork - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bgp = None
        self._container_ip_forwarding = None
        self._host_ports = None
        self._ip_pools = None
        self._linux_dataplane = None
        self._mtu = None
        self._multi_interface_mode = None
        self._node_address_autodetection_v4 = None
        self._node_address_autodetection_v6 = None
        self.discriminator = None

        if bgp is not None:
            self.bgp = bgp
        if container_ip_forwarding is not None:
            self.container_ip_forwarding = container_ip_forwarding
        if host_ports is not None:
            self.host_ports = host_ports
        if ip_pools is not None:
            self.ip_pools = ip_pools
        if linux_dataplane is not None:
            self.linux_dataplane = linux_dataplane
        if mtu is not None:
            self.mtu = mtu
        if multi_interface_mode is not None:
            self.multi_interface_mode = multi_interface_mode
        if node_address_autodetection_v4 is not None:
            self.node_address_autodetection_v4 = node_address_autodetection_v4
        if node_address_autodetection_v6 is not None:
            self.node_address_autodetection_v6 = node_address_autodetection_v6

    @property
    def bgp(self):
        """Gets the bgp of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501

        BGP configures whether or not to enable Calico's BGP capabilities.  # noqa: E501

        :return: The bgp of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501
        :rtype: str
        """
        return self._bgp

    @bgp.setter
    def bgp(self, bgp):
        """Sets the bgp of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.

        BGP configures whether or not to enable Calico's BGP capabilities.  # noqa: E501

        :param bgp: The bgp of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501
        :type: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and bgp not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `bgp` ({0}), must be one of {1}"  # noqa: E501
                .format(bgp, allowed_values)
            )

        self._bgp = bgp

    @property
    def container_ip_forwarding(self):
        """Gets the container_ip_forwarding of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501

        ContainerIPForwarding configures whether ip forwarding will be enabled for containers in the CNI configuration. Default: Disabled  # noqa: E501

        :return: The container_ip_forwarding of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501
        :rtype: str
        """
        return self._container_ip_forwarding

    @container_ip_forwarding.setter
    def container_ip_forwarding(self, container_ip_forwarding):
        """Sets the container_ip_forwarding of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.

        ContainerIPForwarding configures whether ip forwarding will be enabled for containers in the CNI configuration. Default: Disabled  # noqa: E501

        :param container_ip_forwarding: The container_ip_forwarding of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501
        :type: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and container_ip_forwarding not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `container_ip_forwarding` ({0}), must be one of {1}"  # noqa: E501
                .format(container_ip_forwarding, allowed_values)
            )

        self._container_ip_forwarding = container_ip_forwarding

    @property
    def host_ports(self):
        """Gets the host_ports of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501

        HostPorts configures whether or not Calico will support Kubernetes HostPorts. Valid only when using the Calico CNI plugin. Default: Enabled  # noqa: E501

        :return: The host_ports of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501
        :rtype: str
        """
        return self._host_ports

    @host_ports.setter
    def host_ports(self, host_ports):
        """Sets the host_ports of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.

        HostPorts configures whether or not Calico will support Kubernetes HostPorts. Valid only when using the Calico CNI plugin. Default: Enabled  # noqa: E501

        :param host_ports: The host_ports of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501
        :type: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and host_ports not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `host_ports` ({0}), must be one of {1}"  # noqa: E501
                .format(host_ports, allowed_values)
            )

        self._host_ports = host_ports

    @property
    def ip_pools(self):
        """Gets the ip_pools of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501

        IPPools contains a list of IP pools to create if none exist. At most one IP pool of each address family may be specified. If omitted, a single pool will be configured if needed.  # noqa: E501

        :return: The ip_pools of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501
        :rtype: list[IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools]
        """
        return self._ip_pools

    @ip_pools.setter
    def ip_pools(self, ip_pools):
        """Sets the ip_pools of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.

        IPPools contains a list of IP pools to create if none exist. At most one IP pool of each address family may be specified. If omitted, a single pool will be configured if needed.  # noqa: E501

        :param ip_pools: The ip_pools of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501
        :type: list[IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools]
        """

        self._ip_pools = ip_pools

    @property
    def linux_dataplane(self):
        """Gets the linux_dataplane of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501

        LinuxDataplane is used to select the dataplane used for Linux nodes. In particular, it causes the operator to add required mounts and environment variables for the particular dataplane. If not specified, iptables mode is used. Default: Iptables  # noqa: E501

        :return: The linux_dataplane of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501
        :rtype: str
        """
        return self._linux_dataplane

    @linux_dataplane.setter
    def linux_dataplane(self, linux_dataplane):
        """Sets the linux_dataplane of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.

        LinuxDataplane is used to select the dataplane used for Linux nodes. In particular, it causes the operator to add required mounts and environment variables for the particular dataplane. If not specified, iptables mode is used. Default: Iptables  # noqa: E501

        :param linux_dataplane: The linux_dataplane of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501
        :type: str
        """
        allowed_values = ["Iptables", "BPF"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and linux_dataplane not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `linux_dataplane` ({0}), must be one of {1}"  # noqa: E501
                .format(linux_dataplane, allowed_values)
            )

        self._linux_dataplane = linux_dataplane

    @property
    def mtu(self):
        """Gets the mtu of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501

        MTU specifies the maximum transmission unit to use on the pod network. If not specified, Calico will perform MTU auto-detection based on the cluster network.  # noqa: E501

        :return: The mtu of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.

        MTU specifies the maximum transmission unit to use on the pod network. If not specified, Calico will perform MTU auto-detection based on the cluster network.  # noqa: E501

        :param mtu: The mtu of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501
        :type: int
        """

        self._mtu = mtu

    @property
    def multi_interface_mode(self):
        """Gets the multi_interface_mode of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501

        MultiInterfaceMode configures what will configure multiple interface per pod. Only valid for Calico Enterprise installations using the Calico CNI plugin. Default: None  # noqa: E501

        :return: The multi_interface_mode of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501
        :rtype: str
        """
        return self._multi_interface_mode

    @multi_interface_mode.setter
    def multi_interface_mode(self, multi_interface_mode):
        """Sets the multi_interface_mode of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.

        MultiInterfaceMode configures what will configure multiple interface per pod. Only valid for Calico Enterprise installations using the Calico CNI plugin. Default: None  # noqa: E501

        :param multi_interface_mode: The multi_interface_mode of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Multus"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and multi_interface_mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `multi_interface_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(multi_interface_mode, allowed_values)
            )

        self._multi_interface_mode = multi_interface_mode

    @property
    def node_address_autodetection_v4(self):
        """Gets the node_address_autodetection_v4 of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501


        :return: The node_address_autodetection_v4 of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501
        :rtype: IoTigeraOperatorV1InstallationSpecCalicoNetworkNodeAddressAutodetectionV4
        """
        return self._node_address_autodetection_v4

    @node_address_autodetection_v4.setter
    def node_address_autodetection_v4(self, node_address_autodetection_v4):
        """Sets the node_address_autodetection_v4 of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.


        :param node_address_autodetection_v4: The node_address_autodetection_v4 of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501
        :type: IoTigeraOperatorV1InstallationSpecCalicoNetworkNodeAddressAutodetectionV4
        """

        self._node_address_autodetection_v4 = node_address_autodetection_v4

    @property
    def node_address_autodetection_v6(self):
        """Gets the node_address_autodetection_v6 of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501


        :return: The node_address_autodetection_v6 of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501
        :rtype: IoTigeraOperatorV1InstallationSpecCalicoNetworkNodeAddressAutodetectionV6
        """
        return self._node_address_autodetection_v6

    @node_address_autodetection_v6.setter
    def node_address_autodetection_v6(self, node_address_autodetection_v6):
        """Sets the node_address_autodetection_v6 of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.


        :param node_address_autodetection_v6: The node_address_autodetection_v6 of this IoTigeraOperatorV1InstallationSpecCalicoNetwork.  # noqa: E501
        :type: IoTigeraOperatorV1InstallationSpecCalicoNetworkNodeAddressAutodetectionV6
        """

        self._node_address_autodetection_v6 = node_address_autodetection_v6

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoTigeraOperatorV1InstallationSpecCalicoNetwork):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoTigeraOperatorV1InstallationSpecCalicoNetwork):
            return True

        return self.to_dict() != other.to_dict()
