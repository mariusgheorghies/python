# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComCoreosMonitoringV1PrometheusSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'additional_alert_manager_configs': 'ComCoreosMonitoringV1PrometheusSpecAdditionalAlertManagerConfigs',
        'additional_alert_relabel_configs': 'ComCoreosMonitoringV1PrometheusSpecAdditionalAlertRelabelConfigs',
        'additional_scrape_configs': 'ComCoreosMonitoringV1PrometheusSpecAdditionalScrapeConfigs',
        'affinity': 'ComCoreosMonitoringV1AlertmanagerSpecAffinity',
        'alerting': 'ComCoreosMonitoringV1PrometheusSpecAlerting',
        'allow_overlapping_blocks': 'bool',
        'apiserver_config': 'ComCoreosMonitoringV1PrometheusSpecApiserverConfig',
        'arbitrary_fs_access_through_s_ms': 'ComCoreosMonitoringV1PrometheusSpecArbitraryFSAccessThroughSMs',
        'base_image': 'str',
        'config_maps': 'list[str]',
        'containers': 'list[ComCoreosMonitoringV1AlertmanagerSpecContainers]',
        'disable_compaction': 'bool',
        'enable_admin_api': 'bool',
        'enable_features': 'list[str]',
        'enforced_label_limit': 'int',
        'enforced_label_name_length_limit': 'int',
        'enforced_label_value_length_limit': 'int',
        'enforced_namespace_label': 'str',
        'enforced_sample_limit': 'int',
        'enforced_target_limit': 'int',
        'evaluation_interval': 'str',
        'external_labels': 'dict(str, str)',
        'external_url': 'str',
        'ignore_namespace_selectors': 'bool',
        'image': 'str',
        'image_pull_secrets': 'list[ComCoreosMonitoringV1AlertmanagerSpecImagePullSecrets]',
        'init_containers': 'list[ComCoreosMonitoringV1AlertmanagerSpecContainers]',
        'listen_local': 'bool',
        'log_format': 'str',
        'log_level': 'str',
        'node_selector': 'dict(str, str)',
        'override_honor_labels': 'bool',
        'override_honor_timestamps': 'bool',
        'paused': 'bool',
        'pod_metadata': 'ComCoreosMonitoringV1PrometheusSpecPodMetadata',
        'pod_monitor_namespace_selector': 'ComCoreosMonitoringV1PrometheusSpecPodMonitorNamespaceSelector',
        'pod_monitor_selector': 'ComCoreosMonitoringV1PrometheusSpecPodMonitorSelector',
        'port_name': 'str',
        'priority_class_name': 'str',
        'probe_namespace_selector': 'ComCoreosMonitoringV1PrometheusSpecProbeNamespaceSelector',
        'probe_selector': 'ComCoreosMonitoringV1PrometheusSpecProbeSelector',
        'prometheus_external_label_name': 'str',
        'prometheus_rules_excluded_from_enforce': 'list[ComCoreosMonitoringV1PrometheusSpecPrometheusRulesExcludedFromEnforce]',
        'query': 'ComCoreosMonitoringV1PrometheusSpecQuery',
        'query_log_file': 'str',
        'remote_read': 'list[ComCoreosMonitoringV1PrometheusSpecRemoteRead]',
        'remote_write': 'list[ComCoreosMonitoringV1PrometheusSpecRemoteWrite]',
        'replica_external_label_name': 'str',
        'replicas': 'int',
        'resources': 'ComCoreosMonitoringV1AlertmanagerSpecResources1',
        'retention': 'str',
        'retention_size': 'str',
        'route_prefix': 'str',
        'rule_namespace_selector': 'ComCoreosMonitoringV1PrometheusSpecRuleNamespaceSelector',
        'rule_selector': 'ComCoreosMonitoringV1PrometheusSpecRuleSelector',
        'rules': 'ComCoreosMonitoringV1PrometheusSpecRules',
        'scrape_interval': 'str',
        'scrape_timeout': 'str',
        'secrets': 'list[str]',
        'security_context': 'ComCoreosMonitoringV1AlertmanagerSpecSecurityContext1',
        'service_account_name': 'str',
        'service_monitor_namespace_selector': 'ComCoreosMonitoringV1PrometheusSpecServiceMonitorNamespaceSelector',
        'service_monitor_selector': 'ComCoreosMonitoringV1PrometheusSpecServiceMonitorSelector',
        'sha': 'str',
        'shards': 'int',
        'storage': 'ComCoreosMonitoringV1PrometheusSpecStorage',
        'tag': 'str',
        'thanos': 'ComCoreosMonitoringV1PrometheusSpecThanos',
        'tolerations': 'list[ComCoreosMonitoringV1AlertmanagerSpecTolerations]',
        'topology_spread_constraints': 'list[ComCoreosMonitoringV1AlertmanagerSpecTopologySpreadConstraints]',
        'version': 'str',
        'volume_mounts': 'list[ComCoreosMonitoringV1AlertmanagerSpecVolumeMounts]',
        'volumes': 'list[ComCoreosMonitoringV1AlertmanagerSpecVolumes]',
        'wal_compression': 'bool',
        'web': 'ComCoreosMonitoringV1PrometheusSpecWeb'
    }

    attribute_map = {
        'additional_alert_manager_configs': 'additionalAlertManagerConfigs',
        'additional_alert_relabel_configs': 'additionalAlertRelabelConfigs',
        'additional_scrape_configs': 'additionalScrapeConfigs',
        'affinity': 'affinity',
        'alerting': 'alerting',
        'allow_overlapping_blocks': 'allowOverlappingBlocks',
        'apiserver_config': 'apiserverConfig',
        'arbitrary_fs_access_through_s_ms': 'arbitraryFSAccessThroughSMs',
        'base_image': 'baseImage',
        'config_maps': 'configMaps',
        'containers': 'containers',
        'disable_compaction': 'disableCompaction',
        'enable_admin_api': 'enableAdminAPI',
        'enable_features': 'enableFeatures',
        'enforced_label_limit': 'enforcedLabelLimit',
        'enforced_label_name_length_limit': 'enforcedLabelNameLengthLimit',
        'enforced_label_value_length_limit': 'enforcedLabelValueLengthLimit',
        'enforced_namespace_label': 'enforcedNamespaceLabel',
        'enforced_sample_limit': 'enforcedSampleLimit',
        'enforced_target_limit': 'enforcedTargetLimit',
        'evaluation_interval': 'evaluationInterval',
        'external_labels': 'externalLabels',
        'external_url': 'externalUrl',
        'ignore_namespace_selectors': 'ignoreNamespaceSelectors',
        'image': 'image',
        'image_pull_secrets': 'imagePullSecrets',
        'init_containers': 'initContainers',
        'listen_local': 'listenLocal',
        'log_format': 'logFormat',
        'log_level': 'logLevel',
        'node_selector': 'nodeSelector',
        'override_honor_labels': 'overrideHonorLabels',
        'override_honor_timestamps': 'overrideHonorTimestamps',
        'paused': 'paused',
        'pod_metadata': 'podMetadata',
        'pod_monitor_namespace_selector': 'podMonitorNamespaceSelector',
        'pod_monitor_selector': 'podMonitorSelector',
        'port_name': 'portName',
        'priority_class_name': 'priorityClassName',
        'probe_namespace_selector': 'probeNamespaceSelector',
        'probe_selector': 'probeSelector',
        'prometheus_external_label_name': 'prometheusExternalLabelName',
        'prometheus_rules_excluded_from_enforce': 'prometheusRulesExcludedFromEnforce',
        'query': 'query',
        'query_log_file': 'queryLogFile',
        'remote_read': 'remoteRead',
        'remote_write': 'remoteWrite',
        'replica_external_label_name': 'replicaExternalLabelName',
        'replicas': 'replicas',
        'resources': 'resources',
        'retention': 'retention',
        'retention_size': 'retentionSize',
        'route_prefix': 'routePrefix',
        'rule_namespace_selector': 'ruleNamespaceSelector',
        'rule_selector': 'ruleSelector',
        'rules': 'rules',
        'scrape_interval': 'scrapeInterval',
        'scrape_timeout': 'scrapeTimeout',
        'secrets': 'secrets',
        'security_context': 'securityContext',
        'service_account_name': 'serviceAccountName',
        'service_monitor_namespace_selector': 'serviceMonitorNamespaceSelector',
        'service_monitor_selector': 'serviceMonitorSelector',
        'sha': 'sha',
        'shards': 'shards',
        'storage': 'storage',
        'tag': 'tag',
        'thanos': 'thanos',
        'tolerations': 'tolerations',
        'topology_spread_constraints': 'topologySpreadConstraints',
        'version': 'version',
        'volume_mounts': 'volumeMounts',
        'volumes': 'volumes',
        'wal_compression': 'walCompression',
        'web': 'web'
    }

    def __init__(self, additional_alert_manager_configs=None, additional_alert_relabel_configs=None, additional_scrape_configs=None, affinity=None, alerting=None, allow_overlapping_blocks=None, apiserver_config=None, arbitrary_fs_access_through_s_ms=None, base_image=None, config_maps=None, containers=None, disable_compaction=None, enable_admin_api=None, enable_features=None, enforced_label_limit=None, enforced_label_name_length_limit=None, enforced_label_value_length_limit=None, enforced_namespace_label=None, enforced_sample_limit=None, enforced_target_limit=None, evaluation_interval=None, external_labels=None, external_url=None, ignore_namespace_selectors=None, image=None, image_pull_secrets=None, init_containers=None, listen_local=None, log_format=None, log_level=None, node_selector=None, override_honor_labels=None, override_honor_timestamps=None, paused=None, pod_metadata=None, pod_monitor_namespace_selector=None, pod_monitor_selector=None, port_name=None, priority_class_name=None, probe_namespace_selector=None, probe_selector=None, prometheus_external_label_name=None, prometheus_rules_excluded_from_enforce=None, query=None, query_log_file=None, remote_read=None, remote_write=None, replica_external_label_name=None, replicas=None, resources=None, retention=None, retention_size=None, route_prefix=None, rule_namespace_selector=None, rule_selector=None, rules=None, scrape_interval=None, scrape_timeout=None, secrets=None, security_context=None, service_account_name=None, service_monitor_namespace_selector=None, service_monitor_selector=None, sha=None, shards=None, storage=None, tag=None, thanos=None, tolerations=None, topology_spread_constraints=None, version=None, volume_mounts=None, volumes=None, wal_compression=None, web=None, local_vars_configuration=None):  # noqa: E501
        """ComCoreosMonitoringV1PrometheusSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._additional_alert_manager_configs = None
        self._additional_alert_relabel_configs = None
        self._additional_scrape_configs = None
        self._affinity = None
        self._alerting = None
        self._allow_overlapping_blocks = None
        self._apiserver_config = None
        self._arbitrary_fs_access_through_s_ms = None
        self._base_image = None
        self._config_maps = None
        self._containers = None
        self._disable_compaction = None
        self._enable_admin_api = None
        self._enable_features = None
        self._enforced_label_limit = None
        self._enforced_label_name_length_limit = None
        self._enforced_label_value_length_limit = None
        self._enforced_namespace_label = None
        self._enforced_sample_limit = None
        self._enforced_target_limit = None
        self._evaluation_interval = None
        self._external_labels = None
        self._external_url = None
        self._ignore_namespace_selectors = None
        self._image = None
        self._image_pull_secrets = None
        self._init_containers = None
        self._listen_local = None
        self._log_format = None
        self._log_level = None
        self._node_selector = None
        self._override_honor_labels = None
        self._override_honor_timestamps = None
        self._paused = None
        self._pod_metadata = None
        self._pod_monitor_namespace_selector = None
        self._pod_monitor_selector = None
        self._port_name = None
        self._priority_class_name = None
        self._probe_namespace_selector = None
        self._probe_selector = None
        self._prometheus_external_label_name = None
        self._prometheus_rules_excluded_from_enforce = None
        self._query = None
        self._query_log_file = None
        self._remote_read = None
        self._remote_write = None
        self._replica_external_label_name = None
        self._replicas = None
        self._resources = None
        self._retention = None
        self._retention_size = None
        self._route_prefix = None
        self._rule_namespace_selector = None
        self._rule_selector = None
        self._rules = None
        self._scrape_interval = None
        self._scrape_timeout = None
        self._secrets = None
        self._security_context = None
        self._service_account_name = None
        self._service_monitor_namespace_selector = None
        self._service_monitor_selector = None
        self._sha = None
        self._shards = None
        self._storage = None
        self._tag = None
        self._thanos = None
        self._tolerations = None
        self._topology_spread_constraints = None
        self._version = None
        self._volume_mounts = None
        self._volumes = None
        self._wal_compression = None
        self._web = None
        self.discriminator = None

        if additional_alert_manager_configs is not None:
            self.additional_alert_manager_configs = additional_alert_manager_configs
        if additional_alert_relabel_configs is not None:
            self.additional_alert_relabel_configs = additional_alert_relabel_configs
        if additional_scrape_configs is not None:
            self.additional_scrape_configs = additional_scrape_configs
        if affinity is not None:
            self.affinity = affinity
        if alerting is not None:
            self.alerting = alerting
        if allow_overlapping_blocks is not None:
            self.allow_overlapping_blocks = allow_overlapping_blocks
        if apiserver_config is not None:
            self.apiserver_config = apiserver_config
        if arbitrary_fs_access_through_s_ms is not None:
            self.arbitrary_fs_access_through_s_ms = arbitrary_fs_access_through_s_ms
        if base_image is not None:
            self.base_image = base_image
        if config_maps is not None:
            self.config_maps = config_maps
        if containers is not None:
            self.containers = containers
        if disable_compaction is not None:
            self.disable_compaction = disable_compaction
        if enable_admin_api is not None:
            self.enable_admin_api = enable_admin_api
        if enable_features is not None:
            self.enable_features = enable_features
        if enforced_label_limit is not None:
            self.enforced_label_limit = enforced_label_limit
        if enforced_label_name_length_limit is not None:
            self.enforced_label_name_length_limit = enforced_label_name_length_limit
        if enforced_label_value_length_limit is not None:
            self.enforced_label_value_length_limit = enforced_label_value_length_limit
        if enforced_namespace_label is not None:
            self.enforced_namespace_label = enforced_namespace_label
        if enforced_sample_limit is not None:
            self.enforced_sample_limit = enforced_sample_limit
        if enforced_target_limit is not None:
            self.enforced_target_limit = enforced_target_limit
        if evaluation_interval is not None:
            self.evaluation_interval = evaluation_interval
        if external_labels is not None:
            self.external_labels = external_labels
        if external_url is not None:
            self.external_url = external_url
        if ignore_namespace_selectors is not None:
            self.ignore_namespace_selectors = ignore_namespace_selectors
        if image is not None:
            self.image = image
        if image_pull_secrets is not None:
            self.image_pull_secrets = image_pull_secrets
        if init_containers is not None:
            self.init_containers = init_containers
        if listen_local is not None:
            self.listen_local = listen_local
        if log_format is not None:
            self.log_format = log_format
        if log_level is not None:
            self.log_level = log_level
        if node_selector is not None:
            self.node_selector = node_selector
        if override_honor_labels is not None:
            self.override_honor_labels = override_honor_labels
        if override_honor_timestamps is not None:
            self.override_honor_timestamps = override_honor_timestamps
        if paused is not None:
            self.paused = paused
        if pod_metadata is not None:
            self.pod_metadata = pod_metadata
        if pod_monitor_namespace_selector is not None:
            self.pod_monitor_namespace_selector = pod_monitor_namespace_selector
        if pod_monitor_selector is not None:
            self.pod_monitor_selector = pod_monitor_selector
        if port_name is not None:
            self.port_name = port_name
        if priority_class_name is not None:
            self.priority_class_name = priority_class_name
        if probe_namespace_selector is not None:
            self.probe_namespace_selector = probe_namespace_selector
        if probe_selector is not None:
            self.probe_selector = probe_selector
        if prometheus_external_label_name is not None:
            self.prometheus_external_label_name = prometheus_external_label_name
        if prometheus_rules_excluded_from_enforce is not None:
            self.prometheus_rules_excluded_from_enforce = prometheus_rules_excluded_from_enforce
        if query is not None:
            self.query = query
        if query_log_file is not None:
            self.query_log_file = query_log_file
        if remote_read is not None:
            self.remote_read = remote_read
        if remote_write is not None:
            self.remote_write = remote_write
        if replica_external_label_name is not None:
            self.replica_external_label_name = replica_external_label_name
        if replicas is not None:
            self.replicas = replicas
        if resources is not None:
            self.resources = resources
        if retention is not None:
            self.retention = retention
        if retention_size is not None:
            self.retention_size = retention_size
        if route_prefix is not None:
            self.route_prefix = route_prefix
        if rule_namespace_selector is not None:
            self.rule_namespace_selector = rule_namespace_selector
        if rule_selector is not None:
            self.rule_selector = rule_selector
        if rules is not None:
            self.rules = rules
        if scrape_interval is not None:
            self.scrape_interval = scrape_interval
        if scrape_timeout is not None:
            self.scrape_timeout = scrape_timeout
        if secrets is not None:
            self.secrets = secrets
        if security_context is not None:
            self.security_context = security_context
        if service_account_name is not None:
            self.service_account_name = service_account_name
        if service_monitor_namespace_selector is not None:
            self.service_monitor_namespace_selector = service_monitor_namespace_selector
        if service_monitor_selector is not None:
            self.service_monitor_selector = service_monitor_selector
        if sha is not None:
            self.sha = sha
        if shards is not None:
            self.shards = shards
        if storage is not None:
            self.storage = storage
        if tag is not None:
            self.tag = tag
        if thanos is not None:
            self.thanos = thanos
        if tolerations is not None:
            self.tolerations = tolerations
        if topology_spread_constraints is not None:
            self.topology_spread_constraints = topology_spread_constraints
        if version is not None:
            self.version = version
        if volume_mounts is not None:
            self.volume_mounts = volume_mounts
        if volumes is not None:
            self.volumes = volumes
        if wal_compression is not None:
            self.wal_compression = wal_compression
        if web is not None:
            self.web = web

    @property
    def additional_alert_manager_configs(self):
        """Gets the additional_alert_manager_configs of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501


        :return: The additional_alert_manager_configs of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecAdditionalAlertManagerConfigs
        """
        return self._additional_alert_manager_configs

    @additional_alert_manager_configs.setter
    def additional_alert_manager_configs(self, additional_alert_manager_configs):
        """Sets the additional_alert_manager_configs of this ComCoreosMonitoringV1PrometheusSpec.


        :param additional_alert_manager_configs: The additional_alert_manager_configs of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecAdditionalAlertManagerConfigs
        """

        self._additional_alert_manager_configs = additional_alert_manager_configs

    @property
    def additional_alert_relabel_configs(self):
        """Gets the additional_alert_relabel_configs of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501


        :return: The additional_alert_relabel_configs of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecAdditionalAlertRelabelConfigs
        """
        return self._additional_alert_relabel_configs

    @additional_alert_relabel_configs.setter
    def additional_alert_relabel_configs(self, additional_alert_relabel_configs):
        """Sets the additional_alert_relabel_configs of this ComCoreosMonitoringV1PrometheusSpec.


        :param additional_alert_relabel_configs: The additional_alert_relabel_configs of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecAdditionalAlertRelabelConfigs
        """

        self._additional_alert_relabel_configs = additional_alert_relabel_configs

    @property
    def additional_scrape_configs(self):
        """Gets the additional_scrape_configs of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501


        :return: The additional_scrape_configs of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecAdditionalScrapeConfigs
        """
        return self._additional_scrape_configs

    @additional_scrape_configs.setter
    def additional_scrape_configs(self, additional_scrape_configs):
        """Sets the additional_scrape_configs of this ComCoreosMonitoringV1PrometheusSpec.


        :param additional_scrape_configs: The additional_scrape_configs of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecAdditionalScrapeConfigs
        """

        self._additional_scrape_configs = additional_scrape_configs

    @property
    def affinity(self):
        """Gets the affinity of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501


        :return: The affinity of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1AlertmanagerSpecAffinity
        """
        return self._affinity

    @affinity.setter
    def affinity(self, affinity):
        """Sets the affinity of this ComCoreosMonitoringV1PrometheusSpec.


        :param affinity: The affinity of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1AlertmanagerSpecAffinity
        """

        self._affinity = affinity

    @property
    def alerting(self):
        """Gets the alerting of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501


        :return: The alerting of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecAlerting
        """
        return self._alerting

    @alerting.setter
    def alerting(self, alerting):
        """Sets the alerting of this ComCoreosMonitoringV1PrometheusSpec.


        :param alerting: The alerting of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecAlerting
        """

        self._alerting = alerting

    @property
    def allow_overlapping_blocks(self):
        """Gets the allow_overlapping_blocks of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        AllowOverlappingBlocks enables vertical compaction and vertical query merge in Prometheus. This is still experimental in Prometheus so it may change in any upcoming release.  # noqa: E501

        :return: The allow_overlapping_blocks of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: bool
        """
        return self._allow_overlapping_blocks

    @allow_overlapping_blocks.setter
    def allow_overlapping_blocks(self, allow_overlapping_blocks):
        """Sets the allow_overlapping_blocks of this ComCoreosMonitoringV1PrometheusSpec.

        AllowOverlappingBlocks enables vertical compaction and vertical query merge in Prometheus. This is still experimental in Prometheus so it may change in any upcoming release.  # noqa: E501

        :param allow_overlapping_blocks: The allow_overlapping_blocks of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: bool
        """

        self._allow_overlapping_blocks = allow_overlapping_blocks

    @property
    def apiserver_config(self):
        """Gets the apiserver_config of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501


        :return: The apiserver_config of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecApiserverConfig
        """
        return self._apiserver_config

    @apiserver_config.setter
    def apiserver_config(self, apiserver_config):
        """Sets the apiserver_config of this ComCoreosMonitoringV1PrometheusSpec.


        :param apiserver_config: The apiserver_config of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecApiserverConfig
        """

        self._apiserver_config = apiserver_config

    @property
    def arbitrary_fs_access_through_s_ms(self):
        """Gets the arbitrary_fs_access_through_s_ms of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501


        :return: The arbitrary_fs_access_through_s_ms of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecArbitraryFSAccessThroughSMs
        """
        return self._arbitrary_fs_access_through_s_ms

    @arbitrary_fs_access_through_s_ms.setter
    def arbitrary_fs_access_through_s_ms(self, arbitrary_fs_access_through_s_ms):
        """Sets the arbitrary_fs_access_through_s_ms of this ComCoreosMonitoringV1PrometheusSpec.


        :param arbitrary_fs_access_through_s_ms: The arbitrary_fs_access_through_s_ms of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecArbitraryFSAccessThroughSMs
        """

        self._arbitrary_fs_access_through_s_ms = arbitrary_fs_access_through_s_ms

    @property
    def base_image(self):
        """Gets the base_image of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Base image to use for a Prometheus deployment. Deprecated: use 'image' instead  # noqa: E501

        :return: The base_image of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: str
        """
        return self._base_image

    @base_image.setter
    def base_image(self, base_image):
        """Sets the base_image of this ComCoreosMonitoringV1PrometheusSpec.

        Base image to use for a Prometheus deployment. Deprecated: use 'image' instead  # noqa: E501

        :param base_image: The base_image of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: str
        """

        self._base_image = base_image

    @property
    def config_maps(self):
        """Gets the config_maps of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        ConfigMaps is a list of ConfigMaps in the same namespace as the Prometheus object, which shall be mounted into the Prometheus Pods. The ConfigMaps are mounted into /etc/prometheus/configmaps/<configmap-name>.  # noqa: E501

        :return: The config_maps of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._config_maps

    @config_maps.setter
    def config_maps(self, config_maps):
        """Sets the config_maps of this ComCoreosMonitoringV1PrometheusSpec.

        ConfigMaps is a list of ConfigMaps in the same namespace as the Prometheus object, which shall be mounted into the Prometheus Pods. The ConfigMaps are mounted into /etc/prometheus/configmaps/<configmap-name>.  # noqa: E501

        :param config_maps: The config_maps of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: list[str]
        """

        self._config_maps = config_maps

    @property
    def containers(self):
        """Gets the containers of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Containers allows injecting additional containers or modifying operator generated containers. This can be used to allow adding an authentication proxy to a Prometheus pod or to change the behavior of an operator generated container. Containers described here modify an operator generated container if they share the same name and modifications are done via a strategic merge patch. The current container names are: `prometheus`, `config-reloader`, and `thanos-sidecar`. Overriding containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.  # noqa: E501

        :return: The containers of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecContainers]
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this ComCoreosMonitoringV1PrometheusSpec.

        Containers allows injecting additional containers or modifying operator generated containers. This can be used to allow adding an authentication proxy to a Prometheus pod or to change the behavior of an operator generated container. Containers described here modify an operator generated container if they share the same name and modifications are done via a strategic merge patch. The current container names are: `prometheus`, `config-reloader`, and `thanos-sidecar`. Overriding containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.  # noqa: E501

        :param containers: The containers of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecContainers]
        """

        self._containers = containers

    @property
    def disable_compaction(self):
        """Gets the disable_compaction of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Disable prometheus compaction.  # noqa: E501

        :return: The disable_compaction of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: bool
        """
        return self._disable_compaction

    @disable_compaction.setter
    def disable_compaction(self, disable_compaction):
        """Sets the disable_compaction of this ComCoreosMonitoringV1PrometheusSpec.

        Disable prometheus compaction.  # noqa: E501

        :param disable_compaction: The disable_compaction of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: bool
        """

        self._disable_compaction = disable_compaction

    @property
    def enable_admin_api(self):
        """Gets the enable_admin_api of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Enable access to prometheus web admin API. Defaults to the value of `false`. WARNING: Enabling the admin APIs enables mutating endpoints, to delete data, shutdown Prometheus, and more. Enabling this should be done with care and the user is advised to add additional authentication authorization via a proxy to ensure only clients authorized to perform these actions can do so. For more information see https://prometheus.io/docs/prometheus/latest/querying/api/#tsdb-admin-apis  # noqa: E501

        :return: The enable_admin_api of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: bool
        """
        return self._enable_admin_api

    @enable_admin_api.setter
    def enable_admin_api(self, enable_admin_api):
        """Sets the enable_admin_api of this ComCoreosMonitoringV1PrometheusSpec.

        Enable access to prometheus web admin API. Defaults to the value of `false`. WARNING: Enabling the admin APIs enables mutating endpoints, to delete data, shutdown Prometheus, and more. Enabling this should be done with care and the user is advised to add additional authentication authorization via a proxy to ensure only clients authorized to perform these actions can do so. For more information see https://prometheus.io/docs/prometheus/latest/querying/api/#tsdb-admin-apis  # noqa: E501

        :param enable_admin_api: The enable_admin_api of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: bool
        """

        self._enable_admin_api = enable_admin_api

    @property
    def enable_features(self):
        """Gets the enable_features of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Enable access to Prometheus disabled features. By default, no features are enabled. Enabling disabled features is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice. For more information see https://prometheus.io/docs/prometheus/latest/disabled_features/  # noqa: E501

        :return: The enable_features of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._enable_features

    @enable_features.setter
    def enable_features(self, enable_features):
        """Sets the enable_features of this ComCoreosMonitoringV1PrometheusSpec.

        Enable access to Prometheus disabled features. By default, no features are enabled. Enabling disabled features is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice. For more information see https://prometheus.io/docs/prometheus/latest/disabled_features/  # noqa: E501

        :param enable_features: The enable_features of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: list[str]
        """

        self._enable_features = enable_features

    @property
    def enforced_label_limit(self):
        """Gets the enforced_label_limit of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Per-scrape limit on number of labels that will be accepted for a sample. If more than this number of labels are present post metric-relabeling, the entire scrape will be treated as failed. 0 means no limit. Only valid in Prometheus versions 2.27.0 and newer.  # noqa: E501

        :return: The enforced_label_limit of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: int
        """
        return self._enforced_label_limit

    @enforced_label_limit.setter
    def enforced_label_limit(self, enforced_label_limit):
        """Sets the enforced_label_limit of this ComCoreosMonitoringV1PrometheusSpec.

        Per-scrape limit on number of labels that will be accepted for a sample. If more than this number of labels are present post metric-relabeling, the entire scrape will be treated as failed. 0 means no limit. Only valid in Prometheus versions 2.27.0 and newer.  # noqa: E501

        :param enforced_label_limit: The enforced_label_limit of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: int
        """

        self._enforced_label_limit = enforced_label_limit

    @property
    def enforced_label_name_length_limit(self):
        """Gets the enforced_label_name_length_limit of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Per-scrape limit on length of labels name that will be accepted for a sample. If a label name is longer than this number post metric-relabeling, the entire scrape will be treated as failed. 0 means no limit. Only valid in Prometheus versions 2.27.0 and newer.  # noqa: E501

        :return: The enforced_label_name_length_limit of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: int
        """
        return self._enforced_label_name_length_limit

    @enforced_label_name_length_limit.setter
    def enforced_label_name_length_limit(self, enforced_label_name_length_limit):
        """Sets the enforced_label_name_length_limit of this ComCoreosMonitoringV1PrometheusSpec.

        Per-scrape limit on length of labels name that will be accepted for a sample. If a label name is longer than this number post metric-relabeling, the entire scrape will be treated as failed. 0 means no limit. Only valid in Prometheus versions 2.27.0 and newer.  # noqa: E501

        :param enforced_label_name_length_limit: The enforced_label_name_length_limit of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: int
        """

        self._enforced_label_name_length_limit = enforced_label_name_length_limit

    @property
    def enforced_label_value_length_limit(self):
        """Gets the enforced_label_value_length_limit of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Per-scrape limit on length of labels value that will be accepted for a sample. If a label value is longer than this number post metric-relabeling, the entire scrape will be treated as failed. 0 means no limit. Only valid in Prometheus versions 2.27.0 and newer.  # noqa: E501

        :return: The enforced_label_value_length_limit of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: int
        """
        return self._enforced_label_value_length_limit

    @enforced_label_value_length_limit.setter
    def enforced_label_value_length_limit(self, enforced_label_value_length_limit):
        """Sets the enforced_label_value_length_limit of this ComCoreosMonitoringV1PrometheusSpec.

        Per-scrape limit on length of labels value that will be accepted for a sample. If a label value is longer than this number post metric-relabeling, the entire scrape will be treated as failed. 0 means no limit. Only valid in Prometheus versions 2.27.0 and newer.  # noqa: E501

        :param enforced_label_value_length_limit: The enforced_label_value_length_limit of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: int
        """

        self._enforced_label_value_length_limit = enforced_label_value_length_limit

    @property
    def enforced_namespace_label(self):
        """Gets the enforced_namespace_label of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        EnforcedNamespaceLabel If set, a label will be added to   1. all user-metrics (created by `ServiceMonitor`, `PodMonitor` and `ProbeConfig` object) and 2. in all `PrometheusRule` objects (except the ones excluded in `prometheusRulesExcludedFromEnforce`) to    * alerting & recording rules and    * the metrics used in their expressions (`expr`).   Label name is this field's value. Label value is the namespace of the created object (mentioned above).  # noqa: E501

        :return: The enforced_namespace_label of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: str
        """
        return self._enforced_namespace_label

    @enforced_namespace_label.setter
    def enforced_namespace_label(self, enforced_namespace_label):
        """Sets the enforced_namespace_label of this ComCoreosMonitoringV1PrometheusSpec.

        EnforcedNamespaceLabel If set, a label will be added to   1. all user-metrics (created by `ServiceMonitor`, `PodMonitor` and `ProbeConfig` object) and 2. in all `PrometheusRule` objects (except the ones excluded in `prometheusRulesExcludedFromEnforce`) to    * alerting & recording rules and    * the metrics used in their expressions (`expr`).   Label name is this field's value. Label value is the namespace of the created object (mentioned above).  # noqa: E501

        :param enforced_namespace_label: The enforced_namespace_label of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: str
        """

        self._enforced_namespace_label = enforced_namespace_label

    @property
    def enforced_sample_limit(self):
        """Gets the enforced_sample_limit of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        EnforcedSampleLimit defines global limit on number of scraped samples that will be accepted. This overrides any SampleLimit set per ServiceMonitor or/and PodMonitor. It is meant to be used by admins to enforce the SampleLimit to keep overall number of samples/series under the desired limit. Note that if SampleLimit is lower that value will be taken instead.  # noqa: E501

        :return: The enforced_sample_limit of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: int
        """
        return self._enforced_sample_limit

    @enforced_sample_limit.setter
    def enforced_sample_limit(self, enforced_sample_limit):
        """Sets the enforced_sample_limit of this ComCoreosMonitoringV1PrometheusSpec.

        EnforcedSampleLimit defines global limit on number of scraped samples that will be accepted. This overrides any SampleLimit set per ServiceMonitor or/and PodMonitor. It is meant to be used by admins to enforce the SampleLimit to keep overall number of samples/series under the desired limit. Note that if SampleLimit is lower that value will be taken instead.  # noqa: E501

        :param enforced_sample_limit: The enforced_sample_limit of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: int
        """

        self._enforced_sample_limit = enforced_sample_limit

    @property
    def enforced_target_limit(self):
        """Gets the enforced_target_limit of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        EnforcedTargetLimit defines a global limit on the number of scraped targets.  This overrides any TargetLimit set per ServiceMonitor or/and PodMonitor.  It is meant to be used by admins to enforce the TargetLimit to keep the overall number of targets under the desired limit. Note that if TargetLimit is lower, that value will be taken instead, except if either value is zero, in which case the non-zero value will be used.  If both values are zero, no limit is enforced.  # noqa: E501

        :return: The enforced_target_limit of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: int
        """
        return self._enforced_target_limit

    @enforced_target_limit.setter
    def enforced_target_limit(self, enforced_target_limit):
        """Sets the enforced_target_limit of this ComCoreosMonitoringV1PrometheusSpec.

        EnforcedTargetLimit defines a global limit on the number of scraped targets.  This overrides any TargetLimit set per ServiceMonitor or/and PodMonitor.  It is meant to be used by admins to enforce the TargetLimit to keep the overall number of targets under the desired limit. Note that if TargetLimit is lower, that value will be taken instead, except if either value is zero, in which case the non-zero value will be used.  If both values are zero, no limit is enforced.  # noqa: E501

        :param enforced_target_limit: The enforced_target_limit of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: int
        """

        self._enforced_target_limit = enforced_target_limit

    @property
    def evaluation_interval(self):
        """Gets the evaluation_interval of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Interval between consecutive evaluations. Default: `1m`  # noqa: E501

        :return: The evaluation_interval of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_interval

    @evaluation_interval.setter
    def evaluation_interval(self, evaluation_interval):
        """Sets the evaluation_interval of this ComCoreosMonitoringV1PrometheusSpec.

        Interval between consecutive evaluations. Default: `1m`  # noqa: E501

        :param evaluation_interval: The evaluation_interval of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: str
        """

        self._evaluation_interval = evaluation_interval

    @property
    def external_labels(self):
        """Gets the external_labels of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        The labels to add to any time series or alerts when communicating with external systems (federation, remote storage, Alertmanager).  # noqa: E501

        :return: The external_labels of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._external_labels

    @external_labels.setter
    def external_labels(self, external_labels):
        """Sets the external_labels of this ComCoreosMonitoringV1PrometheusSpec.

        The labels to add to any time series or alerts when communicating with external systems (federation, remote storage, Alertmanager).  # noqa: E501

        :param external_labels: The external_labels of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._external_labels = external_labels

    @property
    def external_url(self):
        """Gets the external_url of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        The external URL the Prometheus instances will be available under. This is necessary to generate correct URLs. This is necessary if Prometheus is not served from root of a DNS name.  # noqa: E501

        :return: The external_url of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this ComCoreosMonitoringV1PrometheusSpec.

        The external URL the Prometheus instances will be available under. This is necessary to generate correct URLs. This is necessary if Prometheus is not served from root of a DNS name.  # noqa: E501

        :param external_url: The external_url of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: str
        """

        self._external_url = external_url

    @property
    def ignore_namespace_selectors(self):
        """Gets the ignore_namespace_selectors of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        IgnoreNamespaceSelectors if set to true will ignore NamespaceSelector settings from the podmonitor and servicemonitor configs, and they will only discover endpoints within their current namespace.  Defaults to false.  # noqa: E501

        :return: The ignore_namespace_selectors of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_namespace_selectors

    @ignore_namespace_selectors.setter
    def ignore_namespace_selectors(self, ignore_namespace_selectors):
        """Sets the ignore_namespace_selectors of this ComCoreosMonitoringV1PrometheusSpec.

        IgnoreNamespaceSelectors if set to true will ignore NamespaceSelector settings from the podmonitor and servicemonitor configs, and they will only discover endpoints within their current namespace.  Defaults to false.  # noqa: E501

        :param ignore_namespace_selectors: The ignore_namespace_selectors of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: bool
        """

        self._ignore_namespace_selectors = ignore_namespace_selectors

    @property
    def image(self):
        """Gets the image of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Prometheus is being configured.  # noqa: E501

        :return: The image of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ComCoreosMonitoringV1PrometheusSpec.

        Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Prometheus is being configured.  # noqa: E501

        :param image: The image of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def image_pull_secrets(self):
        """Gets the image_pull_secrets of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        An optional list of references to secrets in the same namespace to use for pulling prometheus and alertmanager images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod  # noqa: E501

        :return: The image_pull_secrets of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecImagePullSecrets]
        """
        return self._image_pull_secrets

    @image_pull_secrets.setter
    def image_pull_secrets(self, image_pull_secrets):
        """Sets the image_pull_secrets of this ComCoreosMonitoringV1PrometheusSpec.

        An optional list of references to secrets in the same namespace to use for pulling prometheus and alertmanager images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod  # noqa: E501

        :param image_pull_secrets: The image_pull_secrets of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecImagePullSecrets]
        """

        self._image_pull_secrets = image_pull_secrets

    @property
    def init_containers(self):
        """Gets the init_containers of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the Prometheus configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ InitContainers described here modify an operator generated init containers if they share the same name and modifications are done via a strategic merge patch. The current init container name is: `init-config-reloader`. Overriding init containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.  # noqa: E501

        :return: The init_containers of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecContainers]
        """
        return self._init_containers

    @init_containers.setter
    def init_containers(self, init_containers):
        """Sets the init_containers of this ComCoreosMonitoringV1PrometheusSpec.

        InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the Prometheus configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ InitContainers described here modify an operator generated init containers if they share the same name and modifications are done via a strategic merge patch. The current init container name is: `init-config-reloader`. Overriding init containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.  # noqa: E501

        :param init_containers: The init_containers of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecContainers]
        """

        self._init_containers = init_containers

    @property
    def listen_local(self):
        """Gets the listen_local of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        ListenLocal makes the Prometheus server listen on loopback, so that it does not bind against the Pod IP.  # noqa: E501

        :return: The listen_local of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: bool
        """
        return self._listen_local

    @listen_local.setter
    def listen_local(self, listen_local):
        """Sets the listen_local of this ComCoreosMonitoringV1PrometheusSpec.

        ListenLocal makes the Prometheus server listen on loopback, so that it does not bind against the Pod IP.  # noqa: E501

        :param listen_local: The listen_local of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: bool
        """

        self._listen_local = listen_local

    @property
    def log_format(self):
        """Gets the log_format of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Log format for Prometheus to be configured with.  # noqa: E501

        :return: The log_format of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: str
        """
        return self._log_format

    @log_format.setter
    def log_format(self, log_format):
        """Sets the log_format of this ComCoreosMonitoringV1PrometheusSpec.

        Log format for Prometheus to be configured with.  # noqa: E501

        :param log_format: The log_format of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: str
        """

        self._log_format = log_format

    @property
    def log_level(self):
        """Gets the log_level of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Log level for Prometheus to be configured with.  # noqa: E501

        :return: The log_level of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: str
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this ComCoreosMonitoringV1PrometheusSpec.

        Log level for Prometheus to be configured with.  # noqa: E501

        :param log_level: The log_level of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: str
        """

        self._log_level = log_level

    @property
    def node_selector(self):
        """Gets the node_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Define which Nodes the Pods are scheduled on.  # noqa: E501

        :return: The node_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this ComCoreosMonitoringV1PrometheusSpec.

        Define which Nodes the Pods are scheduled on.  # noqa: E501

        :param node_selector: The node_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._node_selector = node_selector

    @property
    def override_honor_labels(self):
        """Gets the override_honor_labels of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        OverrideHonorLabels if set to true overrides all user configured honor_labels. If HonorLabels is set in ServiceMonitor or PodMonitor to true, this overrides honor_labels to false.  # noqa: E501

        :return: The override_honor_labels of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: bool
        """
        return self._override_honor_labels

    @override_honor_labels.setter
    def override_honor_labels(self, override_honor_labels):
        """Sets the override_honor_labels of this ComCoreosMonitoringV1PrometheusSpec.

        OverrideHonorLabels if set to true overrides all user configured honor_labels. If HonorLabels is set in ServiceMonitor or PodMonitor to true, this overrides honor_labels to false.  # noqa: E501

        :param override_honor_labels: The override_honor_labels of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: bool
        """

        self._override_honor_labels = override_honor_labels

    @property
    def override_honor_timestamps(self):
        """Gets the override_honor_timestamps of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        OverrideHonorTimestamps allows to globally enforce honoring timestamps in all scrape configs.  # noqa: E501

        :return: The override_honor_timestamps of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: bool
        """
        return self._override_honor_timestamps

    @override_honor_timestamps.setter
    def override_honor_timestamps(self, override_honor_timestamps):
        """Sets the override_honor_timestamps of this ComCoreosMonitoringV1PrometheusSpec.

        OverrideHonorTimestamps allows to globally enforce honoring timestamps in all scrape configs.  # noqa: E501

        :param override_honor_timestamps: The override_honor_timestamps of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: bool
        """

        self._override_honor_timestamps = override_honor_timestamps

    @property
    def paused(self):
        """Gets the paused of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        When a Prometheus deployment is paused, no actions except for deletion will be performed on the underlying objects.  # noqa: E501

        :return: The paused of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: bool
        """
        return self._paused

    @paused.setter
    def paused(self, paused):
        """Sets the paused of this ComCoreosMonitoringV1PrometheusSpec.

        When a Prometheus deployment is paused, no actions except for deletion will be performed on the underlying objects.  # noqa: E501

        :param paused: The paused of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: bool
        """

        self._paused = paused

    @property
    def pod_metadata(self):
        """Gets the pod_metadata of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501


        :return: The pod_metadata of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecPodMetadata
        """
        return self._pod_metadata

    @pod_metadata.setter
    def pod_metadata(self, pod_metadata):
        """Sets the pod_metadata of this ComCoreosMonitoringV1PrometheusSpec.


        :param pod_metadata: The pod_metadata of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecPodMetadata
        """

        self._pod_metadata = pod_metadata

    @property
    def pod_monitor_namespace_selector(self):
        """Gets the pod_monitor_namespace_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501


        :return: The pod_monitor_namespace_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecPodMonitorNamespaceSelector
        """
        return self._pod_monitor_namespace_selector

    @pod_monitor_namespace_selector.setter
    def pod_monitor_namespace_selector(self, pod_monitor_namespace_selector):
        """Sets the pod_monitor_namespace_selector of this ComCoreosMonitoringV1PrometheusSpec.


        :param pod_monitor_namespace_selector: The pod_monitor_namespace_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecPodMonitorNamespaceSelector
        """

        self._pod_monitor_namespace_selector = pod_monitor_namespace_selector

    @property
    def pod_monitor_selector(self):
        """Gets the pod_monitor_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501


        :return: The pod_monitor_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecPodMonitorSelector
        """
        return self._pod_monitor_selector

    @pod_monitor_selector.setter
    def pod_monitor_selector(self, pod_monitor_selector):
        """Sets the pod_monitor_selector of this ComCoreosMonitoringV1PrometheusSpec.


        :param pod_monitor_selector: The pod_monitor_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecPodMonitorSelector
        """

        self._pod_monitor_selector = pod_monitor_selector

    @property
    def port_name(self):
        """Gets the port_name of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Port name used for the pods and governing service. This defaults to web  # noqa: E501

        :return: The port_name of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: str
        """
        return self._port_name

    @port_name.setter
    def port_name(self, port_name):
        """Sets the port_name of this ComCoreosMonitoringV1PrometheusSpec.

        Port name used for the pods and governing service. This defaults to web  # noqa: E501

        :param port_name: The port_name of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: str
        """

        self._port_name = port_name

    @property
    def priority_class_name(self):
        """Gets the priority_class_name of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Priority class assigned to the Pods  # noqa: E501

        :return: The priority_class_name of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: str
        """
        return self._priority_class_name

    @priority_class_name.setter
    def priority_class_name(self, priority_class_name):
        """Sets the priority_class_name of this ComCoreosMonitoringV1PrometheusSpec.

        Priority class assigned to the Pods  # noqa: E501

        :param priority_class_name: The priority_class_name of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: str
        """

        self._priority_class_name = priority_class_name

    @property
    def probe_namespace_selector(self):
        """Gets the probe_namespace_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501


        :return: The probe_namespace_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecProbeNamespaceSelector
        """
        return self._probe_namespace_selector

    @probe_namespace_selector.setter
    def probe_namespace_selector(self, probe_namespace_selector):
        """Sets the probe_namespace_selector of this ComCoreosMonitoringV1PrometheusSpec.


        :param probe_namespace_selector: The probe_namespace_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecProbeNamespaceSelector
        """

        self._probe_namespace_selector = probe_namespace_selector

    @property
    def probe_selector(self):
        """Gets the probe_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501


        :return: The probe_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecProbeSelector
        """
        return self._probe_selector

    @probe_selector.setter
    def probe_selector(self, probe_selector):
        """Sets the probe_selector of this ComCoreosMonitoringV1PrometheusSpec.


        :param probe_selector: The probe_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecProbeSelector
        """

        self._probe_selector = probe_selector

    @property
    def prometheus_external_label_name(self):
        """Gets the prometheus_external_label_name of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Name of Prometheus external label used to denote Prometheus instance name. Defaults to the value of `prometheus`. External label will _not_ be added when value is set to empty string (`\"\"`).  # noqa: E501

        :return: The prometheus_external_label_name of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: str
        """
        return self._prometheus_external_label_name

    @prometheus_external_label_name.setter
    def prometheus_external_label_name(self, prometheus_external_label_name):
        """Sets the prometheus_external_label_name of this ComCoreosMonitoringV1PrometheusSpec.

        Name of Prometheus external label used to denote Prometheus instance name. Defaults to the value of `prometheus`. External label will _not_ be added when value is set to empty string (`\"\"`).  # noqa: E501

        :param prometheus_external_label_name: The prometheus_external_label_name of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: str
        """

        self._prometheus_external_label_name = prometheus_external_label_name

    @property
    def prometheus_rules_excluded_from_enforce(self):
        """Gets the prometheus_rules_excluded_from_enforce of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        PrometheusRulesExcludedFromEnforce - list of prometheus rules to be excluded from enforcing of adding namespace labels. Works only if enforcedNamespaceLabel set to true. Make sure both ruleNamespace and ruleName are set for each pair  # noqa: E501

        :return: The prometheus_rules_excluded_from_enforce of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1PrometheusSpecPrometheusRulesExcludedFromEnforce]
        """
        return self._prometheus_rules_excluded_from_enforce

    @prometheus_rules_excluded_from_enforce.setter
    def prometheus_rules_excluded_from_enforce(self, prometheus_rules_excluded_from_enforce):
        """Sets the prometheus_rules_excluded_from_enforce of this ComCoreosMonitoringV1PrometheusSpec.

        PrometheusRulesExcludedFromEnforce - list of prometheus rules to be excluded from enforcing of adding namespace labels. Works only if enforcedNamespaceLabel set to true. Make sure both ruleNamespace and ruleName are set for each pair  # noqa: E501

        :param prometheus_rules_excluded_from_enforce: The prometheus_rules_excluded_from_enforce of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1PrometheusSpecPrometheusRulesExcludedFromEnforce]
        """

        self._prometheus_rules_excluded_from_enforce = prometheus_rules_excluded_from_enforce

    @property
    def query(self):
        """Gets the query of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501


        :return: The query of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecQuery
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this ComCoreosMonitoringV1PrometheusSpec.


        :param query: The query of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecQuery
        """

        self._query = query

    @property
    def query_log_file(self):
        """Gets the query_log_file of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        QueryLogFile specifies the file to which PromQL queries are logged. Note that this location must be writable, and can be persisted using an attached volume. Alternatively, the location can be set to a stdout location such as `/dev/stdout` to log querie information to the default Prometheus log stream. This is only available in versions of Prometheus >= 2.16.0. For more details, see the Prometheus docs (https://prometheus.io/docs/guides/query-log/)  # noqa: E501

        :return: The query_log_file of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: str
        """
        return self._query_log_file

    @query_log_file.setter
    def query_log_file(self, query_log_file):
        """Sets the query_log_file of this ComCoreosMonitoringV1PrometheusSpec.

        QueryLogFile specifies the file to which PromQL queries are logged. Note that this location must be writable, and can be persisted using an attached volume. Alternatively, the location can be set to a stdout location such as `/dev/stdout` to log querie information to the default Prometheus log stream. This is only available in versions of Prometheus >= 2.16.0. For more details, see the Prometheus docs (https://prometheus.io/docs/guides/query-log/)  # noqa: E501

        :param query_log_file: The query_log_file of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: str
        """

        self._query_log_file = query_log_file

    @property
    def remote_read(self):
        """Gets the remote_read of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        If specified, the remote_read spec. This is an experimental feature, it may change in any upcoming release in a breaking way.  # noqa: E501

        :return: The remote_read of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1PrometheusSpecRemoteRead]
        """
        return self._remote_read

    @remote_read.setter
    def remote_read(self, remote_read):
        """Sets the remote_read of this ComCoreosMonitoringV1PrometheusSpec.

        If specified, the remote_read spec. This is an experimental feature, it may change in any upcoming release in a breaking way.  # noqa: E501

        :param remote_read: The remote_read of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1PrometheusSpecRemoteRead]
        """

        self._remote_read = remote_read

    @property
    def remote_write(self):
        """Gets the remote_write of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        If specified, the remote_write spec. This is an experimental feature, it may change in any upcoming release in a breaking way.  # noqa: E501

        :return: The remote_write of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1PrometheusSpecRemoteWrite]
        """
        return self._remote_write

    @remote_write.setter
    def remote_write(self, remote_write):
        """Sets the remote_write of this ComCoreosMonitoringV1PrometheusSpec.

        If specified, the remote_write spec. This is an experimental feature, it may change in any upcoming release in a breaking way.  # noqa: E501

        :param remote_write: The remote_write of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1PrometheusSpecRemoteWrite]
        """

        self._remote_write = remote_write

    @property
    def replica_external_label_name(self):
        """Gets the replica_external_label_name of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Name of Prometheus external label used to denote replica name. Defaults to the value of `prometheus_replica`. External label will _not_ be added when value is set to empty string (`\"\"`).  # noqa: E501

        :return: The replica_external_label_name of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: str
        """
        return self._replica_external_label_name

    @replica_external_label_name.setter
    def replica_external_label_name(self, replica_external_label_name):
        """Sets the replica_external_label_name of this ComCoreosMonitoringV1PrometheusSpec.

        Name of Prometheus external label used to denote replica name. Defaults to the value of `prometheus_replica`. External label will _not_ be added when value is set to empty string (`\"\"`).  # noqa: E501

        :param replica_external_label_name: The replica_external_label_name of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: str
        """

        self._replica_external_label_name = replica_external_label_name

    @property
    def replicas(self):
        """Gets the replicas of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Number of replicas of each shard to deploy for a Prometheus deployment. Number of replicas multiplied by shards is the total number of Pods created.  # noqa: E501

        :return: The replicas of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this ComCoreosMonitoringV1PrometheusSpec.

        Number of replicas of each shard to deploy for a Prometheus deployment. Number of replicas multiplied by shards is the total number of Pods created.  # noqa: E501

        :param replicas: The replicas of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def resources(self):
        """Gets the resources of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501


        :return: The resources of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1AlertmanagerSpecResources1
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this ComCoreosMonitoringV1PrometheusSpec.


        :param resources: The resources of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1AlertmanagerSpecResources1
        """

        self._resources = resources

    @property
    def retention(self):
        """Gets the retention of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Time duration Prometheus shall retain data for. Default is '24h', and must match the regular expression `[0-9]+(ms|s|m|h|d|w|y)` (milliseconds seconds minutes hours days weeks years).  # noqa: E501

        :return: The retention of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: str
        """
        return self._retention

    @retention.setter
    def retention(self, retention):
        """Sets the retention of this ComCoreosMonitoringV1PrometheusSpec.

        Time duration Prometheus shall retain data for. Default is '24h', and must match the regular expression `[0-9]+(ms|s|m|h|d|w|y)` (milliseconds seconds minutes hours days weeks years).  # noqa: E501

        :param retention: The retention of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: str
        """

        self._retention = retention

    @property
    def retention_size(self):
        """Gets the retention_size of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Maximum amount of disk space used by blocks. Supported units: B, KB, MB, GB, TB, PB, EB. Ex: `512MB`.  # noqa: E501

        :return: The retention_size of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: str
        """
        return self._retention_size

    @retention_size.setter
    def retention_size(self, retention_size):
        """Sets the retention_size of this ComCoreosMonitoringV1PrometheusSpec.

        Maximum amount of disk space used by blocks. Supported units: B, KB, MB, GB, TB, PB, EB. Ex: `512MB`.  # noqa: E501

        :param retention_size: The retention_size of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: str
        """

        self._retention_size = retention_size

    @property
    def route_prefix(self):
        """Gets the route_prefix of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        The route prefix Prometheus registers HTTP handlers for. This is useful, if using ExternalURL and a proxy is rewriting HTTP routes of a request, and the actual ExternalURL is still true, but the server serves requests under a different route prefix. For example for use with `kubectl proxy`.  # noqa: E501

        :return: The route_prefix of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: str
        """
        return self._route_prefix

    @route_prefix.setter
    def route_prefix(self, route_prefix):
        """Sets the route_prefix of this ComCoreosMonitoringV1PrometheusSpec.

        The route prefix Prometheus registers HTTP handlers for. This is useful, if using ExternalURL and a proxy is rewriting HTTP routes of a request, and the actual ExternalURL is still true, but the server serves requests under a different route prefix. For example for use with `kubectl proxy`.  # noqa: E501

        :param route_prefix: The route_prefix of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: str
        """

        self._route_prefix = route_prefix

    @property
    def rule_namespace_selector(self):
        """Gets the rule_namespace_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501


        :return: The rule_namespace_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecRuleNamespaceSelector
        """
        return self._rule_namespace_selector

    @rule_namespace_selector.setter
    def rule_namespace_selector(self, rule_namespace_selector):
        """Sets the rule_namespace_selector of this ComCoreosMonitoringV1PrometheusSpec.


        :param rule_namespace_selector: The rule_namespace_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecRuleNamespaceSelector
        """

        self._rule_namespace_selector = rule_namespace_selector

    @property
    def rule_selector(self):
        """Gets the rule_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501


        :return: The rule_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecRuleSelector
        """
        return self._rule_selector

    @rule_selector.setter
    def rule_selector(self, rule_selector):
        """Sets the rule_selector of this ComCoreosMonitoringV1PrometheusSpec.


        :param rule_selector: The rule_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecRuleSelector
        """

        self._rule_selector = rule_selector

    @property
    def rules(self):
        """Gets the rules of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501


        :return: The rules of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecRules
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this ComCoreosMonitoringV1PrometheusSpec.


        :param rules: The rules of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecRules
        """

        self._rules = rules

    @property
    def scrape_interval(self):
        """Gets the scrape_interval of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Interval between consecutive scrapes. Default: `1m`  # noqa: E501

        :return: The scrape_interval of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: str
        """
        return self._scrape_interval

    @scrape_interval.setter
    def scrape_interval(self, scrape_interval):
        """Sets the scrape_interval of this ComCoreosMonitoringV1PrometheusSpec.

        Interval between consecutive scrapes. Default: `1m`  # noqa: E501

        :param scrape_interval: The scrape_interval of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: str
        """

        self._scrape_interval = scrape_interval

    @property
    def scrape_timeout(self):
        """Gets the scrape_timeout of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Number of seconds to wait for target to respond before erroring.  # noqa: E501

        :return: The scrape_timeout of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: str
        """
        return self._scrape_timeout

    @scrape_timeout.setter
    def scrape_timeout(self, scrape_timeout):
        """Sets the scrape_timeout of this ComCoreosMonitoringV1PrometheusSpec.

        Number of seconds to wait for target to respond before erroring.  # noqa: E501

        :param scrape_timeout: The scrape_timeout of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: str
        """

        self._scrape_timeout = scrape_timeout

    @property
    def secrets(self):
        """Gets the secrets of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Secrets is a list of Secrets in the same namespace as the Prometheus object, which shall be mounted into the Prometheus Pods. The Secrets are mounted into /etc/prometheus/secrets/<secret-name>.  # noqa: E501

        :return: The secrets of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this ComCoreosMonitoringV1PrometheusSpec.

        Secrets is a list of Secrets in the same namespace as the Prometheus object, which shall be mounted into the Prometheus Pods. The Secrets are mounted into /etc/prometheus/secrets/<secret-name>.  # noqa: E501

        :param secrets: The secrets of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: list[str]
        """

        self._secrets = secrets

    @property
    def security_context(self):
        """Gets the security_context of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501


        :return: The security_context of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1AlertmanagerSpecSecurityContext1
        """
        return self._security_context

    @security_context.setter
    def security_context(self, security_context):
        """Sets the security_context of this ComCoreosMonitoringV1PrometheusSpec.


        :param security_context: The security_context of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1AlertmanagerSpecSecurityContext1
        """

        self._security_context = security_context

    @property
    def service_account_name(self):
        """Gets the service_account_name of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        ServiceAccountName is the name of the ServiceAccount to use to run the Prometheus Pods.  # noqa: E501

        :return: The service_account_name of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: str
        """
        return self._service_account_name

    @service_account_name.setter
    def service_account_name(self, service_account_name):
        """Sets the service_account_name of this ComCoreosMonitoringV1PrometheusSpec.

        ServiceAccountName is the name of the ServiceAccount to use to run the Prometheus Pods.  # noqa: E501

        :param service_account_name: The service_account_name of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: str
        """

        self._service_account_name = service_account_name

    @property
    def service_monitor_namespace_selector(self):
        """Gets the service_monitor_namespace_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501


        :return: The service_monitor_namespace_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecServiceMonitorNamespaceSelector
        """
        return self._service_monitor_namespace_selector

    @service_monitor_namespace_selector.setter
    def service_monitor_namespace_selector(self, service_monitor_namespace_selector):
        """Sets the service_monitor_namespace_selector of this ComCoreosMonitoringV1PrometheusSpec.


        :param service_monitor_namespace_selector: The service_monitor_namespace_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecServiceMonitorNamespaceSelector
        """

        self._service_monitor_namespace_selector = service_monitor_namespace_selector

    @property
    def service_monitor_selector(self):
        """Gets the service_monitor_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501


        :return: The service_monitor_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecServiceMonitorSelector
        """
        return self._service_monitor_selector

    @service_monitor_selector.setter
    def service_monitor_selector(self, service_monitor_selector):
        """Sets the service_monitor_selector of this ComCoreosMonitoringV1PrometheusSpec.


        :param service_monitor_selector: The service_monitor_selector of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecServiceMonitorSelector
        """

        self._service_monitor_selector = service_monitor_selector

    @property
    def sha(self):
        """Gets the sha of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        SHA of Prometheus container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set. Deprecated: use 'image' instead.  The image digest can be specified as part of the image URL.  # noqa: E501

        :return: The sha of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this ComCoreosMonitoringV1PrometheusSpec.

        SHA of Prometheus container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set. Deprecated: use 'image' instead.  The image digest can be specified as part of the image URL.  # noqa: E501

        :param sha: The sha of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: str
        """

        self._sha = sha

    @property
    def shards(self):
        """Gets the shards of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        EXPERIMENTAL: Number of shards to distribute targets onto. Number of replicas multiplied by shards is the total number of Pods created. Note that scaling down shards will not reshard data onto remaining instances, it must be manually moved. Increasing shards will not reshard data either but it will continue to be available from the same instances. To query globally use Thanos sidecar and Thanos querier or remote write data to a central location. Sharding is done on the content of the `__address__` target meta-label.  # noqa: E501

        :return: The shards of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: int
        """
        return self._shards

    @shards.setter
    def shards(self, shards):
        """Sets the shards of this ComCoreosMonitoringV1PrometheusSpec.

        EXPERIMENTAL: Number of shards to distribute targets onto. Number of replicas multiplied by shards is the total number of Pods created. Note that scaling down shards will not reshard data onto remaining instances, it must be manually moved. Increasing shards will not reshard data either but it will continue to be available from the same instances. To query globally use Thanos sidecar and Thanos querier or remote write data to a central location. Sharding is done on the content of the `__address__` target meta-label.  # noqa: E501

        :param shards: The shards of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: int
        """

        self._shards = shards

    @property
    def storage(self):
        """Gets the storage of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501


        :return: The storage of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecStorage
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this ComCoreosMonitoringV1PrometheusSpec.


        :param storage: The storage of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecStorage
        """

        self._storage = storage

    @property
    def tag(self):
        """Gets the tag of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Tag of Prometheus container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set. Deprecated: use 'image' instead.  The image tag can be specified as part of the image URL.  # noqa: E501

        :return: The tag of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ComCoreosMonitoringV1PrometheusSpec.

        Tag of Prometheus container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set. Deprecated: use 'image' instead.  The image tag can be specified as part of the image URL.  # noqa: E501

        :param tag: The tag of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def thanos(self):
        """Gets the thanos of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501


        :return: The thanos of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecThanos
        """
        return self._thanos

    @thanos.setter
    def thanos(self, thanos):
        """Sets the thanos of this ComCoreosMonitoringV1PrometheusSpec.


        :param thanos: The thanos of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecThanos
        """

        self._thanos = thanos

    @property
    def tolerations(self):
        """Gets the tolerations of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        If specified, the pod's tolerations.  # noqa: E501

        :return: The tolerations of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecTolerations]
        """
        return self._tolerations

    @tolerations.setter
    def tolerations(self, tolerations):
        """Sets the tolerations of this ComCoreosMonitoringV1PrometheusSpec.

        If specified, the pod's tolerations.  # noqa: E501

        :param tolerations: The tolerations of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecTolerations]
        """

        self._tolerations = tolerations

    @property
    def topology_spread_constraints(self):
        """Gets the topology_spread_constraints of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        If specified, the pod's topology spread constraints.  # noqa: E501

        :return: The topology_spread_constraints of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecTopologySpreadConstraints]
        """
        return self._topology_spread_constraints

    @topology_spread_constraints.setter
    def topology_spread_constraints(self, topology_spread_constraints):
        """Sets the topology_spread_constraints of this ComCoreosMonitoringV1PrometheusSpec.

        If specified, the pod's topology spread constraints.  # noqa: E501

        :param topology_spread_constraints: The topology_spread_constraints of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecTopologySpreadConstraints]
        """

        self._topology_spread_constraints = topology_spread_constraints

    @property
    def version(self):
        """Gets the version of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Version of Prometheus to be deployed.  # noqa: E501

        :return: The version of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ComCoreosMonitoringV1PrometheusSpec.

        Version of Prometheus to be deployed.  # noqa: E501

        :param version: The version of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def volume_mounts(self):
        """Gets the volume_mounts of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the prometheus container, that are generated as a result of StorageSpec objects.  # noqa: E501

        :return: The volume_mounts of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecVolumeMounts]
        """
        return self._volume_mounts

    @volume_mounts.setter
    def volume_mounts(self, volume_mounts):
        """Sets the volume_mounts of this ComCoreosMonitoringV1PrometheusSpec.

        VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the prometheus container, that are generated as a result of StorageSpec objects.  # noqa: E501

        :param volume_mounts: The volume_mounts of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecVolumeMounts]
        """

        self._volume_mounts = volume_mounts

    @property
    def volumes(self):
        """Gets the volumes of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.  # noqa: E501

        :return: The volumes of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecVolumes]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this ComCoreosMonitoringV1PrometheusSpec.

        Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.  # noqa: E501

        :param volumes: The volumes of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecVolumes]
        """

        self._volumes = volumes

    @property
    def wal_compression(self):
        """Gets the wal_compression of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501

        Enable compression of the write-ahead log using Snappy. This flag is only available in versions of Prometheus >= 2.11.0.  # noqa: E501

        :return: The wal_compression of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: bool
        """
        return self._wal_compression

    @wal_compression.setter
    def wal_compression(self, wal_compression):
        """Sets the wal_compression of this ComCoreosMonitoringV1PrometheusSpec.

        Enable compression of the write-ahead log using Snappy. This flag is only available in versions of Prometheus >= 2.11.0.  # noqa: E501

        :param wal_compression: The wal_compression of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: bool
        """

        self._wal_compression = wal_compression

    @property
    def web(self):
        """Gets the web of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501


        :return: The web of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecWeb
        """
        return self._web

    @web.setter
    def web(self, web):
        """Sets the web of this ComCoreosMonitoringV1PrometheusSpec.


        :param web: The web of this ComCoreosMonitoringV1PrometheusSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecWeb
        """

        self._web = web

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComCoreosMonitoringV1PrometheusSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComCoreosMonitoringV1PrometheusSpec):
            return True

        return self.to_dict() != other.to_dict()
