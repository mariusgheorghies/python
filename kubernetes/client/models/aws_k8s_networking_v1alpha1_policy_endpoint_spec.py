# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class AwsK8sNetworkingV1alpha1PolicyEndpointSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'egress': 'list[AwsK8sNetworkingV1alpha1PolicyEndpointSpecEgress]',
        'ingress': 'list[AwsK8sNetworkingV1alpha1PolicyEndpointSpecEgress]',
        'pod_isolation': 'list[str]',
        'pod_selector': 'AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelector',
        'pod_selector_endpoints': 'list[AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelectorEndpoints]',
        'policy_ref': 'AwsK8sNetworkingV1alpha1PolicyEndpointSpecPolicyRef'
    }

    attribute_map = {
        'egress': 'egress',
        'ingress': 'ingress',
        'pod_isolation': 'podIsolation',
        'pod_selector': 'podSelector',
        'pod_selector_endpoints': 'podSelectorEndpoints',
        'policy_ref': 'policyRef'
    }

    def __init__(self, egress=None, ingress=None, pod_isolation=None, pod_selector=None, pod_selector_endpoints=None, policy_ref=None, local_vars_configuration=None):  # noqa: E501
        """AwsK8sNetworkingV1alpha1PolicyEndpointSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._egress = None
        self._ingress = None
        self._pod_isolation = None
        self._pod_selector = None
        self._pod_selector_endpoints = None
        self._policy_ref = None
        self.discriminator = None

        if egress is not None:
            self.egress = egress
        if ingress is not None:
            self.ingress = ingress
        if pod_isolation is not None:
            self.pod_isolation = pod_isolation
        if pod_selector is not None:
            self.pod_selector = pod_selector
        if pod_selector_endpoints is not None:
            self.pod_selector_endpoints = pod_selector_endpoints
        self.policy_ref = policy_ref

    @property
    def egress(self):
        """Gets the egress of this AwsK8sNetworkingV1alpha1PolicyEndpointSpec.  # noqa: E501

        Egress is the list of egress rules containing resolved network addresses  # noqa: E501

        :return: The egress of this AwsK8sNetworkingV1alpha1PolicyEndpointSpec.  # noqa: E501
        :rtype: list[AwsK8sNetworkingV1alpha1PolicyEndpointSpecEgress]
        """
        return self._egress

    @egress.setter
    def egress(self, egress):
        """Sets the egress of this AwsK8sNetworkingV1alpha1PolicyEndpointSpec.

        Egress is the list of egress rules containing resolved network addresses  # noqa: E501

        :param egress: The egress of this AwsK8sNetworkingV1alpha1PolicyEndpointSpec.  # noqa: E501
        :type: list[AwsK8sNetworkingV1alpha1PolicyEndpointSpecEgress]
        """

        self._egress = egress

    @property
    def ingress(self):
        """Gets the ingress of this AwsK8sNetworkingV1alpha1PolicyEndpointSpec.  # noqa: E501

        Ingress is the list of ingress rules containing resolved network addresses  # noqa: E501

        :return: The ingress of this AwsK8sNetworkingV1alpha1PolicyEndpointSpec.  # noqa: E501
        :rtype: list[AwsK8sNetworkingV1alpha1PolicyEndpointSpecEgress]
        """
        return self._ingress

    @ingress.setter
    def ingress(self, ingress):
        """Sets the ingress of this AwsK8sNetworkingV1alpha1PolicyEndpointSpec.

        Ingress is the list of ingress rules containing resolved network addresses  # noqa: E501

        :param ingress: The ingress of this AwsK8sNetworkingV1alpha1PolicyEndpointSpec.  # noqa: E501
        :type: list[AwsK8sNetworkingV1alpha1PolicyEndpointSpecEgress]
        """

        self._ingress = ingress

    @property
    def pod_isolation(self):
        """Gets the pod_isolation of this AwsK8sNetworkingV1alpha1PolicyEndpointSpec.  # noqa: E501

        PodIsolation specifies whether the pod needs to be isolated for a particular traffic direction Ingress or Egress, or both. If default isolation is not specified, and there are no ingress/egress rules, then the pod is not isolated from the point of view of this policy. This follows the NetworkPolicy spec.PolicyTypes.  # noqa: E501

        :return: The pod_isolation of this AwsK8sNetworkingV1alpha1PolicyEndpointSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._pod_isolation

    @pod_isolation.setter
    def pod_isolation(self, pod_isolation):
        """Sets the pod_isolation of this AwsK8sNetworkingV1alpha1PolicyEndpointSpec.

        PodIsolation specifies whether the pod needs to be isolated for a particular traffic direction Ingress or Egress, or both. If default isolation is not specified, and there are no ingress/egress rules, then the pod is not isolated from the point of view of this policy. This follows the NetworkPolicy spec.PolicyTypes.  # noqa: E501

        :param pod_isolation: The pod_isolation of this AwsK8sNetworkingV1alpha1PolicyEndpointSpec.  # noqa: E501
        :type: list[str]
        """

        self._pod_isolation = pod_isolation

    @property
    def pod_selector(self):
        """Gets the pod_selector of this AwsK8sNetworkingV1alpha1PolicyEndpointSpec.  # noqa: E501


        :return: The pod_selector of this AwsK8sNetworkingV1alpha1PolicyEndpointSpec.  # noqa: E501
        :rtype: AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelector
        """
        return self._pod_selector

    @pod_selector.setter
    def pod_selector(self, pod_selector):
        """Sets the pod_selector of this AwsK8sNetworkingV1alpha1PolicyEndpointSpec.


        :param pod_selector: The pod_selector of this AwsK8sNetworkingV1alpha1PolicyEndpointSpec.  # noqa: E501
        :type: AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelector
        """

        self._pod_selector = pod_selector

    @property
    def pod_selector_endpoints(self):
        """Gets the pod_selector_endpoints of this AwsK8sNetworkingV1alpha1PolicyEndpointSpec.  # noqa: E501

        PodSelectorEndpoints contains information about the pods matching the podSelector  # noqa: E501

        :return: The pod_selector_endpoints of this AwsK8sNetworkingV1alpha1PolicyEndpointSpec.  # noqa: E501
        :rtype: list[AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelectorEndpoints]
        """
        return self._pod_selector_endpoints

    @pod_selector_endpoints.setter
    def pod_selector_endpoints(self, pod_selector_endpoints):
        """Sets the pod_selector_endpoints of this AwsK8sNetworkingV1alpha1PolicyEndpointSpec.

        PodSelectorEndpoints contains information about the pods matching the podSelector  # noqa: E501

        :param pod_selector_endpoints: The pod_selector_endpoints of this AwsK8sNetworkingV1alpha1PolicyEndpointSpec.  # noqa: E501
        :type: list[AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelectorEndpoints]
        """

        self._pod_selector_endpoints = pod_selector_endpoints

    @property
    def policy_ref(self):
        """Gets the policy_ref of this AwsK8sNetworkingV1alpha1PolicyEndpointSpec.  # noqa: E501


        :return: The policy_ref of this AwsK8sNetworkingV1alpha1PolicyEndpointSpec.  # noqa: E501
        :rtype: AwsK8sNetworkingV1alpha1PolicyEndpointSpecPolicyRef
        """
        return self._policy_ref

    @policy_ref.setter
    def policy_ref(self, policy_ref):
        """Sets the policy_ref of this AwsK8sNetworkingV1alpha1PolicyEndpointSpec.


        :param policy_ref: The policy_ref of this AwsK8sNetworkingV1alpha1PolicyEndpointSpec.  # noqa: E501
        :type: AwsK8sNetworkingV1alpha1PolicyEndpointSpecPolicyRef
        """
        if self.local_vars_configuration.client_side_validation and policy_ref is None:  # noqa: E501
            raise ValueError("Invalid value for `policy_ref`, must not be `None`")  # noqa: E501

        self._policy_ref = policy_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsK8sNetworkingV1alpha1PolicyEndpointSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwsK8sNetworkingV1alpha1PolicyEndpointSpec):
            return True

        return self.to_dict() != other.to_dict()
