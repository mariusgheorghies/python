# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allowed_cidr_blocks': 'list[str]',
        'ami': 'str',
        'disable_ingress_rules': 'bool',
        'enabled': 'bool',
        'instance_type': 'str'
    }

    attribute_map = {
        'allowed_cidr_blocks': 'allowedCIDRBlocks',
        'ami': 'ami',
        'disable_ingress_rules': 'disableIngressRules',
        'enabled': 'enabled',
        'instance_type': 'instanceType'
    }

    def __init__(self, allowed_cidr_blocks=None, ami=None, disable_ingress_rules=None, enabled=None, instance_type=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._allowed_cidr_blocks = None
        self._ami = None
        self._disable_ingress_rules = None
        self._enabled = None
        self._instance_type = None
        self.discriminator = None

        if allowed_cidr_blocks is not None:
            self.allowed_cidr_blocks = allowed_cidr_blocks
        if ami is not None:
            self.ami = ami
        if disable_ingress_rules is not None:
            self.disable_ingress_rules = disable_ingress_rules
        if enabled is not None:
            self.enabled = enabled
        if instance_type is not None:
            self.instance_type = instance_type

    @property
    def allowed_cidr_blocks(self):
        """Gets the allowed_cidr_blocks of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion.  # noqa: E501

        AllowedCIDRBlocks is a list of CIDR blocks allowed to access the bastion host. They are set as ingress rules for the Bastion host's Security Group (defaults to 0.0.0.0/0).  # noqa: E501

        :return: The allowed_cidr_blocks of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_cidr_blocks

    @allowed_cidr_blocks.setter
    def allowed_cidr_blocks(self, allowed_cidr_blocks):
        """Sets the allowed_cidr_blocks of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion.

        AllowedCIDRBlocks is a list of CIDR blocks allowed to access the bastion host. They are set as ingress rules for the Bastion host's Security Group (defaults to 0.0.0.0/0).  # noqa: E501

        :param allowed_cidr_blocks: The allowed_cidr_blocks of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion.  # noqa: E501
        :type: list[str]
        """

        self._allowed_cidr_blocks = allowed_cidr_blocks

    @property
    def ami(self):
        """Gets the ami of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion.  # noqa: E501

        AMI will use the specified AMI to boot the bastion. If not specified, the AMI will default to one picked out in public space.  # noqa: E501

        :return: The ami of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion.  # noqa: E501
        :rtype: str
        """
        return self._ami

    @ami.setter
    def ami(self, ami):
        """Sets the ami of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion.

        AMI will use the specified AMI to boot the bastion. If not specified, the AMI will default to one picked out in public space.  # noqa: E501

        :param ami: The ami of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion.  # noqa: E501
        :type: str
        """

        self._ami = ami

    @property
    def disable_ingress_rules(self):
        """Gets the disable_ingress_rules of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion.  # noqa: E501

        DisableIngressRules will ensure there are no Ingress rules in the bastion host's security group. Requires AllowedCIDRBlocks to be empty.  # noqa: E501

        :return: The disable_ingress_rules of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion.  # noqa: E501
        :rtype: bool
        """
        return self._disable_ingress_rules

    @disable_ingress_rules.setter
    def disable_ingress_rules(self, disable_ingress_rules):
        """Sets the disable_ingress_rules of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion.

        DisableIngressRules will ensure there are no Ingress rules in the bastion host's security group. Requires AllowedCIDRBlocks to be empty.  # noqa: E501

        :param disable_ingress_rules: The disable_ingress_rules of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion.  # noqa: E501
        :type: bool
        """

        self._disable_ingress_rules = disable_ingress_rules

    @property
    def enabled(self):
        """Gets the enabled of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion.  # noqa: E501

        Enabled allows this provider to create a bastion host instance with a public ip to access the VPC private network.  # noqa: E501

        :return: The enabled of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion.

        Enabled allows this provider to create a bastion host instance with a public ip to access the VPC private network.  # noqa: E501

        :param enabled: The enabled of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def instance_type(self):
        """Gets the instance_type of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion.  # noqa: E501

        InstanceType will use the specified instance type for the bastion. If not specified, Cluster API Provider AWS will use t3.micro for all regions except us-east-1, where t2.micro will be the default.  # noqa: E501

        :return: The instance_type of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion.

        InstanceType will use the specified instance type for the bastion. If not specified, Cluster API Provider AWS will use t3.micro for all regions except us-east-1, where t2.micro will be the default.  # noqa: E501

        :param instance_type: The instance_type of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion.  # noqa: E501
        :type: str
        """

        self._instance_type = instance_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecBastion):
            return True

        return self.to_dict() != other.to_dict()
