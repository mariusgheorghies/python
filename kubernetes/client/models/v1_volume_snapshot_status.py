# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class V1VolumeSnapshotStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bound_volume_snapshot_content_name': 'str',
        'creation_time': 'datetime',
        'error': 'V1VolumeSnapshotStatusError',
        'ready_to_use': 'bool',
        'restore_size': 'str'
    }

    attribute_map = {
        'bound_volume_snapshot_content_name': 'boundVolumeSnapshotContentName',
        'creation_time': 'creationTime',
        'error': 'error',
        'ready_to_use': 'readyToUse',
        'restore_size': 'restoreSize'
    }

    def __init__(self, bound_volume_snapshot_content_name=None, creation_time=None, error=None, ready_to_use=None, restore_size=None, local_vars_configuration=None):  # noqa: E501
        """V1VolumeSnapshotStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bound_volume_snapshot_content_name = None
        self._creation_time = None
        self._error = None
        self._ready_to_use = None
        self._restore_size = None
        self.discriminator = None

        if bound_volume_snapshot_content_name is not None:
            self.bound_volume_snapshot_content_name = bound_volume_snapshot_content_name
        if creation_time is not None:
            self.creation_time = creation_time
        if error is not None:
            self.error = error
        if ready_to_use is not None:
            self.ready_to_use = ready_to_use
        if restore_size is not None:
            self.restore_size = restore_size

    @property
    def bound_volume_snapshot_content_name(self):
        """Gets the bound_volume_snapshot_content_name of this V1VolumeSnapshotStatus.  # noqa: E501

        boundVolumeSnapshotContentName is the name of the VolumeSnapshotContent object to which this VolumeSnapshot object intends to bind to. If not specified, it indicates that the VolumeSnapshot object has not been successfully bound to a VolumeSnapshotContent object yet. NOTE: To avoid possible security issues, consumers must verify binding between VolumeSnapshot and VolumeSnapshotContent objects is successful (by validating that both VolumeSnapshot and VolumeSnapshotContent point at each other) before using this object.  # noqa: E501

        :return: The bound_volume_snapshot_content_name of this V1VolumeSnapshotStatus.  # noqa: E501
        :rtype: str
        """
        return self._bound_volume_snapshot_content_name

    @bound_volume_snapshot_content_name.setter
    def bound_volume_snapshot_content_name(self, bound_volume_snapshot_content_name):
        """Sets the bound_volume_snapshot_content_name of this V1VolumeSnapshotStatus.

        boundVolumeSnapshotContentName is the name of the VolumeSnapshotContent object to which this VolumeSnapshot object intends to bind to. If not specified, it indicates that the VolumeSnapshot object has not been successfully bound to a VolumeSnapshotContent object yet. NOTE: To avoid possible security issues, consumers must verify binding between VolumeSnapshot and VolumeSnapshotContent objects is successful (by validating that both VolumeSnapshot and VolumeSnapshotContent point at each other) before using this object.  # noqa: E501

        :param bound_volume_snapshot_content_name: The bound_volume_snapshot_content_name of this V1VolumeSnapshotStatus.  # noqa: E501
        :type: str
        """

        self._bound_volume_snapshot_content_name = bound_volume_snapshot_content_name

    @property
    def creation_time(self):
        """Gets the creation_time of this V1VolumeSnapshotStatus.  # noqa: E501

        creationTime is the timestamp when the point-in-time snapshot is taken by the underlying storage system. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the \"creation_time\" value returned from CSI \"CreateSnapshot\" gRPC call. For a pre-existing snapshot, this field will be filled with the \"creation_time\" value returned from the CSI \"ListSnapshots\" gRPC call if the driver supports it. If not specified, it may indicate that the creation time of the snapshot is unknown.  # noqa: E501

        :return: The creation_time of this V1VolumeSnapshotStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this V1VolumeSnapshotStatus.

        creationTime is the timestamp when the point-in-time snapshot is taken by the underlying storage system. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the \"creation_time\" value returned from CSI \"CreateSnapshot\" gRPC call. For a pre-existing snapshot, this field will be filled with the \"creation_time\" value returned from the CSI \"ListSnapshots\" gRPC call if the driver supports it. If not specified, it may indicate that the creation time of the snapshot is unknown.  # noqa: E501

        :param creation_time: The creation_time of this V1VolumeSnapshotStatus.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def error(self):
        """Gets the error of this V1VolumeSnapshotStatus.  # noqa: E501


        :return: The error of this V1VolumeSnapshotStatus.  # noqa: E501
        :rtype: V1VolumeSnapshotStatusError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this V1VolumeSnapshotStatus.


        :param error: The error of this V1VolumeSnapshotStatus.  # noqa: E501
        :type: V1VolumeSnapshotStatusError
        """

        self._error = error

    @property
    def ready_to_use(self):
        """Gets the ready_to_use of this V1VolumeSnapshotStatus.  # noqa: E501

        readyToUse indicates if the snapshot is ready to be used to restore a volume. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the \"ready_to_use\" value returned from CSI \"CreateSnapshot\" gRPC call. For a pre-existing snapshot, this field will be filled with the \"ready_to_use\" value returned from the CSI \"ListSnapshots\" gRPC call if the driver supports it, otherwise, this field will be set to \"True\". If not specified, it means the readiness of a snapshot is unknown.  # noqa: E501

        :return: The ready_to_use of this V1VolumeSnapshotStatus.  # noqa: E501
        :rtype: bool
        """
        return self._ready_to_use

    @ready_to_use.setter
    def ready_to_use(self, ready_to_use):
        """Sets the ready_to_use of this V1VolumeSnapshotStatus.

        readyToUse indicates if the snapshot is ready to be used to restore a volume. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the \"ready_to_use\" value returned from CSI \"CreateSnapshot\" gRPC call. For a pre-existing snapshot, this field will be filled with the \"ready_to_use\" value returned from the CSI \"ListSnapshots\" gRPC call if the driver supports it, otherwise, this field will be set to \"True\". If not specified, it means the readiness of a snapshot is unknown.  # noqa: E501

        :param ready_to_use: The ready_to_use of this V1VolumeSnapshotStatus.  # noqa: E501
        :type: bool
        """

        self._ready_to_use = ready_to_use

    @property
    def restore_size(self):
        """Gets the restore_size of this V1VolumeSnapshotStatus.  # noqa: E501

        restoreSize represents the minimum size of volume required to create a volume from this snapshot. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the \"size_bytes\" value returned from CSI \"CreateSnapshot\" gRPC call. For a pre-existing snapshot, this field will be filled with the \"size_bytes\" value returned from the CSI \"ListSnapshots\" gRPC call if the driver supports it. When restoring a volume from this snapshot, the size of the volume MUST NOT be smaller than the restoreSize if it is specified, otherwise the restoration will fail. If not specified, it indicates that the size is unknown.  # noqa: E501

        :return: The restore_size of this V1VolumeSnapshotStatus.  # noqa: E501
        :rtype: str
        """
        return self._restore_size

    @restore_size.setter
    def restore_size(self, restore_size):
        """Sets the restore_size of this V1VolumeSnapshotStatus.

        restoreSize represents the minimum size of volume required to create a volume from this snapshot. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the \"size_bytes\" value returned from CSI \"CreateSnapshot\" gRPC call. For a pre-existing snapshot, this field will be filled with the \"size_bytes\" value returned from the CSI \"ListSnapshots\" gRPC call if the driver supports it. When restoring a volume from this snapshot, the size of the volume MUST NOT be smaller than the restoreSize if it is specified, otherwise the restoration will fail. If not specified, it indicates that the size is unknown.  # noqa: E501

        :param restore_size: The restore_size of this V1VolumeSnapshotStatus.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                restore_size is not None and not re.search(r'^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', restore_size)):  # noqa: E501
            raise ValueError(r"Invalid value for `restore_size`, must be a follow pattern or equal to `/^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$/`")  # noqa: E501

        self._restore_size = restore_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1VolumeSnapshotStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1VolumeSnapshotStatus):
            return True

        return self.to_dict() != other.to_dict()
