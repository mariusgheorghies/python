# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class OrgProjectcalicoCrdV1ClusterInformationSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'calico_version': 'str',
        'cluster_guid': 'str',
        'cluster_type': 'str',
        'datastore_ready': 'bool',
        'variant': 'str'
    }

    attribute_map = {
        'calico_version': 'calicoVersion',
        'cluster_guid': 'clusterGUID',
        'cluster_type': 'clusterType',
        'datastore_ready': 'datastoreReady',
        'variant': 'variant'
    }

    def __init__(self, calico_version=None, cluster_guid=None, cluster_type=None, datastore_ready=None, variant=None, local_vars_configuration=None):  # noqa: E501
        """OrgProjectcalicoCrdV1ClusterInformationSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._calico_version = None
        self._cluster_guid = None
        self._cluster_type = None
        self._datastore_ready = None
        self._variant = None
        self.discriminator = None

        if calico_version is not None:
            self.calico_version = calico_version
        if cluster_guid is not None:
            self.cluster_guid = cluster_guid
        if cluster_type is not None:
            self.cluster_type = cluster_type
        if datastore_ready is not None:
            self.datastore_ready = datastore_ready
        if variant is not None:
            self.variant = variant

    @property
    def calico_version(self):
        """Gets the calico_version of this OrgProjectcalicoCrdV1ClusterInformationSpec.  # noqa: E501

        CalicoVersion is the version of Calico that the cluster is running  # noqa: E501

        :return: The calico_version of this OrgProjectcalicoCrdV1ClusterInformationSpec.  # noqa: E501
        :rtype: str
        """
        return self._calico_version

    @calico_version.setter
    def calico_version(self, calico_version):
        """Sets the calico_version of this OrgProjectcalicoCrdV1ClusterInformationSpec.

        CalicoVersion is the version of Calico that the cluster is running  # noqa: E501

        :param calico_version: The calico_version of this OrgProjectcalicoCrdV1ClusterInformationSpec.  # noqa: E501
        :type: str
        """

        self._calico_version = calico_version

    @property
    def cluster_guid(self):
        """Gets the cluster_guid of this OrgProjectcalicoCrdV1ClusterInformationSpec.  # noqa: E501

        ClusterGUID is the GUID of the cluster  # noqa: E501

        :return: The cluster_guid of this OrgProjectcalicoCrdV1ClusterInformationSpec.  # noqa: E501
        :rtype: str
        """
        return self._cluster_guid

    @cluster_guid.setter
    def cluster_guid(self, cluster_guid):
        """Sets the cluster_guid of this OrgProjectcalicoCrdV1ClusterInformationSpec.

        ClusterGUID is the GUID of the cluster  # noqa: E501

        :param cluster_guid: The cluster_guid of this OrgProjectcalicoCrdV1ClusterInformationSpec.  # noqa: E501
        :type: str
        """

        self._cluster_guid = cluster_guid

    @property
    def cluster_type(self):
        """Gets the cluster_type of this OrgProjectcalicoCrdV1ClusterInformationSpec.  # noqa: E501

        ClusterType describes the type of the cluster  # noqa: E501

        :return: The cluster_type of this OrgProjectcalicoCrdV1ClusterInformationSpec.  # noqa: E501
        :rtype: str
        """
        return self._cluster_type

    @cluster_type.setter
    def cluster_type(self, cluster_type):
        """Sets the cluster_type of this OrgProjectcalicoCrdV1ClusterInformationSpec.

        ClusterType describes the type of the cluster  # noqa: E501

        :param cluster_type: The cluster_type of this OrgProjectcalicoCrdV1ClusterInformationSpec.  # noqa: E501
        :type: str
        """

        self._cluster_type = cluster_type

    @property
    def datastore_ready(self):
        """Gets the datastore_ready of this OrgProjectcalicoCrdV1ClusterInformationSpec.  # noqa: E501

        DatastoreReady is used during significant datastore migrations to signal to components such as Felix that it should wait before accessing the datastore.  # noqa: E501

        :return: The datastore_ready of this OrgProjectcalicoCrdV1ClusterInformationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._datastore_ready

    @datastore_ready.setter
    def datastore_ready(self, datastore_ready):
        """Sets the datastore_ready of this OrgProjectcalicoCrdV1ClusterInformationSpec.

        DatastoreReady is used during significant datastore migrations to signal to components such as Felix that it should wait before accessing the datastore.  # noqa: E501

        :param datastore_ready: The datastore_ready of this OrgProjectcalicoCrdV1ClusterInformationSpec.  # noqa: E501
        :type: bool
        """

        self._datastore_ready = datastore_ready

    @property
    def variant(self):
        """Gets the variant of this OrgProjectcalicoCrdV1ClusterInformationSpec.  # noqa: E501

        Variant declares which variant of Calico should be active.  # noqa: E501

        :return: The variant of this OrgProjectcalicoCrdV1ClusterInformationSpec.  # noqa: E501
        :rtype: str
        """
        return self._variant

    @variant.setter
    def variant(self, variant):
        """Sets the variant of this OrgProjectcalicoCrdV1ClusterInformationSpec.

        Variant declares which variant of Calico should be active.  # noqa: E501

        :param variant: The variant of this OrgProjectcalicoCrdV1ClusterInformationSpec.  # noqa: E501
        :type: str
        """

        self._variant = variant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgProjectcalicoCrdV1ClusterInformationSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrgProjectcalicoCrdV1ClusterInformationSpec):
            return True

        return self.to_dict() != other.to_dict()
