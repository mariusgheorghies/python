# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class AwsK8sServicesEc2V1alpha1SubnetStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ack_resource_metadata': 'AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata',
        'available_ip_address_count': 'int',
        'conditions': 'list[AwsK8sServicesEc2V1alpha1DHCPOptionsStatusConditions]',
        'default_for_az': 'bool',
        'enable_lni_at_device_index': 'int',
        'ipv6_cidr_block_association_set': 'list[AwsK8sServicesEc2V1alpha1SubnetStatusIpv6CIDRBlockAssociationSet]',
        'map_customer_owned_ip_on_launch': 'bool',
        'owner_id': 'str',
        'private_dns_name_options_on_launch': 'AwsK8sServicesEc2V1alpha1SubnetStatusPrivateDNSNameOptionsOnLaunch',
        'state': 'str',
        'subnet_id': 'str'
    }

    attribute_map = {
        'ack_resource_metadata': 'ackResourceMetadata',
        'available_ip_address_count': 'availableIPAddressCount',
        'conditions': 'conditions',
        'default_for_az': 'defaultForAZ',
        'enable_lni_at_device_index': 'enableLniAtDeviceIndex',
        'ipv6_cidr_block_association_set': 'ipv6CIDRBlockAssociationSet',
        'map_customer_owned_ip_on_launch': 'mapCustomerOwnedIPOnLaunch',
        'owner_id': 'ownerID',
        'private_dns_name_options_on_launch': 'privateDNSNameOptionsOnLaunch',
        'state': 'state',
        'subnet_id': 'subnetID'
    }

    def __init__(self, ack_resource_metadata=None, available_ip_address_count=None, conditions=None, default_for_az=None, enable_lni_at_device_index=None, ipv6_cidr_block_association_set=None, map_customer_owned_ip_on_launch=None, owner_id=None, private_dns_name_options_on_launch=None, state=None, subnet_id=None, local_vars_configuration=None):  # noqa: E501
        """AwsK8sServicesEc2V1alpha1SubnetStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ack_resource_metadata = None
        self._available_ip_address_count = None
        self._conditions = None
        self._default_for_az = None
        self._enable_lni_at_device_index = None
        self._ipv6_cidr_block_association_set = None
        self._map_customer_owned_ip_on_launch = None
        self._owner_id = None
        self._private_dns_name_options_on_launch = None
        self._state = None
        self._subnet_id = None
        self.discriminator = None

        if ack_resource_metadata is not None:
            self.ack_resource_metadata = ack_resource_metadata
        if available_ip_address_count is not None:
            self.available_ip_address_count = available_ip_address_count
        if conditions is not None:
            self.conditions = conditions
        if default_for_az is not None:
            self.default_for_az = default_for_az
        if enable_lni_at_device_index is not None:
            self.enable_lni_at_device_index = enable_lni_at_device_index
        if ipv6_cidr_block_association_set is not None:
            self.ipv6_cidr_block_association_set = ipv6_cidr_block_association_set
        if map_customer_owned_ip_on_launch is not None:
            self.map_customer_owned_ip_on_launch = map_customer_owned_ip_on_launch
        if owner_id is not None:
            self.owner_id = owner_id
        if private_dns_name_options_on_launch is not None:
            self.private_dns_name_options_on_launch = private_dns_name_options_on_launch
        if state is not None:
            self.state = state
        if subnet_id is not None:
            self.subnet_id = subnet_id

    @property
    def ack_resource_metadata(self):
        """Gets the ack_resource_metadata of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501


        :return: The ack_resource_metadata of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata
        """
        return self._ack_resource_metadata

    @ack_resource_metadata.setter
    def ack_resource_metadata(self, ack_resource_metadata):
        """Sets the ack_resource_metadata of this AwsK8sServicesEc2V1alpha1SubnetStatus.


        :param ack_resource_metadata: The ack_resource_metadata of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata
        """

        self._ack_resource_metadata = ack_resource_metadata

    @property
    def available_ip_address_count(self):
        """Gets the available_ip_address_count of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501

        The number of unused private IPv4 addresses in the subnet. The IPv4 addresses for any stopped instances are considered unavailable.  # noqa: E501

        :return: The available_ip_address_count of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501
        :rtype: int
        """
        return self._available_ip_address_count

    @available_ip_address_count.setter
    def available_ip_address_count(self, available_ip_address_count):
        """Sets the available_ip_address_count of this AwsK8sServicesEc2V1alpha1SubnetStatus.

        The number of unused private IPv4 addresses in the subnet. The IPv4 addresses for any stopped instances are considered unavailable.  # noqa: E501

        :param available_ip_address_count: The available_ip_address_count of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501
        :type: int
        """

        self._available_ip_address_count = available_ip_address_count

    @property
    def conditions(self):
        """Gets the conditions of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501

        All CRS managed by ACK have a common `Status.Conditions` member that contains a collection of `ackv1alpha1.Condition` objects that describe the various terminal states of the CR and its backend AWS service API resource  # noqa: E501

        :return: The conditions of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1DHCPOptionsStatusConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this AwsK8sServicesEc2V1alpha1SubnetStatus.

        All CRS managed by ACK have a common `Status.Conditions` member that contains a collection of `ackv1alpha1.Condition` objects that describe the various terminal states of the CR and its backend AWS service API resource  # noqa: E501

        :param conditions: The conditions of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1DHCPOptionsStatusConditions]
        """

        self._conditions = conditions

    @property
    def default_for_az(self):
        """Gets the default_for_az of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501

        Indicates whether this is the default subnet for the Availability Zone.  # noqa: E501

        :return: The default_for_az of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501
        :rtype: bool
        """
        return self._default_for_az

    @default_for_az.setter
    def default_for_az(self, default_for_az):
        """Sets the default_for_az of this AwsK8sServicesEc2V1alpha1SubnetStatus.

        Indicates whether this is the default subnet for the Availability Zone.  # noqa: E501

        :param default_for_az: The default_for_az of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501
        :type: bool
        """

        self._default_for_az = default_for_az

    @property
    def enable_lni_at_device_index(self):
        """Gets the enable_lni_at_device_index of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501

        Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1).  # noqa: E501

        :return: The enable_lni_at_device_index of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501
        :rtype: int
        """
        return self._enable_lni_at_device_index

    @enable_lni_at_device_index.setter
    def enable_lni_at_device_index(self, enable_lni_at_device_index):
        """Sets the enable_lni_at_device_index of this AwsK8sServicesEc2V1alpha1SubnetStatus.

        Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1).  # noqa: E501

        :param enable_lni_at_device_index: The enable_lni_at_device_index of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501
        :type: int
        """

        self._enable_lni_at_device_index = enable_lni_at_device_index

    @property
    def ipv6_cidr_block_association_set(self):
        """Gets the ipv6_cidr_block_association_set of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501

        Information about the IPv6 CIDR blocks associated with the subnet.  # noqa: E501

        :return: The ipv6_cidr_block_association_set of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1SubnetStatusIpv6CIDRBlockAssociationSet]
        """
        return self._ipv6_cidr_block_association_set

    @ipv6_cidr_block_association_set.setter
    def ipv6_cidr_block_association_set(self, ipv6_cidr_block_association_set):
        """Sets the ipv6_cidr_block_association_set of this AwsK8sServicesEc2V1alpha1SubnetStatus.

        Information about the IPv6 CIDR blocks associated with the subnet.  # noqa: E501

        :param ipv6_cidr_block_association_set: The ipv6_cidr_block_association_set of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1SubnetStatusIpv6CIDRBlockAssociationSet]
        """

        self._ipv6_cidr_block_association_set = ipv6_cidr_block_association_set

    @property
    def map_customer_owned_ip_on_launch(self):
        """Gets the map_customer_owned_ip_on_launch of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501

        Indicates whether a network interface created in this subnet (including a network interface created by RunInstances) receives a customer-owned IPv4 address.  # noqa: E501

        :return: The map_customer_owned_ip_on_launch of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501
        :rtype: bool
        """
        return self._map_customer_owned_ip_on_launch

    @map_customer_owned_ip_on_launch.setter
    def map_customer_owned_ip_on_launch(self, map_customer_owned_ip_on_launch):
        """Sets the map_customer_owned_ip_on_launch of this AwsK8sServicesEc2V1alpha1SubnetStatus.

        Indicates whether a network interface created in this subnet (including a network interface created by RunInstances) receives a customer-owned IPv4 address.  # noqa: E501

        :param map_customer_owned_ip_on_launch: The map_customer_owned_ip_on_launch of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501
        :type: bool
        """

        self._map_customer_owned_ip_on_launch = map_customer_owned_ip_on_launch

    @property
    def owner_id(self):
        """Gets the owner_id of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501

        The ID of the Amazon Web Services account that owns the subnet.  # noqa: E501

        :return: The owner_id of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this AwsK8sServicesEc2V1alpha1SubnetStatus.

        The ID of the Amazon Web Services account that owns the subnet.  # noqa: E501

        :param owner_id: The owner_id of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    @property
    def private_dns_name_options_on_launch(self):
        """Gets the private_dns_name_options_on_launch of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501


        :return: The private_dns_name_options_on_launch of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1SubnetStatusPrivateDNSNameOptionsOnLaunch
        """
        return self._private_dns_name_options_on_launch

    @private_dns_name_options_on_launch.setter
    def private_dns_name_options_on_launch(self, private_dns_name_options_on_launch):
        """Sets the private_dns_name_options_on_launch of this AwsK8sServicesEc2V1alpha1SubnetStatus.


        :param private_dns_name_options_on_launch: The private_dns_name_options_on_launch of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1SubnetStatusPrivateDNSNameOptionsOnLaunch
        """

        self._private_dns_name_options_on_launch = private_dns_name_options_on_launch

    @property
    def state(self):
        """Gets the state of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501

        The current state of the subnet.  # noqa: E501

        :return: The state of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AwsK8sServicesEc2V1alpha1SubnetStatus.

        The current state of the subnet.  # noqa: E501

        :param state: The state of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def subnet_id(self):
        """Gets the subnet_id of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501

        The ID of the subnet.  # noqa: E501

        :return: The subnet_id of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this AwsK8sServicesEc2V1alpha1SubnetStatus.

        The ID of the subnet.  # noqa: E501

        :param subnet_id: The subnet_id of this AwsK8sServicesEc2V1alpha1SubnetStatus.  # noqa: E501
        :type: str
        """

        self._subnet_id = subnet_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1SubnetStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1SubnetStatus):
            return True

        return self.to_dict() != other.to_dict()
