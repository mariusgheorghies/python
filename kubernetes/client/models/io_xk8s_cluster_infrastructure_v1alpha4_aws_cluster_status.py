# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterInfrastructureV1alpha4AWSClusterStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bastion': 'IoXK8sClusterInfrastructureV1alpha4AWSClusterStatusBastion',
        'conditions': 'list[IoXK8sClusterAddonsV1alpha3ClusterResourceSetStatusConditions]',
        'failure_domains': 'dict(str, IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusFailureDomains)',
        'network_status': 'IoXK8sClusterInfrastructureV1alpha4AWSClusterStatusNetworkStatus',
        'ready': 'bool'
    }

    attribute_map = {
        'bastion': 'bastion',
        'conditions': 'conditions',
        'failure_domains': 'failureDomains',
        'network_status': 'networkStatus',
        'ready': 'ready'
    }

    def __init__(self, bastion=None, conditions=None, failure_domains=None, network_status=None, ready=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterInfrastructureV1alpha4AWSClusterStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bastion = None
        self._conditions = None
        self._failure_domains = None
        self._network_status = None
        self._ready = None
        self.discriminator = None

        if bastion is not None:
            self.bastion = bastion
        if conditions is not None:
            self.conditions = conditions
        if failure_domains is not None:
            self.failure_domains = failure_domains
        if network_status is not None:
            self.network_status = network_status
        self.ready = ready

    @property
    def bastion(self):
        """Gets the bastion of this IoXK8sClusterInfrastructureV1alpha4AWSClusterStatus.  # noqa: E501


        :return: The bastion of this IoXK8sClusterInfrastructureV1alpha4AWSClusterStatus.  # noqa: E501
        :rtype: IoXK8sClusterInfrastructureV1alpha4AWSClusterStatusBastion
        """
        return self._bastion

    @bastion.setter
    def bastion(self, bastion):
        """Sets the bastion of this IoXK8sClusterInfrastructureV1alpha4AWSClusterStatus.


        :param bastion: The bastion of this IoXK8sClusterInfrastructureV1alpha4AWSClusterStatus.  # noqa: E501
        :type: IoXK8sClusterInfrastructureV1alpha4AWSClusterStatusBastion
        """

        self._bastion = bastion

    @property
    def conditions(self):
        """Gets the conditions of this IoXK8sClusterInfrastructureV1alpha4AWSClusterStatus.  # noqa: E501

        Conditions provide observations of the operational state of a Cluster API resource.  # noqa: E501

        :return: The conditions of this IoXK8sClusterInfrastructureV1alpha4AWSClusterStatus.  # noqa: E501
        :rtype: list[IoXK8sClusterAddonsV1alpha3ClusterResourceSetStatusConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this IoXK8sClusterInfrastructureV1alpha4AWSClusterStatus.

        Conditions provide observations of the operational state of a Cluster API resource.  # noqa: E501

        :param conditions: The conditions of this IoXK8sClusterInfrastructureV1alpha4AWSClusterStatus.  # noqa: E501
        :type: list[IoXK8sClusterAddonsV1alpha3ClusterResourceSetStatusConditions]
        """

        self._conditions = conditions

    @property
    def failure_domains(self):
        """Gets the failure_domains of this IoXK8sClusterInfrastructureV1alpha4AWSClusterStatus.  # noqa: E501

        FailureDomains is a slice of FailureDomains.  # noqa: E501

        :return: The failure_domains of this IoXK8sClusterInfrastructureV1alpha4AWSClusterStatus.  # noqa: E501
        :rtype: dict(str, IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusFailureDomains)
        """
        return self._failure_domains

    @failure_domains.setter
    def failure_domains(self, failure_domains):
        """Sets the failure_domains of this IoXK8sClusterInfrastructureV1alpha4AWSClusterStatus.

        FailureDomains is a slice of FailureDomains.  # noqa: E501

        :param failure_domains: The failure_domains of this IoXK8sClusterInfrastructureV1alpha4AWSClusterStatus.  # noqa: E501
        :type: dict(str, IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusFailureDomains)
        """

        self._failure_domains = failure_domains

    @property
    def network_status(self):
        """Gets the network_status of this IoXK8sClusterInfrastructureV1alpha4AWSClusterStatus.  # noqa: E501


        :return: The network_status of this IoXK8sClusterInfrastructureV1alpha4AWSClusterStatus.  # noqa: E501
        :rtype: IoXK8sClusterInfrastructureV1alpha4AWSClusterStatusNetworkStatus
        """
        return self._network_status

    @network_status.setter
    def network_status(self, network_status):
        """Sets the network_status of this IoXK8sClusterInfrastructureV1alpha4AWSClusterStatus.


        :param network_status: The network_status of this IoXK8sClusterInfrastructureV1alpha4AWSClusterStatus.  # noqa: E501
        :type: IoXK8sClusterInfrastructureV1alpha4AWSClusterStatusNetworkStatus
        """

        self._network_status = network_status

    @property
    def ready(self):
        """Gets the ready of this IoXK8sClusterInfrastructureV1alpha4AWSClusterStatus.  # noqa: E501


        :return: The ready of this IoXK8sClusterInfrastructureV1alpha4AWSClusterStatus.  # noqa: E501
        :rtype: bool
        """
        return self._ready

    @ready.setter
    def ready(self, ready):
        """Sets the ready of this IoXK8sClusterInfrastructureV1alpha4AWSClusterStatus.


        :param ready: The ready of this IoXK8sClusterInfrastructureV1alpha4AWSClusterStatus.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and ready is None:  # noqa: E501
            raise ValueError("Invalid value for `ready`, must not be `None`")  # noqa: E501

        self._ready = ready

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1alpha4AWSClusterStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1alpha4AWSClusterStatus):
            return True

        return self.to_dict() != other.to_dict()
