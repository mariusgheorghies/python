# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class OrgProjectcalicoCrdV1BGPConfigurationSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'as_number': 'int',
        'communities': 'list[OrgProjectcalicoCrdV1BGPConfigurationSpecCommunities]',
        'listen_port': 'int',
        'log_severity_screen': 'str',
        'node_to_node_mesh_enabled': 'bool',
        'prefix_advertisements': 'list[OrgProjectcalicoCrdV1BGPConfigurationSpecPrefixAdvertisements]',
        'service_cluster_i_ps': 'list[OrgProjectcalicoCrdV1BGPConfigurationSpecServiceClusterIPs]',
        'service_external_i_ps': 'list[OrgProjectcalicoCrdV1BGPConfigurationSpecServiceExternalIPs]'
    }

    attribute_map = {
        'as_number': 'asNumber',
        'communities': 'communities',
        'listen_port': 'listenPort',
        'log_severity_screen': 'logSeverityScreen',
        'node_to_node_mesh_enabled': 'nodeToNodeMeshEnabled',
        'prefix_advertisements': 'prefixAdvertisements',
        'service_cluster_i_ps': 'serviceClusterIPs',
        'service_external_i_ps': 'serviceExternalIPs'
    }

    def __init__(self, as_number=None, communities=None, listen_port=None, log_severity_screen=None, node_to_node_mesh_enabled=None, prefix_advertisements=None, service_cluster_i_ps=None, service_external_i_ps=None, local_vars_configuration=None):  # noqa: E501
        """OrgProjectcalicoCrdV1BGPConfigurationSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._as_number = None
        self._communities = None
        self._listen_port = None
        self._log_severity_screen = None
        self._node_to_node_mesh_enabled = None
        self._prefix_advertisements = None
        self._service_cluster_i_ps = None
        self._service_external_i_ps = None
        self.discriminator = None

        if as_number is not None:
            self.as_number = as_number
        if communities is not None:
            self.communities = communities
        if listen_port is not None:
            self.listen_port = listen_port
        if log_severity_screen is not None:
            self.log_severity_screen = log_severity_screen
        if node_to_node_mesh_enabled is not None:
            self.node_to_node_mesh_enabled = node_to_node_mesh_enabled
        if prefix_advertisements is not None:
            self.prefix_advertisements = prefix_advertisements
        if service_cluster_i_ps is not None:
            self.service_cluster_i_ps = service_cluster_i_ps
        if service_external_i_ps is not None:
            self.service_external_i_ps = service_external_i_ps

    @property
    def as_number(self):
        """Gets the as_number of this OrgProjectcalicoCrdV1BGPConfigurationSpec.  # noqa: E501

        ASNumber is the default AS number used by a node. [Default: 64512]  # noqa: E501

        :return: The as_number of this OrgProjectcalicoCrdV1BGPConfigurationSpec.  # noqa: E501
        :rtype: int
        """
        return self._as_number

    @as_number.setter
    def as_number(self, as_number):
        """Sets the as_number of this OrgProjectcalicoCrdV1BGPConfigurationSpec.

        ASNumber is the default AS number used by a node. [Default: 64512]  # noqa: E501

        :param as_number: The as_number of this OrgProjectcalicoCrdV1BGPConfigurationSpec.  # noqa: E501
        :type: int
        """

        self._as_number = as_number

    @property
    def communities(self):
        """Gets the communities of this OrgProjectcalicoCrdV1BGPConfigurationSpec.  # noqa: E501

        Communities is a list of BGP community values and their arbitrary names for tagging routes.  # noqa: E501

        :return: The communities of this OrgProjectcalicoCrdV1BGPConfigurationSpec.  # noqa: E501
        :rtype: list[OrgProjectcalicoCrdV1BGPConfigurationSpecCommunities]
        """
        return self._communities

    @communities.setter
    def communities(self, communities):
        """Sets the communities of this OrgProjectcalicoCrdV1BGPConfigurationSpec.

        Communities is a list of BGP community values and their arbitrary names for tagging routes.  # noqa: E501

        :param communities: The communities of this OrgProjectcalicoCrdV1BGPConfigurationSpec.  # noqa: E501
        :type: list[OrgProjectcalicoCrdV1BGPConfigurationSpecCommunities]
        """

        self._communities = communities

    @property
    def listen_port(self):
        """Gets the listen_port of this OrgProjectcalicoCrdV1BGPConfigurationSpec.  # noqa: E501

        ListenPort is the port where BGP protocol should listen. Defaults to 179  # noqa: E501

        :return: The listen_port of this OrgProjectcalicoCrdV1BGPConfigurationSpec.  # noqa: E501
        :rtype: int
        """
        return self._listen_port

    @listen_port.setter
    def listen_port(self, listen_port):
        """Sets the listen_port of this OrgProjectcalicoCrdV1BGPConfigurationSpec.

        ListenPort is the port where BGP protocol should listen. Defaults to 179  # noqa: E501

        :param listen_port: The listen_port of this OrgProjectcalicoCrdV1BGPConfigurationSpec.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                listen_port is not None and listen_port > 65535):  # noqa: E501
            raise ValueError("Invalid value for `listen_port`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                listen_port is not None and listen_port < 1):  # noqa: E501
            raise ValueError("Invalid value for `listen_port`, must be a value greater than or equal to `1`")  # noqa: E501

        self._listen_port = listen_port

    @property
    def log_severity_screen(self):
        """Gets the log_severity_screen of this OrgProjectcalicoCrdV1BGPConfigurationSpec.  # noqa: E501

        LogSeverityScreen is the log severity above which logs are sent to the stdout. [Default: INFO]  # noqa: E501

        :return: The log_severity_screen of this OrgProjectcalicoCrdV1BGPConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._log_severity_screen

    @log_severity_screen.setter
    def log_severity_screen(self, log_severity_screen):
        """Sets the log_severity_screen of this OrgProjectcalicoCrdV1BGPConfigurationSpec.

        LogSeverityScreen is the log severity above which logs are sent to the stdout. [Default: INFO]  # noqa: E501

        :param log_severity_screen: The log_severity_screen of this OrgProjectcalicoCrdV1BGPConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._log_severity_screen = log_severity_screen

    @property
    def node_to_node_mesh_enabled(self):
        """Gets the node_to_node_mesh_enabled of this OrgProjectcalicoCrdV1BGPConfigurationSpec.  # noqa: E501

        NodeToNodeMeshEnabled sets whether full node to node BGP mesh is enabled. [Default: true]  # noqa: E501

        :return: The node_to_node_mesh_enabled of this OrgProjectcalicoCrdV1BGPConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._node_to_node_mesh_enabled

    @node_to_node_mesh_enabled.setter
    def node_to_node_mesh_enabled(self, node_to_node_mesh_enabled):
        """Sets the node_to_node_mesh_enabled of this OrgProjectcalicoCrdV1BGPConfigurationSpec.

        NodeToNodeMeshEnabled sets whether full node to node BGP mesh is enabled. [Default: true]  # noqa: E501

        :param node_to_node_mesh_enabled: The node_to_node_mesh_enabled of this OrgProjectcalicoCrdV1BGPConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._node_to_node_mesh_enabled = node_to_node_mesh_enabled

    @property
    def prefix_advertisements(self):
        """Gets the prefix_advertisements of this OrgProjectcalicoCrdV1BGPConfigurationSpec.  # noqa: E501

        PrefixAdvertisements contains per-prefix advertisement configuration.  # noqa: E501

        :return: The prefix_advertisements of this OrgProjectcalicoCrdV1BGPConfigurationSpec.  # noqa: E501
        :rtype: list[OrgProjectcalicoCrdV1BGPConfigurationSpecPrefixAdvertisements]
        """
        return self._prefix_advertisements

    @prefix_advertisements.setter
    def prefix_advertisements(self, prefix_advertisements):
        """Sets the prefix_advertisements of this OrgProjectcalicoCrdV1BGPConfigurationSpec.

        PrefixAdvertisements contains per-prefix advertisement configuration.  # noqa: E501

        :param prefix_advertisements: The prefix_advertisements of this OrgProjectcalicoCrdV1BGPConfigurationSpec.  # noqa: E501
        :type: list[OrgProjectcalicoCrdV1BGPConfigurationSpecPrefixAdvertisements]
        """

        self._prefix_advertisements = prefix_advertisements

    @property
    def service_cluster_i_ps(self):
        """Gets the service_cluster_i_ps of this OrgProjectcalicoCrdV1BGPConfigurationSpec.  # noqa: E501

        ServiceClusterIPs are the CIDR blocks from which service cluster IPs are allocated. If specified, Calico will advertise these blocks, as well as any cluster IPs within them.  # noqa: E501

        :return: The service_cluster_i_ps of this OrgProjectcalicoCrdV1BGPConfigurationSpec.  # noqa: E501
        :rtype: list[OrgProjectcalicoCrdV1BGPConfigurationSpecServiceClusterIPs]
        """
        return self._service_cluster_i_ps

    @service_cluster_i_ps.setter
    def service_cluster_i_ps(self, service_cluster_i_ps):
        """Sets the service_cluster_i_ps of this OrgProjectcalicoCrdV1BGPConfigurationSpec.

        ServiceClusterIPs are the CIDR blocks from which service cluster IPs are allocated. If specified, Calico will advertise these blocks, as well as any cluster IPs within them.  # noqa: E501

        :param service_cluster_i_ps: The service_cluster_i_ps of this OrgProjectcalicoCrdV1BGPConfigurationSpec.  # noqa: E501
        :type: list[OrgProjectcalicoCrdV1BGPConfigurationSpecServiceClusterIPs]
        """

        self._service_cluster_i_ps = service_cluster_i_ps

    @property
    def service_external_i_ps(self):
        """Gets the service_external_i_ps of this OrgProjectcalicoCrdV1BGPConfigurationSpec.  # noqa: E501

        ServiceExternalIPs are the CIDR blocks for Kubernetes Service External IPs. Kubernetes Service ExternalIPs will only be advertised if they are within one of these blocks.  # noqa: E501

        :return: The service_external_i_ps of this OrgProjectcalicoCrdV1BGPConfigurationSpec.  # noqa: E501
        :rtype: list[OrgProjectcalicoCrdV1BGPConfigurationSpecServiceExternalIPs]
        """
        return self._service_external_i_ps

    @service_external_i_ps.setter
    def service_external_i_ps(self, service_external_i_ps):
        """Sets the service_external_i_ps of this OrgProjectcalicoCrdV1BGPConfigurationSpec.

        ServiceExternalIPs are the CIDR blocks for Kubernetes Service External IPs. Kubernetes Service ExternalIPs will only be advertised if they are within one of these blocks.  # noqa: E501

        :param service_external_i_ps: The service_external_i_ps of this OrgProjectcalicoCrdV1BGPConfigurationSpec.  # noqa: E501
        :type: list[OrgProjectcalicoCrdV1BGPConfigurationSpecServiceExternalIPs]
        """

        self._service_external_i_ps = service_external_i_ps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgProjectcalicoCrdV1BGPConfigurationSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrgProjectcalicoCrdV1BGPConfigurationSpec):
            return True

        return self.to_dict() != other.to_dict()
