# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cri': 'object',
        'docker': 'object',
        'drop': 'ComGrafanaMonitoringV1alpha1PodLogsSpecDrop',
        'json': 'ComGrafanaMonitoringV1alpha1PodLogsSpecJson',
        'label_allow': 'list[str]',
        'label_drop': 'list[str]',
        'labels': 'dict(str, str)',
        'limit': 'ComGrafanaMonitoringV1alpha1PodLogsSpecLimit',
        'match': 'ComGrafanaMonitoringV1alpha1PodLogsSpecMatch',
        'metrics': 'dict(str, ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics)',
        'multiline': 'ComGrafanaMonitoringV1alpha1PodLogsSpecMultiline',
        'output': 'ComGrafanaMonitoringV1alpha1PodLogsSpecOutput',
        'pack': 'ComGrafanaMonitoringV1alpha1PodLogsSpecPack',
        'regex': 'ComGrafanaMonitoringV1alpha1PodLogsSpecRegex',
        'replace': 'ComGrafanaMonitoringV1alpha1PodLogsSpecReplace',
        'template': 'ComGrafanaMonitoringV1alpha1PodLogsSpecTemplate',
        'tenant': 'ComGrafanaMonitoringV1alpha1PodLogsSpecTenant',
        'timestamp': 'ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp'
    }

    attribute_map = {
        'cri': 'cri',
        'docker': 'docker',
        'drop': 'drop',
        'json': 'json',
        'label_allow': 'labelAllow',
        'label_drop': 'labelDrop',
        'labels': 'labels',
        'limit': 'limit',
        'match': 'match',
        'metrics': 'metrics',
        'multiline': 'multiline',
        'output': 'output',
        'pack': 'pack',
        'regex': 'regex',
        'replace': 'replace',
        'template': 'template',
        'tenant': 'tenant',
        'timestamp': 'timestamp'
    }

    def __init__(self, cri=None, docker=None, drop=None, json=None, label_allow=None, label_drop=None, labels=None, limit=None, match=None, metrics=None, multiline=None, output=None, pack=None, regex=None, replace=None, template=None, tenant=None, timestamp=None, local_vars_configuration=None):  # noqa: E501
        """ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cri = None
        self._docker = None
        self._drop = None
        self._json = None
        self._label_allow = None
        self._label_drop = None
        self._labels = None
        self._limit = None
        self._match = None
        self._metrics = None
        self._multiline = None
        self._output = None
        self._pack = None
        self._regex = None
        self._replace = None
        self._template = None
        self._tenant = None
        self._timestamp = None
        self.discriminator = None

        if cri is not None:
            self.cri = cri
        if docker is not None:
            self.docker = docker
        if drop is not None:
            self.drop = drop
        if json is not None:
            self.json = json
        if label_allow is not None:
            self.label_allow = label_allow
        if label_drop is not None:
            self.label_drop = label_drop
        if labels is not None:
            self.labels = labels
        if limit is not None:
            self.limit = limit
        if match is not None:
            self.match = match
        if metrics is not None:
            self.metrics = metrics
        if multiline is not None:
            self.multiline = multiline
        if output is not None:
            self.output = output
        if pack is not None:
            self.pack = pack
        if regex is not None:
            self.regex = regex
        if replace is not None:
            self.replace = replace
        if template is not None:
            self.template = template
        if tenant is not None:
            self.tenant = tenant
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def cri(self):
        """Gets the cri of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501

        CRI is a parsing stage that reads log lines using the standard CRI logging format. Supply cri: {} to enable.  # noqa: E501

        :return: The cri of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :rtype: object
        """
        return self._cri

    @cri.setter
    def cri(self, cri):
        """Sets the cri of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.

        CRI is a parsing stage that reads log lines using the standard CRI logging format. Supply cri: {} to enable.  # noqa: E501

        :param cri: The cri of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :type: object
        """

        self._cri = cri

    @property
    def docker(self):
        """Gets the docker of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501

        Docker is a parsing stage that reads log lines using the standard Docker logging format. Supply docker: {} to enable.  # noqa: E501

        :return: The docker of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :rtype: object
        """
        return self._docker

    @docker.setter
    def docker(self, docker):
        """Sets the docker of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.

        Docker is a parsing stage that reads log lines using the standard Docker logging format. Supply docker: {} to enable.  # noqa: E501

        :param docker: The docker of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :type: object
        """

        self._docker = docker

    @property
    def drop(self):
        """Gets the drop of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501


        :return: The drop of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1PodLogsSpecDrop
        """
        return self._drop

    @drop.setter
    def drop(self, drop):
        """Sets the drop of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.


        :param drop: The drop of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1PodLogsSpecDrop
        """

        self._drop = drop

    @property
    def json(self):
        """Gets the json of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501


        :return: The json of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1PodLogsSpecJson
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.


        :param json: The json of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1PodLogsSpecJson
        """

        self._json = json

    @property
    def label_allow(self):
        """Gets the label_allow of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501

        LabelAllow is an action stage that only allows the provided labels to be included in the label set that is sent to Loki with the log entry.  # noqa: E501

        :return: The label_allow of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :rtype: list[str]
        """
        return self._label_allow

    @label_allow.setter
    def label_allow(self, label_allow):
        """Sets the label_allow of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.

        LabelAllow is an action stage that only allows the provided labels to be included in the label set that is sent to Loki with the log entry.  # noqa: E501

        :param label_allow: The label_allow of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :type: list[str]
        """

        self._label_allow = label_allow

    @property
    def label_drop(self):
        """Gets the label_drop of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501

        LabelDrop is an action stage that drops labels from the label set that is sent to Loki with the log entry.  # noqa: E501

        :return: The label_drop of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :rtype: list[str]
        """
        return self._label_drop

    @label_drop.setter
    def label_drop(self, label_drop):
        """Sets the label_drop of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.

        LabelDrop is an action stage that drops labels from the label set that is sent to Loki with the log entry.  # noqa: E501

        :param label_drop: The label_drop of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :type: list[str]
        """

        self._label_drop = label_drop

    @property
    def labels(self):
        """Gets the labels of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501

        Labels is an action stage that takes data from the extracted map and modifies the label set that is sent to Loki with the log entry.   The key is REQUIRED and represents the name for the label that will be created. Value is optional and will be the name from extracted data to use for the value of the label. If the value is not provided, it defaults to match the key.  # noqa: E501

        :return: The labels of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.

        Labels is an action stage that takes data from the extracted map and modifies the label set that is sent to Loki with the log entry.   The key is REQUIRED and represents the name for the label that will be created. Value is optional and will be the name from extracted data to use for the value of the label. If the value is not provided, it defaults to match the key.  # noqa: E501

        :param labels: The labels of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def limit(self):
        """Gets the limit of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501


        :return: The limit of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1PodLogsSpecLimit
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.


        :param limit: The limit of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1PodLogsSpecLimit
        """

        self._limit = limit

    @property
    def match(self):
        """Gets the match of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501


        :return: The match of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1PodLogsSpecMatch
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.


        :param match: The match of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1PodLogsSpecMatch
        """

        self._match = match

    @property
    def metrics(self):
        """Gets the metrics of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501

        Metrics is an action stage that supports defining and updating metrics based on data from the extracted map. Created metrics are not pushed to Loki or Prometheus and are instead exposed via the /metrics endpoint of the Grafana Agent pod. The Grafana Agent Operator should be configured with a MetricsInstance that discovers the logging DaemonSet to collect metrics created by this stage.  # noqa: E501

        :return: The metrics of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :rtype: dict(str, ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics)
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.

        Metrics is an action stage that supports defining and updating metrics based on data from the extracted map. Created metrics are not pushed to Loki or Prometheus and are instead exposed via the /metrics endpoint of the Grafana Agent pod. The Grafana Agent Operator should be configured with a MetricsInstance that discovers the logging DaemonSet to collect metrics created by this stage.  # noqa: E501

        :param metrics: The metrics of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :type: dict(str, ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics)
        """

        self._metrics = metrics

    @property
    def multiline(self):
        """Gets the multiline of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501


        :return: The multiline of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1PodLogsSpecMultiline
        """
        return self._multiline

    @multiline.setter
    def multiline(self, multiline):
        """Sets the multiline of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.


        :param multiline: The multiline of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1PodLogsSpecMultiline
        """

        self._multiline = multiline

    @property
    def output(self):
        """Gets the output of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501


        :return: The output of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1PodLogsSpecOutput
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.


        :param output: The output of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1PodLogsSpecOutput
        """

        self._output = output

    @property
    def pack(self):
        """Gets the pack of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501


        :return: The pack of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1PodLogsSpecPack
        """
        return self._pack

    @pack.setter
    def pack(self, pack):
        """Sets the pack of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.


        :param pack: The pack of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1PodLogsSpecPack
        """

        self._pack = pack

    @property
    def regex(self):
        """Gets the regex of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501


        :return: The regex of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1PodLogsSpecRegex
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.


        :param regex: The regex of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1PodLogsSpecRegex
        """

        self._regex = regex

    @property
    def replace(self):
        """Gets the replace of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501


        :return: The replace of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1PodLogsSpecReplace
        """
        return self._replace

    @replace.setter
    def replace(self, replace):
        """Sets the replace of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.


        :param replace: The replace of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1PodLogsSpecReplace
        """

        self._replace = replace

    @property
    def template(self):
        """Gets the template of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501


        :return: The template of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1PodLogsSpecTemplate
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.


        :param template: The template of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1PodLogsSpecTemplate
        """

        self._template = template

    @property
    def tenant(self):
        """Gets the tenant of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501


        :return: The tenant of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1PodLogsSpecTenant
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.


        :param tenant: The tenant of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1PodLogsSpecTenant
        """

        self._tenant = tenant

    @property
    def timestamp(self):
        """Gets the timestamp of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501


        :return: The timestamp of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.


        :param timestamp: The timestamp of this ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages):
            return True

        return self.to_dict() != other.to_dict()
