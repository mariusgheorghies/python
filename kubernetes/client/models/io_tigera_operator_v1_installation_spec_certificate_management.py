# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoTigeraOperatorV1InstallationSpecCertificateManagement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ca_cert': 'str',
        'key_algorithm': 'str',
        'signature_algorithm': 'str',
        'signer_name': 'str'
    }

    attribute_map = {
        'ca_cert': 'caCert',
        'key_algorithm': 'keyAlgorithm',
        'signature_algorithm': 'signatureAlgorithm',
        'signer_name': 'signerName'
    }

    def __init__(self, ca_cert=None, key_algorithm=None, signature_algorithm=None, signer_name=None, local_vars_configuration=None):  # noqa: E501
        """IoTigeraOperatorV1InstallationSpecCertificateManagement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ca_cert = None
        self._key_algorithm = None
        self._signature_algorithm = None
        self._signer_name = None
        self.discriminator = None

        self.ca_cert = ca_cert
        if key_algorithm is not None:
            self.key_algorithm = key_algorithm
        if signature_algorithm is not None:
            self.signature_algorithm = signature_algorithm
        self.signer_name = signer_name

    @property
    def ca_cert(self):
        """Gets the ca_cert of this IoTigeraOperatorV1InstallationSpecCertificateManagement.  # noqa: E501

        Certificate of the authority that signs the CertificateSigningRequests in PEM format.  # noqa: E501

        :return: The ca_cert of this IoTigeraOperatorV1InstallationSpecCertificateManagement.  # noqa: E501
        :rtype: str
        """
        return self._ca_cert

    @ca_cert.setter
    def ca_cert(self, ca_cert):
        """Sets the ca_cert of this IoTigeraOperatorV1InstallationSpecCertificateManagement.

        Certificate of the authority that signs the CertificateSigningRequests in PEM format.  # noqa: E501

        :param ca_cert: The ca_cert of this IoTigeraOperatorV1InstallationSpecCertificateManagement.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and ca_cert is None:  # noqa: E501
            raise ValueError("Invalid value for `ca_cert`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                ca_cert is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', ca_cert)):  # noqa: E501
            raise ValueError(r"Invalid value for `ca_cert`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._ca_cert = ca_cert

    @property
    def key_algorithm(self):
        """Gets the key_algorithm of this IoTigeraOperatorV1InstallationSpecCertificateManagement.  # noqa: E501

        Specify the algorithm used by pods to generate a key pair that is associated with the X.509 certificate request. Default: RSAWithSize2048  # noqa: E501

        :return: The key_algorithm of this IoTigeraOperatorV1InstallationSpecCertificateManagement.  # noqa: E501
        :rtype: str
        """
        return self._key_algorithm

    @key_algorithm.setter
    def key_algorithm(self, key_algorithm):
        """Sets the key_algorithm of this IoTigeraOperatorV1InstallationSpecCertificateManagement.

        Specify the algorithm used by pods to generate a key pair that is associated with the X.509 certificate request. Default: RSAWithSize2048  # noqa: E501

        :param key_algorithm: The key_algorithm of this IoTigeraOperatorV1InstallationSpecCertificateManagement.  # noqa: E501
        :type: str
        """
        allowed_values = ["", "RSAWithSize2048", "RSAWithSize4096", "RSAWithSize8192", "ECDSAWithCurve256", "ECDSAWithCurve384", "ECDSAWithCurve521"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and key_algorithm not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `key_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(key_algorithm, allowed_values)
            )

        self._key_algorithm = key_algorithm

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this IoTigeraOperatorV1InstallationSpecCertificateManagement.  # noqa: E501

        Specify the algorithm used for the signature of the X.509 certificate request. Default: SHA256WithRSA  # noqa: E501

        :return: The signature_algorithm of this IoTigeraOperatorV1InstallationSpecCertificateManagement.  # noqa: E501
        :rtype: str
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this IoTigeraOperatorV1InstallationSpecCertificateManagement.

        Specify the algorithm used for the signature of the X.509 certificate request. Default: SHA256WithRSA  # noqa: E501

        :param signature_algorithm: The signature_algorithm of this IoTigeraOperatorV1InstallationSpecCertificateManagement.  # noqa: E501
        :type: str
        """
        allowed_values = ["", "SHA256WithRSA", "SHA384WithRSA", "SHA512WithRSA", "ECDSAWithSHA256", "ECDSAWithSHA384", "ECDSAWithSHA512"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and signature_algorithm not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `signature_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(signature_algorithm, allowed_values)
            )

        self._signature_algorithm = signature_algorithm

    @property
    def signer_name(self):
        """Gets the signer_name of this IoTigeraOperatorV1InstallationSpecCertificateManagement.  # noqa: E501

        When a CSR is issued to the certificates.k8s.io API, the signerName is added to the request in order to accommodate for clusters with multiple signers. Must be formatted as: `<my-domain>/<my-signername>`.  # noqa: E501

        :return: The signer_name of this IoTigeraOperatorV1InstallationSpecCertificateManagement.  # noqa: E501
        :rtype: str
        """
        return self._signer_name

    @signer_name.setter
    def signer_name(self, signer_name):
        """Sets the signer_name of this IoTigeraOperatorV1InstallationSpecCertificateManagement.

        When a CSR is issued to the certificates.k8s.io API, the signerName is added to the request in order to accommodate for clusters with multiple signers. Must be formatted as: `<my-domain>/<my-signername>`.  # noqa: E501

        :param signer_name: The signer_name of this IoTigeraOperatorV1InstallationSpecCertificateManagement.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and signer_name is None:  # noqa: E501
            raise ValueError("Invalid value for `signer_name`, must not be `None`")  # noqa: E501

        self._signer_name = signer_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoTigeraOperatorV1InstallationSpecCertificateManagement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoTigeraOperatorV1InstallationSpecCertificateManagement):
            return True

        return self.to_dict() != other.to_dict()
