# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class AwsK8sServicesEc2V1alpha1NATGatewayStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ack_resource_metadata': 'AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata',
        'conditions': 'list[AwsK8sServicesEc2V1alpha1DHCPOptionsStatusConditions]',
        'create_time': 'datetime',
        'delete_time': 'datetime',
        'failure_code': 'str',
        'failure_message': 'str',
        'nat_gateway_addresses': 'list[AwsK8sServicesEc2V1alpha1NATGatewayStatusNatGatewayAddresses]',
        'nat_gateway_id': 'str',
        'provisioned_bandwidth': 'AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth',
        'state': 'str',
        'vpc_id': 'str'
    }

    attribute_map = {
        'ack_resource_metadata': 'ackResourceMetadata',
        'conditions': 'conditions',
        'create_time': 'createTime',
        'delete_time': 'deleteTime',
        'failure_code': 'failureCode',
        'failure_message': 'failureMessage',
        'nat_gateway_addresses': 'natGatewayAddresses',
        'nat_gateway_id': 'natGatewayID',
        'provisioned_bandwidth': 'provisionedBandwidth',
        'state': 'state',
        'vpc_id': 'vpcID'
    }

    def __init__(self, ack_resource_metadata=None, conditions=None, create_time=None, delete_time=None, failure_code=None, failure_message=None, nat_gateway_addresses=None, nat_gateway_id=None, provisioned_bandwidth=None, state=None, vpc_id=None, local_vars_configuration=None):  # noqa: E501
        """AwsK8sServicesEc2V1alpha1NATGatewayStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ack_resource_metadata = None
        self._conditions = None
        self._create_time = None
        self._delete_time = None
        self._failure_code = None
        self._failure_message = None
        self._nat_gateway_addresses = None
        self._nat_gateway_id = None
        self._provisioned_bandwidth = None
        self._state = None
        self._vpc_id = None
        self.discriminator = None

        if ack_resource_metadata is not None:
            self.ack_resource_metadata = ack_resource_metadata
        if conditions is not None:
            self.conditions = conditions
        if create_time is not None:
            self.create_time = create_time
        if delete_time is not None:
            self.delete_time = delete_time
        if failure_code is not None:
            self.failure_code = failure_code
        if failure_message is not None:
            self.failure_message = failure_message
        if nat_gateway_addresses is not None:
            self.nat_gateway_addresses = nat_gateway_addresses
        if nat_gateway_id is not None:
            self.nat_gateway_id = nat_gateway_id
        if provisioned_bandwidth is not None:
            self.provisioned_bandwidth = provisioned_bandwidth
        if state is not None:
            self.state = state
        if vpc_id is not None:
            self.vpc_id = vpc_id

    @property
    def ack_resource_metadata(self):
        """Gets the ack_resource_metadata of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501


        :return: The ack_resource_metadata of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata
        """
        return self._ack_resource_metadata

    @ack_resource_metadata.setter
    def ack_resource_metadata(self, ack_resource_metadata):
        """Sets the ack_resource_metadata of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.


        :param ack_resource_metadata: The ack_resource_metadata of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata
        """

        self._ack_resource_metadata = ack_resource_metadata

    @property
    def conditions(self):
        """Gets the conditions of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501

        All CRS managed by ACK have a common `Status.Conditions` member that contains a collection of `ackv1alpha1.Condition` objects that describe the various terminal states of the CR and its backend AWS service API resource  # noqa: E501

        :return: The conditions of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1DHCPOptionsStatusConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.

        All CRS managed by ACK have a common `Status.Conditions` member that contains a collection of `ackv1alpha1.Condition` objects that describe the various terminal states of the CR and its backend AWS service API resource  # noqa: E501

        :param conditions: The conditions of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1DHCPOptionsStatusConditions]
        """

        self._conditions = conditions

    @property
    def create_time(self):
        """Gets the create_time of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501

        The date and time the NAT gateway was created.  # noqa: E501

        :return: The create_time of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.

        The date and time the NAT gateway was created.  # noqa: E501

        :param create_time: The create_time of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def delete_time(self):
        """Gets the delete_time of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501

        The date and time the NAT gateway was deleted, if applicable.  # noqa: E501

        :return: The delete_time of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.

        The date and time the NAT gateway was deleted, if applicable.  # noqa: E501

        :param delete_time: The delete_time of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501
        :type: datetime
        """

        self._delete_time = delete_time

    @property
    def failure_code(self):
        """Gets the failure_code of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501

        If the NAT gateway could not be created, specifies the error code for the failure. (InsufficientFreeAddressesInSubnet | Gateway.NotAttached | InvalidAllocationID.NotFound | Resource.AlreadyAssociated | InternalError | InvalidSubnetID.NotFound)  # noqa: E501

        :return: The failure_code of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501
        :rtype: str
        """
        return self._failure_code

    @failure_code.setter
    def failure_code(self, failure_code):
        """Sets the failure_code of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.

        If the NAT gateway could not be created, specifies the error code for the failure. (InsufficientFreeAddressesInSubnet | Gateway.NotAttached | InvalidAllocationID.NotFound | Resource.AlreadyAssociated | InternalError | InvalidSubnetID.NotFound)  # noqa: E501

        :param failure_code: The failure_code of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501
        :type: str
        """

        self._failure_code = failure_code

    @property
    def failure_message(self):
        """Gets the failure_message of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501

        If the NAT gateway could not be created, specifies the error message for the failure, that corresponds to the error code.   * For InsufficientFreeAddressesInSubnet: \"Subnet has insufficient free addresses to create this NAT gateway\"   * For Gateway.NotAttached: \"Network vpc-xxxxxxxx has no Internet gateway attached\"   * For InvalidAllocationID.NotFound: \"Elastic IP address eipalloc-xxxxxxxx could not be associated with this NAT gateway\"   * For Resource.AlreadyAssociated: \"Elastic IP address eipalloc-xxxxxxxx is already associated\"   * For InternalError: \"Network interface eni-xxxxxxxx, created and used internally by this NAT gateway is in an invalid state. Please try again.\"   * For InvalidSubnetID.NotFound: \"The specified subnet subnet-xxxxxxxx does not exist or could not be found.\"  # noqa: E501

        :return: The failure_message of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501
        :rtype: str
        """
        return self._failure_message

    @failure_message.setter
    def failure_message(self, failure_message):
        """Sets the failure_message of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.

        If the NAT gateway could not be created, specifies the error message for the failure, that corresponds to the error code.   * For InsufficientFreeAddressesInSubnet: \"Subnet has insufficient free addresses to create this NAT gateway\"   * For Gateway.NotAttached: \"Network vpc-xxxxxxxx has no Internet gateway attached\"   * For InvalidAllocationID.NotFound: \"Elastic IP address eipalloc-xxxxxxxx could not be associated with this NAT gateway\"   * For Resource.AlreadyAssociated: \"Elastic IP address eipalloc-xxxxxxxx is already associated\"   * For InternalError: \"Network interface eni-xxxxxxxx, created and used internally by this NAT gateway is in an invalid state. Please try again.\"   * For InvalidSubnetID.NotFound: \"The specified subnet subnet-xxxxxxxx does not exist or could not be found.\"  # noqa: E501

        :param failure_message: The failure_message of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501
        :type: str
        """

        self._failure_message = failure_message

    @property
    def nat_gateway_addresses(self):
        """Gets the nat_gateway_addresses of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501

        Information about the IP addresses and network interface associated with the NAT gateway.  # noqa: E501

        :return: The nat_gateway_addresses of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1NATGatewayStatusNatGatewayAddresses]
        """
        return self._nat_gateway_addresses

    @nat_gateway_addresses.setter
    def nat_gateway_addresses(self, nat_gateway_addresses):
        """Sets the nat_gateway_addresses of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.

        Information about the IP addresses and network interface associated with the NAT gateway.  # noqa: E501

        :param nat_gateway_addresses: The nat_gateway_addresses of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1NATGatewayStatusNatGatewayAddresses]
        """

        self._nat_gateway_addresses = nat_gateway_addresses

    @property
    def nat_gateway_id(self):
        """Gets the nat_gateway_id of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501

        The ID of the NAT gateway.  # noqa: E501

        :return: The nat_gateway_id of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501
        :rtype: str
        """
        return self._nat_gateway_id

    @nat_gateway_id.setter
    def nat_gateway_id(self, nat_gateway_id):
        """Sets the nat_gateway_id of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.

        The ID of the NAT gateway.  # noqa: E501

        :param nat_gateway_id: The nat_gateway_id of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501
        :type: str
        """

        self._nat_gateway_id = nat_gateway_id

    @property
    def provisioned_bandwidth(self):
        """Gets the provisioned_bandwidth of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501


        :return: The provisioned_bandwidth of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth
        """
        return self._provisioned_bandwidth

    @provisioned_bandwidth.setter
    def provisioned_bandwidth(self, provisioned_bandwidth):
        """Sets the provisioned_bandwidth of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.


        :param provisioned_bandwidth: The provisioned_bandwidth of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth
        """

        self._provisioned_bandwidth = provisioned_bandwidth

    @property
    def state(self):
        """Gets the state of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501

        The state of the NAT gateway.   * pending: The NAT gateway is being created and is not ready to process traffic.   * failed: The NAT gateway could not be created. Check the failureCode and failureMessage fields for the reason.   * available: The NAT gateway is able to process traffic. This status remains until you delete the NAT gateway, and does not indicate the health of the NAT gateway.   * deleting: The NAT gateway is in the process of being terminated and may still be processing traffic.   * deleted: The NAT gateway has been terminated and is no longer processing traffic.  # noqa: E501

        :return: The state of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.

        The state of the NAT gateway.   * pending: The NAT gateway is being created and is not ready to process traffic.   * failed: The NAT gateway could not be created. Check the failureCode and failureMessage fields for the reason.   * available: The NAT gateway is able to process traffic. This status remains until you delete the NAT gateway, and does not indicate the health of the NAT gateway.   * deleting: The NAT gateway is in the process of being terminated and may still be processing traffic.   * deleted: The NAT gateway has been terminated and is no longer processing traffic.  # noqa: E501

        :param state: The state of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def vpc_id(self):
        """Gets the vpc_id of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501

        The ID of the VPC in which the NAT gateway is located.  # noqa: E501

        :return: The vpc_id of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501
        :rtype: str
        """
        return self._vpc_id

    @vpc_id.setter
    def vpc_id(self, vpc_id):
        """Sets the vpc_id of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.

        The ID of the VPC in which the NAT gateway is located.  # noqa: E501

        :param vpc_id: The vpc_id of this AwsK8sServicesEc2V1alpha1NATGatewayStatus.  # noqa: E501
        :type: str
        """

        self._vpc_id = vpc_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1NATGatewayStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1NATGatewayStatus):
            return True

        return self.to_dict() != other.to_dict()
