# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComGrafanaMonitoringV1alpha1MetricsInstanceSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'additional_scrape_configs': 'ComGrafanaMonitoringV1alpha1MetricsInstanceSpecAdditionalScrapeConfigs',
        'max_wal_time': 'str',
        'min_wal_time': 'str',
        'pod_monitor_namespace_selector': 'ComGrafanaMonitoringV1alpha1MetricsInstanceSpecPodMonitorNamespaceSelector',
        'pod_monitor_selector': 'ComGrafanaMonitoringV1alpha1MetricsInstanceSpecPodMonitorSelector',
        'probe_namespace_selector': 'ComGrafanaMonitoringV1alpha1MetricsInstanceSpecProbeNamespaceSelector',
        'probe_selector': 'ComGrafanaMonitoringV1alpha1MetricsInstanceSpecProbeSelector',
        'remote_flush_deadline': 'str',
        'remote_write': 'list[ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetricsRemoteWrite]',
        'service_monitor_namespace_selector': 'ComGrafanaMonitoringV1alpha1MetricsInstanceSpecServiceMonitorNamespaceSelector',
        'service_monitor_selector': 'ComGrafanaMonitoringV1alpha1MetricsInstanceSpecServiceMonitorSelector',
        'wal_truncate_frequency': 'str',
        'write_stale_on_shutdown': 'bool'
    }

    attribute_map = {
        'additional_scrape_configs': 'additionalScrapeConfigs',
        'max_wal_time': 'maxWALTime',
        'min_wal_time': 'minWALTime',
        'pod_monitor_namespace_selector': 'podMonitorNamespaceSelector',
        'pod_monitor_selector': 'podMonitorSelector',
        'probe_namespace_selector': 'probeNamespaceSelector',
        'probe_selector': 'probeSelector',
        'remote_flush_deadline': 'remoteFlushDeadline',
        'remote_write': 'remoteWrite',
        'service_monitor_namespace_selector': 'serviceMonitorNamespaceSelector',
        'service_monitor_selector': 'serviceMonitorSelector',
        'wal_truncate_frequency': 'walTruncateFrequency',
        'write_stale_on_shutdown': 'writeStaleOnShutdown'
    }

    def __init__(self, additional_scrape_configs=None, max_wal_time=None, min_wal_time=None, pod_monitor_namespace_selector=None, pod_monitor_selector=None, probe_namespace_selector=None, probe_selector=None, remote_flush_deadline=None, remote_write=None, service_monitor_namespace_selector=None, service_monitor_selector=None, wal_truncate_frequency=None, write_stale_on_shutdown=None, local_vars_configuration=None):  # noqa: E501
        """ComGrafanaMonitoringV1alpha1MetricsInstanceSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._additional_scrape_configs = None
        self._max_wal_time = None
        self._min_wal_time = None
        self._pod_monitor_namespace_selector = None
        self._pod_monitor_selector = None
        self._probe_namespace_selector = None
        self._probe_selector = None
        self._remote_flush_deadline = None
        self._remote_write = None
        self._service_monitor_namespace_selector = None
        self._service_monitor_selector = None
        self._wal_truncate_frequency = None
        self._write_stale_on_shutdown = None
        self.discriminator = None

        if additional_scrape_configs is not None:
            self.additional_scrape_configs = additional_scrape_configs
        if max_wal_time is not None:
            self.max_wal_time = max_wal_time
        if min_wal_time is not None:
            self.min_wal_time = min_wal_time
        if pod_monitor_namespace_selector is not None:
            self.pod_monitor_namespace_selector = pod_monitor_namespace_selector
        if pod_monitor_selector is not None:
            self.pod_monitor_selector = pod_monitor_selector
        if probe_namespace_selector is not None:
            self.probe_namespace_selector = probe_namespace_selector
        if probe_selector is not None:
            self.probe_selector = probe_selector
        if remote_flush_deadline is not None:
            self.remote_flush_deadline = remote_flush_deadline
        if remote_write is not None:
            self.remote_write = remote_write
        if service_monitor_namespace_selector is not None:
            self.service_monitor_namespace_selector = service_monitor_namespace_selector
        if service_monitor_selector is not None:
            self.service_monitor_selector = service_monitor_selector
        if wal_truncate_frequency is not None:
            self.wal_truncate_frequency = wal_truncate_frequency
        if write_stale_on_shutdown is not None:
            self.write_stale_on_shutdown = write_stale_on_shutdown

    @property
    def additional_scrape_configs(self):
        """Gets the additional_scrape_configs of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501


        :return: The additional_scrape_configs of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1MetricsInstanceSpecAdditionalScrapeConfigs
        """
        return self._additional_scrape_configs

    @additional_scrape_configs.setter
    def additional_scrape_configs(self, additional_scrape_configs):
        """Sets the additional_scrape_configs of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.


        :param additional_scrape_configs: The additional_scrape_configs of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1MetricsInstanceSpecAdditionalScrapeConfigs
        """

        self._additional_scrape_configs = additional_scrape_configs

    @property
    def max_wal_time(self):
        """Gets the max_wal_time of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501

        MaxWALTime is the maximum amount of time that series and samples can exist in the WAL before being forcibly deleted.  # noqa: E501

        :return: The max_wal_time of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._max_wal_time

    @max_wal_time.setter
    def max_wal_time(self, max_wal_time):
        """Sets the max_wal_time of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.

        MaxWALTime is the maximum amount of time that series and samples can exist in the WAL before being forcibly deleted.  # noqa: E501

        :param max_wal_time: The max_wal_time of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :type: str
        """

        self._max_wal_time = max_wal_time

    @property
    def min_wal_time(self):
        """Gets the min_wal_time of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501

        MinWALTime is the minimum amount of time that series and samples can exist in the WAL before being considered for deletion.  # noqa: E501

        :return: The min_wal_time of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._min_wal_time

    @min_wal_time.setter
    def min_wal_time(self, min_wal_time):
        """Sets the min_wal_time of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.

        MinWALTime is the minimum amount of time that series and samples can exist in the WAL before being considered for deletion.  # noqa: E501

        :param min_wal_time: The min_wal_time of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :type: str
        """

        self._min_wal_time = min_wal_time

    @property
    def pod_monitor_namespace_selector(self):
        """Gets the pod_monitor_namespace_selector of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501


        :return: The pod_monitor_namespace_selector of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1MetricsInstanceSpecPodMonitorNamespaceSelector
        """
        return self._pod_monitor_namespace_selector

    @pod_monitor_namespace_selector.setter
    def pod_monitor_namespace_selector(self, pod_monitor_namespace_selector):
        """Sets the pod_monitor_namespace_selector of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.


        :param pod_monitor_namespace_selector: The pod_monitor_namespace_selector of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1MetricsInstanceSpecPodMonitorNamespaceSelector
        """

        self._pod_monitor_namespace_selector = pod_monitor_namespace_selector

    @property
    def pod_monitor_selector(self):
        """Gets the pod_monitor_selector of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501


        :return: The pod_monitor_selector of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1MetricsInstanceSpecPodMonitorSelector
        """
        return self._pod_monitor_selector

    @pod_monitor_selector.setter
    def pod_monitor_selector(self, pod_monitor_selector):
        """Sets the pod_monitor_selector of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.


        :param pod_monitor_selector: The pod_monitor_selector of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1MetricsInstanceSpecPodMonitorSelector
        """

        self._pod_monitor_selector = pod_monitor_selector

    @property
    def probe_namespace_selector(self):
        """Gets the probe_namespace_selector of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501


        :return: The probe_namespace_selector of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1MetricsInstanceSpecProbeNamespaceSelector
        """
        return self._probe_namespace_selector

    @probe_namespace_selector.setter
    def probe_namespace_selector(self, probe_namespace_selector):
        """Sets the probe_namespace_selector of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.


        :param probe_namespace_selector: The probe_namespace_selector of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1MetricsInstanceSpecProbeNamespaceSelector
        """

        self._probe_namespace_selector = probe_namespace_selector

    @property
    def probe_selector(self):
        """Gets the probe_selector of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501


        :return: The probe_selector of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1MetricsInstanceSpecProbeSelector
        """
        return self._probe_selector

    @probe_selector.setter
    def probe_selector(self, probe_selector):
        """Sets the probe_selector of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.


        :param probe_selector: The probe_selector of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1MetricsInstanceSpecProbeSelector
        """

        self._probe_selector = probe_selector

    @property
    def remote_flush_deadline(self):
        """Gets the remote_flush_deadline of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501

        RemoteFlushDeadline is the deadline for flushing data when an instance shuts down.  # noqa: E501

        :return: The remote_flush_deadline of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._remote_flush_deadline

    @remote_flush_deadline.setter
    def remote_flush_deadline(self, remote_flush_deadline):
        """Sets the remote_flush_deadline of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.

        RemoteFlushDeadline is the deadline for flushing data when an instance shuts down.  # noqa: E501

        :param remote_flush_deadline: The remote_flush_deadline of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :type: str
        """

        self._remote_flush_deadline = remote_flush_deadline

    @property
    def remote_write(self):
        """Gets the remote_write of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501

        RemoteWrite controls remote_write settings for this instance.  # noqa: E501

        :return: The remote_write of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :rtype: list[ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetricsRemoteWrite]
        """
        return self._remote_write

    @remote_write.setter
    def remote_write(self, remote_write):
        """Sets the remote_write of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.

        RemoteWrite controls remote_write settings for this instance.  # noqa: E501

        :param remote_write: The remote_write of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :type: list[ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetricsRemoteWrite]
        """

        self._remote_write = remote_write

    @property
    def service_monitor_namespace_selector(self):
        """Gets the service_monitor_namespace_selector of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501


        :return: The service_monitor_namespace_selector of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1MetricsInstanceSpecServiceMonitorNamespaceSelector
        """
        return self._service_monitor_namespace_selector

    @service_monitor_namespace_selector.setter
    def service_monitor_namespace_selector(self, service_monitor_namespace_selector):
        """Sets the service_monitor_namespace_selector of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.


        :param service_monitor_namespace_selector: The service_monitor_namespace_selector of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1MetricsInstanceSpecServiceMonitorNamespaceSelector
        """

        self._service_monitor_namespace_selector = service_monitor_namespace_selector

    @property
    def service_monitor_selector(self):
        """Gets the service_monitor_selector of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501


        :return: The service_monitor_selector of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1MetricsInstanceSpecServiceMonitorSelector
        """
        return self._service_monitor_selector

    @service_monitor_selector.setter
    def service_monitor_selector(self, service_monitor_selector):
        """Sets the service_monitor_selector of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.


        :param service_monitor_selector: The service_monitor_selector of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1MetricsInstanceSpecServiceMonitorSelector
        """

        self._service_monitor_selector = service_monitor_selector

    @property
    def wal_truncate_frequency(self):
        """Gets the wal_truncate_frequency of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501

        WALTruncateFrequency specifies how frequently to run the WAL truncation process. Higher values cause the WAL to increase and for old series to stay in the WAL longer, but reduces the chance of data loss when remote_write fails for longer than the given frequency.  # noqa: E501

        :return: The wal_truncate_frequency of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._wal_truncate_frequency

    @wal_truncate_frequency.setter
    def wal_truncate_frequency(self, wal_truncate_frequency):
        """Sets the wal_truncate_frequency of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.

        WALTruncateFrequency specifies how frequently to run the WAL truncation process. Higher values cause the WAL to increase and for old series to stay in the WAL longer, but reduces the chance of data loss when remote_write fails for longer than the given frequency.  # noqa: E501

        :param wal_truncate_frequency: The wal_truncate_frequency of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :type: str
        """

        self._wal_truncate_frequency = wal_truncate_frequency

    @property
    def write_stale_on_shutdown(self):
        """Gets the write_stale_on_shutdown of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501

        WriteStaleOnShutdown writes staleness markers on shutdown for all series.  # noqa: E501

        :return: The write_stale_on_shutdown of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :rtype: bool
        """
        return self._write_stale_on_shutdown

    @write_stale_on_shutdown.setter
    def write_stale_on_shutdown(self, write_stale_on_shutdown):
        """Sets the write_stale_on_shutdown of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.

        WriteStaleOnShutdown writes staleness markers on shutdown for all series.  # noqa: E501

        :param write_stale_on_shutdown: The write_stale_on_shutdown of this ComGrafanaMonitoringV1alpha1MetricsInstanceSpec.  # noqa: E501
        :type: bool
        """

        self._write_stale_on_shutdown = write_stale_on_shutdown

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1MetricsInstanceSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1MetricsInstanceSpec):
            return True

        return self.to_dict() != other.to_dict()
