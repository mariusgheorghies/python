# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cidr_block': 'str',
        'egress': 'bool',
        'icmp_type_code': 'AwsK8sServicesEc2V1alpha1NetworkACLSpecIcmpTypeCode',
        'ipv6_cidr_block': 'str',
        'port_range': 'AwsK8sServicesEc2V1alpha1NetworkACLSpecPortRange',
        'protocol': 'str',
        'rule_action': 'str',
        'rule_number': 'int'
    }

    attribute_map = {
        'cidr_block': 'cidrBlock',
        'egress': 'egress',
        'icmp_type_code': 'icmpTypeCode',
        'ipv6_cidr_block': 'ipv6CIDRBlock',
        'port_range': 'portRange',
        'protocol': 'protocol',
        'rule_action': 'ruleAction',
        'rule_number': 'ruleNumber'
    }

    def __init__(self, cidr_block=None, egress=None, icmp_type_code=None, ipv6_cidr_block=None, port_range=None, protocol=None, rule_action=None, rule_number=None, local_vars_configuration=None):  # noqa: E501
        """AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cidr_block = None
        self._egress = None
        self._icmp_type_code = None
        self._ipv6_cidr_block = None
        self._port_range = None
        self._protocol = None
        self._rule_action = None
        self._rule_number = None
        self.discriminator = None

        if cidr_block is not None:
            self.cidr_block = cidr_block
        if egress is not None:
            self.egress = egress
        if icmp_type_code is not None:
            self.icmp_type_code = icmp_type_code
        if ipv6_cidr_block is not None:
            self.ipv6_cidr_block = ipv6_cidr_block
        if port_range is not None:
            self.port_range = port_range
        if protocol is not None:
            self.protocol = protocol
        if rule_action is not None:
            self.rule_action = rule_action
        if rule_number is not None:
            self.rule_number = rule_number

    @property
    def cidr_block(self):
        """Gets the cidr_block of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.  # noqa: E501


        :return: The cidr_block of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.  # noqa: E501
        :rtype: str
        """
        return self._cidr_block

    @cidr_block.setter
    def cidr_block(self, cidr_block):
        """Sets the cidr_block of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.


        :param cidr_block: The cidr_block of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.  # noqa: E501
        :type: str
        """

        self._cidr_block = cidr_block

    @property
    def egress(self):
        """Gets the egress of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.  # noqa: E501


        :return: The egress of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.  # noqa: E501
        :rtype: bool
        """
        return self._egress

    @egress.setter
    def egress(self, egress):
        """Sets the egress of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.


        :param egress: The egress of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.  # noqa: E501
        :type: bool
        """

        self._egress = egress

    @property
    def icmp_type_code(self):
        """Gets the icmp_type_code of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.  # noqa: E501


        :return: The icmp_type_code of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1NetworkACLSpecIcmpTypeCode
        """
        return self._icmp_type_code

    @icmp_type_code.setter
    def icmp_type_code(self, icmp_type_code):
        """Sets the icmp_type_code of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.


        :param icmp_type_code: The icmp_type_code of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1NetworkACLSpecIcmpTypeCode
        """

        self._icmp_type_code = icmp_type_code

    @property
    def ipv6_cidr_block(self):
        """Gets the ipv6_cidr_block of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.  # noqa: E501


        :return: The ipv6_cidr_block of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_cidr_block

    @ipv6_cidr_block.setter
    def ipv6_cidr_block(self, ipv6_cidr_block):
        """Sets the ipv6_cidr_block of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.


        :param ipv6_cidr_block: The ipv6_cidr_block of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.  # noqa: E501
        :type: str
        """

        self._ipv6_cidr_block = ipv6_cidr_block

    @property
    def port_range(self):
        """Gets the port_range of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.  # noqa: E501


        :return: The port_range of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1NetworkACLSpecPortRange
        """
        return self._port_range

    @port_range.setter
    def port_range(self, port_range):
        """Sets the port_range of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.


        :param port_range: The port_range of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1NetworkACLSpecPortRange
        """

        self._port_range = port_range

    @property
    def protocol(self):
        """Gets the protocol of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.  # noqa: E501


        :return: The protocol of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.


        :param protocol: The protocol of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def rule_action(self):
        """Gets the rule_action of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.  # noqa: E501


        :return: The rule_action of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.  # noqa: E501
        :rtype: str
        """
        return self._rule_action

    @rule_action.setter
    def rule_action(self, rule_action):
        """Sets the rule_action of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.


        :param rule_action: The rule_action of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.  # noqa: E501
        :type: str
        """

        self._rule_action = rule_action

    @property
    def rule_number(self):
        """Gets the rule_number of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.  # noqa: E501


        :return: The rule_number of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.  # noqa: E501
        :rtype: int
        """
        return self._rule_number

    @rule_number.setter
    def rule_number(self, rule_number):
        """Sets the rule_number of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.


        :param rule_number: The rule_number of this AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries.  # noqa: E501
        :type: int
        """

        self._rule_number = rule_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1NetworkACLSpecEntries):
            return True

        return self.to_dict() != other.to_dict()
