# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelectorEndpoints(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'host_ip': 'str',
        'name': 'str',
        'namespace': 'str',
        'pod_ip': 'str'
    }

    attribute_map = {
        'host_ip': 'hostIP',
        'name': 'name',
        'namespace': 'namespace',
        'pod_ip': 'podIP'
    }

    def __init__(self, host_ip=None, name=None, namespace=None, pod_ip=None, local_vars_configuration=None):  # noqa: E501
        """AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelectorEndpoints - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._host_ip = None
        self._name = None
        self._namespace = None
        self._pod_ip = None
        self.discriminator = None

        self.host_ip = host_ip
        self.name = name
        self.namespace = namespace
        self.pod_ip = pod_ip

    @property
    def host_ip(self):
        """Gets the host_ip of this AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelectorEndpoints.  # noqa: E501

        HostIP is the IP address of the host the pod is currently running on  # noqa: E501

        :return: The host_ip of this AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelectorEndpoints.  # noqa: E501
        :rtype: str
        """
        return self._host_ip

    @host_ip.setter
    def host_ip(self, host_ip):
        """Sets the host_ip of this AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelectorEndpoints.

        HostIP is the IP address of the host the pod is currently running on  # noqa: E501

        :param host_ip: The host_ip of this AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelectorEndpoints.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and host_ip is None:  # noqa: E501
            raise ValueError("Invalid value for `host_ip`, must not be `None`")  # noqa: E501

        self._host_ip = host_ip

    @property
    def name(self):
        """Gets the name of this AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelectorEndpoints.  # noqa: E501

        Name is the pod name  # noqa: E501

        :return: The name of this AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelectorEndpoints.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelectorEndpoints.

        Name is the pod name  # noqa: E501

        :param name: The name of this AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelectorEndpoints.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelectorEndpoints.  # noqa: E501

        Namespace is the pod namespace  # noqa: E501

        :return: The namespace of this AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelectorEndpoints.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelectorEndpoints.

        Namespace is the pod namespace  # noqa: E501

        :param namespace: The namespace of this AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelectorEndpoints.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and namespace is None:  # noqa: E501
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def pod_ip(self):
        """Gets the pod_ip of this AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelectorEndpoints.  # noqa: E501

        PodIP is the IP address of the pod  # noqa: E501

        :return: The pod_ip of this AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelectorEndpoints.  # noqa: E501
        :rtype: str
        """
        return self._pod_ip

    @pod_ip.setter
    def pod_ip(self, pod_ip):
        """Sets the pod_ip of this AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelectorEndpoints.

        PodIP is the IP address of the pod  # noqa: E501

        :param pod_ip: The pod_ip of this AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelectorEndpoints.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and pod_ip is None:  # noqa: E501
            raise ValueError("Invalid value for `pod_ip`, must not be `None`")  # noqa: E501

        self._pod_ip = pod_ip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelectorEndpoints):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwsK8sNetworkingV1alpha1PolicyEndpointSpecPodSelectorEndpoints):
            return True

        return self.to_dict() != other.to_dict()
