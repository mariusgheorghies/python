# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoCertManagerV1ClusterIssuerSpecVault(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auth': 'IoCertManagerV1ClusterIssuerSpecVaultAuth',
        'ca_bundle': 'str',
        'namespace': 'str',
        'path': 'str',
        'server': 'str'
    }

    attribute_map = {
        'auth': 'auth',
        'ca_bundle': 'caBundle',
        'namespace': 'namespace',
        'path': 'path',
        'server': 'server'
    }

    def __init__(self, auth=None, ca_bundle=None, namespace=None, path=None, server=None, local_vars_configuration=None):  # noqa: E501
        """IoCertManagerV1ClusterIssuerSpecVault - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._auth = None
        self._ca_bundle = None
        self._namespace = None
        self._path = None
        self._server = None
        self.discriminator = None

        self.auth = auth
        if ca_bundle is not None:
            self.ca_bundle = ca_bundle
        if namespace is not None:
            self.namespace = namespace
        self.path = path
        self.server = server

    @property
    def auth(self):
        """Gets the auth of this IoCertManagerV1ClusterIssuerSpecVault.  # noqa: E501


        :return: The auth of this IoCertManagerV1ClusterIssuerSpecVault.  # noqa: E501
        :rtype: IoCertManagerV1ClusterIssuerSpecVaultAuth
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this IoCertManagerV1ClusterIssuerSpecVault.


        :param auth: The auth of this IoCertManagerV1ClusterIssuerSpecVault.  # noqa: E501
        :type: IoCertManagerV1ClusterIssuerSpecVaultAuth
        """
        if self.local_vars_configuration.client_side_validation and auth is None:  # noqa: E501
            raise ValueError("Invalid value for `auth`, must not be `None`")  # noqa: E501

        self._auth = auth

    @property
    def ca_bundle(self):
        """Gets the ca_bundle of this IoCertManagerV1ClusterIssuerSpecVault.  # noqa: E501

        PEM-encoded CA bundle (base64-encoded) used to validate Vault server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.  # noqa: E501

        :return: The ca_bundle of this IoCertManagerV1ClusterIssuerSpecVault.  # noqa: E501
        :rtype: str
        """
        return self._ca_bundle

    @ca_bundle.setter
    def ca_bundle(self, ca_bundle):
        """Sets the ca_bundle of this IoCertManagerV1ClusterIssuerSpecVault.

        PEM-encoded CA bundle (base64-encoded) used to validate Vault server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.  # noqa: E501

        :param ca_bundle: The ca_bundle of this IoCertManagerV1ClusterIssuerSpecVault.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                ca_bundle is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', ca_bundle)):  # noqa: E501
            raise ValueError(r"Invalid value for `ca_bundle`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._ca_bundle = ca_bundle

    @property
    def namespace(self):
        """Gets the namespace of this IoCertManagerV1ClusterIssuerSpecVault.  # noqa: E501

        Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: \"ns1\" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces  # noqa: E501

        :return: The namespace of this IoCertManagerV1ClusterIssuerSpecVault.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this IoCertManagerV1ClusterIssuerSpecVault.

        Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: \"ns1\" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces  # noqa: E501

        :param namespace: The namespace of this IoCertManagerV1ClusterIssuerSpecVault.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def path(self):
        """Gets the path of this IoCertManagerV1ClusterIssuerSpecVault.  # noqa: E501

        Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: \"my_pki_mount/sign/my-role-name\".  # noqa: E501

        :return: The path of this IoCertManagerV1ClusterIssuerSpecVault.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this IoCertManagerV1ClusterIssuerSpecVault.

        Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: \"my_pki_mount/sign/my-role-name\".  # noqa: E501

        :param path: The path of this IoCertManagerV1ClusterIssuerSpecVault.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and path is None:  # noqa: E501
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def server(self):
        """Gets the server of this IoCertManagerV1ClusterIssuerSpecVault.  # noqa: E501

        Server is the connection address for the Vault server, e.g: \"https://vault.example.com:8200\".  # noqa: E501

        :return: The server of this IoCertManagerV1ClusterIssuerSpecVault.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this IoCertManagerV1ClusterIssuerSpecVault.

        Server is the connection address for the Vault server, e.g: \"https://vault.example.com:8200\".  # noqa: E501

        :param server: The server of this IoCertManagerV1ClusterIssuerSpecVault.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and server is None:  # noqa: E501
            raise ValueError("Invalid value for `server`, must not be `None`")  # noqa: E501

        self._server = server

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoCertManagerV1ClusterIssuerSpecVault):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoCertManagerV1ClusterIssuerSpecVault):
            return True

        return self.to_dict() != other.to_dict()
