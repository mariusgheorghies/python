# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComCoreosMonitoringV1PrometheusSpecRulesAlert(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'for_grace_period': 'str',
        'for_outage_tolerance': 'str',
        'resend_delay': 'str'
    }

    attribute_map = {
        'for_grace_period': 'forGracePeriod',
        'for_outage_tolerance': 'forOutageTolerance',
        'resend_delay': 'resendDelay'
    }

    def __init__(self, for_grace_period=None, for_outage_tolerance=None, resend_delay=None, local_vars_configuration=None):  # noqa: E501
        """ComCoreosMonitoringV1PrometheusSpecRulesAlert - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._for_grace_period = None
        self._for_outage_tolerance = None
        self._resend_delay = None
        self.discriminator = None

        if for_grace_period is not None:
            self.for_grace_period = for_grace_period
        if for_outage_tolerance is not None:
            self.for_outage_tolerance = for_outage_tolerance
        if resend_delay is not None:
            self.resend_delay = resend_delay

    @property
    def for_grace_period(self):
        """Gets the for_grace_period of this ComCoreosMonitoringV1PrometheusSpecRulesAlert.  # noqa: E501

        Minimum duration between alert and restored 'for' state. This is maintained only for alerts with configured 'for' time greater than grace period.  # noqa: E501

        :return: The for_grace_period of this ComCoreosMonitoringV1PrometheusSpecRulesAlert.  # noqa: E501
        :rtype: str
        """
        return self._for_grace_period

    @for_grace_period.setter
    def for_grace_period(self, for_grace_period):
        """Sets the for_grace_period of this ComCoreosMonitoringV1PrometheusSpecRulesAlert.

        Minimum duration between alert and restored 'for' state. This is maintained only for alerts with configured 'for' time greater than grace period.  # noqa: E501

        :param for_grace_period: The for_grace_period of this ComCoreosMonitoringV1PrometheusSpecRulesAlert.  # noqa: E501
        :type: str
        """

        self._for_grace_period = for_grace_period

    @property
    def for_outage_tolerance(self):
        """Gets the for_outage_tolerance of this ComCoreosMonitoringV1PrometheusSpecRulesAlert.  # noqa: E501

        Max time to tolerate prometheus outage for restoring 'for' state of alert.  # noqa: E501

        :return: The for_outage_tolerance of this ComCoreosMonitoringV1PrometheusSpecRulesAlert.  # noqa: E501
        :rtype: str
        """
        return self._for_outage_tolerance

    @for_outage_tolerance.setter
    def for_outage_tolerance(self, for_outage_tolerance):
        """Sets the for_outage_tolerance of this ComCoreosMonitoringV1PrometheusSpecRulesAlert.

        Max time to tolerate prometheus outage for restoring 'for' state of alert.  # noqa: E501

        :param for_outage_tolerance: The for_outage_tolerance of this ComCoreosMonitoringV1PrometheusSpecRulesAlert.  # noqa: E501
        :type: str
        """

        self._for_outage_tolerance = for_outage_tolerance

    @property
    def resend_delay(self):
        """Gets the resend_delay of this ComCoreosMonitoringV1PrometheusSpecRulesAlert.  # noqa: E501

        Minimum amount of time to wait before resending an alert to Alertmanager.  # noqa: E501

        :return: The resend_delay of this ComCoreosMonitoringV1PrometheusSpecRulesAlert.  # noqa: E501
        :rtype: str
        """
        return self._resend_delay

    @resend_delay.setter
    def resend_delay(self, resend_delay):
        """Sets the resend_delay of this ComCoreosMonitoringV1PrometheusSpecRulesAlert.

        Minimum amount of time to wait before resending an alert to Alertmanager.  # noqa: E501

        :param resend_delay: The resend_delay of this ComCoreosMonitoringV1PrometheusSpecRulesAlert.  # noqa: E501
        :type: str
        """

        self._resend_delay = resend_delay

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComCoreosMonitoringV1PrometheusSpecRulesAlert):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComCoreosMonitoringV1PrometheusSpecRulesAlert):
            return True

        return self.to_dict() != other.to_dict()
