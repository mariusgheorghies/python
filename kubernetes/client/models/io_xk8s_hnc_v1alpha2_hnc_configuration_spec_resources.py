# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sHncV1alpha2HNCConfigurationSpecResources(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'group': 'str',
        'mode': 'str',
        'resource': 'str'
    }

    attribute_map = {
        'group': 'group',
        'mode': 'mode',
        'resource': 'resource'
    }

    def __init__(self, group=None, mode=None, resource=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sHncV1alpha2HNCConfigurationSpecResources - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._group = None
        self._mode = None
        self._resource = None
        self.discriminator = None

        if group is not None:
            self.group = group
        if mode is not None:
            self.mode = mode
        self.resource = resource

    @property
    def group(self):
        """Gets the group of this IoXK8sHncV1alpha2HNCConfigurationSpecResources.  # noqa: E501

        Group of the resource defined below. This is used to unambiguously identify the resource. It may be omitted for core resources (e.g. \"secrets\").  # noqa: E501

        :return: The group of this IoXK8sHncV1alpha2HNCConfigurationSpecResources.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this IoXK8sHncV1alpha2HNCConfigurationSpecResources.

        Group of the resource defined below. This is used to unambiguously identify the resource. It may be omitted for core resources (e.g. \"secrets\").  # noqa: E501

        :param group: The group of this IoXK8sHncV1alpha2HNCConfigurationSpecResources.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def mode(self):
        """Gets the mode of this IoXK8sHncV1alpha2HNCConfigurationSpecResources.  # noqa: E501

        Synchronization mode of the kind. If the field is empty, it will be treated as \"Propagate\".  # noqa: E501

        :return: The mode of this IoXK8sHncV1alpha2HNCConfigurationSpecResources.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this IoXK8sHncV1alpha2HNCConfigurationSpecResources.

        Synchronization mode of the kind. If the field is empty, it will be treated as \"Propagate\".  # noqa: E501

        :param mode: The mode of this IoXK8sHncV1alpha2HNCConfigurationSpecResources.  # noqa: E501
        :type: str
        """
        allowed_values = ["Propagate", "Ignore", "Remove"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def resource(self):
        """Gets the resource of this IoXK8sHncV1alpha2HNCConfigurationSpecResources.  # noqa: E501

        Resource to be configured.  # noqa: E501

        :return: The resource of this IoXK8sHncV1alpha2HNCConfigurationSpecResources.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this IoXK8sHncV1alpha2HNCConfigurationSpecResources.

        Resource to be configured.  # noqa: E501

        :param resource: The resource of this IoXK8sHncV1alpha2HNCConfigurationSpecResources.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and resource is None:  # noqa: E501
            raise ValueError("Invalid value for `resource`, must not be `None`")  # noqa: E501

        self._resource = resource

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sHncV1alpha2HNCConfigurationSpecResources):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sHncV1alpha2HNCConfigurationSpecResources):
            return True

        return self.to_dict() != other.to_dict()
