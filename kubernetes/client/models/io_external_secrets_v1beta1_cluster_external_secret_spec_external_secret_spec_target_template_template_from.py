# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateTemplateFrom(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'config_map': 'IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateConfigMap',
        'literal': 'str',
        'secret': 'IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateConfigMap',
        'target': 'str'
    }

    attribute_map = {
        'config_map': 'configMap',
        'literal': 'literal',
        'secret': 'secret',
        'target': 'target'
    }

    def __init__(self, config_map=None, literal=None, secret=None, target=None, local_vars_configuration=None):  # noqa: E501
        """IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateTemplateFrom - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._config_map = None
        self._literal = None
        self._secret = None
        self._target = None
        self.discriminator = None

        if config_map is not None:
            self.config_map = config_map
        if literal is not None:
            self.literal = literal
        if secret is not None:
            self.secret = secret
        if target is not None:
            self.target = target

    @property
    def config_map(self):
        """Gets the config_map of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateTemplateFrom.  # noqa: E501


        :return: The config_map of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateTemplateFrom.  # noqa: E501
        :rtype: IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateConfigMap
        """
        return self._config_map

    @config_map.setter
    def config_map(self, config_map):
        """Sets the config_map of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateTemplateFrom.


        :param config_map: The config_map of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateTemplateFrom.  # noqa: E501
        :type: IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateConfigMap
        """

        self._config_map = config_map

    @property
    def literal(self):
        """Gets the literal of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateTemplateFrom.  # noqa: E501


        :return: The literal of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateTemplateFrom.  # noqa: E501
        :rtype: str
        """
        return self._literal

    @literal.setter
    def literal(self, literal):
        """Sets the literal of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateTemplateFrom.


        :param literal: The literal of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateTemplateFrom.  # noqa: E501
        :type: str
        """

        self._literal = literal

    @property
    def secret(self):
        """Gets the secret of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateTemplateFrom.  # noqa: E501


        :return: The secret of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateTemplateFrom.  # noqa: E501
        :rtype: IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateConfigMap
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateTemplateFrom.


        :param secret: The secret of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateTemplateFrom.  # noqa: E501
        :type: IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateConfigMap
        """

        self._secret = secret

    @property
    def target(self):
        """Gets the target of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateTemplateFrom.  # noqa: E501


        :return: The target of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateTemplateFrom.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateTemplateFrom.


        :param target: The target of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateTemplateFrom.  # noqa: E501
        :type: str
        """

        self._target = target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateTemplateFrom):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateTemplateFrom):
            return True

        return self.to_dict() != other.to_dict()
