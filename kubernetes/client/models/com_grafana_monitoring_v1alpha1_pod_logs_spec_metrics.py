# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'action': 'str',
        'buckets': 'list[str]',
        'count_entry_bytes': 'bool',
        'description': 'str',
        'match_all': 'bool',
        'max_idle_duration': 'str',
        'prefix': 'str',
        'source': 'str',
        'type': 'str',
        'value': 'str'
    }

    attribute_map = {
        'action': 'action',
        'buckets': 'buckets',
        'count_entry_bytes': 'countEntryBytes',
        'description': 'description',
        'match_all': 'matchAll',
        'max_idle_duration': 'maxIdleDuration',
        'prefix': 'prefix',
        'source': 'source',
        'type': 'type',
        'value': 'value'
    }

    def __init__(self, action=None, buckets=None, count_entry_bytes=None, description=None, match_all=None, max_idle_duration=None, prefix=None, source=None, type=None, value=None, local_vars_configuration=None):  # noqa: E501
        """ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._action = None
        self._buckets = None
        self._count_entry_bytes = None
        self._description = None
        self._match_all = None
        self._max_idle_duration = None
        self._prefix = None
        self._source = None
        self._type = None
        self._value = None
        self.discriminator = None

        self.action = action
        if buckets is not None:
            self.buckets = buckets
        if count_entry_bytes is not None:
            self.count_entry_bytes = count_entry_bytes
        if description is not None:
            self.description = description
        if match_all is not None:
            self.match_all = match_all
        if max_idle_duration is not None:
            self.max_idle_duration = max_idle_duration
        if prefix is not None:
            self.prefix = prefix
        if source is not None:
            self.source = source
        self.type = type
        if value is not None:
            self.value = value

    @property
    def action(self):
        """Gets the action of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501

        The action to take against the metric. Required.   Must be either \"inc\" or \"add\" for type: counter or type: histogram. When type: gauge, must be one of \"set\", \"inc\", \"dec\", \"add\", or \"sub\".   \"add\", \"set\", or \"sub\" requires the extracted value to be convertible to a positive float.  # noqa: E501

        :return: The action of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.

        The action to take against the metric. Required.   Must be either \"inc\" or \"add\" for type: counter or type: histogram. When type: gauge, must be one of \"set\", \"inc\", \"dec\", \"add\", or \"sub\".   \"add\", \"set\", or \"sub\" requires the extracted value to be convertible to a positive float.  # noqa: E501

        :param action: The action of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and action is None:  # noqa: E501
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def buckets(self):
        """Gets the buckets of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501

        Buckets to create. Bucket values must be convertible to float64s. Extremely large or small numbers are subject to some loss of precision. Only valid for type: histogram.  # noqa: E501

        :return: The buckets of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501
        :rtype: list[str]
        """
        return self._buckets

    @buckets.setter
    def buckets(self, buckets):
        """Sets the buckets of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.

        Buckets to create. Bucket values must be convertible to float64s. Extremely large or small numbers are subject to some loss of precision. Only valid for type: histogram.  # noqa: E501

        :param buckets: The buckets of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501
        :type: list[str]
        """

        self._buckets = buckets

    @property
    def count_entry_bytes(self):
        """Gets the count_entry_bytes of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501

        If true all log line bytes are counted. Can only be set with matchAll: true and action: add.   Only valid for type: counter.  # noqa: E501

        :return: The count_entry_bytes of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501
        :rtype: bool
        """
        return self._count_entry_bytes

    @count_entry_bytes.setter
    def count_entry_bytes(self, count_entry_bytes):
        """Sets the count_entry_bytes of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.

        If true all log line bytes are counted. Can only be set with matchAll: true and action: add.   Only valid for type: counter.  # noqa: E501

        :param count_entry_bytes: The count_entry_bytes of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501
        :type: bool
        """

        self._count_entry_bytes = count_entry_bytes

    @property
    def description(self):
        """Gets the description of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501

        Sets the description for the created metric.  # noqa: E501

        :return: The description of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.

        Sets the description for the created metric.  # noqa: E501

        :param description: The description of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def match_all(self):
        """Gets the match_all of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501

        If true, all log lines are counted without attempting to match the source to the extracted map. Mutually exclusive with value.   Only valid for type: counter.  # noqa: E501

        :return: The match_all of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501
        :rtype: bool
        """
        return self._match_all

    @match_all.setter
    def match_all(self, match_all):
        """Sets the match_all of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.

        If true, all log lines are counted without attempting to match the source to the extracted map. Mutually exclusive with value.   Only valid for type: counter.  # noqa: E501

        :param match_all: The match_all of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501
        :type: bool
        """

        self._match_all = match_all

    @property
    def max_idle_duration(self):
        """Gets the max_idle_duration of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501

        Label values on metrics are dynamic which can cause exported metrics to go stale. To prevent unbounded cardinality, any metrics not updated within MaxIdleDuration are removed.   Must be greater or equal to 1s. Defaults to 5m.  # noqa: E501

        :return: The max_idle_duration of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501
        :rtype: str
        """
        return self._max_idle_duration

    @max_idle_duration.setter
    def max_idle_duration(self, max_idle_duration):
        """Sets the max_idle_duration of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.

        Label values on metrics are dynamic which can cause exported metrics to go stale. To prevent unbounded cardinality, any metrics not updated within MaxIdleDuration are removed.   Must be greater or equal to 1s. Defaults to 5m.  # noqa: E501

        :param max_idle_duration: The max_idle_duration of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501
        :type: str
        """

        self._max_idle_duration = max_idle_duration

    @property
    def prefix(self):
        """Gets the prefix of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501

        Sets the custom prefix name for the metric. Defaults to \"promtail_custom_\".  # noqa: E501

        :return: The prefix of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.

        Sets the custom prefix name for the metric. Defaults to \"promtail_custom_\".  # noqa: E501

        :param prefix: The prefix of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def source(self):
        """Gets the source of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501

        Key from the extracted data map to use for the metric. Defaults to the metrics name if not present.  # noqa: E501

        :return: The source of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.

        Key from the extracted data map to use for the metric. Defaults to the metrics name if not present.  # noqa: E501

        :param source: The source of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def type(self):
        """Gets the type of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501

        The metric type to create. Must be one of counter, gauge, histogram. Required.  # noqa: E501

        :return: The type of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.

        The metric type to create. Must be one of counter, gauge, histogram. Required.  # noqa: E501

        :param type: The type of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def value(self):
        """Gets the value of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501

        Filters down source data and only changes the metric if the targeted value matches the provided string exactly. If not present, all data matches.  # noqa: E501

        :return: The value of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.

        Filters down source data and only changes the metric if the targeted value matches the provided string exactly. If not present, all data matches.  # noqa: E501

        :param value: The value of this ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1PodLogsSpecMetrics):
            return True

        return self.to_dict() != other.to_dict()
