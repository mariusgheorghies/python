# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterV1alpha4ClusterClassSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'control_plane': 'IoXK8sClusterV1alpha4ClusterClassSpecControlPlane',
        'infrastructure': 'IoXK8sClusterV1alpha4ClusterClassSpecInfrastructure',
        'workers': 'IoXK8sClusterV1alpha4ClusterClassSpecWorkers'
    }

    attribute_map = {
        'control_plane': 'controlPlane',
        'infrastructure': 'infrastructure',
        'workers': 'workers'
    }

    def __init__(self, control_plane=None, infrastructure=None, workers=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterV1alpha4ClusterClassSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._control_plane = None
        self._infrastructure = None
        self._workers = None
        self.discriminator = None

        if control_plane is not None:
            self.control_plane = control_plane
        if infrastructure is not None:
            self.infrastructure = infrastructure
        if workers is not None:
            self.workers = workers

    @property
    def control_plane(self):
        """Gets the control_plane of this IoXK8sClusterV1alpha4ClusterClassSpec.  # noqa: E501


        :return: The control_plane of this IoXK8sClusterV1alpha4ClusterClassSpec.  # noqa: E501
        :rtype: IoXK8sClusterV1alpha4ClusterClassSpecControlPlane
        """
        return self._control_plane

    @control_plane.setter
    def control_plane(self, control_plane):
        """Sets the control_plane of this IoXK8sClusterV1alpha4ClusterClassSpec.


        :param control_plane: The control_plane of this IoXK8sClusterV1alpha4ClusterClassSpec.  # noqa: E501
        :type: IoXK8sClusterV1alpha4ClusterClassSpecControlPlane
        """

        self._control_plane = control_plane

    @property
    def infrastructure(self):
        """Gets the infrastructure of this IoXK8sClusterV1alpha4ClusterClassSpec.  # noqa: E501


        :return: The infrastructure of this IoXK8sClusterV1alpha4ClusterClassSpec.  # noqa: E501
        :rtype: IoXK8sClusterV1alpha4ClusterClassSpecInfrastructure
        """
        return self._infrastructure

    @infrastructure.setter
    def infrastructure(self, infrastructure):
        """Sets the infrastructure of this IoXK8sClusterV1alpha4ClusterClassSpec.


        :param infrastructure: The infrastructure of this IoXK8sClusterV1alpha4ClusterClassSpec.  # noqa: E501
        :type: IoXK8sClusterV1alpha4ClusterClassSpecInfrastructure
        """

        self._infrastructure = infrastructure

    @property
    def workers(self):
        """Gets the workers of this IoXK8sClusterV1alpha4ClusterClassSpec.  # noqa: E501


        :return: The workers of this IoXK8sClusterV1alpha4ClusterClassSpec.  # noqa: E501
        :rtype: IoXK8sClusterV1alpha4ClusterClassSpecWorkers
        """
        return self._workers

    @workers.setter
    def workers(self, workers):
        """Sets the workers of this IoXK8sClusterV1alpha4ClusterClassSpec.


        :param workers: The workers of this IoXK8sClusterV1alpha4ClusterClassSpec.  # noqa: E501
        :type: IoXK8sClusterV1alpha4ClusterClassSpecWorkers
        """

        self._workers = workers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterV1alpha4ClusterClassSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterV1alpha4ClusterClassSpec):
            return True

        return self.to_dict() != other.to_dict()
