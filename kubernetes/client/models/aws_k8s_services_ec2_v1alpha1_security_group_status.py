# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class AwsK8sServicesEc2V1alpha1SecurityGroupStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ack_resource_metadata': 'AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata',
        'conditions': 'list[AwsK8sServicesEc2V1alpha1DHCPOptionsStatusConditions]',
        'id': 'str',
        'rules': 'list[AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules]'
    }

    attribute_map = {
        'ack_resource_metadata': 'ackResourceMetadata',
        'conditions': 'conditions',
        'id': 'id',
        'rules': 'rules'
    }

    def __init__(self, ack_resource_metadata=None, conditions=None, id=None, rules=None, local_vars_configuration=None):  # noqa: E501
        """AwsK8sServicesEc2V1alpha1SecurityGroupStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ack_resource_metadata = None
        self._conditions = None
        self._id = None
        self._rules = None
        self.discriminator = None

        if ack_resource_metadata is not None:
            self.ack_resource_metadata = ack_resource_metadata
        if conditions is not None:
            self.conditions = conditions
        if id is not None:
            self.id = id
        if rules is not None:
            self.rules = rules

    @property
    def ack_resource_metadata(self):
        """Gets the ack_resource_metadata of this AwsK8sServicesEc2V1alpha1SecurityGroupStatus.  # noqa: E501


        :return: The ack_resource_metadata of this AwsK8sServicesEc2V1alpha1SecurityGroupStatus.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata
        """
        return self._ack_resource_metadata

    @ack_resource_metadata.setter
    def ack_resource_metadata(self, ack_resource_metadata):
        """Sets the ack_resource_metadata of this AwsK8sServicesEc2V1alpha1SecurityGroupStatus.


        :param ack_resource_metadata: The ack_resource_metadata of this AwsK8sServicesEc2V1alpha1SecurityGroupStatus.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata
        """

        self._ack_resource_metadata = ack_resource_metadata

    @property
    def conditions(self):
        """Gets the conditions of this AwsK8sServicesEc2V1alpha1SecurityGroupStatus.  # noqa: E501

        All CRS managed by ACK have a common `Status.Conditions` member that contains a collection of `ackv1alpha1.Condition` objects that describe the various terminal states of the CR and its backend AWS service API resource  # noqa: E501

        :return: The conditions of this AwsK8sServicesEc2V1alpha1SecurityGroupStatus.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1DHCPOptionsStatusConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this AwsK8sServicesEc2V1alpha1SecurityGroupStatus.

        All CRS managed by ACK have a common `Status.Conditions` member that contains a collection of `ackv1alpha1.Condition` objects that describe the various terminal states of the CR and its backend AWS service API resource  # noqa: E501

        :param conditions: The conditions of this AwsK8sServicesEc2V1alpha1SecurityGroupStatus.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1DHCPOptionsStatusConditions]
        """

        self._conditions = conditions

    @property
    def id(self):
        """Gets the id of this AwsK8sServicesEc2V1alpha1SecurityGroupStatus.  # noqa: E501

        The ID of the security group.  # noqa: E501

        :return: The id of this AwsK8sServicesEc2V1alpha1SecurityGroupStatus.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AwsK8sServicesEc2V1alpha1SecurityGroupStatus.

        The ID of the security group.  # noqa: E501

        :param id: The id of this AwsK8sServicesEc2V1alpha1SecurityGroupStatus.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def rules(self):
        """Gets the rules of this AwsK8sServicesEc2V1alpha1SecurityGroupStatus.  # noqa: E501

        Information about security group rules.  # noqa: E501

        :return: The rules of this AwsK8sServicesEc2V1alpha1SecurityGroupStatus.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this AwsK8sServicesEc2V1alpha1SecurityGroupStatus.

        Information about security group rules.  # noqa: E501

        :param rules: The rules of this AwsK8sServicesEc2V1alpha1SecurityGroupStatus.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules]
        """

        self._rules = rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1SecurityGroupStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1SecurityGroupStatus):
            return True

        return self.to_dict() != other.to_dict()
