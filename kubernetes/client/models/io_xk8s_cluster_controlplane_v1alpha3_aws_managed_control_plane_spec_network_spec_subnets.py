# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'availability_zone': 'str',
        'cidr_block': 'str',
        'id': 'str',
        'is_public': 'bool',
        'nat_gateway_id': 'str',
        'route_table_id': 'str',
        'tags': 'dict(str, str)'
    }

    attribute_map = {
        'availability_zone': 'availabilityZone',
        'cidr_block': 'cidrBlock',
        'id': 'id',
        'is_public': 'isPublic',
        'nat_gateway_id': 'natGatewayId',
        'route_table_id': 'routeTableId',
        'tags': 'tags'
    }

    def __init__(self, availability_zone=None, cidr_block=None, id=None, is_public=None, nat_gateway_id=None, route_table_id=None, tags=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._availability_zone = None
        self._cidr_block = None
        self._id = None
        self._is_public = None
        self._nat_gateway_id = None
        self._route_table_id = None
        self._tags = None
        self.discriminator = None

        if availability_zone is not None:
            self.availability_zone = availability_zone
        if cidr_block is not None:
            self.cidr_block = cidr_block
        if id is not None:
            self.id = id
        if is_public is not None:
            self.is_public = is_public
        if nat_gateway_id is not None:
            self.nat_gateway_id = nat_gateway_id
        if route_table_id is not None:
            self.route_table_id = route_table_id
        if tags is not None:
            self.tags = tags

    @property
    def availability_zone(self):
        """Gets the availability_zone of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.  # noqa: E501

        AvailabilityZone defines the availability zone to use for this subnet in the cluster's region.  # noqa: E501

        :return: The availability_zone of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.  # noqa: E501
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.

        AvailabilityZone defines the availability zone to use for this subnet in the cluster's region.  # noqa: E501

        :param availability_zone: The availability_zone of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.  # noqa: E501
        :type: str
        """

        self._availability_zone = availability_zone

    @property
    def cidr_block(self):
        """Gets the cidr_block of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.  # noqa: E501

        CidrBlock is the CIDR block to be used when the provider creates a managed VPC.  # noqa: E501

        :return: The cidr_block of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.  # noqa: E501
        :rtype: str
        """
        return self._cidr_block

    @cidr_block.setter
    def cidr_block(self, cidr_block):
        """Sets the cidr_block of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.

        CidrBlock is the CIDR block to be used when the provider creates a managed VPC.  # noqa: E501

        :param cidr_block: The cidr_block of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.  # noqa: E501
        :type: str
        """

        self._cidr_block = cidr_block

    @property
    def id(self):
        """Gets the id of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.  # noqa: E501

        ID defines a unique identifier to reference this resource.  # noqa: E501

        :return: The id of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.

        ID defines a unique identifier to reference this resource.  # noqa: E501

        :param id: The id of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_public(self):
        """Gets the is_public of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.  # noqa: E501

        IsPublic defines the subnet as a public subnet. A subnet is public when it is associated with a route table that has a route to an internet gateway.  # noqa: E501

        :return: The is_public of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.

        IsPublic defines the subnet as a public subnet. A subnet is public when it is associated with a route table that has a route to an internet gateway.  # noqa: E501

        :param is_public: The is_public of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def nat_gateway_id(self):
        """Gets the nat_gateway_id of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.  # noqa: E501

        NatGatewayID is the NAT gateway id associated with the subnet. Ignored unless the subnet is managed by the provider, in which case this is set on the public subnet where the NAT gateway resides. It is then used to determine routes for private subnets in the same AZ as the public subnet.  # noqa: E501

        :return: The nat_gateway_id of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.  # noqa: E501
        :rtype: str
        """
        return self._nat_gateway_id

    @nat_gateway_id.setter
    def nat_gateway_id(self, nat_gateway_id):
        """Sets the nat_gateway_id of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.

        NatGatewayID is the NAT gateway id associated with the subnet. Ignored unless the subnet is managed by the provider, in which case this is set on the public subnet where the NAT gateway resides. It is then used to determine routes for private subnets in the same AZ as the public subnet.  # noqa: E501

        :param nat_gateway_id: The nat_gateway_id of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.  # noqa: E501
        :type: str
        """

        self._nat_gateway_id = nat_gateway_id

    @property
    def route_table_id(self):
        """Gets the route_table_id of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.  # noqa: E501

        RouteTableID is the routing table id associated with the subnet.  # noqa: E501

        :return: The route_table_id of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.  # noqa: E501
        :rtype: str
        """
        return self._route_table_id

    @route_table_id.setter
    def route_table_id(self, route_table_id):
        """Sets the route_table_id of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.

        RouteTableID is the routing table id associated with the subnet.  # noqa: E501

        :param route_table_id: The route_table_id of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.  # noqa: E501
        :type: str
        """

        self._route_table_id = route_table_id

    @property
    def tags(self):
        """Gets the tags of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.  # noqa: E501

        Tags is a collection of tags describing the resource.  # noqa: E501

        :return: The tags of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.

        Tags is a collection of tags describing the resource.  # noqa: E501

        :param tags: The tags of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets.  # noqa: E501
        :type: dict(str, str)
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets):
            return True

        return self.to_dict() != other.to_dict()
