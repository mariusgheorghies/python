# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'additional_tags': 'dict(str, str)',
        'ami_type': 'str',
        'ami_version': 'str',
        'availability_zones': 'list[str]',
        'capacity_type': 'str',
        'disk_size': 'int',
        'eks_nodegroup_name': 'str',
        'instance_type': 'str',
        'labels': 'dict(str, str)',
        'provider_id_list': 'list[str]',
        'remote_access': 'IoXK8sClusterInfrastructureV1alpha3AWSManagedMachinePoolSpecRemoteAccess',
        'role_additional_policies': 'list[str]',
        'role_name': 'str',
        'scaling': 'IoXK8sClusterInfrastructureV1alpha3AWSManagedMachinePoolSpecScaling',
        'subnet_i_ds': 'list[str]',
        'taints': 'list[IoXK8sClusterInfrastructureV1alpha4AWSManagedMachinePoolSpecTaints]'
    }

    attribute_map = {
        'additional_tags': 'additionalTags',
        'ami_type': 'amiType',
        'ami_version': 'amiVersion',
        'availability_zones': 'availabilityZones',
        'capacity_type': 'capacityType',
        'disk_size': 'diskSize',
        'eks_nodegroup_name': 'eksNodegroupName',
        'instance_type': 'instanceType',
        'labels': 'labels',
        'provider_id_list': 'providerIDList',
        'remote_access': 'remoteAccess',
        'role_additional_policies': 'roleAdditionalPolicies',
        'role_name': 'roleName',
        'scaling': 'scaling',
        'subnet_i_ds': 'subnetIDs',
        'taints': 'taints'
    }

    def __init__(self, additional_tags=None, ami_type=None, ami_version=None, availability_zones=None, capacity_type=None, disk_size=None, eks_nodegroup_name=None, instance_type=None, labels=None, provider_id_list=None, remote_access=None, role_additional_policies=None, role_name=None, scaling=None, subnet_i_ds=None, taints=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._additional_tags = None
        self._ami_type = None
        self._ami_version = None
        self._availability_zones = None
        self._capacity_type = None
        self._disk_size = None
        self._eks_nodegroup_name = None
        self._instance_type = None
        self._labels = None
        self._provider_id_list = None
        self._remote_access = None
        self._role_additional_policies = None
        self._role_name = None
        self._scaling = None
        self._subnet_i_ds = None
        self._taints = None
        self.discriminator = None

        if additional_tags is not None:
            self.additional_tags = additional_tags
        if ami_type is not None:
            self.ami_type = ami_type
        if ami_version is not None:
            self.ami_version = ami_version
        if availability_zones is not None:
            self.availability_zones = availability_zones
        if capacity_type is not None:
            self.capacity_type = capacity_type
        if disk_size is not None:
            self.disk_size = disk_size
        if eks_nodegroup_name is not None:
            self.eks_nodegroup_name = eks_nodegroup_name
        if instance_type is not None:
            self.instance_type = instance_type
        if labels is not None:
            self.labels = labels
        if provider_id_list is not None:
            self.provider_id_list = provider_id_list
        if remote_access is not None:
            self.remote_access = remote_access
        if role_additional_policies is not None:
            self.role_additional_policies = role_additional_policies
        if role_name is not None:
            self.role_name = role_name
        if scaling is not None:
            self.scaling = scaling
        if subnet_i_ds is not None:
            self.subnet_i_ds = subnet_i_ds
        if taints is not None:
            self.taints = taints

    @property
    def additional_tags(self):
        """Gets the additional_tags of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501

        AdditionalTags is an optional set of tags to add to AWS resources managed by the AWS provider, in addition to the ones added by default.  # noqa: E501

        :return: The additional_tags of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._additional_tags

    @additional_tags.setter
    def additional_tags(self, additional_tags):
        """Sets the additional_tags of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.

        AdditionalTags is an optional set of tags to add to AWS resources managed by the AWS provider, in addition to the ones added by default.  # noqa: E501

        :param additional_tags: The additional_tags of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._additional_tags = additional_tags

    @property
    def ami_type(self):
        """Gets the ami_type of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501

        AMIType defines the AMI type  # noqa: E501

        :return: The ami_type of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :rtype: str
        """
        return self._ami_type

    @ami_type.setter
    def ami_type(self, ami_type):
        """Sets the ami_type of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.

        AMIType defines the AMI type  # noqa: E501

        :param ami_type: The ami_type of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :type: str
        """
        allowed_values = ["AL2_x86_64", "AL2_x86_64_GPU", "AL2_ARM_64"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and ami_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `ami_type` ({0}), must be one of {1}"  # noqa: E501
                .format(ami_type, allowed_values)
            )

        self._ami_type = ami_type

    @property
    def ami_version(self):
        """Gets the ami_version of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501

        AMIVersion defines the desired AMI release version. If no version number is supplied then the latest version for the Kubernetes version will be used  # noqa: E501

        :return: The ami_version of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :rtype: str
        """
        return self._ami_version

    @ami_version.setter
    def ami_version(self, ami_version):
        """Sets the ami_version of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.

        AMIVersion defines the desired AMI release version. If no version number is supplied then the latest version for the Kubernetes version will be used  # noqa: E501

        :param ami_version: The ami_version of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                ami_version is not None and len(ami_version) < 2):
            raise ValueError("Invalid value for `ami_version`, length must be greater than or equal to `2`")  # noqa: E501

        self._ami_version = ami_version

    @property
    def availability_zones(self):
        """Gets the availability_zones of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501

        AvailabilityZones is an array of availability zones instances can run in  # noqa: E501

        :return: The availability_zones of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._availability_zones

    @availability_zones.setter
    def availability_zones(self, availability_zones):
        """Sets the availability_zones of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.

        AvailabilityZones is an array of availability zones instances can run in  # noqa: E501

        :param availability_zones: The availability_zones of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :type: list[str]
        """

        self._availability_zones = availability_zones

    @property
    def capacity_type(self):
        """Gets the capacity_type of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501

        CapacityType specifies the capacity type for the ASG behind this pool  # noqa: E501

        :return: The capacity_type of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :rtype: str
        """
        return self._capacity_type

    @capacity_type.setter
    def capacity_type(self, capacity_type):
        """Sets the capacity_type of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.

        CapacityType specifies the capacity type for the ASG behind this pool  # noqa: E501

        :param capacity_type: The capacity_type of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :type: str
        """
        allowed_values = ["onDemand", "spot"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and capacity_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `capacity_type` ({0}), must be one of {1}"  # noqa: E501
                .format(capacity_type, allowed_values)
            )

        self._capacity_type = capacity_type

    @property
    def disk_size(self):
        """Gets the disk_size of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501

        DiskSize specifies the root disk size  # noqa: E501

        :return: The disk_size of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :rtype: int
        """
        return self._disk_size

    @disk_size.setter
    def disk_size(self, disk_size):
        """Sets the disk_size of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.

        DiskSize specifies the root disk size  # noqa: E501

        :param disk_size: The disk_size of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :type: int
        """

        self._disk_size = disk_size

    @property
    def eks_nodegroup_name(self):
        """Gets the eks_nodegroup_name of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501

        EKSNodegroupName specifies the name of the nodegroup in AWS corresponding to this MachinePool. If you don't specify a name then a default name will be created based on the namespace and name of the managed machine pool.  # noqa: E501

        :return: The eks_nodegroup_name of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :rtype: str
        """
        return self._eks_nodegroup_name

    @eks_nodegroup_name.setter
    def eks_nodegroup_name(self, eks_nodegroup_name):
        """Sets the eks_nodegroup_name of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.

        EKSNodegroupName specifies the name of the nodegroup in AWS corresponding to this MachinePool. If you don't specify a name then a default name will be created based on the namespace and name of the managed machine pool.  # noqa: E501

        :param eks_nodegroup_name: The eks_nodegroup_name of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :type: str
        """

        self._eks_nodegroup_name = eks_nodegroup_name

    @property
    def instance_type(self):
        """Gets the instance_type of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501

        InstanceType specifies the AWS instance type  # noqa: E501

        :return: The instance_type of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.

        InstanceType specifies the AWS instance type  # noqa: E501

        :param instance_type: The instance_type of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :type: str
        """

        self._instance_type = instance_type

    @property
    def labels(self):
        """Gets the labels of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501

        Labels specifies labels for the Kubernetes node objects  # noqa: E501

        :return: The labels of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.

        Labels specifies labels for the Kubernetes node objects  # noqa: E501

        :param labels: The labels of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def provider_id_list(self):
        """Gets the provider_id_list of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501

        ProviderIDList are the provider IDs of instances in the autoscaling group corresponding to the nodegroup represented by this machine pool  # noqa: E501

        :return: The provider_id_list of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._provider_id_list

    @provider_id_list.setter
    def provider_id_list(self, provider_id_list):
        """Sets the provider_id_list of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.

        ProviderIDList are the provider IDs of instances in the autoscaling group corresponding to the nodegroup represented by this machine pool  # noqa: E501

        :param provider_id_list: The provider_id_list of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :type: list[str]
        """

        self._provider_id_list = provider_id_list

    @property
    def remote_access(self):
        """Gets the remote_access of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501


        :return: The remote_access of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :rtype: IoXK8sClusterInfrastructureV1alpha3AWSManagedMachinePoolSpecRemoteAccess
        """
        return self._remote_access

    @remote_access.setter
    def remote_access(self, remote_access):
        """Sets the remote_access of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.


        :param remote_access: The remote_access of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :type: IoXK8sClusterInfrastructureV1alpha3AWSManagedMachinePoolSpecRemoteAccess
        """

        self._remote_access = remote_access

    @property
    def role_additional_policies(self):
        """Gets the role_additional_policies of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501

        RoleAdditionalPolicies allows you to attach additional polices to the node group role. You must enable the EKSAllowAddRoles feature flag to incorporate these into the created role.  # noqa: E501

        :return: The role_additional_policies of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._role_additional_policies

    @role_additional_policies.setter
    def role_additional_policies(self, role_additional_policies):
        """Sets the role_additional_policies of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.

        RoleAdditionalPolicies allows you to attach additional polices to the node group role. You must enable the EKSAllowAddRoles feature flag to incorporate these into the created role.  # noqa: E501

        :param role_additional_policies: The role_additional_policies of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :type: list[str]
        """

        self._role_additional_policies = role_additional_policies

    @property
    def role_name(self):
        """Gets the role_name of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501

        RoleName specifies the name of IAM role for the node group. If the role is pre-existing we will treat it as unmanaged and not delete it on deletion. If the EKSEnableIAM feature flag is true and no name is supplied then a role is created.  # noqa: E501

        :return: The role_name of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.

        RoleName specifies the name of IAM role for the node group. If the role is pre-existing we will treat it as unmanaged and not delete it on deletion. If the EKSEnableIAM feature flag is true and no name is supplied then a role is created.  # noqa: E501

        :param role_name: The role_name of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :type: str
        """

        self._role_name = role_name

    @property
    def scaling(self):
        """Gets the scaling of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501


        :return: The scaling of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :rtype: IoXK8sClusterInfrastructureV1alpha3AWSManagedMachinePoolSpecScaling
        """
        return self._scaling

    @scaling.setter
    def scaling(self, scaling):
        """Sets the scaling of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.


        :param scaling: The scaling of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :type: IoXK8sClusterInfrastructureV1alpha3AWSManagedMachinePoolSpecScaling
        """

        self._scaling = scaling

    @property
    def subnet_i_ds(self):
        """Gets the subnet_i_ds of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501

        SubnetIDs specifies which subnets are used for the auto scaling group of this nodegroup  # noqa: E501

        :return: The subnet_i_ds of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._subnet_i_ds

    @subnet_i_ds.setter
    def subnet_i_ds(self, subnet_i_ds):
        """Sets the subnet_i_ds of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.

        SubnetIDs specifies which subnets are used for the auto scaling group of this nodegroup  # noqa: E501

        :param subnet_i_ds: The subnet_i_ds of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :type: list[str]
        """

        self._subnet_i_ds = subnet_i_ds

    @property
    def taints(self):
        """Gets the taints of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501

        Taints specifies the taints to apply to the nodes of the machine pool  # noqa: E501

        :return: The taints of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :rtype: list[IoXK8sClusterInfrastructureV1alpha4AWSManagedMachinePoolSpecTaints]
        """
        return self._taints

    @taints.setter
    def taints(self, taints):
        """Sets the taints of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.

        Taints specifies the taints to apply to the nodes of the machine pool  # noqa: E501

        :param taints: The taints of this IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec.  # noqa: E501
        :type: list[IoXK8sClusterInfrastructureV1alpha4AWSManagedMachinePoolSpecTaints]
        """

        self._taints = taints

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1beta1AWSManagedMachinePoolSpec):
            return True

        return self.to_dict() != other.to_dict()
