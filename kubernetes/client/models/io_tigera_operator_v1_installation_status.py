# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoTigeraOperatorV1InstallationStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'computed': 'IoTigeraOperatorV1InstallationStatusComputed',
        'image_set': 'str',
        'mtu': 'int',
        'variant': 'str'
    }

    attribute_map = {
        'computed': 'computed',
        'image_set': 'imageSet',
        'mtu': 'mtu',
        'variant': 'variant'
    }

    def __init__(self, computed=None, image_set=None, mtu=None, variant=None, local_vars_configuration=None):  # noqa: E501
        """IoTigeraOperatorV1InstallationStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._computed = None
        self._image_set = None
        self._mtu = None
        self._variant = None
        self.discriminator = None

        if computed is not None:
            self.computed = computed
        if image_set is not None:
            self.image_set = image_set
        if mtu is not None:
            self.mtu = mtu
        if variant is not None:
            self.variant = variant

    @property
    def computed(self):
        """Gets the computed of this IoTigeraOperatorV1InstallationStatus.  # noqa: E501


        :return: The computed of this IoTigeraOperatorV1InstallationStatus.  # noqa: E501
        :rtype: IoTigeraOperatorV1InstallationStatusComputed
        """
        return self._computed

    @computed.setter
    def computed(self, computed):
        """Sets the computed of this IoTigeraOperatorV1InstallationStatus.


        :param computed: The computed of this IoTigeraOperatorV1InstallationStatus.  # noqa: E501
        :type: IoTigeraOperatorV1InstallationStatusComputed
        """

        self._computed = computed

    @property
    def image_set(self):
        """Gets the image_set of this IoTigeraOperatorV1InstallationStatus.  # noqa: E501

        ImageSet is the name of the ImageSet being used, if there is an ImageSet that is being used. If an ImageSet is not being used then this will not be set.  # noqa: E501

        :return: The image_set of this IoTigeraOperatorV1InstallationStatus.  # noqa: E501
        :rtype: str
        """
        return self._image_set

    @image_set.setter
    def image_set(self, image_set):
        """Sets the image_set of this IoTigeraOperatorV1InstallationStatus.

        ImageSet is the name of the ImageSet being used, if there is an ImageSet that is being used. If an ImageSet is not being used then this will not be set.  # noqa: E501

        :param image_set: The image_set of this IoTigeraOperatorV1InstallationStatus.  # noqa: E501
        :type: str
        """

        self._image_set = image_set

    @property
    def mtu(self):
        """Gets the mtu of this IoTigeraOperatorV1InstallationStatus.  # noqa: E501

        MTU is the most recently observed value for pod network MTU. This may be an explicitly configured value, or based on Calico's native auto-detetion.  # noqa: E501

        :return: The mtu of this IoTigeraOperatorV1InstallationStatus.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this IoTigeraOperatorV1InstallationStatus.

        MTU is the most recently observed value for pod network MTU. This may be an explicitly configured value, or based on Calico's native auto-detetion.  # noqa: E501

        :param mtu: The mtu of this IoTigeraOperatorV1InstallationStatus.  # noqa: E501
        :type: int
        """

        self._mtu = mtu

    @property
    def variant(self):
        """Gets the variant of this IoTigeraOperatorV1InstallationStatus.  # noqa: E501

        Variant is the most recently observed installed variant - one of Calico or TigeraSecureEnterprise  # noqa: E501

        :return: The variant of this IoTigeraOperatorV1InstallationStatus.  # noqa: E501
        :rtype: str
        """
        return self._variant

    @variant.setter
    def variant(self, variant):
        """Sets the variant of this IoTigeraOperatorV1InstallationStatus.

        Variant is the most recently observed installed variant - one of Calico or TigeraSecureEnterprise  # noqa: E501

        :param variant: The variant of this IoTigeraOperatorV1InstallationStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["Calico", "TigeraSecureEnterprise"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and variant not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `variant` ({0}), must be one of {1}"  # noqa: E501
                .format(variant, allowed_values)
            )

        self._variant = variant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoTigeraOperatorV1InstallationStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoTigeraOperatorV1InstallationStatus):
            return True

        return self.to_dict() != other.to_dict()
