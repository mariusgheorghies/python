# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoCertManagerV1ClusterIssuerSpecVenafiTpp(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ca_bundle': 'str',
        'credentials_ref': 'IoCertManagerV1ClusterIssuerSpecVenafiTppCredentialsRef',
        'url': 'str'
    }

    attribute_map = {
        'ca_bundle': 'caBundle',
        'credentials_ref': 'credentialsRef',
        'url': 'url'
    }

    def __init__(self, ca_bundle=None, credentials_ref=None, url=None, local_vars_configuration=None):  # noqa: E501
        """IoCertManagerV1ClusterIssuerSpecVenafiTpp - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ca_bundle = None
        self._credentials_ref = None
        self._url = None
        self.discriminator = None

        if ca_bundle is not None:
            self.ca_bundle = ca_bundle
        self.credentials_ref = credentials_ref
        self.url = url

    @property
    def ca_bundle(self):
        """Gets the ca_bundle of this IoCertManagerV1ClusterIssuerSpecVenafiTpp.  # noqa: E501

        CABundle is a PEM encoded TLS certificate to use to verify connections to the TPP instance. If specified, system roots will not be used and the issuing CA for the TPP instance must be verifiable using the provided root. If not specified, the connection will be verified using the cert-manager system root certificates.  # noqa: E501

        :return: The ca_bundle of this IoCertManagerV1ClusterIssuerSpecVenafiTpp.  # noqa: E501
        :rtype: str
        """
        return self._ca_bundle

    @ca_bundle.setter
    def ca_bundle(self, ca_bundle):
        """Sets the ca_bundle of this IoCertManagerV1ClusterIssuerSpecVenafiTpp.

        CABundle is a PEM encoded TLS certificate to use to verify connections to the TPP instance. If specified, system roots will not be used and the issuing CA for the TPP instance must be verifiable using the provided root. If not specified, the connection will be verified using the cert-manager system root certificates.  # noqa: E501

        :param ca_bundle: The ca_bundle of this IoCertManagerV1ClusterIssuerSpecVenafiTpp.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                ca_bundle is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', ca_bundle)):  # noqa: E501
            raise ValueError(r"Invalid value for `ca_bundle`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._ca_bundle = ca_bundle

    @property
    def credentials_ref(self):
        """Gets the credentials_ref of this IoCertManagerV1ClusterIssuerSpecVenafiTpp.  # noqa: E501


        :return: The credentials_ref of this IoCertManagerV1ClusterIssuerSpecVenafiTpp.  # noqa: E501
        :rtype: IoCertManagerV1ClusterIssuerSpecVenafiTppCredentialsRef
        """
        return self._credentials_ref

    @credentials_ref.setter
    def credentials_ref(self, credentials_ref):
        """Sets the credentials_ref of this IoCertManagerV1ClusterIssuerSpecVenafiTpp.


        :param credentials_ref: The credentials_ref of this IoCertManagerV1ClusterIssuerSpecVenafiTpp.  # noqa: E501
        :type: IoCertManagerV1ClusterIssuerSpecVenafiTppCredentialsRef
        """
        if self.local_vars_configuration.client_side_validation and credentials_ref is None:  # noqa: E501
            raise ValueError("Invalid value for `credentials_ref`, must not be `None`")  # noqa: E501

        self._credentials_ref = credentials_ref

    @property
    def url(self):
        """Gets the url of this IoCertManagerV1ClusterIssuerSpecVenafiTpp.  # noqa: E501

        URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: \"https://tpp.example.com/vedsdk\".  # noqa: E501

        :return: The url of this IoCertManagerV1ClusterIssuerSpecVenafiTpp.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IoCertManagerV1ClusterIssuerSpecVenafiTpp.

        URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: \"https://tpp.example.com/vedsdk\".  # noqa: E501

        :param url: The url of this IoCertManagerV1ClusterIssuerSpecVenafiTpp.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoCertManagerV1ClusterIssuerSpecVenafiTpp):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoCertManagerV1ClusterIssuerSpecVenafiTpp):
            return True

        return self.to_dict() != other.to_dict()
