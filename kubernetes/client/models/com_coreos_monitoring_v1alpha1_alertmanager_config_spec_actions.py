# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'confirm': 'ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecConfirm',
        'name': 'str',
        'style': 'str',
        'text': 'str',
        'type': 'str',
        'url': 'str',
        'value': 'str'
    }

    attribute_map = {
        'confirm': 'confirm',
        'name': 'name',
        'style': 'style',
        'text': 'text',
        'type': 'type',
        'url': 'url',
        'value': 'value'
    }

    def __init__(self, confirm=None, name=None, style=None, text=None, type=None, url=None, value=None, local_vars_configuration=None):  # noqa: E501
        """ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._confirm = None
        self._name = None
        self._style = None
        self._text = None
        self._type = None
        self._url = None
        self._value = None
        self.discriminator = None

        if confirm is not None:
            self.confirm = confirm
        if name is not None:
            self.name = name
        if style is not None:
            self.style = style
        self.text = text
        self.type = type
        if url is not None:
            self.url = url
        if value is not None:
            self.value = value

    @property
    def confirm(self):
        """Gets the confirm of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.  # noqa: E501


        :return: The confirm of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.  # noqa: E501
        :rtype: ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecConfirm
        """
        return self._confirm

    @confirm.setter
    def confirm(self, confirm):
        """Sets the confirm of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.


        :param confirm: The confirm of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.  # noqa: E501
        :type: ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecConfirm
        """

        self._confirm = confirm

    @property
    def name(self):
        """Gets the name of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.  # noqa: E501


        :return: The name of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.


        :param name: The name of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def style(self):
        """Gets the style of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.  # noqa: E501


        :return: The style of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.  # noqa: E501
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.


        :param style: The style of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.  # noqa: E501
        :type: str
        """

        self._style = style

    @property
    def text(self):
        """Gets the text of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.  # noqa: E501


        :return: The text of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.


        :param text: The text of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and text is None:  # noqa: E501
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                text is not None and len(text) < 1):
            raise ValueError("Invalid value for `text`, length must be greater than or equal to `1`")  # noqa: E501

        self._text = text

    @property
    def type(self):
        """Gets the type of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.  # noqa: E501


        :return: The type of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.


        :param type: The type of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                type is not None and len(type) < 1):
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")  # noqa: E501

        self._type = type

    @property
    def url(self):
        """Gets the url of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.  # noqa: E501


        :return: The url of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.


        :param url: The url of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def value(self):
        """Gets the value of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.  # noqa: E501


        :return: The value of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.


        :param value: The value of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecActions):
            return True

        return self.to_dict() != other.to_dict()
