# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoExternalSecretsV1alpha1ExternalSecretSpecTarget(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'creation_policy': 'str',
        'immutable': 'bool',
        'name': 'str',
        'template': 'IoExternalSecretsV1alpha1ExternalSecretSpecTargetTemplate'
    }

    attribute_map = {
        'creation_policy': 'creationPolicy',
        'immutable': 'immutable',
        'name': 'name',
        'template': 'template'
    }

    def __init__(self, creation_policy=None, immutable=None, name=None, template=None, local_vars_configuration=None):  # noqa: E501
        """IoExternalSecretsV1alpha1ExternalSecretSpecTarget - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._creation_policy = None
        self._immutable = None
        self._name = None
        self._template = None
        self.discriminator = None

        if creation_policy is not None:
            self.creation_policy = creation_policy
        if immutable is not None:
            self.immutable = immutable
        if name is not None:
            self.name = name
        if template is not None:
            self.template = template

    @property
    def creation_policy(self):
        """Gets the creation_policy of this IoExternalSecretsV1alpha1ExternalSecretSpecTarget.  # noqa: E501

        CreationPolicy defines rules on how to create the resulting Secret Defaults to 'Owner'  # noqa: E501

        :return: The creation_policy of this IoExternalSecretsV1alpha1ExternalSecretSpecTarget.  # noqa: E501
        :rtype: str
        """
        return self._creation_policy

    @creation_policy.setter
    def creation_policy(self, creation_policy):
        """Sets the creation_policy of this IoExternalSecretsV1alpha1ExternalSecretSpecTarget.

        CreationPolicy defines rules on how to create the resulting Secret Defaults to 'Owner'  # noqa: E501

        :param creation_policy: The creation_policy of this IoExternalSecretsV1alpha1ExternalSecretSpecTarget.  # noqa: E501
        :type: str
        """

        self._creation_policy = creation_policy

    @property
    def immutable(self):
        """Gets the immutable of this IoExternalSecretsV1alpha1ExternalSecretSpecTarget.  # noqa: E501

        Immutable defines if the final secret will be immutable  # noqa: E501

        :return: The immutable of this IoExternalSecretsV1alpha1ExternalSecretSpecTarget.  # noqa: E501
        :rtype: bool
        """
        return self._immutable

    @immutable.setter
    def immutable(self, immutable):
        """Sets the immutable of this IoExternalSecretsV1alpha1ExternalSecretSpecTarget.

        Immutable defines if the final secret will be immutable  # noqa: E501

        :param immutable: The immutable of this IoExternalSecretsV1alpha1ExternalSecretSpecTarget.  # noqa: E501
        :type: bool
        """

        self._immutable = immutable

    @property
    def name(self):
        """Gets the name of this IoExternalSecretsV1alpha1ExternalSecretSpecTarget.  # noqa: E501

        Name defines the name of the Secret resource to be managed This field is immutable Defaults to the .metadata.name of the ExternalSecret resource  # noqa: E501

        :return: The name of this IoExternalSecretsV1alpha1ExternalSecretSpecTarget.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IoExternalSecretsV1alpha1ExternalSecretSpecTarget.

        Name defines the name of the Secret resource to be managed This field is immutable Defaults to the .metadata.name of the ExternalSecret resource  # noqa: E501

        :param name: The name of this IoExternalSecretsV1alpha1ExternalSecretSpecTarget.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def template(self):
        """Gets the template of this IoExternalSecretsV1alpha1ExternalSecretSpecTarget.  # noqa: E501


        :return: The template of this IoExternalSecretsV1alpha1ExternalSecretSpecTarget.  # noqa: E501
        :rtype: IoExternalSecretsV1alpha1ExternalSecretSpecTargetTemplate
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this IoExternalSecretsV1alpha1ExternalSecretSpecTarget.


        :param template: The template of this IoExternalSecretsV1alpha1ExternalSecretSpecTarget.  # noqa: E501
        :type: IoExternalSecretsV1alpha1ExternalSecretSpecTargetTemplate
        """

        self._template = template

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoExternalSecretsV1alpha1ExternalSecretSpecTarget):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoExternalSecretsV1alpha1ExternalSecretSpecTarget):
            return True

        return self.to_dict() != other.to_dict()
