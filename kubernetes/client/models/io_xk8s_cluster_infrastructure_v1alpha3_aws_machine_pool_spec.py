# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'additional_tags': 'dict(str, str)',
        'availability_zones': 'list[str]',
        'aws_launch_template': 'IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecAwsLaunchTemplate',
        'capacity_rebalance': 'bool',
        'default_cool_down': 'str',
        'max_size': 'int',
        'min_size': 'int',
        'mixed_instances_policy': 'IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecMixedInstancesPolicy',
        'provider_id': 'str',
        'provider_id_list': 'list[str]',
        'refresh_preferences': 'IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecRefreshPreferences',
        'subnets': 'list[IoXK8sClusterInfrastructureV1alpha3AWSMachineSpecAdditionalSecurityGroups]'
    }

    attribute_map = {
        'additional_tags': 'additionalTags',
        'availability_zones': 'availabilityZones',
        'aws_launch_template': 'awsLaunchTemplate',
        'capacity_rebalance': 'capacityRebalance',
        'default_cool_down': 'defaultCoolDown',
        'max_size': 'maxSize',
        'min_size': 'minSize',
        'mixed_instances_policy': 'mixedInstancesPolicy',
        'provider_id': 'providerID',
        'provider_id_list': 'providerIDList',
        'refresh_preferences': 'refreshPreferences',
        'subnets': 'subnets'
    }

    def __init__(self, additional_tags=None, availability_zones=None, aws_launch_template=None, capacity_rebalance=None, default_cool_down=None, max_size=None, min_size=None, mixed_instances_policy=None, provider_id=None, provider_id_list=None, refresh_preferences=None, subnets=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._additional_tags = None
        self._availability_zones = None
        self._aws_launch_template = None
        self._capacity_rebalance = None
        self._default_cool_down = None
        self._max_size = None
        self._min_size = None
        self._mixed_instances_policy = None
        self._provider_id = None
        self._provider_id_list = None
        self._refresh_preferences = None
        self._subnets = None
        self.discriminator = None

        if additional_tags is not None:
            self.additional_tags = additional_tags
        if availability_zones is not None:
            self.availability_zones = availability_zones
        self.aws_launch_template = aws_launch_template
        if capacity_rebalance is not None:
            self.capacity_rebalance = capacity_rebalance
        if default_cool_down is not None:
            self.default_cool_down = default_cool_down
        self.max_size = max_size
        self.min_size = min_size
        if mixed_instances_policy is not None:
            self.mixed_instances_policy = mixed_instances_policy
        if provider_id is not None:
            self.provider_id = provider_id
        if provider_id_list is not None:
            self.provider_id_list = provider_id_list
        if refresh_preferences is not None:
            self.refresh_preferences = refresh_preferences
        if subnets is not None:
            self.subnets = subnets

    @property
    def additional_tags(self):
        """Gets the additional_tags of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501

        AdditionalTags is an optional set of tags to add to an instance, in addition to the ones added by default by the AWS provider.  # noqa: E501

        :return: The additional_tags of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._additional_tags

    @additional_tags.setter
    def additional_tags(self, additional_tags):
        """Sets the additional_tags of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.

        AdditionalTags is an optional set of tags to add to an instance, in addition to the ones added by default by the AWS provider.  # noqa: E501

        :param additional_tags: The additional_tags of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._additional_tags = additional_tags

    @property
    def availability_zones(self):
        """Gets the availability_zones of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501

        AvailabilityZones is an array of availability zones instances can run in  # noqa: E501

        :return: The availability_zones of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._availability_zones

    @availability_zones.setter
    def availability_zones(self, availability_zones):
        """Sets the availability_zones of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.

        AvailabilityZones is an array of availability zones instances can run in  # noqa: E501

        :param availability_zones: The availability_zones of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501
        :type: list[str]
        """

        self._availability_zones = availability_zones

    @property
    def aws_launch_template(self):
        """Gets the aws_launch_template of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501


        :return: The aws_launch_template of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501
        :rtype: IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecAwsLaunchTemplate
        """
        return self._aws_launch_template

    @aws_launch_template.setter
    def aws_launch_template(self, aws_launch_template):
        """Sets the aws_launch_template of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.


        :param aws_launch_template: The aws_launch_template of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501
        :type: IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecAwsLaunchTemplate
        """
        if self.local_vars_configuration.client_side_validation and aws_launch_template is None:  # noqa: E501
            raise ValueError("Invalid value for `aws_launch_template`, must not be `None`")  # noqa: E501

        self._aws_launch_template = aws_launch_template

    @property
    def capacity_rebalance(self):
        """Gets the capacity_rebalance of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501

        Enable or disable the capacity rebalance autoscaling group feature  # noqa: E501

        :return: The capacity_rebalance of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501
        :rtype: bool
        """
        return self._capacity_rebalance

    @capacity_rebalance.setter
    def capacity_rebalance(self, capacity_rebalance):
        """Sets the capacity_rebalance of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.

        Enable or disable the capacity rebalance autoscaling group feature  # noqa: E501

        :param capacity_rebalance: The capacity_rebalance of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501
        :type: bool
        """

        self._capacity_rebalance = capacity_rebalance

    @property
    def default_cool_down(self):
        """Gets the default_cool_down of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501

        The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. If no value is supplied by user a default value of 300 seconds is set  # noqa: E501

        :return: The default_cool_down of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501
        :rtype: str
        """
        return self._default_cool_down

    @default_cool_down.setter
    def default_cool_down(self, default_cool_down):
        """Sets the default_cool_down of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.

        The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. If no value is supplied by user a default value of 300 seconds is set  # noqa: E501

        :param default_cool_down: The default_cool_down of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501
        :type: str
        """

        self._default_cool_down = default_cool_down

    @property
    def max_size(self):
        """Gets the max_size of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501

        MaxSize defines the maximum size of the group.  # noqa: E501

        :return: The max_size of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501
        :rtype: int
        """
        return self._max_size

    @max_size.setter
    def max_size(self, max_size):
        """Sets the max_size of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.

        MaxSize defines the maximum size of the group.  # noqa: E501

        :param max_size: The max_size of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and max_size is None:  # noqa: E501
            raise ValueError("Invalid value for `max_size`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                max_size is not None and max_size < 1):  # noqa: E501
            raise ValueError("Invalid value for `max_size`, must be a value greater than or equal to `1`")  # noqa: E501

        self._max_size = max_size

    @property
    def min_size(self):
        """Gets the min_size of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501

        MinSize defines the minimum size of the group.  # noqa: E501

        :return: The min_size of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501
        :rtype: int
        """
        return self._min_size

    @min_size.setter
    def min_size(self, min_size):
        """Sets the min_size of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.

        MinSize defines the minimum size of the group.  # noqa: E501

        :param min_size: The min_size of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and min_size is None:  # noqa: E501
            raise ValueError("Invalid value for `min_size`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                min_size is not None and min_size < 1):  # noqa: E501
            raise ValueError("Invalid value for `min_size`, must be a value greater than or equal to `1`")  # noqa: E501

        self._min_size = min_size

    @property
    def mixed_instances_policy(self):
        """Gets the mixed_instances_policy of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501


        :return: The mixed_instances_policy of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501
        :rtype: IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecMixedInstancesPolicy
        """
        return self._mixed_instances_policy

    @mixed_instances_policy.setter
    def mixed_instances_policy(self, mixed_instances_policy):
        """Sets the mixed_instances_policy of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.


        :param mixed_instances_policy: The mixed_instances_policy of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501
        :type: IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecMixedInstancesPolicy
        """

        self._mixed_instances_policy = mixed_instances_policy

    @property
    def provider_id(self):
        """Gets the provider_id of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501

        ProviderID is the ARN of the associated ASG  # noqa: E501

        :return: The provider_id of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.

        ProviderID is the ARN of the associated ASG  # noqa: E501

        :param provider_id: The provider_id of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501
        :type: str
        """

        self._provider_id = provider_id

    @property
    def provider_id_list(self):
        """Gets the provider_id_list of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501

        ProviderIDList are the identification IDs of machine instances provided by the provider. This field must match the provider IDs as seen on the node objects corresponding to a machine pool's machine instances.  # noqa: E501

        :return: The provider_id_list of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._provider_id_list

    @provider_id_list.setter
    def provider_id_list(self, provider_id_list):
        """Sets the provider_id_list of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.

        ProviderIDList are the identification IDs of machine instances provided by the provider. This field must match the provider IDs as seen on the node objects corresponding to a machine pool's machine instances.  # noqa: E501

        :param provider_id_list: The provider_id_list of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501
        :type: list[str]
        """

        self._provider_id_list = provider_id_list

    @property
    def refresh_preferences(self):
        """Gets the refresh_preferences of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501


        :return: The refresh_preferences of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501
        :rtype: IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecRefreshPreferences
        """
        return self._refresh_preferences

    @refresh_preferences.setter
    def refresh_preferences(self, refresh_preferences):
        """Sets the refresh_preferences of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.


        :param refresh_preferences: The refresh_preferences of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501
        :type: IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecRefreshPreferences
        """

        self._refresh_preferences = refresh_preferences

    @property
    def subnets(self):
        """Gets the subnets of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501

        Subnets is an array of subnet configurations  # noqa: E501

        :return: The subnets of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501
        :rtype: list[IoXK8sClusterInfrastructureV1alpha3AWSMachineSpecAdditionalSecurityGroups]
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.

        Subnets is an array of subnet configurations  # noqa: E501

        :param subnets: The subnets of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec.  # noqa: E501
        :type: list[IoXK8sClusterInfrastructureV1alpha3AWSMachineSpecAdditionalSecurityGroups]
        """

        self._subnets = subnets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpec):
            return True

        return self.to_dict() != other.to_dict()
