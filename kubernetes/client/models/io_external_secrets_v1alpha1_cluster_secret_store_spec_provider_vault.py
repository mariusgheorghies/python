# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auth': 'IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth',
        'ca_bundle': 'str',
        'ca_provider': 'IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultCaProvider',
        'forward_inconsistent': 'bool',
        'namespace': 'str',
        'path': 'str',
        'read_your_writes': 'bool',
        'server': 'str',
        'version': 'str'
    }

    attribute_map = {
        'auth': 'auth',
        'ca_bundle': 'caBundle',
        'ca_provider': 'caProvider',
        'forward_inconsistent': 'forwardInconsistent',
        'namespace': 'namespace',
        'path': 'path',
        'read_your_writes': 'readYourWrites',
        'server': 'server',
        'version': 'version'
    }

    def __init__(self, auth=None, ca_bundle=None, ca_provider=None, forward_inconsistent=None, namespace=None, path=None, read_your_writes=None, server=None, version=None, local_vars_configuration=None):  # noqa: E501
        """IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._auth = None
        self._ca_bundle = None
        self._ca_provider = None
        self._forward_inconsistent = None
        self._namespace = None
        self._path = None
        self._read_your_writes = None
        self._server = None
        self._version = None
        self.discriminator = None

        self.auth = auth
        if ca_bundle is not None:
            self.ca_bundle = ca_bundle
        if ca_provider is not None:
            self.ca_provider = ca_provider
        if forward_inconsistent is not None:
            self.forward_inconsistent = forward_inconsistent
        if namespace is not None:
            self.namespace = namespace
        if path is not None:
            self.path = path
        if read_your_writes is not None:
            self.read_your_writes = read_your_writes
        self.server = server
        if version is not None:
            self.version = version

    @property
    def auth(self):
        """Gets the auth of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501


        :return: The auth of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501
        :rtype: IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.


        :param auth: The auth of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501
        :type: IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth
        """
        if self.local_vars_configuration.client_side_validation and auth is None:  # noqa: E501
            raise ValueError("Invalid value for `auth`, must not be `None`")  # noqa: E501

        self._auth = auth

    @property
    def ca_bundle(self):
        """Gets the ca_bundle of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501

        PEM encoded CA bundle used to validate Vault server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.  # noqa: E501

        :return: The ca_bundle of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501
        :rtype: str
        """
        return self._ca_bundle

    @ca_bundle.setter
    def ca_bundle(self, ca_bundle):
        """Sets the ca_bundle of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.

        PEM encoded CA bundle used to validate Vault server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.  # noqa: E501

        :param ca_bundle: The ca_bundle of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                ca_bundle is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', ca_bundle)):  # noqa: E501
            raise ValueError(r"Invalid value for `ca_bundle`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._ca_bundle = ca_bundle

    @property
    def ca_provider(self):
        """Gets the ca_provider of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501


        :return: The ca_provider of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501
        :rtype: IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultCaProvider
        """
        return self._ca_provider

    @ca_provider.setter
    def ca_provider(self, ca_provider):
        """Sets the ca_provider of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.


        :param ca_provider: The ca_provider of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501
        :type: IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultCaProvider
        """

        self._ca_provider = ca_provider

    @property
    def forward_inconsistent(self):
        """Gets the forward_inconsistent of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501

        ForwardInconsistent tells Vault to forward read-after-write requests to the Vault leader instead of simply retrying within a loop. This can increase performance if the option is enabled serverside. https://www.vaultproject.io/docs/configuration/replication#allow_forwarding_via_header  # noqa: E501

        :return: The forward_inconsistent of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501
        :rtype: bool
        """
        return self._forward_inconsistent

    @forward_inconsistent.setter
    def forward_inconsistent(self, forward_inconsistent):
        """Sets the forward_inconsistent of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.

        ForwardInconsistent tells Vault to forward read-after-write requests to the Vault leader instead of simply retrying within a loop. This can increase performance if the option is enabled serverside. https://www.vaultproject.io/docs/configuration/replication#allow_forwarding_via_header  # noqa: E501

        :param forward_inconsistent: The forward_inconsistent of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501
        :type: bool
        """

        self._forward_inconsistent = forward_inconsistent

    @property
    def namespace(self):
        """Gets the namespace of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501

        Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: \"ns1\". More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces  # noqa: E501

        :return: The namespace of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.

        Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: \"ns1\". More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces  # noqa: E501

        :param namespace: The namespace of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def path(self):
        """Gets the path of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501

        Path is the mount path of the Vault KV backend endpoint, e.g: \"secret\". The v2 KV secret engine version specific \"/data\" path suffix for fetching secrets from Vault is optional and will be appended if not present in specified path.  # noqa: E501

        :return: The path of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.

        Path is the mount path of the Vault KV backend endpoint, e.g: \"secret\". The v2 KV secret engine version specific \"/data\" path suffix for fetching secrets from Vault is optional and will be appended if not present in specified path.  # noqa: E501

        :param path: The path of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def read_your_writes(self):
        """Gets the read_your_writes of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501

        ReadYourWrites ensures isolated read-after-write semantics by providing discovered cluster replication states in each request. More information about eventual consistency in Vault can be found here https://www.vaultproject.io/docs/enterprise/consistency  # noqa: E501

        :return: The read_your_writes of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501
        :rtype: bool
        """
        return self._read_your_writes

    @read_your_writes.setter
    def read_your_writes(self, read_your_writes):
        """Sets the read_your_writes of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.

        ReadYourWrites ensures isolated read-after-write semantics by providing discovered cluster replication states in each request. More information about eventual consistency in Vault can be found here https://www.vaultproject.io/docs/enterprise/consistency  # noqa: E501

        :param read_your_writes: The read_your_writes of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501
        :type: bool
        """

        self._read_your_writes = read_your_writes

    @property
    def server(self):
        """Gets the server of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501

        Server is the connection address for the Vault server, e.g: \"https://vault.example.com:8200\".  # noqa: E501

        :return: The server of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.

        Server is the connection address for the Vault server, e.g: \"https://vault.example.com:8200\".  # noqa: E501

        :param server: The server of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and server is None:  # noqa: E501
            raise ValueError("Invalid value for `server`, must not be `None`")  # noqa: E501

        self._server = server

    @property
    def version(self):
        """Gets the version of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501

        Version is the Vault KV secret engine version. This can be either \"v1\" or \"v2\". Version defaults to \"v2\".  # noqa: E501

        :return: The version of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.

        Version is the Vault KV secret engine version. This can be either \"v1\" or \"v2\". Version defaults to \"v2\".  # noqa: E501

        :param version: The version of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault.  # noqa: E501
        :type: str
        """
        allowed_values = ["v1", "v2"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and version not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `version` ({0}), must be one of {1}"  # noqa: E501
                .format(version, allowed_values)
            )

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVault):
            return True

        return self.to_dict() != other.to_dict()
