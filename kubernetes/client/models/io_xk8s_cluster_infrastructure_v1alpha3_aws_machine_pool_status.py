# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'asg_status': 'str',
        'conditions': 'list[IoXK8sClusterAddonsV1alpha3ClusterResourceSetStatusConditions]',
        'failure_message': 'str',
        'failure_reason': 'str',
        'instances': 'list[IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatusInstances]',
        'launch_template_id': 'str',
        'ready': 'bool',
        'replicas': 'int'
    }

    attribute_map = {
        'asg_status': 'asgStatus',
        'conditions': 'conditions',
        'failure_message': 'failureMessage',
        'failure_reason': 'failureReason',
        'instances': 'instances',
        'launch_template_id': 'launchTemplateID',
        'ready': 'ready',
        'replicas': 'replicas'
    }

    def __init__(self, asg_status=None, conditions=None, failure_message=None, failure_reason=None, instances=None, launch_template_id=None, ready=None, replicas=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._asg_status = None
        self._conditions = None
        self._failure_message = None
        self._failure_reason = None
        self._instances = None
        self._launch_template_id = None
        self._ready = None
        self._replicas = None
        self.discriminator = None

        if asg_status is not None:
            self.asg_status = asg_status
        if conditions is not None:
            self.conditions = conditions
        if failure_message is not None:
            self.failure_message = failure_message
        if failure_reason is not None:
            self.failure_reason = failure_reason
        if instances is not None:
            self.instances = instances
        if launch_template_id is not None:
            self.launch_template_id = launch_template_id
        if ready is not None:
            self.ready = ready
        if replicas is not None:
            self.replicas = replicas

    @property
    def asg_status(self):
        """Gets the asg_status of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.  # noqa: E501

        ASGStatus is a status string returned by the autoscaling API  # noqa: E501

        :return: The asg_status of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.  # noqa: E501
        :rtype: str
        """
        return self._asg_status

    @asg_status.setter
    def asg_status(self, asg_status):
        """Sets the asg_status of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.

        ASGStatus is a status string returned by the autoscaling API  # noqa: E501

        :param asg_status: The asg_status of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.  # noqa: E501
        :type: str
        """

        self._asg_status = asg_status

    @property
    def conditions(self):
        """Gets the conditions of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.  # noqa: E501

        Conditions defines current service state of the AWSMachinePool.  # noqa: E501

        :return: The conditions of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.  # noqa: E501
        :rtype: list[IoXK8sClusterAddonsV1alpha3ClusterResourceSetStatusConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.

        Conditions defines current service state of the AWSMachinePool.  # noqa: E501

        :param conditions: The conditions of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.  # noqa: E501
        :type: list[IoXK8sClusterAddonsV1alpha3ClusterResourceSetStatusConditions]
        """

        self._conditions = conditions

    @property
    def failure_message(self):
        """Gets the failure_message of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.  # noqa: E501

        FailureMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption.   This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.   Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.  # noqa: E501

        :return: The failure_message of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.  # noqa: E501
        :rtype: str
        """
        return self._failure_message

    @failure_message.setter
    def failure_message(self, failure_message):
        """Sets the failure_message of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.

        FailureMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption.   This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.   Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.  # noqa: E501

        :param failure_message: The failure_message of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.  # noqa: E501
        :type: str
        """

        self._failure_message = failure_message

    @property
    def failure_reason(self):
        """Gets the failure_reason of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.  # noqa: E501

        FailureReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation.   This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.   Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.  # noqa: E501

        :return: The failure_reason of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.

        FailureReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation.   This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.   Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.  # noqa: E501

        :param failure_reason: The failure_reason of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.  # noqa: E501
        :type: str
        """

        self._failure_reason = failure_reason

    @property
    def instances(self):
        """Gets the instances of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.  # noqa: E501

        Instances contains the status for each instance in the pool  # noqa: E501

        :return: The instances of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.  # noqa: E501
        :rtype: list[IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatusInstances]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.

        Instances contains the status for each instance in the pool  # noqa: E501

        :param instances: The instances of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.  # noqa: E501
        :type: list[IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatusInstances]
        """

        self._instances = instances

    @property
    def launch_template_id(self):
        """Gets the launch_template_id of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.  # noqa: E501

        The ID of the launch template  # noqa: E501

        :return: The launch_template_id of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.  # noqa: E501
        :rtype: str
        """
        return self._launch_template_id

    @launch_template_id.setter
    def launch_template_id(self, launch_template_id):
        """Sets the launch_template_id of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.

        The ID of the launch template  # noqa: E501

        :param launch_template_id: The launch_template_id of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.  # noqa: E501
        :type: str
        """

        self._launch_template_id = launch_template_id

    @property
    def ready(self):
        """Gets the ready of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.  # noqa: E501

        Ready is true when the provider resource is ready.  # noqa: E501

        :return: The ready of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.  # noqa: E501
        :rtype: bool
        """
        return self._ready

    @ready.setter
    def ready(self, ready):
        """Sets the ready of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.

        Ready is true when the provider resource is ready.  # noqa: E501

        :param ready: The ready of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.  # noqa: E501
        :type: bool
        """

        self._ready = ready

    @property
    def replicas(self):
        """Gets the replicas of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.  # noqa: E501

        Replicas is the most recently observed number of replicas  # noqa: E501

        :return: The replicas of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.

        Replicas is the most recently observed number of replicas  # noqa: E501

        :param replicas: The replicas of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolStatus):
            return True

        return self.to_dict() != other.to_dict()
