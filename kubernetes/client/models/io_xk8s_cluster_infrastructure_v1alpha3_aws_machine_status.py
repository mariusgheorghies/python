# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'addresses': 'list[IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusBastionAddresses]',
        'conditions': 'list[IoXK8sClusterAddonsV1alpha3ClusterResourceSetStatusConditions]',
        'failure_message': 'str',
        'failure_reason': 'str',
        'instance_state': 'str',
        'interruptible': 'bool',
        'ready': 'bool'
    }

    attribute_map = {
        'addresses': 'addresses',
        'conditions': 'conditions',
        'failure_message': 'failureMessage',
        'failure_reason': 'failureReason',
        'instance_state': 'instanceState',
        'interruptible': 'interruptible',
        'ready': 'ready'
    }

    def __init__(self, addresses=None, conditions=None, failure_message=None, failure_reason=None, instance_state=None, interruptible=None, ready=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._addresses = None
        self._conditions = None
        self._failure_message = None
        self._failure_reason = None
        self._instance_state = None
        self._interruptible = None
        self._ready = None
        self.discriminator = None

        if addresses is not None:
            self.addresses = addresses
        if conditions is not None:
            self.conditions = conditions
        if failure_message is not None:
            self.failure_message = failure_message
        if failure_reason is not None:
            self.failure_reason = failure_reason
        if instance_state is not None:
            self.instance_state = instance_state
        if interruptible is not None:
            self.interruptible = interruptible
        if ready is not None:
            self.ready = ready

    @property
    def addresses(self):
        """Gets the addresses of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.  # noqa: E501

        Addresses contains the AWS instance associated addresses.  # noqa: E501

        :return: The addresses of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.  # noqa: E501
        :rtype: list[IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusBastionAddresses]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.

        Addresses contains the AWS instance associated addresses.  # noqa: E501

        :param addresses: The addresses of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.  # noqa: E501
        :type: list[IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusBastionAddresses]
        """

        self._addresses = addresses

    @property
    def conditions(self):
        """Gets the conditions of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.  # noqa: E501

        Conditions defines current service state of the AWSMachine.  # noqa: E501

        :return: The conditions of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.  # noqa: E501
        :rtype: list[IoXK8sClusterAddonsV1alpha3ClusterResourceSetStatusConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.

        Conditions defines current service state of the AWSMachine.  # noqa: E501

        :param conditions: The conditions of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.  # noqa: E501
        :type: list[IoXK8sClusterAddonsV1alpha3ClusterResourceSetStatusConditions]
        """

        self._conditions = conditions

    @property
    def failure_message(self):
        """Gets the failure_message of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.  # noqa: E501

        FailureMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption.   This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.   Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.  # noqa: E501

        :return: The failure_message of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.  # noqa: E501
        :rtype: str
        """
        return self._failure_message

    @failure_message.setter
    def failure_message(self, failure_message):
        """Sets the failure_message of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.

        FailureMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption.   This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.   Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.  # noqa: E501

        :param failure_message: The failure_message of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.  # noqa: E501
        :type: str
        """

        self._failure_message = failure_message

    @property
    def failure_reason(self):
        """Gets the failure_reason of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.  # noqa: E501

        FailureReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation.   This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.   Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.  # noqa: E501

        :return: The failure_reason of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.

        FailureReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation.   This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.   Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.  # noqa: E501

        :param failure_reason: The failure_reason of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.  # noqa: E501
        :type: str
        """

        self._failure_reason = failure_reason

    @property
    def instance_state(self):
        """Gets the instance_state of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.  # noqa: E501

        InstanceState is the state of the AWS instance for this machine.  # noqa: E501

        :return: The instance_state of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.  # noqa: E501
        :rtype: str
        """
        return self._instance_state

    @instance_state.setter
    def instance_state(self, instance_state):
        """Sets the instance_state of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.

        InstanceState is the state of the AWS instance for this machine.  # noqa: E501

        :param instance_state: The instance_state of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.  # noqa: E501
        :type: str
        """

        self._instance_state = instance_state

    @property
    def interruptible(self):
        """Gets the interruptible of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.  # noqa: E501

        Interruptible reports that this machine is using spot instances and can therefore be interrupted by CAPI when it receives a notice that the spot instance is to be terminated by AWS. This will be set to true when SpotMarketOptions is not nil (i.e. this machine is using a spot instance).  # noqa: E501

        :return: The interruptible of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.  # noqa: E501
        :rtype: bool
        """
        return self._interruptible

    @interruptible.setter
    def interruptible(self, interruptible):
        """Sets the interruptible of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.

        Interruptible reports that this machine is using spot instances and can therefore be interrupted by CAPI when it receives a notice that the spot instance is to be terminated by AWS. This will be set to true when SpotMarketOptions is not nil (i.e. this machine is using a spot instance).  # noqa: E501

        :param interruptible: The interruptible of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.  # noqa: E501
        :type: bool
        """

        self._interruptible = interruptible

    @property
    def ready(self):
        """Gets the ready of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.  # noqa: E501

        Ready is true when the provider resource is ready.  # noqa: E501

        :return: The ready of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.  # noqa: E501
        :rtype: bool
        """
        return self._ready

    @ready.setter
    def ready(self, ready):
        """Sets the ready of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.

        Ready is true when the provider resource is ready.  # noqa: E501

        :param ready: The ready of this IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus.  # noqa: E501
        :type: bool
        """

        self._ready = ready

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1alpha3AWSMachineStatus):
            return True

        return self.to_dict() != other.to_dict()
