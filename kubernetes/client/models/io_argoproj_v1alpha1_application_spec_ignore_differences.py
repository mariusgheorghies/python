# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'group': 'str',
        'jq_path_expressions': 'list[str]',
        'json_pointers': 'list[str]',
        'kind': 'str',
        'managed_fields_managers': 'list[str]',
        'name': 'str',
        'namespace': 'str'
    }

    attribute_map = {
        'group': 'group',
        'jq_path_expressions': 'jqPathExpressions',
        'json_pointers': 'jsonPointers',
        'kind': 'kind',
        'managed_fields_managers': 'managedFieldsManagers',
        'name': 'name',
        'namespace': 'namespace'
    }

    def __init__(self, group=None, jq_path_expressions=None, json_pointers=None, kind=None, managed_fields_managers=None, name=None, namespace=None, local_vars_configuration=None):  # noqa: E501
        """IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._group = None
        self._jq_path_expressions = None
        self._json_pointers = None
        self._kind = None
        self._managed_fields_managers = None
        self._name = None
        self._namespace = None
        self.discriminator = None

        if group is not None:
            self.group = group
        if jq_path_expressions is not None:
            self.jq_path_expressions = jq_path_expressions
        if json_pointers is not None:
            self.json_pointers = json_pointers
        self.kind = kind
        if managed_fields_managers is not None:
            self.managed_fields_managers = managed_fields_managers
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace

    @property
    def group(self):
        """Gets the group of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.  # noqa: E501


        :return: The group of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.


        :param group: The group of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def jq_path_expressions(self):
        """Gets the jq_path_expressions of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.  # noqa: E501


        :return: The jq_path_expressions of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.  # noqa: E501
        :rtype: list[str]
        """
        return self._jq_path_expressions

    @jq_path_expressions.setter
    def jq_path_expressions(self, jq_path_expressions):
        """Sets the jq_path_expressions of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.


        :param jq_path_expressions: The jq_path_expressions of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.  # noqa: E501
        :type: list[str]
        """

        self._jq_path_expressions = jq_path_expressions

    @property
    def json_pointers(self):
        """Gets the json_pointers of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.  # noqa: E501


        :return: The json_pointers of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.  # noqa: E501
        :rtype: list[str]
        """
        return self._json_pointers

    @json_pointers.setter
    def json_pointers(self, json_pointers):
        """Sets the json_pointers of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.


        :param json_pointers: The json_pointers of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.  # noqa: E501
        :type: list[str]
        """

        self._json_pointers = json_pointers

    @property
    def kind(self):
        """Gets the kind of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.  # noqa: E501


        :return: The kind of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.


        :param kind: The kind of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and kind is None:  # noqa: E501
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def managed_fields_managers(self):
        """Gets the managed_fields_managers of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.  # noqa: E501

        ManagedFieldsManagers is a list of trusted managers. Fields mutated by those managers will take precedence over the desired state defined in the SCM and won't be displayed in diffs  # noqa: E501

        :return: The managed_fields_managers of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.  # noqa: E501
        :rtype: list[str]
        """
        return self._managed_fields_managers

    @managed_fields_managers.setter
    def managed_fields_managers(self, managed_fields_managers):
        """Sets the managed_fields_managers of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.

        ManagedFieldsManagers is a list of trusted managers. Fields mutated by those managers will take precedence over the desired state defined in the SCM and won't be displayed in diffs  # noqa: E501

        :param managed_fields_managers: The managed_fields_managers of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.  # noqa: E501
        :type: list[str]
        """

        self._managed_fields_managers = managed_fields_managers

    @property
    def name(self):
        """Gets the name of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.  # noqa: E501


        :return: The name of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.


        :param name: The name of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.  # noqa: E501


        :return: The namespace of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.


        :param namespace: The namespace of this IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojV1alpha1ApplicationSpecIgnoreDifferences):
            return True

        return self.to_dict() != other.to_dict()
