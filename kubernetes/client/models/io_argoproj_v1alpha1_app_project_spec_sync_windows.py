# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoArgoprojV1alpha1AppProjectSpecSyncWindows(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'applications': 'list[str]',
        'clusters': 'list[str]',
        'duration': 'str',
        'kind': 'str',
        'manual_sync': 'bool',
        'namespaces': 'list[str]',
        'schedule': 'str',
        'time_zone': 'str'
    }

    attribute_map = {
        'applications': 'applications',
        'clusters': 'clusters',
        'duration': 'duration',
        'kind': 'kind',
        'manual_sync': 'manualSync',
        'namespaces': 'namespaces',
        'schedule': 'schedule',
        'time_zone': 'timeZone'
    }

    def __init__(self, applications=None, clusters=None, duration=None, kind=None, manual_sync=None, namespaces=None, schedule=None, time_zone=None, local_vars_configuration=None):  # noqa: E501
        """IoArgoprojV1alpha1AppProjectSpecSyncWindows - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._applications = None
        self._clusters = None
        self._duration = None
        self._kind = None
        self._manual_sync = None
        self._namespaces = None
        self._schedule = None
        self._time_zone = None
        self.discriminator = None

        if applications is not None:
            self.applications = applications
        if clusters is not None:
            self.clusters = clusters
        if duration is not None:
            self.duration = duration
        if kind is not None:
            self.kind = kind
        if manual_sync is not None:
            self.manual_sync = manual_sync
        if namespaces is not None:
            self.namespaces = namespaces
        if schedule is not None:
            self.schedule = schedule
        if time_zone is not None:
            self.time_zone = time_zone

    @property
    def applications(self):
        """Gets the applications of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.  # noqa: E501

        Applications contains a list of applications that the window will apply to  # noqa: E501

        :return: The applications of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.  # noqa: E501
        :rtype: list[str]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.

        Applications contains a list of applications that the window will apply to  # noqa: E501

        :param applications: The applications of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.  # noqa: E501
        :type: list[str]
        """

        self._applications = applications

    @property
    def clusters(self):
        """Gets the clusters of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.  # noqa: E501

        Clusters contains a list of clusters that the window will apply to  # noqa: E501

        :return: The clusters of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.  # noqa: E501
        :rtype: list[str]
        """
        return self._clusters

    @clusters.setter
    def clusters(self, clusters):
        """Sets the clusters of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.

        Clusters contains a list of clusters that the window will apply to  # noqa: E501

        :param clusters: The clusters of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.  # noqa: E501
        :type: list[str]
        """

        self._clusters = clusters

    @property
    def duration(self):
        """Gets the duration of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.  # noqa: E501

        Duration is the amount of time the sync window will be open  # noqa: E501

        :return: The duration of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.

        Duration is the amount of time the sync window will be open  # noqa: E501

        :param duration: The duration of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def kind(self):
        """Gets the kind of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.  # noqa: E501

        Kind defines if the window allows or blocks syncs  # noqa: E501

        :return: The kind of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.

        Kind defines if the window allows or blocks syncs  # noqa: E501

        :param kind: The kind of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def manual_sync(self):
        """Gets the manual_sync of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.  # noqa: E501

        ManualSync enables manual syncs when they would otherwise be blocked  # noqa: E501

        :return: The manual_sync of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.  # noqa: E501
        :rtype: bool
        """
        return self._manual_sync

    @manual_sync.setter
    def manual_sync(self, manual_sync):
        """Sets the manual_sync of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.

        ManualSync enables manual syncs when they would otherwise be blocked  # noqa: E501

        :param manual_sync: The manual_sync of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.  # noqa: E501
        :type: bool
        """

        self._manual_sync = manual_sync

    @property
    def namespaces(self):
        """Gets the namespaces of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.  # noqa: E501

        Namespaces contains a list of namespaces that the window will apply to  # noqa: E501

        :return: The namespaces of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.  # noqa: E501
        :rtype: list[str]
        """
        return self._namespaces

    @namespaces.setter
    def namespaces(self, namespaces):
        """Sets the namespaces of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.

        Namespaces contains a list of namespaces that the window will apply to  # noqa: E501

        :param namespaces: The namespaces of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.  # noqa: E501
        :type: list[str]
        """

        self._namespaces = namespaces

    @property
    def schedule(self):
        """Gets the schedule of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.  # noqa: E501

        Schedule is the time the window will begin, specified in cron format  # noqa: E501

        :return: The schedule of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.  # noqa: E501
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.

        Schedule is the time the window will begin, specified in cron format  # noqa: E501

        :param schedule: The schedule of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.  # noqa: E501
        :type: str
        """

        self._schedule = schedule

    @property
    def time_zone(self):
        """Gets the time_zone of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.  # noqa: E501

        TimeZone of the sync that will be applied to the schedule  # noqa: E501

        :return: The time_zone of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.

        TimeZone of the sync that will be applied to the schedule  # noqa: E501

        :param time_zone: The time_zone of this IoArgoprojV1alpha1AppProjectSpecSyncWindows.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojV1alpha1AppProjectSpecSyncWindows):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojV1alpha1AppProjectSpecSyncWindows):
            return True

        return self.to_dict() != other.to_dict()
