# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoQuestdbCrdV1alpha1QuestDBStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aws': 'IoQuestdbCrdV1alpha1QuestDBStatusAws',
        'conditions': 'list[IoQuestdbCrdV1alpha1QuestDBStatusConditions]',
        'dns_ready': 'bool',
        'ilp_node_port': 'int',
        'next_volume_modification_attempt': 'datetime',
        'node_ip': 'str',
        'node_name': 'str',
        'node_ready': 'bool',
        'psql_node_port': 'int'
    }

    attribute_map = {
        'aws': 'aws',
        'conditions': 'conditions',
        'dns_ready': 'dnsReady',
        'ilp_node_port': 'ilpNodePort',
        'next_volume_modification_attempt': 'nextVolumeModificationAttempt',
        'node_ip': 'nodeIp',
        'node_name': 'nodeName',
        'node_ready': 'nodeReady',
        'psql_node_port': 'psqlNodePort'
    }

    def __init__(self, aws=None, conditions=None, dns_ready=None, ilp_node_port=None, next_volume_modification_attempt=None, node_ip=None, node_name=None, node_ready=None, psql_node_port=None, local_vars_configuration=None):  # noqa: E501
        """IoQuestdbCrdV1alpha1QuestDBStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._aws = None
        self._conditions = None
        self._dns_ready = None
        self._ilp_node_port = None
        self._next_volume_modification_attempt = None
        self._node_ip = None
        self._node_name = None
        self._node_ready = None
        self._psql_node_port = None
        self.discriminator = None

        if aws is not None:
            self.aws = aws
        if conditions is not None:
            self.conditions = conditions
        if dns_ready is not None:
            self.dns_ready = dns_ready
        if ilp_node_port is not None:
            self.ilp_node_port = ilp_node_port
        if next_volume_modification_attempt is not None:
            self.next_volume_modification_attempt = next_volume_modification_attempt
        if node_ip is not None:
            self.node_ip = node_ip
        if node_name is not None:
            self.node_name = node_name
        if node_ready is not None:
            self.node_ready = node_ready
        if psql_node_port is not None:
            self.psql_node_port = psql_node_port

    @property
    def aws(self):
        """Gets the aws of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501


        :return: The aws of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501
        :rtype: IoQuestdbCrdV1alpha1QuestDBStatusAws
        """
        return self._aws

    @aws.setter
    def aws(self, aws):
        """Sets the aws of this IoQuestdbCrdV1alpha1QuestDBStatus.


        :param aws: The aws of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501
        :type: IoQuestdbCrdV1alpha1QuestDBStatusAws
        """

        self._aws = aws

    @property
    def conditions(self):
        """Gets the conditions of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501

        Conditions include status for whether the statefulset and deployment pods are ready  # noqa: E501

        :return: The conditions of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501
        :rtype: list[IoQuestdbCrdV1alpha1QuestDBStatusConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this IoQuestdbCrdV1alpha1QuestDBStatus.

        Conditions include status for whether the statefulset and deployment pods are ready  # noqa: E501

        :param conditions: The conditions of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501
        :type: list[IoQuestdbCrdV1alpha1QuestDBStatusConditions]
        """

        self._conditions = conditions

    @property
    def dns_ready(self):
        """Gets the dns_ready of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501

        Are DNS records created for the node's IP address? These are used for ILP and Psql only.  HTTPS DNS is controlled elsewhere  # noqa: E501

        :return: The dns_ready of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501
        :rtype: bool
        """
        return self._dns_ready

    @dns_ready.setter
    def dns_ready(self, dns_ready):
        """Sets the dns_ready of this IoQuestdbCrdV1alpha1QuestDBStatus.

        Are DNS records created for the node's IP address? These are used for ILP and Psql only.  HTTPS DNS is controlled elsewhere  # noqa: E501

        :param dns_ready: The dns_ready of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501
        :type: bool
        """

        self._dns_ready = dns_ready

    @property
    def ilp_node_port(self):
        """Gets the ilp_node_port of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501

        ILP port  # noqa: E501

        :return: The ilp_node_port of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501
        :rtype: int
        """
        return self._ilp_node_port

    @ilp_node_port.setter
    def ilp_node_port(self, ilp_node_port):
        """Sets the ilp_node_port of this IoQuestdbCrdV1alpha1QuestDBStatus.

        ILP port  # noqa: E501

        :param ilp_node_port: The ilp_node_port of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501
        :type: int
        """

        self._ilp_node_port = ilp_node_port

    @property
    def next_volume_modification_attempt(self):
        """Gets the next_volume_modification_attempt of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501

        Next available time that the controller will let you increase the volume size. AWS prevents volume size changes from happening too often, so we limit the time that you can modify the volume size to 6 hours after the last change  # noqa: E501

        :return: The next_volume_modification_attempt of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._next_volume_modification_attempt

    @next_volume_modification_attempt.setter
    def next_volume_modification_attempt(self, next_volume_modification_attempt):
        """Sets the next_volume_modification_attempt of this IoQuestdbCrdV1alpha1QuestDBStatus.

        Next available time that the controller will let you increase the volume size. AWS prevents volume size changes from happening too often, so we limit the time that you can modify the volume size to 6 hours after the last change  # noqa: E501

        :param next_volume_modification_attempt: The next_volume_modification_attempt of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501
        :type: datetime
        """

        self._next_volume_modification_attempt = next_volume_modification_attempt

    @property
    def node_ip(self):
        """Gets the node_ip of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501

        The database node's external IP address  # noqa: E501

        :return: The node_ip of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501
        :rtype: str
        """
        return self._node_ip

    @node_ip.setter
    def node_ip(self, node_ip):
        """Sets the node_ip of this IoQuestdbCrdV1alpha1QuestDBStatus.

        The database node's external IP address  # noqa: E501

        :param node_ip: The node_ip of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501
        :type: str
        """

        self._node_ip = node_ip

    @property
    def node_name(self):
        """Gets the node_name of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501

        Name of the database node  # noqa: E501

        :return: The node_name of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this IoQuestdbCrdV1alpha1QuestDBStatus.

        Name of the database node  # noqa: E501

        :param node_name: The node_name of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501
        :type: str
        """

        self._node_name = node_name

    @property
    def node_ready(self):
        """Gets the node_ready of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501

        Is the database node's status \"Ready\"?  # noqa: E501

        :return: The node_ready of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501
        :rtype: bool
        """
        return self._node_ready

    @node_ready.setter
    def node_ready(self, node_ready):
        """Sets the node_ready of this IoQuestdbCrdV1alpha1QuestDBStatus.

        Is the database node's status \"Ready\"?  # noqa: E501

        :param node_ready: The node_ready of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501
        :type: bool
        """

        self._node_ready = node_ready

    @property
    def psql_node_port(self):
        """Gets the psql_node_port of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501

        PGWire port  # noqa: E501

        :return: The psql_node_port of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501
        :rtype: int
        """
        return self._psql_node_port

    @psql_node_port.setter
    def psql_node_port(self, psql_node_port):
        """Sets the psql_node_port of this IoQuestdbCrdV1alpha1QuestDBStatus.

        PGWire port  # noqa: E501

        :param psql_node_port: The psql_node_port of this IoQuestdbCrdV1alpha1QuestDBStatus.  # noqa: E501
        :type: int
        """

        self._psql_node_port = psql_node_port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoQuestdbCrdV1alpha1QuestDBStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoQuestdbCrdV1alpha1QuestDBStatus):
            return True

        return self.to_dict() != other.to_dict()
