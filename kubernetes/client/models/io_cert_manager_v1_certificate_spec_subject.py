# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoCertManagerV1CertificateSpecSubject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'countries': 'list[str]',
        'localities': 'list[str]',
        'organizational_units': 'list[str]',
        'organizations': 'list[str]',
        'postal_codes': 'list[str]',
        'provinces': 'list[str]',
        'serial_number': 'str',
        'street_addresses': 'list[str]'
    }

    attribute_map = {
        'countries': 'countries',
        'localities': 'localities',
        'organizational_units': 'organizationalUnits',
        'organizations': 'organizations',
        'postal_codes': 'postalCodes',
        'provinces': 'provinces',
        'serial_number': 'serialNumber',
        'street_addresses': 'streetAddresses'
    }

    def __init__(self, countries=None, localities=None, organizational_units=None, organizations=None, postal_codes=None, provinces=None, serial_number=None, street_addresses=None, local_vars_configuration=None):  # noqa: E501
        """IoCertManagerV1CertificateSpecSubject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._countries = None
        self._localities = None
        self._organizational_units = None
        self._organizations = None
        self._postal_codes = None
        self._provinces = None
        self._serial_number = None
        self._street_addresses = None
        self.discriminator = None

        if countries is not None:
            self.countries = countries
        if localities is not None:
            self.localities = localities
        if organizational_units is not None:
            self.organizational_units = organizational_units
        if organizations is not None:
            self.organizations = organizations
        if postal_codes is not None:
            self.postal_codes = postal_codes
        if provinces is not None:
            self.provinces = provinces
        if serial_number is not None:
            self.serial_number = serial_number
        if street_addresses is not None:
            self.street_addresses = street_addresses

    @property
    def countries(self):
        """Gets the countries of this IoCertManagerV1CertificateSpecSubject.  # noqa: E501

        Countries to be used on the Certificate.  # noqa: E501

        :return: The countries of this IoCertManagerV1CertificateSpecSubject.  # noqa: E501
        :rtype: list[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this IoCertManagerV1CertificateSpecSubject.

        Countries to be used on the Certificate.  # noqa: E501

        :param countries: The countries of this IoCertManagerV1CertificateSpecSubject.  # noqa: E501
        :type: list[str]
        """

        self._countries = countries

    @property
    def localities(self):
        """Gets the localities of this IoCertManagerV1CertificateSpecSubject.  # noqa: E501

        Cities to be used on the Certificate.  # noqa: E501

        :return: The localities of this IoCertManagerV1CertificateSpecSubject.  # noqa: E501
        :rtype: list[str]
        """
        return self._localities

    @localities.setter
    def localities(self, localities):
        """Sets the localities of this IoCertManagerV1CertificateSpecSubject.

        Cities to be used on the Certificate.  # noqa: E501

        :param localities: The localities of this IoCertManagerV1CertificateSpecSubject.  # noqa: E501
        :type: list[str]
        """

        self._localities = localities

    @property
    def organizational_units(self):
        """Gets the organizational_units of this IoCertManagerV1CertificateSpecSubject.  # noqa: E501

        Organizational Units to be used on the Certificate.  # noqa: E501

        :return: The organizational_units of this IoCertManagerV1CertificateSpecSubject.  # noqa: E501
        :rtype: list[str]
        """
        return self._organizational_units

    @organizational_units.setter
    def organizational_units(self, organizational_units):
        """Sets the organizational_units of this IoCertManagerV1CertificateSpecSubject.

        Organizational Units to be used on the Certificate.  # noqa: E501

        :param organizational_units: The organizational_units of this IoCertManagerV1CertificateSpecSubject.  # noqa: E501
        :type: list[str]
        """

        self._organizational_units = organizational_units

    @property
    def organizations(self):
        """Gets the organizations of this IoCertManagerV1CertificateSpecSubject.  # noqa: E501

        Organizations to be used on the Certificate.  # noqa: E501

        :return: The organizations of this IoCertManagerV1CertificateSpecSubject.  # noqa: E501
        :rtype: list[str]
        """
        return self._organizations

    @organizations.setter
    def organizations(self, organizations):
        """Sets the organizations of this IoCertManagerV1CertificateSpecSubject.

        Organizations to be used on the Certificate.  # noqa: E501

        :param organizations: The organizations of this IoCertManagerV1CertificateSpecSubject.  # noqa: E501
        :type: list[str]
        """

        self._organizations = organizations

    @property
    def postal_codes(self):
        """Gets the postal_codes of this IoCertManagerV1CertificateSpecSubject.  # noqa: E501

        Postal codes to be used on the Certificate.  # noqa: E501

        :return: The postal_codes of this IoCertManagerV1CertificateSpecSubject.  # noqa: E501
        :rtype: list[str]
        """
        return self._postal_codes

    @postal_codes.setter
    def postal_codes(self, postal_codes):
        """Sets the postal_codes of this IoCertManagerV1CertificateSpecSubject.

        Postal codes to be used on the Certificate.  # noqa: E501

        :param postal_codes: The postal_codes of this IoCertManagerV1CertificateSpecSubject.  # noqa: E501
        :type: list[str]
        """

        self._postal_codes = postal_codes

    @property
    def provinces(self):
        """Gets the provinces of this IoCertManagerV1CertificateSpecSubject.  # noqa: E501

        State/Provinces to be used on the Certificate.  # noqa: E501

        :return: The provinces of this IoCertManagerV1CertificateSpecSubject.  # noqa: E501
        :rtype: list[str]
        """
        return self._provinces

    @provinces.setter
    def provinces(self, provinces):
        """Sets the provinces of this IoCertManagerV1CertificateSpecSubject.

        State/Provinces to be used on the Certificate.  # noqa: E501

        :param provinces: The provinces of this IoCertManagerV1CertificateSpecSubject.  # noqa: E501
        :type: list[str]
        """

        self._provinces = provinces

    @property
    def serial_number(self):
        """Gets the serial_number of this IoCertManagerV1CertificateSpecSubject.  # noqa: E501

        Serial number to be used on the Certificate.  # noqa: E501

        :return: The serial_number of this IoCertManagerV1CertificateSpecSubject.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this IoCertManagerV1CertificateSpecSubject.

        Serial number to be used on the Certificate.  # noqa: E501

        :param serial_number: The serial_number of this IoCertManagerV1CertificateSpecSubject.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def street_addresses(self):
        """Gets the street_addresses of this IoCertManagerV1CertificateSpecSubject.  # noqa: E501

        Street addresses to be used on the Certificate.  # noqa: E501

        :return: The street_addresses of this IoCertManagerV1CertificateSpecSubject.  # noqa: E501
        :rtype: list[str]
        """
        return self._street_addresses

    @street_addresses.setter
    def street_addresses(self, street_addresses):
        """Sets the street_addresses of this IoCertManagerV1CertificateSpecSubject.

        Street addresses to be used on the Certificate.  # noqa: E501

        :param street_addresses: The street_addresses of this IoCertManagerV1CertificateSpecSubject.  # noqa: E501
        :type: list[str]
        """

        self._street_addresses = street_addresses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoCertManagerV1CertificateSpecSubject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoCertManagerV1CertificateSpecSubject):
            return True

        return self.to_dict() != other.to_dict()
