# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'arn': 'str',
        'owner_account_id': 'str',
        'region': 'str'
    }

    attribute_map = {
        'arn': 'arn',
        'owner_account_id': 'ownerAccountID',
        'region': 'region'
    }

    def __init__(self, arn=None, owner_account_id=None, region=None, local_vars_configuration=None):  # noqa: E501
        """AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._arn = None
        self._owner_account_id = None
        self._region = None
        self.discriminator = None

        if arn is not None:
            self.arn = arn
        self.owner_account_id = owner_account_id
        self.region = region

    @property
    def arn(self):
        """Gets the arn of this AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata.  # noqa: E501

        ARN is the Amazon Resource Name for the resource. This is a globally-unique identifier and is set only by the ACK service controller once the controller has orchestrated the creation of the resource OR when it has verified that an \"adopted\" resource (a resource where the ARN annotation was set by the Kubernetes user on the CR) exists and matches the supplied CR's Spec field values. TODO(vijat@): Find a better strategy for resources that do not have ARN in CreateOutputResponse https://github.com/aws/aws-controllers-k8s/issues/270  # noqa: E501

        :return: The arn of this AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata.  # noqa: E501
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata.

        ARN is the Amazon Resource Name for the resource. This is a globally-unique identifier and is set only by the ACK service controller once the controller has orchestrated the creation of the resource OR when it has verified that an \"adopted\" resource (a resource where the ARN annotation was set by the Kubernetes user on the CR) exists and matches the supplied CR's Spec field values. TODO(vijat@): Find a better strategy for resources that do not have ARN in CreateOutputResponse https://github.com/aws/aws-controllers-k8s/issues/270  # noqa: E501

        :param arn: The arn of this AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata.  # noqa: E501
        :type: str
        """

        self._arn = arn

    @property
    def owner_account_id(self):
        """Gets the owner_account_id of this AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata.  # noqa: E501

        OwnerAccountID is the AWS Account ID of the account that owns the backend AWS service API resource.  # noqa: E501

        :return: The owner_account_id of this AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata.  # noqa: E501
        :rtype: str
        """
        return self._owner_account_id

    @owner_account_id.setter
    def owner_account_id(self, owner_account_id):
        """Sets the owner_account_id of this AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata.

        OwnerAccountID is the AWS Account ID of the account that owns the backend AWS service API resource.  # noqa: E501

        :param owner_account_id: The owner_account_id of this AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and owner_account_id is None:  # noqa: E501
            raise ValueError("Invalid value for `owner_account_id`, must not be `None`")  # noqa: E501

        self._owner_account_id = owner_account_id

    @property
    def region(self):
        """Gets the region of this AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata.  # noqa: E501

        Region is the AWS region in which the resource exists or will exist.  # noqa: E501

        :return: The region of this AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata.

        Region is the AWS region in which the resource exists or will exist.  # noqa: E501

        :param region: The region of this AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and region is None:  # noqa: E501
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata):
            return True

        return self.to_dict() != other.to_dict()
