# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'arbitrary_fs_access_through_s_ms': 'ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetricsArbitraryFSAccessThroughSMs',
        'enforced_namespace_label': 'str',
        'enforced_sample_limit': 'int',
        'enforced_target_limit': 'int',
        'external_labels': 'dict(str, str)',
        'ignore_namespace_selectors': 'bool',
        'instance_namespace_selector': 'ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetricsInstanceNamespaceSelector',
        'instance_selector': 'ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetricsInstanceSelector',
        'metrics_external_label_name': 'str',
        'override_honor_labels': 'bool',
        'override_honor_timestamps': 'bool',
        'remote_write': 'list[ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetricsRemoteWrite]',
        'replica_external_label_name': 'str',
        'replicas': 'int',
        'scrape_interval': 'str',
        'scrape_timeout': 'str',
        'shards': 'int'
    }

    attribute_map = {
        'arbitrary_fs_access_through_s_ms': 'arbitraryFSAccessThroughSMs',
        'enforced_namespace_label': 'enforcedNamespaceLabel',
        'enforced_sample_limit': 'enforcedSampleLimit',
        'enforced_target_limit': 'enforcedTargetLimit',
        'external_labels': 'externalLabels',
        'ignore_namespace_selectors': 'ignoreNamespaceSelectors',
        'instance_namespace_selector': 'instanceNamespaceSelector',
        'instance_selector': 'instanceSelector',
        'metrics_external_label_name': 'metricsExternalLabelName',
        'override_honor_labels': 'overrideHonorLabels',
        'override_honor_timestamps': 'overrideHonorTimestamps',
        'remote_write': 'remoteWrite',
        'replica_external_label_name': 'replicaExternalLabelName',
        'replicas': 'replicas',
        'scrape_interval': 'scrapeInterval',
        'scrape_timeout': 'scrapeTimeout',
        'shards': 'shards'
    }

    def __init__(self, arbitrary_fs_access_through_s_ms=None, enforced_namespace_label=None, enforced_sample_limit=None, enforced_target_limit=None, external_labels=None, ignore_namespace_selectors=None, instance_namespace_selector=None, instance_selector=None, metrics_external_label_name=None, override_honor_labels=None, override_honor_timestamps=None, remote_write=None, replica_external_label_name=None, replicas=None, scrape_interval=None, scrape_timeout=None, shards=None, local_vars_configuration=None):  # noqa: E501
        """ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._arbitrary_fs_access_through_s_ms = None
        self._enforced_namespace_label = None
        self._enforced_sample_limit = None
        self._enforced_target_limit = None
        self._external_labels = None
        self._ignore_namespace_selectors = None
        self._instance_namespace_selector = None
        self._instance_selector = None
        self._metrics_external_label_name = None
        self._override_honor_labels = None
        self._override_honor_timestamps = None
        self._remote_write = None
        self._replica_external_label_name = None
        self._replicas = None
        self._scrape_interval = None
        self._scrape_timeout = None
        self._shards = None
        self.discriminator = None

        if arbitrary_fs_access_through_s_ms is not None:
            self.arbitrary_fs_access_through_s_ms = arbitrary_fs_access_through_s_ms
        if enforced_namespace_label is not None:
            self.enforced_namespace_label = enforced_namespace_label
        if enforced_sample_limit is not None:
            self.enforced_sample_limit = enforced_sample_limit
        if enforced_target_limit is not None:
            self.enforced_target_limit = enforced_target_limit
        if external_labels is not None:
            self.external_labels = external_labels
        if ignore_namespace_selectors is not None:
            self.ignore_namespace_selectors = ignore_namespace_selectors
        if instance_namespace_selector is not None:
            self.instance_namespace_selector = instance_namespace_selector
        if instance_selector is not None:
            self.instance_selector = instance_selector
        if metrics_external_label_name is not None:
            self.metrics_external_label_name = metrics_external_label_name
        if override_honor_labels is not None:
            self.override_honor_labels = override_honor_labels
        if override_honor_timestamps is not None:
            self.override_honor_timestamps = override_honor_timestamps
        if remote_write is not None:
            self.remote_write = remote_write
        if replica_external_label_name is not None:
            self.replica_external_label_name = replica_external_label_name
        if replicas is not None:
            self.replicas = replicas
        if scrape_interval is not None:
            self.scrape_interval = scrape_interval
        if scrape_timeout is not None:
            self.scrape_timeout = scrape_timeout
        if shards is not None:
            self.shards = shards

    @property
    def arbitrary_fs_access_through_s_ms(self):
        """Gets the arbitrary_fs_access_through_s_ms of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501


        :return: The arbitrary_fs_access_through_s_ms of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetricsArbitraryFSAccessThroughSMs
        """
        return self._arbitrary_fs_access_through_s_ms

    @arbitrary_fs_access_through_s_ms.setter
    def arbitrary_fs_access_through_s_ms(self, arbitrary_fs_access_through_s_ms):
        """Sets the arbitrary_fs_access_through_s_ms of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.


        :param arbitrary_fs_access_through_s_ms: The arbitrary_fs_access_through_s_ms of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetricsArbitraryFSAccessThroughSMs
        """

        self._arbitrary_fs_access_through_s_ms = arbitrary_fs_access_through_s_ms

    @property
    def enforced_namespace_label(self):
        """Gets the enforced_namespace_label of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501

        EnforcedNamespaceLabel enforces adding a namespace label of origin for each metric that is user-created. The label value is always the namespace of the object that is being created.  # noqa: E501

        :return: The enforced_namespace_label of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :rtype: str
        """
        return self._enforced_namespace_label

    @enforced_namespace_label.setter
    def enforced_namespace_label(self, enforced_namespace_label):
        """Sets the enforced_namespace_label of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.

        EnforcedNamespaceLabel enforces adding a namespace label of origin for each metric that is user-created. The label value is always the namespace of the object that is being created.  # noqa: E501

        :param enforced_namespace_label: The enforced_namespace_label of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :type: str
        """

        self._enforced_namespace_label = enforced_namespace_label

    @property
    def enforced_sample_limit(self):
        """Gets the enforced_sample_limit of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501

        EnforcedSampleLimit defines a global limit on the number of scraped samples that are accepted. This overrides any SampleLimit set per ServiceMonitor and/or PodMonitor. It is meant to be used by admins to enforce the SampleLimit to keep the overall number of samples and series under the desired limit. Note that if a SampleLimit from a ServiceMonitor or PodMonitor is lower, that value is used instead.  # noqa: E501

        :return: The enforced_sample_limit of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :rtype: int
        """
        return self._enforced_sample_limit

    @enforced_sample_limit.setter
    def enforced_sample_limit(self, enforced_sample_limit):
        """Sets the enforced_sample_limit of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.

        EnforcedSampleLimit defines a global limit on the number of scraped samples that are accepted. This overrides any SampleLimit set per ServiceMonitor and/or PodMonitor. It is meant to be used by admins to enforce the SampleLimit to keep the overall number of samples and series under the desired limit. Note that if a SampleLimit from a ServiceMonitor or PodMonitor is lower, that value is used instead.  # noqa: E501

        :param enforced_sample_limit: The enforced_sample_limit of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :type: int
        """

        self._enforced_sample_limit = enforced_sample_limit

    @property
    def enforced_target_limit(self):
        """Gets the enforced_target_limit of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501

        EnforcedTargetLimit defines a global limit on the number of scraped targets. This overrides any TargetLimit set per ServiceMonitor and/or PodMonitor. It is meant to be used by admins to enforce the TargetLimit to keep the overall number of targets under the desired limit. Note that if a TargetLimit from a ServiceMonitor or PodMonitor is higher, that value is used instead.  # noqa: E501

        :return: The enforced_target_limit of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :rtype: int
        """
        return self._enforced_target_limit

    @enforced_target_limit.setter
    def enforced_target_limit(self, enforced_target_limit):
        """Sets the enforced_target_limit of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.

        EnforcedTargetLimit defines a global limit on the number of scraped targets. This overrides any TargetLimit set per ServiceMonitor and/or PodMonitor. It is meant to be used by admins to enforce the TargetLimit to keep the overall number of targets under the desired limit. Note that if a TargetLimit from a ServiceMonitor or PodMonitor is higher, that value is used instead.  # noqa: E501

        :param enforced_target_limit: The enforced_target_limit of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :type: int
        """

        self._enforced_target_limit = enforced_target_limit

    @property
    def external_labels(self):
        """Gets the external_labels of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501

        ExternalLabels are labels to add to any time series when sending data over remote_write.  # noqa: E501

        :return: The external_labels of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._external_labels

    @external_labels.setter
    def external_labels(self, external_labels):
        """Sets the external_labels of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.

        ExternalLabels are labels to add to any time series when sending data over remote_write.  # noqa: E501

        :param external_labels: The external_labels of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :type: dict(str, str)
        """

        self._external_labels = external_labels

    @property
    def ignore_namespace_selectors(self):
        """Gets the ignore_namespace_selectors of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501

        IgnoreNamespaceSelectors, if true, ignores NamespaceSelector settings from the PodMonitor and ServiceMonitor configs, so that they only discover endpoints within their current namespace.  # noqa: E501

        :return: The ignore_namespace_selectors of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_namespace_selectors

    @ignore_namespace_selectors.setter
    def ignore_namespace_selectors(self, ignore_namespace_selectors):
        """Sets the ignore_namespace_selectors of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.

        IgnoreNamespaceSelectors, if true, ignores NamespaceSelector settings from the PodMonitor and ServiceMonitor configs, so that they only discover endpoints within their current namespace.  # noqa: E501

        :param ignore_namespace_selectors: The ignore_namespace_selectors of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :type: bool
        """

        self._ignore_namespace_selectors = ignore_namespace_selectors

    @property
    def instance_namespace_selector(self):
        """Gets the instance_namespace_selector of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501


        :return: The instance_namespace_selector of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetricsInstanceNamespaceSelector
        """
        return self._instance_namespace_selector

    @instance_namespace_selector.setter
    def instance_namespace_selector(self, instance_namespace_selector):
        """Sets the instance_namespace_selector of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.


        :param instance_namespace_selector: The instance_namespace_selector of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetricsInstanceNamespaceSelector
        """

        self._instance_namespace_selector = instance_namespace_selector

    @property
    def instance_selector(self):
        """Gets the instance_selector of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501


        :return: The instance_selector of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetricsInstanceSelector
        """
        return self._instance_selector

    @instance_selector.setter
    def instance_selector(self, instance_selector):
        """Sets the instance_selector of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.


        :param instance_selector: The instance_selector of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetricsInstanceSelector
        """

        self._instance_selector = instance_selector

    @property
    def metrics_external_label_name(self):
        """Gets the metrics_external_label_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501

        MetricsExternalLabelName is the name of the external label used to denote Grafana Agent cluster. Defaults to \"cluster.\" The external label is _not_ added when the value is set to the empty string.  # noqa: E501

        :return: The metrics_external_label_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :rtype: str
        """
        return self._metrics_external_label_name

    @metrics_external_label_name.setter
    def metrics_external_label_name(self, metrics_external_label_name):
        """Sets the metrics_external_label_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.

        MetricsExternalLabelName is the name of the external label used to denote Grafana Agent cluster. Defaults to \"cluster.\" The external label is _not_ added when the value is set to the empty string.  # noqa: E501

        :param metrics_external_label_name: The metrics_external_label_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :type: str
        """

        self._metrics_external_label_name = metrics_external_label_name

    @property
    def override_honor_labels(self):
        """Gets the override_honor_labels of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501

        OverrideHonorLabels, if true, overrides all configured honor_labels read from ServiceMonitor or PodMonitor and sets them to false.  # noqa: E501

        :return: The override_honor_labels of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :rtype: bool
        """
        return self._override_honor_labels

    @override_honor_labels.setter
    def override_honor_labels(self, override_honor_labels):
        """Sets the override_honor_labels of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.

        OverrideHonorLabels, if true, overrides all configured honor_labels read from ServiceMonitor or PodMonitor and sets them to false.  # noqa: E501

        :param override_honor_labels: The override_honor_labels of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :type: bool
        """

        self._override_honor_labels = override_honor_labels

    @property
    def override_honor_timestamps(self):
        """Gets the override_honor_timestamps of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501

        OverrideHonorTimestamps allows global enforcement for honoring timestamps in all scrape configs.  # noqa: E501

        :return: The override_honor_timestamps of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :rtype: bool
        """
        return self._override_honor_timestamps

    @override_honor_timestamps.setter
    def override_honor_timestamps(self, override_honor_timestamps):
        """Sets the override_honor_timestamps of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.

        OverrideHonorTimestamps allows global enforcement for honoring timestamps in all scrape configs.  # noqa: E501

        :param override_honor_timestamps: The override_honor_timestamps of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :type: bool
        """

        self._override_honor_timestamps = override_honor_timestamps

    @property
    def remote_write(self):
        """Gets the remote_write of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501

        RemoteWrite controls default remote_write settings for all instances. If an instance does not provide its own RemoteWrite settings, these will be used instead.  # noqa: E501

        :return: The remote_write of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :rtype: list[ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetricsRemoteWrite]
        """
        return self._remote_write

    @remote_write.setter
    def remote_write(self, remote_write):
        """Sets the remote_write of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.

        RemoteWrite controls default remote_write settings for all instances. If an instance does not provide its own RemoteWrite settings, these will be used instead.  # noqa: E501

        :param remote_write: The remote_write of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :type: list[ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetricsRemoteWrite]
        """

        self._remote_write = remote_write

    @property
    def replica_external_label_name(self):
        """Gets the replica_external_label_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501

        ReplicaExternalLabelName is the name of the metrics external label used to denote the replica name. Defaults to __replica__. The external label is _not_ added when the value is set to the empty string.  # noqa: E501

        :return: The replica_external_label_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :rtype: str
        """
        return self._replica_external_label_name

    @replica_external_label_name.setter
    def replica_external_label_name(self, replica_external_label_name):
        """Sets the replica_external_label_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.

        ReplicaExternalLabelName is the name of the metrics external label used to denote the replica name. Defaults to __replica__. The external label is _not_ added when the value is set to the empty string.  # noqa: E501

        :param replica_external_label_name: The replica_external_label_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :type: str
        """

        self._replica_external_label_name = replica_external_label_name

    @property
    def replicas(self):
        """Gets the replicas of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501

        Replicas of each shard to deploy for metrics pods. Number of replicas multiplied by the number of shards is the total number of pods created.  # noqa: E501

        :return: The replicas of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.

        Replicas of each shard to deploy for metrics pods. Number of replicas multiplied by the number of shards is the total number of pods created.  # noqa: E501

        :param replicas: The replicas of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def scrape_interval(self):
        """Gets the scrape_interval of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501

        ScrapeInterval is the time between consecutive scrapes.  # noqa: E501

        :return: The scrape_interval of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :rtype: str
        """
        return self._scrape_interval

    @scrape_interval.setter
    def scrape_interval(self, scrape_interval):
        """Sets the scrape_interval of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.

        ScrapeInterval is the time between consecutive scrapes.  # noqa: E501

        :param scrape_interval: The scrape_interval of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :type: str
        """

        self._scrape_interval = scrape_interval

    @property
    def scrape_timeout(self):
        """Gets the scrape_timeout of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501

        ScrapeTimeout is the time to wait for a target to respond before marking a scrape as failed.  # noqa: E501

        :return: The scrape_timeout of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :rtype: str
        """
        return self._scrape_timeout

    @scrape_timeout.setter
    def scrape_timeout(self, scrape_timeout):
        """Sets the scrape_timeout of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.

        ScrapeTimeout is the time to wait for a target to respond before marking a scrape as failed.  # noqa: E501

        :param scrape_timeout: The scrape_timeout of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :type: str
        """

        self._scrape_timeout = scrape_timeout

    @property
    def shards(self):
        """Gets the shards of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501

        Shards to distribute targets onto. Number of replicas multiplied by the number of shards is the total number of pods created. Note that scaling down shards does not reshard data onto remaining instances; it must be manually moved. Increasing shards does not reshard data either, but it will continue to be available from the same instances. Sharding is performed on the content of the __address__ target meta-label.  # noqa: E501

        :return: The shards of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :rtype: int
        """
        return self._shards

    @shards.setter
    def shards(self, shards):
        """Sets the shards of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.

        Shards to distribute targets onto. Number of replicas multiplied by the number of shards is the total number of pods created. Note that scaling down shards does not reshard data onto remaining instances; it must be manually moved. Increasing shards does not reshard data either, but it will continue to be available from the same instances. Sharding is performed on the content of the __address__ target meta-label.  # noqa: E501

        :param shards: The shards of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics.  # noqa: E501
        :type: int
        """

        self._shards = shards

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics):
            return True

        return self.to_dict() != other.to_dict()
