# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComCoreosMonitoringV1PrometheusSpecWebTlsConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cert': 'ComCoreosMonitoringV1PrometheusSpecWebTlsConfigCert',
        'cipher_suites': 'list[str]',
        'client_auth_type': 'str',
        'client_ca': 'ComCoreosMonitoringV1PrometheusSpecWebTlsConfigClientCa',
        'curve_preferences': 'list[str]',
        'key_secret': 'ComCoreosMonitoringV1PrometheusSpecWebTlsConfigKeySecret',
        'max_version': 'str',
        'min_version': 'str',
        'prefer_server_cipher_suites': 'bool'
    }

    attribute_map = {
        'cert': 'cert',
        'cipher_suites': 'cipherSuites',
        'client_auth_type': 'clientAuthType',
        'client_ca': 'client_ca',
        'curve_preferences': 'curvePreferences',
        'key_secret': 'keySecret',
        'max_version': 'maxVersion',
        'min_version': 'minVersion',
        'prefer_server_cipher_suites': 'preferServerCipherSuites'
    }

    def __init__(self, cert=None, cipher_suites=None, client_auth_type=None, client_ca=None, curve_preferences=None, key_secret=None, max_version=None, min_version=None, prefer_server_cipher_suites=None, local_vars_configuration=None):  # noqa: E501
        """ComCoreosMonitoringV1PrometheusSpecWebTlsConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cert = None
        self._cipher_suites = None
        self._client_auth_type = None
        self._client_ca = None
        self._curve_preferences = None
        self._key_secret = None
        self._max_version = None
        self._min_version = None
        self._prefer_server_cipher_suites = None
        self.discriminator = None

        self.cert = cert
        if cipher_suites is not None:
            self.cipher_suites = cipher_suites
        if client_auth_type is not None:
            self.client_auth_type = client_auth_type
        if client_ca is not None:
            self.client_ca = client_ca
        if curve_preferences is not None:
            self.curve_preferences = curve_preferences
        self.key_secret = key_secret
        if max_version is not None:
            self.max_version = max_version
        if min_version is not None:
            self.min_version = min_version
        if prefer_server_cipher_suites is not None:
            self.prefer_server_cipher_suites = prefer_server_cipher_suites

    @property
    def cert(self):
        """Gets the cert of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501


        :return: The cert of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecWebTlsConfigCert
        """
        return self._cert

    @cert.setter
    def cert(self, cert):
        """Sets the cert of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.


        :param cert: The cert of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecWebTlsConfigCert
        """
        if self.local_vars_configuration.client_side_validation and cert is None:  # noqa: E501
            raise ValueError("Invalid value for `cert`, must not be `None`")  # noqa: E501

        self._cert = cert

    @property
    def cipher_suites(self):
        """Gets the cipher_suites of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501

        List of supported cipher suites for TLS versions up to TLS 1.2. If empty, Go default cipher suites are used. Available cipher suites are documented in the go documentation: https://golang.org/pkg/crypto/tls/#pkg-constants  # noqa: E501

        :return: The cipher_suites of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._cipher_suites

    @cipher_suites.setter
    def cipher_suites(self, cipher_suites):
        """Sets the cipher_suites of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.

        List of supported cipher suites for TLS versions up to TLS 1.2. If empty, Go default cipher suites are used. Available cipher suites are documented in the go documentation: https://golang.org/pkg/crypto/tls/#pkg-constants  # noqa: E501

        :param cipher_suites: The cipher_suites of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501
        :type: list[str]
        """

        self._cipher_suites = cipher_suites

    @property
    def client_auth_type(self):
        """Gets the client_auth_type of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501

        Server policy for client authentication. Maps to ClientAuth Policies. For more detail on clientAuth options: https://golang.org/pkg/crypto/tls/#ClientAuthType  # noqa: E501

        :return: The client_auth_type of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501
        :rtype: str
        """
        return self._client_auth_type

    @client_auth_type.setter
    def client_auth_type(self, client_auth_type):
        """Sets the client_auth_type of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.

        Server policy for client authentication. Maps to ClientAuth Policies. For more detail on clientAuth options: https://golang.org/pkg/crypto/tls/#ClientAuthType  # noqa: E501

        :param client_auth_type: The client_auth_type of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501
        :type: str
        """

        self._client_auth_type = client_auth_type

    @property
    def client_ca(self):
        """Gets the client_ca of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501


        :return: The client_ca of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecWebTlsConfigClientCa
        """
        return self._client_ca

    @client_ca.setter
    def client_ca(self, client_ca):
        """Sets the client_ca of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.


        :param client_ca: The client_ca of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecWebTlsConfigClientCa
        """

        self._client_ca = client_ca

    @property
    def curve_preferences(self):
        """Gets the curve_preferences of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501

        Elliptic curves that will be used in an ECDHE handshake, in preference order. Available curves are documented in the go documentation: https://golang.org/pkg/crypto/tls/#CurveID  # noqa: E501

        :return: The curve_preferences of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._curve_preferences

    @curve_preferences.setter
    def curve_preferences(self, curve_preferences):
        """Sets the curve_preferences of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.

        Elliptic curves that will be used in an ECDHE handshake, in preference order. Available curves are documented in the go documentation: https://golang.org/pkg/crypto/tls/#CurveID  # noqa: E501

        :param curve_preferences: The curve_preferences of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501
        :type: list[str]
        """

        self._curve_preferences = curve_preferences

    @property
    def key_secret(self):
        """Gets the key_secret of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501


        :return: The key_secret of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecWebTlsConfigKeySecret
        """
        return self._key_secret

    @key_secret.setter
    def key_secret(self, key_secret):
        """Sets the key_secret of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.


        :param key_secret: The key_secret of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecWebTlsConfigKeySecret
        """
        if self.local_vars_configuration.client_side_validation and key_secret is None:  # noqa: E501
            raise ValueError("Invalid value for `key_secret`, must not be `None`")  # noqa: E501

        self._key_secret = key_secret

    @property
    def max_version(self):
        """Gets the max_version of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501

        Maximum TLS version that is acceptable. Defaults to TLS13.  # noqa: E501

        :return: The max_version of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501
        :rtype: str
        """
        return self._max_version

    @max_version.setter
    def max_version(self, max_version):
        """Sets the max_version of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.

        Maximum TLS version that is acceptable. Defaults to TLS13.  # noqa: E501

        :param max_version: The max_version of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501
        :type: str
        """

        self._max_version = max_version

    @property
    def min_version(self):
        """Gets the min_version of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501

        Minimum TLS version that is acceptable. Defaults to TLS12.  # noqa: E501

        :return: The min_version of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501
        :rtype: str
        """
        return self._min_version

    @min_version.setter
    def min_version(self, min_version):
        """Sets the min_version of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.

        Minimum TLS version that is acceptable. Defaults to TLS12.  # noqa: E501

        :param min_version: The min_version of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501
        :type: str
        """

        self._min_version = min_version

    @property
    def prefer_server_cipher_suites(self):
        """Gets the prefer_server_cipher_suites of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501

        Controls whether the server selects the client's most preferred cipher suite, or the server's most preferred cipher suite. If true then the server's preference, as expressed in the order of elements in cipherSuites, is used.  # noqa: E501

        :return: The prefer_server_cipher_suites of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501
        :rtype: bool
        """
        return self._prefer_server_cipher_suites

    @prefer_server_cipher_suites.setter
    def prefer_server_cipher_suites(self, prefer_server_cipher_suites):
        """Sets the prefer_server_cipher_suites of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.

        Controls whether the server selects the client's most preferred cipher suite, or the server's most preferred cipher suite. If true then the server's preference, as expressed in the order of elements in cipherSuites, is used.  # noqa: E501

        :param prefer_server_cipher_suites: The prefer_server_cipher_suites of this ComCoreosMonitoringV1PrometheusSpecWebTlsConfig.  # noqa: E501
        :type: bool
        """

        self._prefer_server_cipher_suites = prefer_server_cipher_suites

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComCoreosMonitoringV1PrometheusSpecWebTlsConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComCoreosMonitoringV1PrometheusSpecWebTlsConfig):
            return True

        return self.to_dict() != other.to_dict()
