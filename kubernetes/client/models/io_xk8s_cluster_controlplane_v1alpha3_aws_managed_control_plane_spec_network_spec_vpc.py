# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'availability_zone_selection': 'str',
        'availability_zone_usage_limit': 'int',
        'cidr_block': 'str',
        'id': 'str',
        'internet_gateway_id': 'str',
        'tags': 'dict(str, str)'
    }

    attribute_map = {
        'availability_zone_selection': 'availabilityZoneSelection',
        'availability_zone_usage_limit': 'availabilityZoneUsageLimit',
        'cidr_block': 'cidrBlock',
        'id': 'id',
        'internet_gateway_id': 'internetGatewayId',
        'tags': 'tags'
    }

    def __init__(self, availability_zone_selection=None, availability_zone_usage_limit=None, cidr_block=None, id=None, internet_gateway_id=None, tags=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._availability_zone_selection = None
        self._availability_zone_usage_limit = None
        self._cidr_block = None
        self._id = None
        self._internet_gateway_id = None
        self._tags = None
        self.discriminator = None

        if availability_zone_selection is not None:
            self.availability_zone_selection = availability_zone_selection
        if availability_zone_usage_limit is not None:
            self.availability_zone_usage_limit = availability_zone_usage_limit
        if cidr_block is not None:
            self.cidr_block = cidr_block
        if id is not None:
            self.id = id
        if internet_gateway_id is not None:
            self.internet_gateway_id = internet_gateway_id
        if tags is not None:
            self.tags = tags

    @property
    def availability_zone_selection(self):
        """Gets the availability_zone_selection of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc.  # noqa: E501

        AvailabilityZoneSelection specifies how AZs should be selected if there are more AZs in a region than specified by AvailabilityZoneUsageLimit. There are 2 selection schemes: Ordered - selects based on alphabetical order Random - selects AZs randomly in a region Defaults to Ordered  # noqa: E501

        :return: The availability_zone_selection of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc.  # noqa: E501
        :rtype: str
        """
        return self._availability_zone_selection

    @availability_zone_selection.setter
    def availability_zone_selection(self, availability_zone_selection):
        """Sets the availability_zone_selection of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc.

        AvailabilityZoneSelection specifies how AZs should be selected if there are more AZs in a region than specified by AvailabilityZoneUsageLimit. There are 2 selection schemes: Ordered - selects based on alphabetical order Random - selects AZs randomly in a region Defaults to Ordered  # noqa: E501

        :param availability_zone_selection: The availability_zone_selection of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc.  # noqa: E501
        :type: str
        """
        allowed_values = ["Ordered", "Random"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and availability_zone_selection not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `availability_zone_selection` ({0}), must be one of {1}"  # noqa: E501
                .format(availability_zone_selection, allowed_values)
            )

        self._availability_zone_selection = availability_zone_selection

    @property
    def availability_zone_usage_limit(self):
        """Gets the availability_zone_usage_limit of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc.  # noqa: E501

        AvailabilityZoneUsageLimit specifies the maximum number of availability zones (AZ) that should be used in a region when automatically creating subnets. If a region has more than this number of AZs then this number of AZs will be picked randomly when creating default subnets. Defaults to 3  # noqa: E501

        :return: The availability_zone_usage_limit of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc.  # noqa: E501
        :rtype: int
        """
        return self._availability_zone_usage_limit

    @availability_zone_usage_limit.setter
    def availability_zone_usage_limit(self, availability_zone_usage_limit):
        """Sets the availability_zone_usage_limit of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc.

        AvailabilityZoneUsageLimit specifies the maximum number of availability zones (AZ) that should be used in a region when automatically creating subnets. If a region has more than this number of AZs then this number of AZs will be picked randomly when creating default subnets. Defaults to 3  # noqa: E501

        :param availability_zone_usage_limit: The availability_zone_usage_limit of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                availability_zone_usage_limit is not None and availability_zone_usage_limit < 1):  # noqa: E501
            raise ValueError("Invalid value for `availability_zone_usage_limit`, must be a value greater than or equal to `1`")  # noqa: E501

        self._availability_zone_usage_limit = availability_zone_usage_limit

    @property
    def cidr_block(self):
        """Gets the cidr_block of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc.  # noqa: E501

        CidrBlock is the CIDR block to be used when the provider creates a managed VPC. Defaults to 10.0.0.0/16.  # noqa: E501

        :return: The cidr_block of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc.  # noqa: E501
        :rtype: str
        """
        return self._cidr_block

    @cidr_block.setter
    def cidr_block(self, cidr_block):
        """Sets the cidr_block of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc.

        CidrBlock is the CIDR block to be used when the provider creates a managed VPC. Defaults to 10.0.0.0/16.  # noqa: E501

        :param cidr_block: The cidr_block of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc.  # noqa: E501
        :type: str
        """

        self._cidr_block = cidr_block

    @property
    def id(self):
        """Gets the id of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc.  # noqa: E501

        ID is the vpc-id of the VPC this provider should use to create resources.  # noqa: E501

        :return: The id of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc.

        ID is the vpc-id of the VPC this provider should use to create resources.  # noqa: E501

        :param id: The id of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def internet_gateway_id(self):
        """Gets the internet_gateway_id of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc.  # noqa: E501

        InternetGatewayID is the id of the internet gateway associated with the VPC.  # noqa: E501

        :return: The internet_gateway_id of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc.  # noqa: E501
        :rtype: str
        """
        return self._internet_gateway_id

    @internet_gateway_id.setter
    def internet_gateway_id(self, internet_gateway_id):
        """Sets the internet_gateway_id of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc.

        InternetGatewayID is the id of the internet gateway associated with the VPC.  # noqa: E501

        :param internet_gateway_id: The internet_gateway_id of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc.  # noqa: E501
        :type: str
        """

        self._internet_gateway_id = internet_gateway_id

    @property
    def tags(self):
        """Gets the tags of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc.  # noqa: E501

        Tags is a collection of tags describing the resource.  # noqa: E501

        :return: The tags of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc.

        Tags is a collection of tags describing the resource.  # noqa: E501

        :param tags: The tags of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc.  # noqa: E501
        :type: dict(str, str)
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc):
            return True

        return self.to_dict() != other.to_dict()
