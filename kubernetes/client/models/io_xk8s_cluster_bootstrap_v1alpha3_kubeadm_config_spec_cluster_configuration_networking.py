# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationNetworking(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dns_domain': 'str',
        'pod_subnet': 'str',
        'service_subnet': 'str'
    }

    attribute_map = {
        'dns_domain': 'dnsDomain',
        'pod_subnet': 'podSubnet',
        'service_subnet': 'serviceSubnet'
    }

    def __init__(self, dns_domain=None, pod_subnet=None, service_subnet=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationNetworking - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._dns_domain = None
        self._pod_subnet = None
        self._service_subnet = None
        self.discriminator = None

        if dns_domain is not None:
            self.dns_domain = dns_domain
        if pod_subnet is not None:
            self.pod_subnet = pod_subnet
        if service_subnet is not None:
            self.service_subnet = service_subnet

    @property
    def dns_domain(self):
        """Gets the dns_domain of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationNetworking.  # noqa: E501

        DNSDomain is the dns domain used by k8s services. Defaults to \"cluster.local\".  # noqa: E501

        :return: The dns_domain of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationNetworking.  # noqa: E501
        :rtype: str
        """
        return self._dns_domain

    @dns_domain.setter
    def dns_domain(self, dns_domain):
        """Sets the dns_domain of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationNetworking.

        DNSDomain is the dns domain used by k8s services. Defaults to \"cluster.local\".  # noqa: E501

        :param dns_domain: The dns_domain of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationNetworking.  # noqa: E501
        :type: str
        """

        self._dns_domain = dns_domain

    @property
    def pod_subnet(self):
        """Gets the pod_subnet of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationNetworking.  # noqa: E501

        PodSubnet is the subnet used by pods. If unset, the API server will not allocate CIDR ranges for every node. Defaults to a comma-delimited string of the Cluster object's spec.clusterNetwork.services.cidrBlocks if that is set  # noqa: E501

        :return: The pod_subnet of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationNetworking.  # noqa: E501
        :rtype: str
        """
        return self._pod_subnet

    @pod_subnet.setter
    def pod_subnet(self, pod_subnet):
        """Sets the pod_subnet of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationNetworking.

        PodSubnet is the subnet used by pods. If unset, the API server will not allocate CIDR ranges for every node. Defaults to a comma-delimited string of the Cluster object's spec.clusterNetwork.services.cidrBlocks if that is set  # noqa: E501

        :param pod_subnet: The pod_subnet of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationNetworking.  # noqa: E501
        :type: str
        """

        self._pod_subnet = pod_subnet

    @property
    def service_subnet(self):
        """Gets the service_subnet of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationNetworking.  # noqa: E501

        ServiceSubnet is the subnet used by k8s services. Defaults to a comma-delimited string of the Cluster object's spec.clusterNetwork.pods.cidrBlocks, or to \"10.96.0.0/12\" if that's unset.  # noqa: E501

        :return: The service_subnet of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationNetworking.  # noqa: E501
        :rtype: str
        """
        return self._service_subnet

    @service_subnet.setter
    def service_subnet(self, service_subnet):
        """Sets the service_subnet of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationNetworking.

        ServiceSubnet is the subnet used by k8s services. Defaults to a comma-delimited string of the Cluster object's spec.clusterNetwork.pods.cidrBlocks, or to \"10.96.0.0/12\" if that's unset.  # noqa: E501

        :param service_subnet: The service_subnet of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationNetworking.  # noqa: E501
        :type: str
        """

        self._service_subnet = service_subnet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationNetworking):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationNetworking):
            return True

        return self.to_dict() != other.to_dict()
