# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'amazon_side_asn': 'int',
        'auto_accept_shared_attachments': 'str',
        'default_route_table_association': 'str',
        'default_route_table_propagation': 'str',
        'dns_support': 'str',
        'multicast_support': 'str',
        'transit_gateway_cidr_blocks': 'list[str]',
        'vpn_ecmp_support': 'str'
    }

    attribute_map = {
        'amazon_side_asn': 'amazonSideASN',
        'auto_accept_shared_attachments': 'autoAcceptSharedAttachments',
        'default_route_table_association': 'defaultRouteTableAssociation',
        'default_route_table_propagation': 'defaultRouteTablePropagation',
        'dns_support': 'dnsSupport',
        'multicast_support': 'multicastSupport',
        'transit_gateway_cidr_blocks': 'transitGatewayCIDRBlocks',
        'vpn_ecmp_support': 'vpnECMPSupport'
    }

    def __init__(self, amazon_side_asn=None, auto_accept_shared_attachments=None, default_route_table_association=None, default_route_table_propagation=None, dns_support=None, multicast_support=None, transit_gateway_cidr_blocks=None, vpn_ecmp_support=None, local_vars_configuration=None):  # noqa: E501
        """AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._amazon_side_asn = None
        self._auto_accept_shared_attachments = None
        self._default_route_table_association = None
        self._default_route_table_propagation = None
        self._dns_support = None
        self._multicast_support = None
        self._transit_gateway_cidr_blocks = None
        self._vpn_ecmp_support = None
        self.discriminator = None

        if amazon_side_asn is not None:
            self.amazon_side_asn = amazon_side_asn
        if auto_accept_shared_attachments is not None:
            self.auto_accept_shared_attachments = auto_accept_shared_attachments
        if default_route_table_association is not None:
            self.default_route_table_association = default_route_table_association
        if default_route_table_propagation is not None:
            self.default_route_table_propagation = default_route_table_propagation
        if dns_support is not None:
            self.dns_support = dns_support
        if multicast_support is not None:
            self.multicast_support = multicast_support
        if transit_gateway_cidr_blocks is not None:
            self.transit_gateway_cidr_blocks = transit_gateway_cidr_blocks
        if vpn_ecmp_support is not None:
            self.vpn_ecmp_support = vpn_ecmp_support

    @property
    def amazon_side_asn(self):
        """Gets the amazon_side_asn of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.  # noqa: E501


        :return: The amazon_side_asn of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.  # noqa: E501
        :rtype: int
        """
        return self._amazon_side_asn

    @amazon_side_asn.setter
    def amazon_side_asn(self, amazon_side_asn):
        """Sets the amazon_side_asn of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.


        :param amazon_side_asn: The amazon_side_asn of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.  # noqa: E501
        :type: int
        """

        self._amazon_side_asn = amazon_side_asn

    @property
    def auto_accept_shared_attachments(self):
        """Gets the auto_accept_shared_attachments of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.  # noqa: E501


        :return: The auto_accept_shared_attachments of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.  # noqa: E501
        :rtype: str
        """
        return self._auto_accept_shared_attachments

    @auto_accept_shared_attachments.setter
    def auto_accept_shared_attachments(self, auto_accept_shared_attachments):
        """Sets the auto_accept_shared_attachments of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.


        :param auto_accept_shared_attachments: The auto_accept_shared_attachments of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.  # noqa: E501
        :type: str
        """

        self._auto_accept_shared_attachments = auto_accept_shared_attachments

    @property
    def default_route_table_association(self):
        """Gets the default_route_table_association of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.  # noqa: E501


        :return: The default_route_table_association of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.  # noqa: E501
        :rtype: str
        """
        return self._default_route_table_association

    @default_route_table_association.setter
    def default_route_table_association(self, default_route_table_association):
        """Sets the default_route_table_association of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.


        :param default_route_table_association: The default_route_table_association of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.  # noqa: E501
        :type: str
        """

        self._default_route_table_association = default_route_table_association

    @property
    def default_route_table_propagation(self):
        """Gets the default_route_table_propagation of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.  # noqa: E501


        :return: The default_route_table_propagation of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.  # noqa: E501
        :rtype: str
        """
        return self._default_route_table_propagation

    @default_route_table_propagation.setter
    def default_route_table_propagation(self, default_route_table_propagation):
        """Sets the default_route_table_propagation of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.


        :param default_route_table_propagation: The default_route_table_propagation of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.  # noqa: E501
        :type: str
        """

        self._default_route_table_propagation = default_route_table_propagation

    @property
    def dns_support(self):
        """Gets the dns_support of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.  # noqa: E501


        :return: The dns_support of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.  # noqa: E501
        :rtype: str
        """
        return self._dns_support

    @dns_support.setter
    def dns_support(self, dns_support):
        """Sets the dns_support of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.


        :param dns_support: The dns_support of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.  # noqa: E501
        :type: str
        """

        self._dns_support = dns_support

    @property
    def multicast_support(self):
        """Gets the multicast_support of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.  # noqa: E501


        :return: The multicast_support of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.  # noqa: E501
        :rtype: str
        """
        return self._multicast_support

    @multicast_support.setter
    def multicast_support(self, multicast_support):
        """Sets the multicast_support of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.


        :param multicast_support: The multicast_support of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.  # noqa: E501
        :type: str
        """

        self._multicast_support = multicast_support

    @property
    def transit_gateway_cidr_blocks(self):
        """Gets the transit_gateway_cidr_blocks of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.  # noqa: E501


        :return: The transit_gateway_cidr_blocks of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._transit_gateway_cidr_blocks

    @transit_gateway_cidr_blocks.setter
    def transit_gateway_cidr_blocks(self, transit_gateway_cidr_blocks):
        """Sets the transit_gateway_cidr_blocks of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.


        :param transit_gateway_cidr_blocks: The transit_gateway_cidr_blocks of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.  # noqa: E501
        :type: list[str]
        """

        self._transit_gateway_cidr_blocks = transit_gateway_cidr_blocks

    @property
    def vpn_ecmp_support(self):
        """Gets the vpn_ecmp_support of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.  # noqa: E501


        :return: The vpn_ecmp_support of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.  # noqa: E501
        :rtype: str
        """
        return self._vpn_ecmp_support

    @vpn_ecmp_support.setter
    def vpn_ecmp_support(self, vpn_ecmp_support):
        """Sets the vpn_ecmp_support of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.


        :param vpn_ecmp_support: The vpn_ecmp_support of this AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions.  # noqa: E501
        :type: str
        """

        self._vpn_ecmp_support = vpn_ecmp_support

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1TransitGatewaySpecOptions):
            return True

        return self.to_dict() != other.to_dict()
