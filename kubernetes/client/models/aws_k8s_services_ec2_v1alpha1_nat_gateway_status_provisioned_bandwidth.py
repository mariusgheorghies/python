# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'provision_time': 'datetime',
        'provisioned': 'str',
        'request_time': 'datetime',
        'requested': 'str',
        'status': 'str'
    }

    attribute_map = {
        'provision_time': 'provisionTime',
        'provisioned': 'provisioned',
        'request_time': 'requestTime',
        'requested': 'requested',
        'status': 'status'
    }

    def __init__(self, provision_time=None, provisioned=None, request_time=None, requested=None, status=None, local_vars_configuration=None):  # noqa: E501
        """AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._provision_time = None
        self._provisioned = None
        self._request_time = None
        self._requested = None
        self._status = None
        self.discriminator = None

        if provision_time is not None:
            self.provision_time = provision_time
        if provisioned is not None:
            self.provisioned = provisioned
        if request_time is not None:
            self.request_time = request_time
        if requested is not None:
            self.requested = requested
        if status is not None:
            self.status = status

    @property
    def provision_time(self):
        """Gets the provision_time of this AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth.  # noqa: E501


        :return: The provision_time of this AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth.  # noqa: E501
        :rtype: datetime
        """
        return self._provision_time

    @provision_time.setter
    def provision_time(self, provision_time):
        """Sets the provision_time of this AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth.


        :param provision_time: The provision_time of this AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth.  # noqa: E501
        :type: datetime
        """

        self._provision_time = provision_time

    @property
    def provisioned(self):
        """Gets the provisioned of this AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth.  # noqa: E501


        :return: The provisioned of this AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth.  # noqa: E501
        :rtype: str
        """
        return self._provisioned

    @provisioned.setter
    def provisioned(self, provisioned):
        """Sets the provisioned of this AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth.


        :param provisioned: The provisioned of this AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth.  # noqa: E501
        :type: str
        """

        self._provisioned = provisioned

    @property
    def request_time(self):
        """Gets the request_time of this AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth.  # noqa: E501


        :return: The request_time of this AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth.  # noqa: E501
        :rtype: datetime
        """
        return self._request_time

    @request_time.setter
    def request_time(self, request_time):
        """Sets the request_time of this AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth.


        :param request_time: The request_time of this AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth.  # noqa: E501
        :type: datetime
        """

        self._request_time = request_time

    @property
    def requested(self):
        """Gets the requested of this AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth.  # noqa: E501


        :return: The requested of this AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth.  # noqa: E501
        :rtype: str
        """
        return self._requested

    @requested.setter
    def requested(self, requested):
        """Sets the requested of this AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth.


        :param requested: The requested of this AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth.  # noqa: E501
        :type: str
        """

        self._requested = requested

    @property
    def status(self):
        """Gets the status of this AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth.  # noqa: E501


        :return: The status of this AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth.


        :param status: The status of this AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1NATGatewayStatusProvisionedBandwidth):
            return True

        return self.to_dict() != other.to_dict()
