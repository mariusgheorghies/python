# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComCoreosMonitoringV1PrometheusSpecRemoteWrite(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'authorization': 'ComCoreosMonitoringV1PrometheusSpecAuthorization1',
        'basic_auth': 'ComCoreosMonitoringV1PrometheusSpecBasicAuth',
        'bearer_token': 'str',
        'bearer_token_file': 'str',
        'headers': 'dict(str, str)',
        'metadata_config': 'ComCoreosMonitoringV1PrometheusSpecMetadataConfig',
        'name': 'str',
        'oauth2': 'ComCoreosMonitoringV1PodMonitorSpecOauth2',
        'proxy_url': 'str',
        'queue_config': 'ComCoreosMonitoringV1PrometheusSpecQueueConfig',
        'remote_timeout': 'str',
        'send_exemplars': 'bool',
        'tls_config': 'ComCoreosMonitoringV1PrometheusSpecTlsConfig1',
        'url': 'str',
        'write_relabel_configs': 'list[ComCoreosMonitoringV1PodMonitorSpecMetricRelabelings]'
    }

    attribute_map = {
        'authorization': 'authorization',
        'basic_auth': 'basicAuth',
        'bearer_token': 'bearerToken',
        'bearer_token_file': 'bearerTokenFile',
        'headers': 'headers',
        'metadata_config': 'metadataConfig',
        'name': 'name',
        'oauth2': 'oauth2',
        'proxy_url': 'proxyUrl',
        'queue_config': 'queueConfig',
        'remote_timeout': 'remoteTimeout',
        'send_exemplars': 'sendExemplars',
        'tls_config': 'tlsConfig',
        'url': 'url',
        'write_relabel_configs': 'writeRelabelConfigs'
    }

    def __init__(self, authorization=None, basic_auth=None, bearer_token=None, bearer_token_file=None, headers=None, metadata_config=None, name=None, oauth2=None, proxy_url=None, queue_config=None, remote_timeout=None, send_exemplars=None, tls_config=None, url=None, write_relabel_configs=None, local_vars_configuration=None):  # noqa: E501
        """ComCoreosMonitoringV1PrometheusSpecRemoteWrite - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._authorization = None
        self._basic_auth = None
        self._bearer_token = None
        self._bearer_token_file = None
        self._headers = None
        self._metadata_config = None
        self._name = None
        self._oauth2 = None
        self._proxy_url = None
        self._queue_config = None
        self._remote_timeout = None
        self._send_exemplars = None
        self._tls_config = None
        self._url = None
        self._write_relabel_configs = None
        self.discriminator = None

        if authorization is not None:
            self.authorization = authorization
        if basic_auth is not None:
            self.basic_auth = basic_auth
        if bearer_token is not None:
            self.bearer_token = bearer_token
        if bearer_token_file is not None:
            self.bearer_token_file = bearer_token_file
        if headers is not None:
            self.headers = headers
        if metadata_config is not None:
            self.metadata_config = metadata_config
        if name is not None:
            self.name = name
        if oauth2 is not None:
            self.oauth2 = oauth2
        if proxy_url is not None:
            self.proxy_url = proxy_url
        if queue_config is not None:
            self.queue_config = queue_config
        if remote_timeout is not None:
            self.remote_timeout = remote_timeout
        if send_exemplars is not None:
            self.send_exemplars = send_exemplars
        if tls_config is not None:
            self.tls_config = tls_config
        self.url = url
        if write_relabel_configs is not None:
            self.write_relabel_configs = write_relabel_configs

    @property
    def authorization(self):
        """Gets the authorization of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501


        :return: The authorization of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecAuthorization1
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """Sets the authorization of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.


        :param authorization: The authorization of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecAuthorization1
        """

        self._authorization = authorization

    @property
    def basic_auth(self):
        """Gets the basic_auth of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501


        :return: The basic_auth of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecBasicAuth
        """
        return self._basic_auth

    @basic_auth.setter
    def basic_auth(self, basic_auth):
        """Sets the basic_auth of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.


        :param basic_auth: The basic_auth of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecBasicAuth
        """

        self._basic_auth = basic_auth

    @property
    def bearer_token(self):
        """Gets the bearer_token of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501

        Bearer token for remote write.  # noqa: E501

        :return: The bearer_token of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :rtype: str
        """
        return self._bearer_token

    @bearer_token.setter
    def bearer_token(self, bearer_token):
        """Sets the bearer_token of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.

        Bearer token for remote write.  # noqa: E501

        :param bearer_token: The bearer_token of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :type: str
        """

        self._bearer_token = bearer_token

    @property
    def bearer_token_file(self):
        """Gets the bearer_token_file of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501

        File to read bearer token for remote write.  # noqa: E501

        :return: The bearer_token_file of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :rtype: str
        """
        return self._bearer_token_file

    @bearer_token_file.setter
    def bearer_token_file(self, bearer_token_file):
        """Sets the bearer_token_file of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.

        File to read bearer token for remote write.  # noqa: E501

        :param bearer_token_file: The bearer_token_file of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :type: str
        """

        self._bearer_token_file = bearer_token_file

    @property
    def headers(self):
        """Gets the headers of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501

        Custom HTTP headers to be sent along with each remote write request. Be aware that headers that are set by Prometheus itself can't be overwritten. Only valid in Prometheus versions 2.25.0 and newer.  # noqa: E501

        :return: The headers of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.

        Custom HTTP headers to be sent along with each remote write request. Be aware that headers that are set by Prometheus itself can't be overwritten. Only valid in Prometheus versions 2.25.0 and newer.  # noqa: E501

        :param headers: The headers of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :type: dict(str, str)
        """

        self._headers = headers

    @property
    def metadata_config(self):
        """Gets the metadata_config of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501


        :return: The metadata_config of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecMetadataConfig
        """
        return self._metadata_config

    @metadata_config.setter
    def metadata_config(self, metadata_config):
        """Sets the metadata_config of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.


        :param metadata_config: The metadata_config of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecMetadataConfig
        """

        self._metadata_config = metadata_config

    @property
    def name(self):
        """Gets the name of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501

        The name of the remote write queue, must be unique if specified. The name is used in metrics and logging in order to differentiate queues. Only valid in Prometheus versions 2.15.0 and newer.  # noqa: E501

        :return: The name of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.

        The name of the remote write queue, must be unique if specified. The name is used in metrics and logging in order to differentiate queues. Only valid in Prometheus versions 2.15.0 and newer.  # noqa: E501

        :param name: The name of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def oauth2(self):
        """Gets the oauth2 of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501


        :return: The oauth2 of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PodMonitorSpecOauth2
        """
        return self._oauth2

    @oauth2.setter
    def oauth2(self, oauth2):
        """Sets the oauth2 of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.


        :param oauth2: The oauth2 of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :type: ComCoreosMonitoringV1PodMonitorSpecOauth2
        """

        self._oauth2 = oauth2

    @property
    def proxy_url(self):
        """Gets the proxy_url of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501

        Optional ProxyURL  # noqa: E501

        :return: The proxy_url of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :rtype: str
        """
        return self._proxy_url

    @proxy_url.setter
    def proxy_url(self, proxy_url):
        """Sets the proxy_url of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.

        Optional ProxyURL  # noqa: E501

        :param proxy_url: The proxy_url of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :type: str
        """

        self._proxy_url = proxy_url

    @property
    def queue_config(self):
        """Gets the queue_config of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501


        :return: The queue_config of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecQueueConfig
        """
        return self._queue_config

    @queue_config.setter
    def queue_config(self, queue_config):
        """Sets the queue_config of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.


        :param queue_config: The queue_config of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecQueueConfig
        """

        self._queue_config = queue_config

    @property
    def remote_timeout(self):
        """Gets the remote_timeout of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501

        Timeout for requests to the remote write endpoint.  # noqa: E501

        :return: The remote_timeout of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :rtype: str
        """
        return self._remote_timeout

    @remote_timeout.setter
    def remote_timeout(self, remote_timeout):
        """Sets the remote_timeout of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.

        Timeout for requests to the remote write endpoint.  # noqa: E501

        :param remote_timeout: The remote_timeout of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :type: str
        """

        self._remote_timeout = remote_timeout

    @property
    def send_exemplars(self):
        """Gets the send_exemplars of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501

        Enables sending of exemplars over remote write. Note that exemplar-storage itself must be enabled using the enableFeature option for exemplars to be scraped in the first place.  Only valid in Prometheus versions 2.27.0 and newer.  # noqa: E501

        :return: The send_exemplars of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :rtype: bool
        """
        return self._send_exemplars

    @send_exemplars.setter
    def send_exemplars(self, send_exemplars):
        """Sets the send_exemplars of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.

        Enables sending of exemplars over remote write. Note that exemplar-storage itself must be enabled using the enableFeature option for exemplars to be scraped in the first place.  Only valid in Prometheus versions 2.27.0 and newer.  # noqa: E501

        :param send_exemplars: The send_exemplars of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :type: bool
        """

        self._send_exemplars = send_exemplars

    @property
    def tls_config(self):
        """Gets the tls_config of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501


        :return: The tls_config of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecTlsConfig1
        """
        return self._tls_config

    @tls_config.setter
    def tls_config(self, tls_config):
        """Sets the tls_config of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.


        :param tls_config: The tls_config of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecTlsConfig1
        """

        self._tls_config = tls_config

    @property
    def url(self):
        """Gets the url of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501

        The URL of the endpoint to send samples to.  # noqa: E501

        :return: The url of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.

        The URL of the endpoint to send samples to.  # noqa: E501

        :param url: The url of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def write_relabel_configs(self):
        """Gets the write_relabel_configs of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501

        The list of remote write relabel configurations.  # noqa: E501

        :return: The write_relabel_configs of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1PodMonitorSpecMetricRelabelings]
        """
        return self._write_relabel_configs

    @write_relabel_configs.setter
    def write_relabel_configs(self, write_relabel_configs):
        """Sets the write_relabel_configs of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.

        The list of remote write relabel configurations.  # noqa: E501

        :param write_relabel_configs: The write_relabel_configs of this ComCoreosMonitoringV1PrometheusSpecRemoteWrite.  # noqa: E501
        :type: list[ComCoreosMonitoringV1PodMonitorSpecMetricRelabelings]
        """

        self._write_relabel_configs = write_relabel_configs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComCoreosMonitoringV1PrometheusSpecRemoteWrite):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComCoreosMonitoringV1PrometheusSpecRemoteWrite):
            return True

        return self.to_dict() != other.to_dict()
