# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_server': 'bool',
        'audit': 'bool',
        'authenticator': 'bool',
        'controller_manager': 'bool',
        'scheduler': 'bool'
    }

    attribute_map = {
        'api_server': 'apiServer',
        'audit': 'audit',
        'authenticator': 'authenticator',
        'controller_manager': 'controllerManager',
        'scheduler': 'scheduler'
    }

    def __init__(self, api_server=None, audit=None, authenticator=None, controller_manager=None, scheduler=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_server = None
        self._audit = None
        self._authenticator = None
        self._controller_manager = None
        self._scheduler = None
        self.discriminator = None

        self.api_server = api_server
        self.audit = audit
        self.authenticator = authenticator
        self.controller_manager = controller_manager
        self.scheduler = scheduler

    @property
    def api_server(self):
        """Gets the api_server of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging.  # noqa: E501

        APIServer indicates if the Kubernetes API Server log (kube-apiserver) shoulkd be enabled  # noqa: E501

        :return: The api_server of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging.  # noqa: E501
        :rtype: bool
        """
        return self._api_server

    @api_server.setter
    def api_server(self, api_server):
        """Sets the api_server of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging.

        APIServer indicates if the Kubernetes API Server log (kube-apiserver) shoulkd be enabled  # noqa: E501

        :param api_server: The api_server of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and api_server is None:  # noqa: E501
            raise ValueError("Invalid value for `api_server`, must not be `None`")  # noqa: E501

        self._api_server = api_server

    @property
    def audit(self):
        """Gets the audit of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging.  # noqa: E501

        Audit indicates if the Kubernetes API audit log should be enabled  # noqa: E501

        :return: The audit of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging.  # noqa: E501
        :rtype: bool
        """
        return self._audit

    @audit.setter
    def audit(self, audit):
        """Sets the audit of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging.

        Audit indicates if the Kubernetes API audit log should be enabled  # noqa: E501

        :param audit: The audit of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and audit is None:  # noqa: E501
            raise ValueError("Invalid value for `audit`, must not be `None`")  # noqa: E501

        self._audit = audit

    @property
    def authenticator(self):
        """Gets the authenticator of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging.  # noqa: E501

        Authenticator indicates if the iam authenticator log should be enabled  # noqa: E501

        :return: The authenticator of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging.  # noqa: E501
        :rtype: bool
        """
        return self._authenticator

    @authenticator.setter
    def authenticator(self, authenticator):
        """Sets the authenticator of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging.

        Authenticator indicates if the iam authenticator log should be enabled  # noqa: E501

        :param authenticator: The authenticator of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and authenticator is None:  # noqa: E501
            raise ValueError("Invalid value for `authenticator`, must not be `None`")  # noqa: E501

        self._authenticator = authenticator

    @property
    def controller_manager(self):
        """Gets the controller_manager of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging.  # noqa: E501

        ControllerManager indicates if the controller manager (kube-controller-manager) log should be enabled  # noqa: E501

        :return: The controller_manager of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging.  # noqa: E501
        :rtype: bool
        """
        return self._controller_manager

    @controller_manager.setter
    def controller_manager(self, controller_manager):
        """Sets the controller_manager of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging.

        ControllerManager indicates if the controller manager (kube-controller-manager) log should be enabled  # noqa: E501

        :param controller_manager: The controller_manager of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and controller_manager is None:  # noqa: E501
            raise ValueError("Invalid value for `controller_manager`, must not be `None`")  # noqa: E501

        self._controller_manager = controller_manager

    @property
    def scheduler(self):
        """Gets the scheduler of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging.  # noqa: E501

        Scheduler indicates if the Kubernetes scheduler (kube-scheduler) log should be enabled  # noqa: E501

        :return: The scheduler of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging.  # noqa: E501
        :rtype: bool
        """
        return self._scheduler

    @scheduler.setter
    def scheduler(self, scheduler):
        """Sets the scheduler of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging.

        Scheduler indicates if the Kubernetes scheduler (kube-scheduler) log should be enabled  # noqa: E501

        :param scheduler: The scheduler of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and scheduler is None:  # noqa: E501
            raise ValueError("Invalid value for `scheduler`, must not be `None`")  # noqa: E501

        self._scheduler = scheduler

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecLogging):
            return True

        return self.to_dict() != other.to_dict()
