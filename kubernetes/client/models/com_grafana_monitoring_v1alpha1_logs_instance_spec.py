# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComGrafanaMonitoringV1alpha1LogsInstanceSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'additional_scrape_configs': 'ComGrafanaMonitoringV1alpha1LogsInstanceSpecAdditionalScrapeConfigs',
        'clients': 'list[ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients]',
        'pod_logs_namespace_selector': 'ComGrafanaMonitoringV1alpha1LogsInstanceSpecPodLogsNamespaceSelector',
        'pod_logs_selector': 'ComGrafanaMonitoringV1alpha1LogsInstanceSpecPodLogsSelector',
        'target_config': 'ComGrafanaMonitoringV1alpha1LogsInstanceSpecTargetConfig'
    }

    attribute_map = {
        'additional_scrape_configs': 'additionalScrapeConfigs',
        'clients': 'clients',
        'pod_logs_namespace_selector': 'podLogsNamespaceSelector',
        'pod_logs_selector': 'podLogsSelector',
        'target_config': 'targetConfig'
    }

    def __init__(self, additional_scrape_configs=None, clients=None, pod_logs_namespace_selector=None, pod_logs_selector=None, target_config=None, local_vars_configuration=None):  # noqa: E501
        """ComGrafanaMonitoringV1alpha1LogsInstanceSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._additional_scrape_configs = None
        self._clients = None
        self._pod_logs_namespace_selector = None
        self._pod_logs_selector = None
        self._target_config = None
        self.discriminator = None

        if additional_scrape_configs is not None:
            self.additional_scrape_configs = additional_scrape_configs
        if clients is not None:
            self.clients = clients
        if pod_logs_namespace_selector is not None:
            self.pod_logs_namespace_selector = pod_logs_namespace_selector
        if pod_logs_selector is not None:
            self.pod_logs_selector = pod_logs_selector
        if target_config is not None:
            self.target_config = target_config

    @property
    def additional_scrape_configs(self):
        """Gets the additional_scrape_configs of this ComGrafanaMonitoringV1alpha1LogsInstanceSpec.  # noqa: E501


        :return: The additional_scrape_configs of this ComGrafanaMonitoringV1alpha1LogsInstanceSpec.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1LogsInstanceSpecAdditionalScrapeConfigs
        """
        return self._additional_scrape_configs

    @additional_scrape_configs.setter
    def additional_scrape_configs(self, additional_scrape_configs):
        """Sets the additional_scrape_configs of this ComGrafanaMonitoringV1alpha1LogsInstanceSpec.


        :param additional_scrape_configs: The additional_scrape_configs of this ComGrafanaMonitoringV1alpha1LogsInstanceSpec.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1LogsInstanceSpecAdditionalScrapeConfigs
        """

        self._additional_scrape_configs = additional_scrape_configs

    @property
    def clients(self):
        """Gets the clients of this ComGrafanaMonitoringV1alpha1LogsInstanceSpec.  # noqa: E501

        Clients controls where logs are written to for this instance.  # noqa: E501

        :return: The clients of this ComGrafanaMonitoringV1alpha1LogsInstanceSpec.  # noqa: E501
        :rtype: list[ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this ComGrafanaMonitoringV1alpha1LogsInstanceSpec.

        Clients controls where logs are written to for this instance.  # noqa: E501

        :param clients: The clients of this ComGrafanaMonitoringV1alpha1LogsInstanceSpec.  # noqa: E501
        :type: list[ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients]
        """

        self._clients = clients

    @property
    def pod_logs_namespace_selector(self):
        """Gets the pod_logs_namespace_selector of this ComGrafanaMonitoringV1alpha1LogsInstanceSpec.  # noqa: E501


        :return: The pod_logs_namespace_selector of this ComGrafanaMonitoringV1alpha1LogsInstanceSpec.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1LogsInstanceSpecPodLogsNamespaceSelector
        """
        return self._pod_logs_namespace_selector

    @pod_logs_namespace_selector.setter
    def pod_logs_namespace_selector(self, pod_logs_namespace_selector):
        """Sets the pod_logs_namespace_selector of this ComGrafanaMonitoringV1alpha1LogsInstanceSpec.


        :param pod_logs_namespace_selector: The pod_logs_namespace_selector of this ComGrafanaMonitoringV1alpha1LogsInstanceSpec.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1LogsInstanceSpecPodLogsNamespaceSelector
        """

        self._pod_logs_namespace_selector = pod_logs_namespace_selector

    @property
    def pod_logs_selector(self):
        """Gets the pod_logs_selector of this ComGrafanaMonitoringV1alpha1LogsInstanceSpec.  # noqa: E501


        :return: The pod_logs_selector of this ComGrafanaMonitoringV1alpha1LogsInstanceSpec.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1LogsInstanceSpecPodLogsSelector
        """
        return self._pod_logs_selector

    @pod_logs_selector.setter
    def pod_logs_selector(self, pod_logs_selector):
        """Sets the pod_logs_selector of this ComGrafanaMonitoringV1alpha1LogsInstanceSpec.


        :param pod_logs_selector: The pod_logs_selector of this ComGrafanaMonitoringV1alpha1LogsInstanceSpec.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1LogsInstanceSpecPodLogsSelector
        """

        self._pod_logs_selector = pod_logs_selector

    @property
    def target_config(self):
        """Gets the target_config of this ComGrafanaMonitoringV1alpha1LogsInstanceSpec.  # noqa: E501


        :return: The target_config of this ComGrafanaMonitoringV1alpha1LogsInstanceSpec.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1LogsInstanceSpecTargetConfig
        """
        return self._target_config

    @target_config.setter
    def target_config(self, target_config):
        """Sets the target_config of this ComGrafanaMonitoringV1alpha1LogsInstanceSpec.


        :param target_config: The target_config of this ComGrafanaMonitoringV1alpha1LogsInstanceSpec.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1LogsInstanceSpecTargetConfig
        """

        self._target_config = target_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1LogsInstanceSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1LogsInstanceSpec):
            return True

        return self.to_dict() != other.to_dict()
