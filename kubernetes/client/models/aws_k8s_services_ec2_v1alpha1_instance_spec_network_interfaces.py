# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associate_carrier_ip_address': 'bool',
        'associate_public_ip_address': 'bool',
        'delete_on_termination': 'bool',
        'description': 'str',
        'device_index': 'int',
        'interface_type': 'str',
        'ipv4_prefix_count': 'int',
        'ipv4_prefixes': 'list[AwsK8sServicesEc2V1alpha1InstanceSpecIpv4Prefixes]',
        'ipv6_address_count': 'int',
        'ipv6_addresses': 'list[AwsK8sServicesEc2V1alpha1InstanceSpecIpv6Addresses]',
        'ipv6_prefix_count': 'int',
        'ipv6_prefixes': 'list[AwsK8sServicesEc2V1alpha1InstanceSpecIpv6Prefixes]',
        'network_card_index': 'int',
        'network_interface_id': 'str',
        'private_ip_address': 'str',
        'private_ip_addresses': 'list[AwsK8sServicesEc2V1alpha1InstanceSpecPrivateIPAddresses]',
        'secondary_private_ip_address_count': 'int',
        'subnet_id': 'str'
    }

    attribute_map = {
        'associate_carrier_ip_address': 'associateCarrierIPAddress',
        'associate_public_ip_address': 'associatePublicIPAddress',
        'delete_on_termination': 'deleteOnTermination',
        'description': 'description',
        'device_index': 'deviceIndex',
        'interface_type': 'interfaceType',
        'ipv4_prefix_count': 'ipv4PrefixCount',
        'ipv4_prefixes': 'ipv4Prefixes',
        'ipv6_address_count': 'ipv6AddressCount',
        'ipv6_addresses': 'ipv6Addresses',
        'ipv6_prefix_count': 'ipv6PrefixCount',
        'ipv6_prefixes': 'ipv6Prefixes',
        'network_card_index': 'networkCardIndex',
        'network_interface_id': 'networkInterfaceID',
        'private_ip_address': 'privateIPAddress',
        'private_ip_addresses': 'privateIPAddresses',
        'secondary_private_ip_address_count': 'secondaryPrivateIPAddressCount',
        'subnet_id': 'subnetID'
    }

    def __init__(self, associate_carrier_ip_address=None, associate_public_ip_address=None, delete_on_termination=None, description=None, device_index=None, interface_type=None, ipv4_prefix_count=None, ipv4_prefixes=None, ipv6_address_count=None, ipv6_addresses=None, ipv6_prefix_count=None, ipv6_prefixes=None, network_card_index=None, network_interface_id=None, private_ip_address=None, private_ip_addresses=None, secondary_private_ip_address_count=None, subnet_id=None, local_vars_configuration=None):  # noqa: E501
        """AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._associate_carrier_ip_address = None
        self._associate_public_ip_address = None
        self._delete_on_termination = None
        self._description = None
        self._device_index = None
        self._interface_type = None
        self._ipv4_prefix_count = None
        self._ipv4_prefixes = None
        self._ipv6_address_count = None
        self._ipv6_addresses = None
        self._ipv6_prefix_count = None
        self._ipv6_prefixes = None
        self._network_card_index = None
        self._network_interface_id = None
        self._private_ip_address = None
        self._private_ip_addresses = None
        self._secondary_private_ip_address_count = None
        self._subnet_id = None
        self.discriminator = None

        if associate_carrier_ip_address is not None:
            self.associate_carrier_ip_address = associate_carrier_ip_address
        if associate_public_ip_address is not None:
            self.associate_public_ip_address = associate_public_ip_address
        if delete_on_termination is not None:
            self.delete_on_termination = delete_on_termination
        if description is not None:
            self.description = description
        if device_index is not None:
            self.device_index = device_index
        if interface_type is not None:
            self.interface_type = interface_type
        if ipv4_prefix_count is not None:
            self.ipv4_prefix_count = ipv4_prefix_count
        if ipv4_prefixes is not None:
            self.ipv4_prefixes = ipv4_prefixes
        if ipv6_address_count is not None:
            self.ipv6_address_count = ipv6_address_count
        if ipv6_addresses is not None:
            self.ipv6_addresses = ipv6_addresses
        if ipv6_prefix_count is not None:
            self.ipv6_prefix_count = ipv6_prefix_count
        if ipv6_prefixes is not None:
            self.ipv6_prefixes = ipv6_prefixes
        if network_card_index is not None:
            self.network_card_index = network_card_index
        if network_interface_id is not None:
            self.network_interface_id = network_interface_id
        if private_ip_address is not None:
            self.private_ip_address = private_ip_address
        if private_ip_addresses is not None:
            self.private_ip_addresses = private_ip_addresses
        if secondary_private_ip_address_count is not None:
            self.secondary_private_ip_address_count = secondary_private_ip_address_count
        if subnet_id is not None:
            self.subnet_id = subnet_id

    @property
    def associate_carrier_ip_address(self):
        """Gets the associate_carrier_ip_address of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501


        :return: The associate_carrier_ip_address of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :rtype: bool
        """
        return self._associate_carrier_ip_address

    @associate_carrier_ip_address.setter
    def associate_carrier_ip_address(self, associate_carrier_ip_address):
        """Sets the associate_carrier_ip_address of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.


        :param associate_carrier_ip_address: The associate_carrier_ip_address of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :type: bool
        """

        self._associate_carrier_ip_address = associate_carrier_ip_address

    @property
    def associate_public_ip_address(self):
        """Gets the associate_public_ip_address of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501


        :return: The associate_public_ip_address of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :rtype: bool
        """
        return self._associate_public_ip_address

    @associate_public_ip_address.setter
    def associate_public_ip_address(self, associate_public_ip_address):
        """Sets the associate_public_ip_address of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.


        :param associate_public_ip_address: The associate_public_ip_address of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :type: bool
        """

        self._associate_public_ip_address = associate_public_ip_address

    @property
    def delete_on_termination(self):
        """Gets the delete_on_termination of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501


        :return: The delete_on_termination of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :rtype: bool
        """
        return self._delete_on_termination

    @delete_on_termination.setter
    def delete_on_termination(self, delete_on_termination):
        """Sets the delete_on_termination of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.


        :param delete_on_termination: The delete_on_termination of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :type: bool
        """

        self._delete_on_termination = delete_on_termination

    @property
    def description(self):
        """Gets the description of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501


        :return: The description of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.


        :param description: The description of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def device_index(self):
        """Gets the device_index of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501


        :return: The device_index of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :rtype: int
        """
        return self._device_index

    @device_index.setter
    def device_index(self, device_index):
        """Sets the device_index of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.


        :param device_index: The device_index of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :type: int
        """

        self._device_index = device_index

    @property
    def interface_type(self):
        """Gets the interface_type of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501


        :return: The interface_type of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :rtype: str
        """
        return self._interface_type

    @interface_type.setter
    def interface_type(self, interface_type):
        """Sets the interface_type of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.


        :param interface_type: The interface_type of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :type: str
        """

        self._interface_type = interface_type

    @property
    def ipv4_prefix_count(self):
        """Gets the ipv4_prefix_count of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501


        :return: The ipv4_prefix_count of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :rtype: int
        """
        return self._ipv4_prefix_count

    @ipv4_prefix_count.setter
    def ipv4_prefix_count(self, ipv4_prefix_count):
        """Sets the ipv4_prefix_count of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.


        :param ipv4_prefix_count: The ipv4_prefix_count of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :type: int
        """

        self._ipv4_prefix_count = ipv4_prefix_count

    @property
    def ipv4_prefixes(self):
        """Gets the ipv4_prefixes of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501


        :return: The ipv4_prefixes of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1InstanceSpecIpv4Prefixes]
        """
        return self._ipv4_prefixes

    @ipv4_prefixes.setter
    def ipv4_prefixes(self, ipv4_prefixes):
        """Sets the ipv4_prefixes of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.


        :param ipv4_prefixes: The ipv4_prefixes of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1InstanceSpecIpv4Prefixes]
        """

        self._ipv4_prefixes = ipv4_prefixes

    @property
    def ipv6_address_count(self):
        """Gets the ipv6_address_count of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501


        :return: The ipv6_address_count of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :rtype: int
        """
        return self._ipv6_address_count

    @ipv6_address_count.setter
    def ipv6_address_count(self, ipv6_address_count):
        """Sets the ipv6_address_count of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.


        :param ipv6_address_count: The ipv6_address_count of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :type: int
        """

        self._ipv6_address_count = ipv6_address_count

    @property
    def ipv6_addresses(self):
        """Gets the ipv6_addresses of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501


        :return: The ipv6_addresses of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1InstanceSpecIpv6Addresses]
        """
        return self._ipv6_addresses

    @ipv6_addresses.setter
    def ipv6_addresses(self, ipv6_addresses):
        """Sets the ipv6_addresses of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.


        :param ipv6_addresses: The ipv6_addresses of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1InstanceSpecIpv6Addresses]
        """

        self._ipv6_addresses = ipv6_addresses

    @property
    def ipv6_prefix_count(self):
        """Gets the ipv6_prefix_count of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501


        :return: The ipv6_prefix_count of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :rtype: int
        """
        return self._ipv6_prefix_count

    @ipv6_prefix_count.setter
    def ipv6_prefix_count(self, ipv6_prefix_count):
        """Sets the ipv6_prefix_count of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.


        :param ipv6_prefix_count: The ipv6_prefix_count of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :type: int
        """

        self._ipv6_prefix_count = ipv6_prefix_count

    @property
    def ipv6_prefixes(self):
        """Gets the ipv6_prefixes of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501


        :return: The ipv6_prefixes of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1InstanceSpecIpv6Prefixes]
        """
        return self._ipv6_prefixes

    @ipv6_prefixes.setter
    def ipv6_prefixes(self, ipv6_prefixes):
        """Sets the ipv6_prefixes of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.


        :param ipv6_prefixes: The ipv6_prefixes of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1InstanceSpecIpv6Prefixes]
        """

        self._ipv6_prefixes = ipv6_prefixes

    @property
    def network_card_index(self):
        """Gets the network_card_index of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501


        :return: The network_card_index of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :rtype: int
        """
        return self._network_card_index

    @network_card_index.setter
    def network_card_index(self, network_card_index):
        """Sets the network_card_index of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.


        :param network_card_index: The network_card_index of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :type: int
        """

        self._network_card_index = network_card_index

    @property
    def network_interface_id(self):
        """Gets the network_interface_id of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501


        :return: The network_interface_id of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :rtype: str
        """
        return self._network_interface_id

    @network_interface_id.setter
    def network_interface_id(self, network_interface_id):
        """Sets the network_interface_id of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.


        :param network_interface_id: The network_interface_id of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :type: str
        """

        self._network_interface_id = network_interface_id

    @property
    def private_ip_address(self):
        """Gets the private_ip_address of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501


        :return: The private_ip_address of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :rtype: str
        """
        return self._private_ip_address

    @private_ip_address.setter
    def private_ip_address(self, private_ip_address):
        """Sets the private_ip_address of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.


        :param private_ip_address: The private_ip_address of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :type: str
        """

        self._private_ip_address = private_ip_address

    @property
    def private_ip_addresses(self):
        """Gets the private_ip_addresses of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501


        :return: The private_ip_addresses of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1InstanceSpecPrivateIPAddresses]
        """
        return self._private_ip_addresses

    @private_ip_addresses.setter
    def private_ip_addresses(self, private_ip_addresses):
        """Sets the private_ip_addresses of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.


        :param private_ip_addresses: The private_ip_addresses of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1InstanceSpecPrivateIPAddresses]
        """

        self._private_ip_addresses = private_ip_addresses

    @property
    def secondary_private_ip_address_count(self):
        """Gets the secondary_private_ip_address_count of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501


        :return: The secondary_private_ip_address_count of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :rtype: int
        """
        return self._secondary_private_ip_address_count

    @secondary_private_ip_address_count.setter
    def secondary_private_ip_address_count(self, secondary_private_ip_address_count):
        """Sets the secondary_private_ip_address_count of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.


        :param secondary_private_ip_address_count: The secondary_private_ip_address_count of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :type: int
        """

        self._secondary_private_ip_address_count = secondary_private_ip_address_count

    @property
    def subnet_id(self):
        """Gets the subnet_id of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501


        :return: The subnet_id of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.


        :param subnet_id: The subnet_id of this AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces.  # noqa: E501
        :type: str
        """

        self._subnet_id = subnet_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces):
            return True

        return self.to_dict() != other.to_dict()
