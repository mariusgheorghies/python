# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoTigeraOperatorV1InstallationStatusComputed(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'calico_network': 'IoTigeraOperatorV1InstallationSpecCalicoNetwork',
        'certificate_management': 'IoTigeraOperatorV1InstallationSpecCertificateManagement',
        'cni': 'IoTigeraOperatorV1InstallationSpecCni',
        'component_resources': 'list[IoTigeraOperatorV1InstallationSpecComponentResources]',
        'control_plane_node_selector': 'dict(str, str)',
        'control_plane_tolerations': 'list[ComCoreosMonitoringV1AlertmanagerSpecTolerations]',
        'flex_volume_path': 'str',
        'image_path': 'str',
        'image_prefix': 'str',
        'image_pull_secrets': 'list[ComCoreosMonitoringV1AlertmanagerSpecImagePullSecrets]',
        'kubernetes_provider': 'str',
        'node_metrics_port': 'int',
        'node_update_strategy': 'IoTigeraOperatorV1InstallationSpecNodeUpdateStrategy',
        'registry': 'str',
        'typha_affinity': 'IoTigeraOperatorV1InstallationSpecTyphaAffinity',
        'typha_metrics_port': 'int',
        'variant': 'str'
    }

    attribute_map = {
        'calico_network': 'calicoNetwork',
        'certificate_management': 'certificateManagement',
        'cni': 'cni',
        'component_resources': 'componentResources',
        'control_plane_node_selector': 'controlPlaneNodeSelector',
        'control_plane_tolerations': 'controlPlaneTolerations',
        'flex_volume_path': 'flexVolumePath',
        'image_path': 'imagePath',
        'image_prefix': 'imagePrefix',
        'image_pull_secrets': 'imagePullSecrets',
        'kubernetes_provider': 'kubernetesProvider',
        'node_metrics_port': 'nodeMetricsPort',
        'node_update_strategy': 'nodeUpdateStrategy',
        'registry': 'registry',
        'typha_affinity': 'typhaAffinity',
        'typha_metrics_port': 'typhaMetricsPort',
        'variant': 'variant'
    }

    def __init__(self, calico_network=None, certificate_management=None, cni=None, component_resources=None, control_plane_node_selector=None, control_plane_tolerations=None, flex_volume_path=None, image_path=None, image_prefix=None, image_pull_secrets=None, kubernetes_provider=None, node_metrics_port=None, node_update_strategy=None, registry=None, typha_affinity=None, typha_metrics_port=None, variant=None, local_vars_configuration=None):  # noqa: E501
        """IoTigeraOperatorV1InstallationStatusComputed - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._calico_network = None
        self._certificate_management = None
        self._cni = None
        self._component_resources = None
        self._control_plane_node_selector = None
        self._control_plane_tolerations = None
        self._flex_volume_path = None
        self._image_path = None
        self._image_prefix = None
        self._image_pull_secrets = None
        self._kubernetes_provider = None
        self._node_metrics_port = None
        self._node_update_strategy = None
        self._registry = None
        self._typha_affinity = None
        self._typha_metrics_port = None
        self._variant = None
        self.discriminator = None

        if calico_network is not None:
            self.calico_network = calico_network
        if certificate_management is not None:
            self.certificate_management = certificate_management
        if cni is not None:
            self.cni = cni
        if component_resources is not None:
            self.component_resources = component_resources
        if control_plane_node_selector is not None:
            self.control_plane_node_selector = control_plane_node_selector
        if control_plane_tolerations is not None:
            self.control_plane_tolerations = control_plane_tolerations
        if flex_volume_path is not None:
            self.flex_volume_path = flex_volume_path
        if image_path is not None:
            self.image_path = image_path
        if image_prefix is not None:
            self.image_prefix = image_prefix
        if image_pull_secrets is not None:
            self.image_pull_secrets = image_pull_secrets
        if kubernetes_provider is not None:
            self.kubernetes_provider = kubernetes_provider
        if node_metrics_port is not None:
            self.node_metrics_port = node_metrics_port
        if node_update_strategy is not None:
            self.node_update_strategy = node_update_strategy
        if registry is not None:
            self.registry = registry
        if typha_affinity is not None:
            self.typha_affinity = typha_affinity
        if typha_metrics_port is not None:
            self.typha_metrics_port = typha_metrics_port
        if variant is not None:
            self.variant = variant

    @property
    def calico_network(self):
        """Gets the calico_network of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501


        :return: The calico_network of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :rtype: IoTigeraOperatorV1InstallationSpecCalicoNetwork
        """
        return self._calico_network

    @calico_network.setter
    def calico_network(self, calico_network):
        """Sets the calico_network of this IoTigeraOperatorV1InstallationStatusComputed.


        :param calico_network: The calico_network of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :type: IoTigeraOperatorV1InstallationSpecCalicoNetwork
        """

        self._calico_network = calico_network

    @property
    def certificate_management(self):
        """Gets the certificate_management of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501


        :return: The certificate_management of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :rtype: IoTigeraOperatorV1InstallationSpecCertificateManagement
        """
        return self._certificate_management

    @certificate_management.setter
    def certificate_management(self, certificate_management):
        """Sets the certificate_management of this IoTigeraOperatorV1InstallationStatusComputed.


        :param certificate_management: The certificate_management of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :type: IoTigeraOperatorV1InstallationSpecCertificateManagement
        """

        self._certificate_management = certificate_management

    @property
    def cni(self):
        """Gets the cni of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501


        :return: The cni of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :rtype: IoTigeraOperatorV1InstallationSpecCni
        """
        return self._cni

    @cni.setter
    def cni(self, cni):
        """Sets the cni of this IoTigeraOperatorV1InstallationStatusComputed.


        :param cni: The cni of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :type: IoTigeraOperatorV1InstallationSpecCni
        """

        self._cni = cni

    @property
    def component_resources(self):
        """Gets the component_resources of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501

        ComponentResources can be used to customize the resource requirements for each component. Node, Typha, and KubeControllers are supported for installations.  # noqa: E501

        :return: The component_resources of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :rtype: list[IoTigeraOperatorV1InstallationSpecComponentResources]
        """
        return self._component_resources

    @component_resources.setter
    def component_resources(self, component_resources):
        """Sets the component_resources of this IoTigeraOperatorV1InstallationStatusComputed.

        ComponentResources can be used to customize the resource requirements for each component. Node, Typha, and KubeControllers are supported for installations.  # noqa: E501

        :param component_resources: The component_resources of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :type: list[IoTigeraOperatorV1InstallationSpecComponentResources]
        """

        self._component_resources = component_resources

    @property
    def control_plane_node_selector(self):
        """Gets the control_plane_node_selector of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501

        ControlPlaneNodeSelector is used to select control plane nodes on which to run Calico components. This is globally applied to all resources created by the operator excluding daemonsets.  # noqa: E501

        :return: The control_plane_node_selector of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._control_plane_node_selector

    @control_plane_node_selector.setter
    def control_plane_node_selector(self, control_plane_node_selector):
        """Sets the control_plane_node_selector of this IoTigeraOperatorV1InstallationStatusComputed.

        ControlPlaneNodeSelector is used to select control plane nodes on which to run Calico components. This is globally applied to all resources created by the operator excluding daemonsets.  # noqa: E501

        :param control_plane_node_selector: The control_plane_node_selector of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :type: dict(str, str)
        """

        self._control_plane_node_selector = control_plane_node_selector

    @property
    def control_plane_tolerations(self):
        """Gets the control_plane_tolerations of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501

        ControlPlaneTolerations specify tolerations which are then globally applied to all resources created by the operator.  # noqa: E501

        :return: The control_plane_tolerations of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecTolerations]
        """
        return self._control_plane_tolerations

    @control_plane_tolerations.setter
    def control_plane_tolerations(self, control_plane_tolerations):
        """Sets the control_plane_tolerations of this IoTigeraOperatorV1InstallationStatusComputed.

        ControlPlaneTolerations specify tolerations which are then globally applied to all resources created by the operator.  # noqa: E501

        :param control_plane_tolerations: The control_plane_tolerations of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecTolerations]
        """

        self._control_plane_tolerations = control_plane_tolerations

    @property
    def flex_volume_path(self):
        """Gets the flex_volume_path of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501

        FlexVolumePath optionally specifies a custom path for FlexVolume. If not specified, FlexVolume will be enabled by default. If set to 'None', FlexVolume will be disabled. The default is based on the kubernetesProvider.  # noqa: E501

        :return: The flex_volume_path of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :rtype: str
        """
        return self._flex_volume_path

    @flex_volume_path.setter
    def flex_volume_path(self, flex_volume_path):
        """Sets the flex_volume_path of this IoTigeraOperatorV1InstallationStatusComputed.

        FlexVolumePath optionally specifies a custom path for FlexVolume. If not specified, FlexVolume will be enabled by default. If set to 'None', FlexVolume will be disabled. The default is based on the kubernetesProvider.  # noqa: E501

        :param flex_volume_path: The flex_volume_path of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :type: str
        """

        self._flex_volume_path = flex_volume_path

    @property
    def image_path(self):
        """Gets the image_path of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501

        ImagePath allows for the path part of an image to be specified. If specified then the specified value will be used as the image path for each image. If not specified or empty, the default for each image will be used. A special case value, UseDefault, is supported to explicitly specify the default image path will be used for each image.   Image format:    `<registry>/<imagePath>/<imagePrefix><imageName>:<image-tag>`   This option allows configuring the `<imagePath>` portion of the above format.  # noqa: E501

        :return: The image_path of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :rtype: str
        """
        return self._image_path

    @image_path.setter
    def image_path(self, image_path):
        """Sets the image_path of this IoTigeraOperatorV1InstallationStatusComputed.

        ImagePath allows for the path part of an image to be specified. If specified then the specified value will be used as the image path for each image. If not specified or empty, the default for each image will be used. A special case value, UseDefault, is supported to explicitly specify the default image path will be used for each image.   Image format:    `<registry>/<imagePath>/<imagePrefix><imageName>:<image-tag>`   This option allows configuring the `<imagePath>` portion of the above format.  # noqa: E501

        :param image_path: The image_path of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :type: str
        """

        self._image_path = image_path

    @property
    def image_prefix(self):
        """Gets the image_prefix of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501

        ImagePrefix allows for the prefix part of an image to be specified. If specified then the given value will be used as a prefix on each image. If not specified or empty, no prefix will be used. A special case value, UseDefault, is supported to explicitly specify the default image prefix will be used for each image.   Image format:    `<registry>/<imagePath>/<imagePrefix><imageName>:<image-tag>`   This option allows configuring the `<imagePrefix>` portion of the above format.  # noqa: E501

        :return: The image_prefix of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :rtype: str
        """
        return self._image_prefix

    @image_prefix.setter
    def image_prefix(self, image_prefix):
        """Sets the image_prefix of this IoTigeraOperatorV1InstallationStatusComputed.

        ImagePrefix allows for the prefix part of an image to be specified. If specified then the given value will be used as a prefix on each image. If not specified or empty, no prefix will be used. A special case value, UseDefault, is supported to explicitly specify the default image prefix will be used for each image.   Image format:    `<registry>/<imagePath>/<imagePrefix><imageName>:<image-tag>`   This option allows configuring the `<imagePrefix>` portion of the above format.  # noqa: E501

        :param image_prefix: The image_prefix of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :type: str
        """

        self._image_prefix = image_prefix

    @property
    def image_pull_secrets(self):
        """Gets the image_pull_secrets of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501

        ImagePullSecrets is an array of references to container registry pull secrets to use. These are applied to all images to be pulled.  # noqa: E501

        :return: The image_pull_secrets of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecImagePullSecrets]
        """
        return self._image_pull_secrets

    @image_pull_secrets.setter
    def image_pull_secrets(self, image_pull_secrets):
        """Sets the image_pull_secrets of this IoTigeraOperatorV1InstallationStatusComputed.

        ImagePullSecrets is an array of references to container registry pull secrets to use. These are applied to all images to be pulled.  # noqa: E501

        :param image_pull_secrets: The image_pull_secrets of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecImagePullSecrets]
        """

        self._image_pull_secrets = image_pull_secrets

    @property
    def kubernetes_provider(self):
        """Gets the kubernetes_provider of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501

        KubernetesProvider specifies a particular provider of the Kubernetes platform and enables provider-specific configuration. If the specified value is empty, the Operator will attempt to automatically determine the current provider. If the specified value is not empty, the Operator will still attempt auto-detection, but will additionally compare the auto-detected value to the specified value to confirm they match.  # noqa: E501

        :return: The kubernetes_provider of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :rtype: str
        """
        return self._kubernetes_provider

    @kubernetes_provider.setter
    def kubernetes_provider(self, kubernetes_provider):
        """Sets the kubernetes_provider of this IoTigeraOperatorV1InstallationStatusComputed.

        KubernetesProvider specifies a particular provider of the Kubernetes platform and enables provider-specific configuration. If the specified value is empty, the Operator will attempt to automatically determine the current provider. If the specified value is not empty, the Operator will still attempt auto-detection, but will additionally compare the auto-detected value to the specified value to confirm they match.  # noqa: E501

        :param kubernetes_provider: The kubernetes_provider of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :type: str
        """
        allowed_values = ["", "EKS", "GKE", "AKS", "OpenShift", "DockerEnterprise"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and kubernetes_provider not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `kubernetes_provider` ({0}), must be one of {1}"  # noqa: E501
                .format(kubernetes_provider, allowed_values)
            )

        self._kubernetes_provider = kubernetes_provider

    @property
    def node_metrics_port(self):
        """Gets the node_metrics_port of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501

        NodeMetricsPort specifies which port calico/node serves prometheus metrics on. By default, metrics are not enabled. If specified, this overrides any FelixConfiguration resources which may exist. If omitted, then prometheus metrics may still be configured through FelixConfiguration.  # noqa: E501

        :return: The node_metrics_port of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :rtype: int
        """
        return self._node_metrics_port

    @node_metrics_port.setter
    def node_metrics_port(self, node_metrics_port):
        """Sets the node_metrics_port of this IoTigeraOperatorV1InstallationStatusComputed.

        NodeMetricsPort specifies which port calico/node serves prometheus metrics on. By default, metrics are not enabled. If specified, this overrides any FelixConfiguration resources which may exist. If omitted, then prometheus metrics may still be configured through FelixConfiguration.  # noqa: E501

        :param node_metrics_port: The node_metrics_port of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :type: int
        """

        self._node_metrics_port = node_metrics_port

    @property
    def node_update_strategy(self):
        """Gets the node_update_strategy of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501


        :return: The node_update_strategy of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :rtype: IoTigeraOperatorV1InstallationSpecNodeUpdateStrategy
        """
        return self._node_update_strategy

    @node_update_strategy.setter
    def node_update_strategy(self, node_update_strategy):
        """Sets the node_update_strategy of this IoTigeraOperatorV1InstallationStatusComputed.


        :param node_update_strategy: The node_update_strategy of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :type: IoTigeraOperatorV1InstallationSpecNodeUpdateStrategy
        """

        self._node_update_strategy = node_update_strategy

    @property
    def registry(self):
        """Gets the registry of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501

        Registry is the default Docker registry used for component Docker images. If specified, all images will be pulled from this registry. If not specified then the default registries will be used. A special case value, UseDefault, is supported to explicitly specify the default registries will be used.   Image format:    `<registry>/<imagePath>/<imagePrefix><imageName>:<image-tag>`   This option allows configuring the `<registry>` portion of the above format.  # noqa: E501

        :return: The registry of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this IoTigeraOperatorV1InstallationStatusComputed.

        Registry is the default Docker registry used for component Docker images. If specified, all images will be pulled from this registry. If not specified then the default registries will be used. A special case value, UseDefault, is supported to explicitly specify the default registries will be used.   Image format:    `<registry>/<imagePath>/<imagePrefix><imageName>:<image-tag>`   This option allows configuring the `<registry>` portion of the above format.  # noqa: E501

        :param registry: The registry of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :type: str
        """

        self._registry = registry

    @property
    def typha_affinity(self):
        """Gets the typha_affinity of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501


        :return: The typha_affinity of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :rtype: IoTigeraOperatorV1InstallationSpecTyphaAffinity
        """
        return self._typha_affinity

    @typha_affinity.setter
    def typha_affinity(self, typha_affinity):
        """Sets the typha_affinity of this IoTigeraOperatorV1InstallationStatusComputed.


        :param typha_affinity: The typha_affinity of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :type: IoTigeraOperatorV1InstallationSpecTyphaAffinity
        """

        self._typha_affinity = typha_affinity

    @property
    def typha_metrics_port(self):
        """Gets the typha_metrics_port of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501

        TyphaMetricsPort specifies which port calico/typha serves prometheus metrics on. By default, metrics are not enabled.  # noqa: E501

        :return: The typha_metrics_port of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :rtype: int
        """
        return self._typha_metrics_port

    @typha_metrics_port.setter
    def typha_metrics_port(self, typha_metrics_port):
        """Sets the typha_metrics_port of this IoTigeraOperatorV1InstallationStatusComputed.

        TyphaMetricsPort specifies which port calico/typha serves prometheus metrics on. By default, metrics are not enabled.  # noqa: E501

        :param typha_metrics_port: The typha_metrics_port of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :type: int
        """

        self._typha_metrics_port = typha_metrics_port

    @property
    def variant(self):
        """Gets the variant of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501

        Variant is the product to install - one of Calico or TigeraSecureEnterprise Default: Calico  # noqa: E501

        :return: The variant of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :rtype: str
        """
        return self._variant

    @variant.setter
    def variant(self, variant):
        """Sets the variant of this IoTigeraOperatorV1InstallationStatusComputed.

        Variant is the product to install - one of Calico or TigeraSecureEnterprise Default: Calico  # noqa: E501

        :param variant: The variant of this IoTigeraOperatorV1InstallationStatusComputed.  # noqa: E501
        :type: str
        """
        allowed_values = ["Calico", "TigeraSecureEnterprise"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and variant not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `variant` ({0}), must be one of {1}"  # noqa: E501
                .format(variant, allowed_values)
            )

        self._variant = variant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoTigeraOperatorV1InstallationStatusComputed):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoTigeraOperatorV1InstallationStatusComputed):
            return True

        return self.to_dict() != other.to_dict()
