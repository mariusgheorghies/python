# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'conditions': 'list[IoXK8sClusterAddonsV1alpha3ClusterResourceSetStatusConditions]',
        'failure_message': 'str',
        'failure_reason': 'str',
        'initialized': 'bool',
        'observed_generation': 'int',
        'ready': 'bool',
        'ready_replicas': 'int',
        'replicas': 'int',
        'selector': 'str',
        'unavailable_replicas': 'int',
        'updated_replicas': 'int'
    }

    attribute_map = {
        'conditions': 'conditions',
        'failure_message': 'failureMessage',
        'failure_reason': 'failureReason',
        'initialized': 'initialized',
        'observed_generation': 'observedGeneration',
        'ready': 'ready',
        'ready_replicas': 'readyReplicas',
        'replicas': 'replicas',
        'selector': 'selector',
        'unavailable_replicas': 'unavailableReplicas',
        'updated_replicas': 'updatedReplicas'
    }

    def __init__(self, conditions=None, failure_message=None, failure_reason=None, initialized=None, observed_generation=None, ready=None, ready_replicas=None, replicas=None, selector=None, unavailable_replicas=None, updated_replicas=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._conditions = None
        self._failure_message = None
        self._failure_reason = None
        self._initialized = None
        self._observed_generation = None
        self._ready = None
        self._ready_replicas = None
        self._replicas = None
        self._selector = None
        self._unavailable_replicas = None
        self._updated_replicas = None
        self.discriminator = None

        if conditions is not None:
            self.conditions = conditions
        if failure_message is not None:
            self.failure_message = failure_message
        if failure_reason is not None:
            self.failure_reason = failure_reason
        if initialized is not None:
            self.initialized = initialized
        if observed_generation is not None:
            self.observed_generation = observed_generation
        if ready is not None:
            self.ready = ready
        if ready_replicas is not None:
            self.ready_replicas = ready_replicas
        if replicas is not None:
            self.replicas = replicas
        if selector is not None:
            self.selector = selector
        if unavailable_replicas is not None:
            self.unavailable_replicas = unavailable_replicas
        if updated_replicas is not None:
            self.updated_replicas = updated_replicas

    @property
    def conditions(self):
        """Gets the conditions of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501

        Conditions defines current service state of the KubeadmControlPlane.  # noqa: E501

        :return: The conditions of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501
        :rtype: list[IoXK8sClusterAddonsV1alpha3ClusterResourceSetStatusConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.

        Conditions defines current service state of the KubeadmControlPlane.  # noqa: E501

        :param conditions: The conditions of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501
        :type: list[IoXK8sClusterAddonsV1alpha3ClusterResourceSetStatusConditions]
        """

        self._conditions = conditions

    @property
    def failure_message(self):
        """Gets the failure_message of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501

        ErrorMessage indicates that there is a terminal problem reconciling the state, and will be set to a descriptive error message.  # noqa: E501

        :return: The failure_message of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501
        :rtype: str
        """
        return self._failure_message

    @failure_message.setter
    def failure_message(self, failure_message):
        """Sets the failure_message of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.

        ErrorMessage indicates that there is a terminal problem reconciling the state, and will be set to a descriptive error message.  # noqa: E501

        :param failure_message: The failure_message of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501
        :type: str
        """

        self._failure_message = failure_message

    @property
    def failure_reason(self):
        """Gets the failure_reason of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501

        FailureReason indicates that there is a terminal problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.  # noqa: E501

        :return: The failure_reason of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.

        FailureReason indicates that there is a terminal problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.  # noqa: E501

        :param failure_reason: The failure_reason of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501
        :type: str
        """

        self._failure_reason = failure_reason

    @property
    def initialized(self):
        """Gets the initialized of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501

        Initialized denotes whether or not the control plane has the uploaded kubeadm-config configmap.  # noqa: E501

        :return: The initialized of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501
        :rtype: bool
        """
        return self._initialized

    @initialized.setter
    def initialized(self, initialized):
        """Sets the initialized of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.

        Initialized denotes whether or not the control plane has the uploaded kubeadm-config configmap.  # noqa: E501

        :param initialized: The initialized of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501
        :type: bool
        """

        self._initialized = initialized

    @property
    def observed_generation(self):
        """Gets the observed_generation of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501

        ObservedGeneration is the latest generation observed by the controller.  # noqa: E501

        :return: The observed_generation of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501
        :rtype: int
        """
        return self._observed_generation

    @observed_generation.setter
    def observed_generation(self, observed_generation):
        """Sets the observed_generation of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.

        ObservedGeneration is the latest generation observed by the controller.  # noqa: E501

        :param observed_generation: The observed_generation of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501
        :type: int
        """

        self._observed_generation = observed_generation

    @property
    def ready(self):
        """Gets the ready of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501

        Ready denotes that the KubeadmControlPlane API Server is ready to receive requests.  # noqa: E501

        :return: The ready of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501
        :rtype: bool
        """
        return self._ready

    @ready.setter
    def ready(self, ready):
        """Sets the ready of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.

        Ready denotes that the KubeadmControlPlane API Server is ready to receive requests.  # noqa: E501

        :param ready: The ready of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501
        :type: bool
        """

        self._ready = ready

    @property
    def ready_replicas(self):
        """Gets the ready_replicas of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501

        Total number of fully running and ready control plane machines.  # noqa: E501

        :return: The ready_replicas of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501
        :rtype: int
        """
        return self._ready_replicas

    @ready_replicas.setter
    def ready_replicas(self, ready_replicas):
        """Sets the ready_replicas of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.

        Total number of fully running and ready control plane machines.  # noqa: E501

        :param ready_replicas: The ready_replicas of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501
        :type: int
        """

        self._ready_replicas = ready_replicas

    @property
    def replicas(self):
        """Gets the replicas of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501

        Total number of non-terminated machines targeted by this control plane (their labels match the selector).  # noqa: E501

        :return: The replicas of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.

        Total number of non-terminated machines targeted by this control plane (their labels match the selector).  # noqa: E501

        :param replicas: The replicas of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def selector(self):
        """Gets the selector of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501

        Selector is the label selector in string format to avoid introspection by clients, and is used to provide the CRD-based integration for the scale subresource and additional integrations for things like kubectl describe.. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors  # noqa: E501

        :return: The selector of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.

        Selector is the label selector in string format to avoid introspection by clients, and is used to provide the CRD-based integration for the scale subresource and additional integrations for things like kubectl describe.. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors  # noqa: E501

        :param selector: The selector of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501
        :type: str
        """

        self._selector = selector

    @property
    def unavailable_replicas(self):
        """Gets the unavailable_replicas of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501

        Total number of unavailable machines targeted by this control plane. This is the total number of machines that are still required for the deployment to have 100% available capacity. They may either be machines that are running but not yet ready or machines that still have not been created.  # noqa: E501

        :return: The unavailable_replicas of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501
        :rtype: int
        """
        return self._unavailable_replicas

    @unavailable_replicas.setter
    def unavailable_replicas(self, unavailable_replicas):
        """Sets the unavailable_replicas of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.

        Total number of unavailable machines targeted by this control plane. This is the total number of machines that are still required for the deployment to have 100% available capacity. They may either be machines that are running but not yet ready or machines that still have not been created.  # noqa: E501

        :param unavailable_replicas: The unavailable_replicas of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501
        :type: int
        """

        self._unavailable_replicas = unavailable_replicas

    @property
    def updated_replicas(self):
        """Gets the updated_replicas of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501

        Total number of non-terminated machines targeted by this control plane that have the desired template spec.  # noqa: E501

        :return: The updated_replicas of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501
        :rtype: int
        """
        return self._updated_replicas

    @updated_replicas.setter
    def updated_replicas(self, updated_replicas):
        """Sets the updated_replicas of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.

        Total number of non-terminated machines targeted by this control plane that have the desired template spec.  # noqa: E501

        :param updated_replicas: The updated_replicas of this IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus.  # noqa: E501
        :type: int
        """

        self._updated_replicas = updated_replicas

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterControlplaneV1alpha3KubeadmControlPlaneStatus):
            return True

        return self.to_dict() != other.to_dict()
