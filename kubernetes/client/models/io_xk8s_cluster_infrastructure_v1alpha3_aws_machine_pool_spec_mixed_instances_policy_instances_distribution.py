# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecMixedInstancesPolicyInstancesDistribution(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'on_demand_allocation_strategy': 'str',
        'on_demand_base_capacity': 'int',
        'on_demand_percentage_above_base_capacity': 'int',
        'spot_allocation_strategy': 'str'
    }

    attribute_map = {
        'on_demand_allocation_strategy': 'onDemandAllocationStrategy',
        'on_demand_base_capacity': 'onDemandBaseCapacity',
        'on_demand_percentage_above_base_capacity': 'onDemandPercentageAboveBaseCapacity',
        'spot_allocation_strategy': 'spotAllocationStrategy'
    }

    def __init__(self, on_demand_allocation_strategy=None, on_demand_base_capacity=None, on_demand_percentage_above_base_capacity=None, spot_allocation_strategy=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecMixedInstancesPolicyInstancesDistribution - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._on_demand_allocation_strategy = None
        self._on_demand_base_capacity = None
        self._on_demand_percentage_above_base_capacity = None
        self._spot_allocation_strategy = None
        self.discriminator = None

        if on_demand_allocation_strategy is not None:
            self.on_demand_allocation_strategy = on_demand_allocation_strategy
        if on_demand_base_capacity is not None:
            self.on_demand_base_capacity = on_demand_base_capacity
        if on_demand_percentage_above_base_capacity is not None:
            self.on_demand_percentage_above_base_capacity = on_demand_percentage_above_base_capacity
        if spot_allocation_strategy is not None:
            self.spot_allocation_strategy = spot_allocation_strategy

    @property
    def on_demand_allocation_strategy(self):
        """Gets the on_demand_allocation_strategy of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecMixedInstancesPolicyInstancesDistribution.  # noqa: E501

        OnDemandAllocationStrategy indicates how to allocate instance types to fulfill On-Demand capacity.  # noqa: E501

        :return: The on_demand_allocation_strategy of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecMixedInstancesPolicyInstancesDistribution.  # noqa: E501
        :rtype: str
        """
        return self._on_demand_allocation_strategy

    @on_demand_allocation_strategy.setter
    def on_demand_allocation_strategy(self, on_demand_allocation_strategy):
        """Sets the on_demand_allocation_strategy of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecMixedInstancesPolicyInstancesDistribution.

        OnDemandAllocationStrategy indicates how to allocate instance types to fulfill On-Demand capacity.  # noqa: E501

        :param on_demand_allocation_strategy: The on_demand_allocation_strategy of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecMixedInstancesPolicyInstancesDistribution.  # noqa: E501
        :type: str
        """
        allowed_values = ["prioritized"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and on_demand_allocation_strategy not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `on_demand_allocation_strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(on_demand_allocation_strategy, allowed_values)
            )

        self._on_demand_allocation_strategy = on_demand_allocation_strategy

    @property
    def on_demand_base_capacity(self):
        """Gets the on_demand_base_capacity of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecMixedInstancesPolicyInstancesDistribution.  # noqa: E501


        :return: The on_demand_base_capacity of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecMixedInstancesPolicyInstancesDistribution.  # noqa: E501
        :rtype: int
        """
        return self._on_demand_base_capacity

    @on_demand_base_capacity.setter
    def on_demand_base_capacity(self, on_demand_base_capacity):
        """Sets the on_demand_base_capacity of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecMixedInstancesPolicyInstancesDistribution.


        :param on_demand_base_capacity: The on_demand_base_capacity of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecMixedInstancesPolicyInstancesDistribution.  # noqa: E501
        :type: int
        """

        self._on_demand_base_capacity = on_demand_base_capacity

    @property
    def on_demand_percentage_above_base_capacity(self):
        """Gets the on_demand_percentage_above_base_capacity of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecMixedInstancesPolicyInstancesDistribution.  # noqa: E501


        :return: The on_demand_percentage_above_base_capacity of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecMixedInstancesPolicyInstancesDistribution.  # noqa: E501
        :rtype: int
        """
        return self._on_demand_percentage_above_base_capacity

    @on_demand_percentage_above_base_capacity.setter
    def on_demand_percentage_above_base_capacity(self, on_demand_percentage_above_base_capacity):
        """Sets the on_demand_percentage_above_base_capacity of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecMixedInstancesPolicyInstancesDistribution.


        :param on_demand_percentage_above_base_capacity: The on_demand_percentage_above_base_capacity of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecMixedInstancesPolicyInstancesDistribution.  # noqa: E501
        :type: int
        """

        self._on_demand_percentage_above_base_capacity = on_demand_percentage_above_base_capacity

    @property
    def spot_allocation_strategy(self):
        """Gets the spot_allocation_strategy of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecMixedInstancesPolicyInstancesDistribution.  # noqa: E501

        SpotAllocationStrategy indicates how to allocate instances across Spot Instance pools.  # noqa: E501

        :return: The spot_allocation_strategy of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecMixedInstancesPolicyInstancesDistribution.  # noqa: E501
        :rtype: str
        """
        return self._spot_allocation_strategy

    @spot_allocation_strategy.setter
    def spot_allocation_strategy(self, spot_allocation_strategy):
        """Sets the spot_allocation_strategy of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecMixedInstancesPolicyInstancesDistribution.

        SpotAllocationStrategy indicates how to allocate instances across Spot Instance pools.  # noqa: E501

        :param spot_allocation_strategy: The spot_allocation_strategy of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecMixedInstancesPolicyInstancesDistribution.  # noqa: E501
        :type: str
        """
        allowed_values = ["lowest-price", "capacity-optimized"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and spot_allocation_strategy not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `spot_allocation_strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(spot_allocation_strategy, allowed_values)
            )

        self._spot_allocation_strategy = spot_allocation_strategy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecMixedInstancesPolicyInstancesDistribution):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecMixedInstancesPolicyInstancesDistribution):
            return True

        return self.to_dict() != other.to_dict()
