# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoCertManagerV1ClusterIssuerSpecCa(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'crl_distribution_points': 'list[str]',
        'ocsp_servers': 'list[str]',
        'secret_name': 'str'
    }

    attribute_map = {
        'crl_distribution_points': 'crlDistributionPoints',
        'ocsp_servers': 'ocspServers',
        'secret_name': 'secretName'
    }

    def __init__(self, crl_distribution_points=None, ocsp_servers=None, secret_name=None, local_vars_configuration=None):  # noqa: E501
        """IoCertManagerV1ClusterIssuerSpecCa - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._crl_distribution_points = None
        self._ocsp_servers = None
        self._secret_name = None
        self.discriminator = None

        if crl_distribution_points is not None:
            self.crl_distribution_points = crl_distribution_points
        if ocsp_servers is not None:
            self.ocsp_servers = ocsp_servers
        self.secret_name = secret_name

    @property
    def crl_distribution_points(self):
        """Gets the crl_distribution_points of this IoCertManagerV1ClusterIssuerSpecCa.  # noqa: E501

        The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.  # noqa: E501

        :return: The crl_distribution_points of this IoCertManagerV1ClusterIssuerSpecCa.  # noqa: E501
        :rtype: list[str]
        """
        return self._crl_distribution_points

    @crl_distribution_points.setter
    def crl_distribution_points(self, crl_distribution_points):
        """Sets the crl_distribution_points of this IoCertManagerV1ClusterIssuerSpecCa.

        The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.  # noqa: E501

        :param crl_distribution_points: The crl_distribution_points of this IoCertManagerV1ClusterIssuerSpecCa.  # noqa: E501
        :type: list[str]
        """

        self._crl_distribution_points = crl_distribution_points

    @property
    def ocsp_servers(self):
        """Gets the ocsp_servers of this IoCertManagerV1ClusterIssuerSpecCa.  # noqa: E501

        The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be \"http://ocsp.int-x3.letsencrypt.org\".  # noqa: E501

        :return: The ocsp_servers of this IoCertManagerV1ClusterIssuerSpecCa.  # noqa: E501
        :rtype: list[str]
        """
        return self._ocsp_servers

    @ocsp_servers.setter
    def ocsp_servers(self, ocsp_servers):
        """Sets the ocsp_servers of this IoCertManagerV1ClusterIssuerSpecCa.

        The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be \"http://ocsp.int-x3.letsencrypt.org\".  # noqa: E501

        :param ocsp_servers: The ocsp_servers of this IoCertManagerV1ClusterIssuerSpecCa.  # noqa: E501
        :type: list[str]
        """

        self._ocsp_servers = ocsp_servers

    @property
    def secret_name(self):
        """Gets the secret_name of this IoCertManagerV1ClusterIssuerSpecCa.  # noqa: E501

        SecretName is the name of the secret used to sign Certificates issued by this Issuer.  # noqa: E501

        :return: The secret_name of this IoCertManagerV1ClusterIssuerSpecCa.  # noqa: E501
        :rtype: str
        """
        return self._secret_name

    @secret_name.setter
    def secret_name(self, secret_name):
        """Sets the secret_name of this IoCertManagerV1ClusterIssuerSpecCa.

        SecretName is the name of the secret used to sign Certificates issued by this Issuer.  # noqa: E501

        :param secret_name: The secret_name of this IoCertManagerV1ClusterIssuerSpecCa.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and secret_name is None:  # noqa: E501
            raise ValueError("Invalid value for `secret_name`, must not be `None`")  # noqa: E501

        self._secret_name = secret_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoCertManagerV1ClusterIssuerSpecCa):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoCertManagerV1ClusterIssuerSpecCa):
            return True

        return self.to_dict() != other.to_dict()
