# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ShKarpenterV1alpha5ProvisionerSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'kubelet_configuration': 'ShKarpenterV1alpha5ProvisionerSpecKubeletConfiguration',
        'labels': 'dict(str, str)',
        'limits': 'ShKarpenterV1alpha5ProvisionerSpecLimits',
        'provider': 'object',
        'provider_ref': 'ShKarpenterV1alpha5ProvisionerSpecProviderRef',
        'requirements': 'list[ComCoreosMonitoringV1AlertmanagerSpecAffinityNodeAffinityPreferenceMatchExpressions]',
        'startup_taints': 'list[ShKarpenterV1alpha5ProvisionerSpecStartupTaints]',
        'taints': 'list[ShKarpenterV1alpha5ProvisionerSpecStartupTaints]',
        'ttl_seconds_after_empty': 'int',
        'ttl_seconds_until_expired': 'int'
    }

    attribute_map = {
        'kubelet_configuration': 'kubeletConfiguration',
        'labels': 'labels',
        'limits': 'limits',
        'provider': 'provider',
        'provider_ref': 'providerRef',
        'requirements': 'requirements',
        'startup_taints': 'startupTaints',
        'taints': 'taints',
        'ttl_seconds_after_empty': 'ttlSecondsAfterEmpty',
        'ttl_seconds_until_expired': 'ttlSecondsUntilExpired'
    }

    def __init__(self, kubelet_configuration=None, labels=None, limits=None, provider=None, provider_ref=None, requirements=None, startup_taints=None, taints=None, ttl_seconds_after_empty=None, ttl_seconds_until_expired=None, local_vars_configuration=None):  # noqa: E501
        """ShKarpenterV1alpha5ProvisionerSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._kubelet_configuration = None
        self._labels = None
        self._limits = None
        self._provider = None
        self._provider_ref = None
        self._requirements = None
        self._startup_taints = None
        self._taints = None
        self._ttl_seconds_after_empty = None
        self._ttl_seconds_until_expired = None
        self.discriminator = None

        if kubelet_configuration is not None:
            self.kubelet_configuration = kubelet_configuration
        if labels is not None:
            self.labels = labels
        if limits is not None:
            self.limits = limits
        if provider is not None:
            self.provider = provider
        if provider_ref is not None:
            self.provider_ref = provider_ref
        if requirements is not None:
            self.requirements = requirements
        if startup_taints is not None:
            self.startup_taints = startup_taints
        if taints is not None:
            self.taints = taints
        if ttl_seconds_after_empty is not None:
            self.ttl_seconds_after_empty = ttl_seconds_after_empty
        if ttl_seconds_until_expired is not None:
            self.ttl_seconds_until_expired = ttl_seconds_until_expired

    @property
    def kubelet_configuration(self):
        """Gets the kubelet_configuration of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501


        :return: The kubelet_configuration of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501
        :rtype: ShKarpenterV1alpha5ProvisionerSpecKubeletConfiguration
        """
        return self._kubelet_configuration

    @kubelet_configuration.setter
    def kubelet_configuration(self, kubelet_configuration):
        """Sets the kubelet_configuration of this ShKarpenterV1alpha5ProvisionerSpec.


        :param kubelet_configuration: The kubelet_configuration of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501
        :type: ShKarpenterV1alpha5ProvisionerSpecKubeletConfiguration
        """

        self._kubelet_configuration = kubelet_configuration

    @property
    def labels(self):
        """Gets the labels of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501

        Labels are layered with Requirements and applied to every node.  # noqa: E501

        :return: The labels of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ShKarpenterV1alpha5ProvisionerSpec.

        Labels are layered with Requirements and applied to every node.  # noqa: E501

        :param labels: The labels of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def limits(self):
        """Gets the limits of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501


        :return: The limits of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501
        :rtype: ShKarpenterV1alpha5ProvisionerSpecLimits
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this ShKarpenterV1alpha5ProvisionerSpec.


        :param limits: The limits of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501
        :type: ShKarpenterV1alpha5ProvisionerSpecLimits
        """

        self._limits = limits

    @property
    def provider(self):
        """Gets the provider of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501

        Provider contains fields specific to your cloudprovider.  # noqa: E501

        :return: The provider of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501
        :rtype: object
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this ShKarpenterV1alpha5ProvisionerSpec.

        Provider contains fields specific to your cloudprovider.  # noqa: E501

        :param provider: The provider of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501
        :type: object
        """

        self._provider = provider

    @property
    def provider_ref(self):
        """Gets the provider_ref of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501


        :return: The provider_ref of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501
        :rtype: ShKarpenterV1alpha5ProvisionerSpecProviderRef
        """
        return self._provider_ref

    @provider_ref.setter
    def provider_ref(self, provider_ref):
        """Sets the provider_ref of this ShKarpenterV1alpha5ProvisionerSpec.


        :param provider_ref: The provider_ref of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501
        :type: ShKarpenterV1alpha5ProvisionerSpecProviderRef
        """

        self._provider_ref = provider_ref

    @property
    def requirements(self):
        """Gets the requirements of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501

        Requirements are layered with Labels and applied to every node.  # noqa: E501

        :return: The requirements of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecAffinityNodeAffinityPreferenceMatchExpressions]
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this ShKarpenterV1alpha5ProvisionerSpec.

        Requirements are layered with Labels and applied to every node.  # noqa: E501

        :param requirements: The requirements of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecAffinityNodeAffinityPreferenceMatchExpressions]
        """

        self._requirements = requirements

    @property
    def startup_taints(self):
        """Gets the startup_taints of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501

        StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.  # noqa: E501

        :return: The startup_taints of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501
        :rtype: list[ShKarpenterV1alpha5ProvisionerSpecStartupTaints]
        """
        return self._startup_taints

    @startup_taints.setter
    def startup_taints(self, startup_taints):
        """Sets the startup_taints of this ShKarpenterV1alpha5ProvisionerSpec.

        StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.  # noqa: E501

        :param startup_taints: The startup_taints of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501
        :type: list[ShKarpenterV1alpha5ProvisionerSpecStartupTaints]
        """

        self._startup_taints = startup_taints

    @property
    def taints(self):
        """Gets the taints of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501

        Taints will be applied to every node launched by the Provisioner. If specified, the provisioner will not provision nodes for pods that do not have matching tolerations. Additional taints will be created that match pod tolerations on a per-node basis.  # noqa: E501

        :return: The taints of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501
        :rtype: list[ShKarpenterV1alpha5ProvisionerSpecStartupTaints]
        """
        return self._taints

    @taints.setter
    def taints(self, taints):
        """Sets the taints of this ShKarpenterV1alpha5ProvisionerSpec.

        Taints will be applied to every node launched by the Provisioner. If specified, the provisioner will not provision nodes for pods that do not have matching tolerations. Additional taints will be created that match pod tolerations on a per-node basis.  # noqa: E501

        :param taints: The taints of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501
        :type: list[ShKarpenterV1alpha5ProvisionerSpecStartupTaints]
        """

        self._taints = taints

    @property
    def ttl_seconds_after_empty(self):
        """Gets the ttl_seconds_after_empty of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501

        TTLSecondsAfterEmpty is the number of seconds the controller will wait before attempting to delete a node, measured from when the node is detected to be empty. A Node is considered to be empty when it does not have pods scheduled to it, excluding daemonsets.   Termination due to underutilization is disabled if this field is not set.  # noqa: E501

        :return: The ttl_seconds_after_empty of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501
        :rtype: int
        """
        return self._ttl_seconds_after_empty

    @ttl_seconds_after_empty.setter
    def ttl_seconds_after_empty(self, ttl_seconds_after_empty):
        """Sets the ttl_seconds_after_empty of this ShKarpenterV1alpha5ProvisionerSpec.

        TTLSecondsAfterEmpty is the number of seconds the controller will wait before attempting to delete a node, measured from when the node is detected to be empty. A Node is considered to be empty when it does not have pods scheduled to it, excluding daemonsets.   Termination due to underutilization is disabled if this field is not set.  # noqa: E501

        :param ttl_seconds_after_empty: The ttl_seconds_after_empty of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501
        :type: int
        """

        self._ttl_seconds_after_empty = ttl_seconds_after_empty

    @property
    def ttl_seconds_until_expired(self):
        """Gets the ttl_seconds_until_expired of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501

        TTLSecondsUntilExpired is the number of seconds the controller will wait before terminating a node, measured from when the node is created. This is useful to implement features like eventually consistent node upgrade, memory leak protection, and disruption testing.   Termination due to expiration is disabled if this field is not set.  # noqa: E501

        :return: The ttl_seconds_until_expired of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501
        :rtype: int
        """
        return self._ttl_seconds_until_expired

    @ttl_seconds_until_expired.setter
    def ttl_seconds_until_expired(self, ttl_seconds_until_expired):
        """Sets the ttl_seconds_until_expired of this ShKarpenterV1alpha5ProvisionerSpec.

        TTLSecondsUntilExpired is the number of seconds the controller will wait before terminating a node, measured from when the node is created. This is useful to implement features like eventually consistent node upgrade, memory leak protection, and disruption testing.   Termination due to expiration is disabled if this field is not set.  # noqa: E501

        :param ttl_seconds_until_expired: The ttl_seconds_until_expired of this ShKarpenterV1alpha5ProvisionerSpec.  # noqa: E501
        :type: int
        """

        self._ttl_seconds_until_expired = ttl_seconds_until_expired

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShKarpenterV1alpha5ProvisionerSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ShKarpenterV1alpha5ProvisionerSpec):
            return True

        return self.to_dict() != other.to_dict()
