# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoArgoprojV1alpha1ApplicationOperationSyncSourceDirectory(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'exclude': 'str',
        'include': 'str',
        'jsonnet': 'IoArgoprojV1alpha1ApplicationOperationSyncSourceDirectoryJsonnet',
        'recurse': 'bool'
    }

    attribute_map = {
        'exclude': 'exclude',
        'include': 'include',
        'jsonnet': 'jsonnet',
        'recurse': 'recurse'
    }

    def __init__(self, exclude=None, include=None, jsonnet=None, recurse=None, local_vars_configuration=None):  # noqa: E501
        """IoArgoprojV1alpha1ApplicationOperationSyncSourceDirectory - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._exclude = None
        self._include = None
        self._jsonnet = None
        self._recurse = None
        self.discriminator = None

        if exclude is not None:
            self.exclude = exclude
        if include is not None:
            self.include = include
        if jsonnet is not None:
            self.jsonnet = jsonnet
        if recurse is not None:
            self.recurse = recurse

    @property
    def exclude(self):
        """Gets the exclude of this IoArgoprojV1alpha1ApplicationOperationSyncSourceDirectory.  # noqa: E501

        Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation  # noqa: E501

        :return: The exclude of this IoArgoprojV1alpha1ApplicationOperationSyncSourceDirectory.  # noqa: E501
        :rtype: str
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this IoArgoprojV1alpha1ApplicationOperationSyncSourceDirectory.

        Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation  # noqa: E501

        :param exclude: The exclude of this IoArgoprojV1alpha1ApplicationOperationSyncSourceDirectory.  # noqa: E501
        :type: str
        """

        self._exclude = exclude

    @property
    def include(self):
        """Gets the include of this IoArgoprojV1alpha1ApplicationOperationSyncSourceDirectory.  # noqa: E501

        Include contains a glob pattern to match paths against that should be explicitly included during manifest generation  # noqa: E501

        :return: The include of this IoArgoprojV1alpha1ApplicationOperationSyncSourceDirectory.  # noqa: E501
        :rtype: str
        """
        return self._include

    @include.setter
    def include(self, include):
        """Sets the include of this IoArgoprojV1alpha1ApplicationOperationSyncSourceDirectory.

        Include contains a glob pattern to match paths against that should be explicitly included during manifest generation  # noqa: E501

        :param include: The include of this IoArgoprojV1alpha1ApplicationOperationSyncSourceDirectory.  # noqa: E501
        :type: str
        """

        self._include = include

    @property
    def jsonnet(self):
        """Gets the jsonnet of this IoArgoprojV1alpha1ApplicationOperationSyncSourceDirectory.  # noqa: E501


        :return: The jsonnet of this IoArgoprojV1alpha1ApplicationOperationSyncSourceDirectory.  # noqa: E501
        :rtype: IoArgoprojV1alpha1ApplicationOperationSyncSourceDirectoryJsonnet
        """
        return self._jsonnet

    @jsonnet.setter
    def jsonnet(self, jsonnet):
        """Sets the jsonnet of this IoArgoprojV1alpha1ApplicationOperationSyncSourceDirectory.


        :param jsonnet: The jsonnet of this IoArgoprojV1alpha1ApplicationOperationSyncSourceDirectory.  # noqa: E501
        :type: IoArgoprojV1alpha1ApplicationOperationSyncSourceDirectoryJsonnet
        """

        self._jsonnet = jsonnet

    @property
    def recurse(self):
        """Gets the recurse of this IoArgoprojV1alpha1ApplicationOperationSyncSourceDirectory.  # noqa: E501

        Recurse specifies whether to scan a directory recursively for manifests  # noqa: E501

        :return: The recurse of this IoArgoprojV1alpha1ApplicationOperationSyncSourceDirectory.  # noqa: E501
        :rtype: bool
        """
        return self._recurse

    @recurse.setter
    def recurse(self, recurse):
        """Sets the recurse of this IoArgoprojV1alpha1ApplicationOperationSyncSourceDirectory.

        Recurse specifies whether to scan a directory recursively for manifests  # noqa: E501

        :param recurse: The recurse of this IoArgoprojV1alpha1ApplicationOperationSyncSourceDirectory.  # noqa: E501
        :type: bool
        """

        self._recurse = recurse

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojV1alpha1ApplicationOperationSyncSourceDirectory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojV1alpha1ApplicationOperationSyncSourceDirectory):
            return True

        return self.to_dict() != other.to_dict()
