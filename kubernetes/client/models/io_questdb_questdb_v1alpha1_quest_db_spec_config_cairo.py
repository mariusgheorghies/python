# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoQuestdbQuestdbV1alpha1QuestDBSpecConfigCairo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'commit_lag': 'int',
        'max_uncommitted_rows': 'int',
        'out_of_order_column_memory_size': 'str',
        'table_writer_append_page_size': 'str'
    }

    attribute_map = {
        'commit_lag': 'commitLag',
        'max_uncommitted_rows': 'maxUncommittedRows',
        'out_of_order_column_memory_size': 'outOfOrderColumnMemorySize',
        'table_writer_append_page_size': 'tableWriterAppendPageSize'
    }

    def __init__(self, commit_lag=None, max_uncommitted_rows=None, out_of_order_column_memory_size=None, table_writer_append_page_size=None, local_vars_configuration=None):  # noqa: E501
        """IoQuestdbQuestdbV1alpha1QuestDBSpecConfigCairo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._commit_lag = None
        self._max_uncommitted_rows = None
        self._out_of_order_column_memory_size = None
        self._table_writer_append_page_size = None
        self.discriminator = None

        if commit_lag is not None:
            self.commit_lag = commit_lag
        if max_uncommitted_rows is not None:
            self.max_uncommitted_rows = max_uncommitted_rows
        if out_of_order_column_memory_size is not None:
            self.out_of_order_column_memory_size = out_of_order_column_memory_size
        if table_writer_append_page_size is not None:
            self.table_writer_append_page_size = table_writer_append_page_size

    @property
    def commit_lag(self):
        """Gets the commit_lag of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigCairo.  # noqa: E501


        :return: The commit_lag of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigCairo.  # noqa: E501
        :rtype: int
        """
        return self._commit_lag

    @commit_lag.setter
    def commit_lag(self, commit_lag):
        """Sets the commit_lag of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigCairo.


        :param commit_lag: The commit_lag of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigCairo.  # noqa: E501
        :type: int
        """

        self._commit_lag = commit_lag

    @property
    def max_uncommitted_rows(self):
        """Gets the max_uncommitted_rows of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigCairo.  # noqa: E501


        :return: The max_uncommitted_rows of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigCairo.  # noqa: E501
        :rtype: int
        """
        return self._max_uncommitted_rows

    @max_uncommitted_rows.setter
    def max_uncommitted_rows(self, max_uncommitted_rows):
        """Sets the max_uncommitted_rows of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigCairo.


        :param max_uncommitted_rows: The max_uncommitted_rows of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigCairo.  # noqa: E501
        :type: int
        """

        self._max_uncommitted_rows = max_uncommitted_rows

    @property
    def out_of_order_column_memory_size(self):
        """Gets the out_of_order_column_memory_size of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigCairo.  # noqa: E501


        :return: The out_of_order_column_memory_size of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigCairo.  # noqa: E501
        :rtype: str
        """
        return self._out_of_order_column_memory_size

    @out_of_order_column_memory_size.setter
    def out_of_order_column_memory_size(self, out_of_order_column_memory_size):
        """Sets the out_of_order_column_memory_size of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigCairo.


        :param out_of_order_column_memory_size: The out_of_order_column_memory_size of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigCairo.  # noqa: E501
        :type: str
        """

        self._out_of_order_column_memory_size = out_of_order_column_memory_size

    @property
    def table_writer_append_page_size(self):
        """Gets the table_writer_append_page_size of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigCairo.  # noqa: E501


        :return: The table_writer_append_page_size of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigCairo.  # noqa: E501
        :rtype: str
        """
        return self._table_writer_append_page_size

    @table_writer_append_page_size.setter
    def table_writer_append_page_size(self, table_writer_append_page_size):
        """Sets the table_writer_append_page_size of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigCairo.


        :param table_writer_append_page_size: The table_writer_append_page_size of this IoQuestdbQuestdbV1alpha1QuestDBSpecConfigCairo.  # noqa: E501
        :type: str
        """

        self._table_writer_append_page_size = table_writer_append_page_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoQuestdbQuestdbV1alpha1QuestDBSpecConfigCairo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoQuestdbQuestdbV1alpha1QuestDBSpecConfigCairo):
            return True

        return self.to_dict() != other.to_dict()
