# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'annotations': 'dict(str, str)',
        'generate_name': 'str',
        'labels': 'dict(str, str)',
        'name': 'str',
        'namespace': 'str',
        'owner_references': 'list[AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadataOwnerReferences]'
    }

    attribute_map = {
        'annotations': 'annotations',
        'generate_name': 'generateName',
        'labels': 'labels',
        'name': 'name',
        'namespace': 'namespace',
        'owner_references': 'ownerReferences'
    }

    def __init__(self, annotations=None, generate_name=None, labels=None, name=None, namespace=None, owner_references=None, local_vars_configuration=None):  # noqa: E501
        """AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._annotations = None
        self._generate_name = None
        self._labels = None
        self._name = None
        self._namespace = None
        self._owner_references = None
        self.discriminator = None

        if annotations is not None:
            self.annotations = annotations
        if generate_name is not None:
            self.generate_name = generate_name
        if labels is not None:
            self.labels = labels
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if owner_references is not None:
            self.owner_references = owner_references

    @property
    def annotations(self):
        """Gets the annotations of this AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata.  # noqa: E501

        Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations  # noqa: E501

        :return: The annotations of this AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata.

        Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations  # noqa: E501

        :param annotations: The annotations of this AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata.  # noqa: E501
        :type: dict(str, str)
        """

        self._annotations = annotations

    @property
    def generate_name(self):
        """Gets the generate_name of this AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata.  # noqa: E501

        GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.   If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).   Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency  # noqa: E501

        :return: The generate_name of this AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata.  # noqa: E501
        :rtype: str
        """
        return self._generate_name

    @generate_name.setter
    def generate_name(self, generate_name):
        """Sets the generate_name of this AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata.

        GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.   If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).   Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency  # noqa: E501

        :param generate_name: The generate_name of this AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata.  # noqa: E501
        :type: str
        """

        self._generate_name = generate_name

    @property
    def labels(self):
        """Gets the labels of this AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata.  # noqa: E501

        Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels  # noqa: E501

        :return: The labels of this AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata.

        Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels  # noqa: E501

        :param labels: The labels of this AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata.  # noqa: E501

        Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names  # noqa: E501

        :return: The name of this AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata.

        Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names  # noqa: E501

        :param name: The name of this AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata.  # noqa: E501

        Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.   Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces  # noqa: E501

        :return: The namespace of this AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata.

        Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.   Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces  # noqa: E501

        :param namespace: The namespace of this AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def owner_references(self):
        """Gets the owner_references of this AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata.  # noqa: E501

        List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.  # noqa: E501

        :return: The owner_references of this AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata.  # noqa: E501
        :rtype: list[AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadataOwnerReferences]
        """
        return self._owner_references

    @owner_references.setter
    def owner_references(self, owner_references):
        """Sets the owner_references of this AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata.

        List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.  # noqa: E501

        :param owner_references: The owner_references of this AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata.  # noqa: E501
        :type: list[AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadataOwnerReferences]
        """

        self._owner_references = owner_references

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwsK8sServicesV1alpha1AdoptedResourceSpecKubernetesMetadata):
            return True

        return self.to_dict() != other.to_dict()
