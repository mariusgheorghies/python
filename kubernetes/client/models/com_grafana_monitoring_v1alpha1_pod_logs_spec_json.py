# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComGrafanaMonitoringV1alpha1PodLogsSpecJson(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'expressions': 'dict(str, str)',
        'source': 'str'
    }

    attribute_map = {
        'expressions': 'expressions',
        'source': 'source'
    }

    def __init__(self, expressions=None, source=None, local_vars_configuration=None):  # noqa: E501
        """ComGrafanaMonitoringV1alpha1PodLogsSpecJson - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._expressions = None
        self._source = None
        self.discriminator = None

        if expressions is not None:
            self.expressions = expressions
        if source is not None:
            self.source = source

    @property
    def expressions(self):
        """Gets the expressions of this ComGrafanaMonitoringV1alpha1PodLogsSpecJson.  # noqa: E501

        Set of the key/value pairs of JMESPath expressions. The key will be the key in the extracted data while the expression will be the value, evaluated as a JMESPath from the source data.   Literal JMESPath expressions can be used by wrapping a key in double quotes, which then must be wrapped again in single quotes in YAML so they get passed to the JMESPath parser.  # noqa: E501

        :return: The expressions of this ComGrafanaMonitoringV1alpha1PodLogsSpecJson.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._expressions

    @expressions.setter
    def expressions(self, expressions):
        """Sets the expressions of this ComGrafanaMonitoringV1alpha1PodLogsSpecJson.

        Set of the key/value pairs of JMESPath expressions. The key will be the key in the extracted data while the expression will be the value, evaluated as a JMESPath from the source data.   Literal JMESPath expressions can be used by wrapping a key in double quotes, which then must be wrapped again in single quotes in YAML so they get passed to the JMESPath parser.  # noqa: E501

        :param expressions: The expressions of this ComGrafanaMonitoringV1alpha1PodLogsSpecJson.  # noqa: E501
        :type: dict(str, str)
        """

        self._expressions = expressions

    @property
    def source(self):
        """Gets the source of this ComGrafanaMonitoringV1alpha1PodLogsSpecJson.  # noqa: E501

        Name from the extracted data to parse as JSON. If empty, uses entire log message.  # noqa: E501

        :return: The source of this ComGrafanaMonitoringV1alpha1PodLogsSpecJson.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ComGrafanaMonitoringV1alpha1PodLogsSpecJson.

        Name from the extracted data to parse as JSON. If empty, uses entire log message.  # noqa: E501

        :param source: The source of this ComGrafanaMonitoringV1alpha1PodLogsSpecJson.  # noqa: E501
        :type: str
        """

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1PodLogsSpecJson):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1PodLogsSpecJson):
            return True

        return self.to_dict() != other.to_dict()
