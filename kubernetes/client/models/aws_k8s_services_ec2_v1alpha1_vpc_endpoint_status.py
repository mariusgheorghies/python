# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class AwsK8sServicesEc2V1alpha1VPCEndpointStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ack_resource_metadata': 'AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata',
        'conditions': 'list[AwsK8sServicesEc2V1alpha1DHCPOptionsStatusConditions]',
        'creation_timestamp': 'datetime',
        'dns_entries': 'list[AwsK8sServicesEc2V1alpha1VPCEndpointStatusDnsEntries]',
        'groups': 'list[AwsK8sServicesEc2V1alpha1VPCEndpointStatusGroups]',
        'last_error': 'AwsK8sServicesEc2V1alpha1VPCEndpointStatusLastError',
        'network_interface_i_ds': 'list[str]',
        'owner_id': 'str',
        'requester_managed': 'bool',
        'state': 'str',
        'vpc_endpoint_id': 'str'
    }

    attribute_map = {
        'ack_resource_metadata': 'ackResourceMetadata',
        'conditions': 'conditions',
        'creation_timestamp': 'creationTimestamp',
        'dns_entries': 'dnsEntries',
        'groups': 'groups',
        'last_error': 'lastError',
        'network_interface_i_ds': 'networkInterfaceIDs',
        'owner_id': 'ownerID',
        'requester_managed': 'requesterManaged',
        'state': 'state',
        'vpc_endpoint_id': 'vpcEndpointID'
    }

    def __init__(self, ack_resource_metadata=None, conditions=None, creation_timestamp=None, dns_entries=None, groups=None, last_error=None, network_interface_i_ds=None, owner_id=None, requester_managed=None, state=None, vpc_endpoint_id=None, local_vars_configuration=None):  # noqa: E501
        """AwsK8sServicesEc2V1alpha1VPCEndpointStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ack_resource_metadata = None
        self._conditions = None
        self._creation_timestamp = None
        self._dns_entries = None
        self._groups = None
        self._last_error = None
        self._network_interface_i_ds = None
        self._owner_id = None
        self._requester_managed = None
        self._state = None
        self._vpc_endpoint_id = None
        self.discriminator = None

        if ack_resource_metadata is not None:
            self.ack_resource_metadata = ack_resource_metadata
        if conditions is not None:
            self.conditions = conditions
        if creation_timestamp is not None:
            self.creation_timestamp = creation_timestamp
        if dns_entries is not None:
            self.dns_entries = dns_entries
        if groups is not None:
            self.groups = groups
        if last_error is not None:
            self.last_error = last_error
        if network_interface_i_ds is not None:
            self.network_interface_i_ds = network_interface_i_ds
        if owner_id is not None:
            self.owner_id = owner_id
        if requester_managed is not None:
            self.requester_managed = requester_managed
        if state is not None:
            self.state = state
        if vpc_endpoint_id is not None:
            self.vpc_endpoint_id = vpc_endpoint_id

    @property
    def ack_resource_metadata(self):
        """Gets the ack_resource_metadata of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501


        :return: The ack_resource_metadata of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata
        """
        return self._ack_resource_metadata

    @ack_resource_metadata.setter
    def ack_resource_metadata(self, ack_resource_metadata):
        """Sets the ack_resource_metadata of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.


        :param ack_resource_metadata: The ack_resource_metadata of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata
        """

        self._ack_resource_metadata = ack_resource_metadata

    @property
    def conditions(self):
        """Gets the conditions of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501

        All CRS managed by ACK have a common `Status.Conditions` member that contains a collection of `ackv1alpha1.Condition` objects that describe the various terminal states of the CR and its backend AWS service API resource  # noqa: E501

        :return: The conditions of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1DHCPOptionsStatusConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.

        All CRS managed by ACK have a common `Status.Conditions` member that contains a collection of `ackv1alpha1.Condition` objects that describe the various terminal states of the CR and its backend AWS service API resource  # noqa: E501

        :param conditions: The conditions of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1DHCPOptionsStatusConditions]
        """

        self._conditions = conditions

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501

        The date and time that the endpoint was created.  # noqa: E501

        :return: The creation_timestamp of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.

        The date and time that the endpoint was created.  # noqa: E501

        :param creation_timestamp: The creation_timestamp of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501
        :type: datetime
        """

        self._creation_timestamp = creation_timestamp

    @property
    def dns_entries(self):
        """Gets the dns_entries of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501

        (Interface endpoint) The DNS entries for the endpoint.  # noqa: E501

        :return: The dns_entries of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1VPCEndpointStatusDnsEntries]
        """
        return self._dns_entries

    @dns_entries.setter
    def dns_entries(self, dns_entries):
        """Sets the dns_entries of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.

        (Interface endpoint) The DNS entries for the endpoint.  # noqa: E501

        :param dns_entries: The dns_entries of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1VPCEndpointStatusDnsEntries]
        """

        self._dns_entries = dns_entries

    @property
    def groups(self):
        """Gets the groups of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501

        (Interface endpoint) Information about the security groups that are associated with the network interface.  # noqa: E501

        :return: The groups of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1VPCEndpointStatusGroups]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.

        (Interface endpoint) Information about the security groups that are associated with the network interface.  # noqa: E501

        :param groups: The groups of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1VPCEndpointStatusGroups]
        """

        self._groups = groups

    @property
    def last_error(self):
        """Gets the last_error of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501


        :return: The last_error of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1VPCEndpointStatusLastError
        """
        return self._last_error

    @last_error.setter
    def last_error(self, last_error):
        """Sets the last_error of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.


        :param last_error: The last_error of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1VPCEndpointStatusLastError
        """

        self._last_error = last_error

    @property
    def network_interface_i_ds(self):
        """Gets the network_interface_i_ds of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501

        (Interface endpoint) One or more network interfaces for the endpoint.  # noqa: E501

        :return: The network_interface_i_ds of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._network_interface_i_ds

    @network_interface_i_ds.setter
    def network_interface_i_ds(self, network_interface_i_ds):
        """Sets the network_interface_i_ds of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.

        (Interface endpoint) One or more network interfaces for the endpoint.  # noqa: E501

        :param network_interface_i_ds: The network_interface_i_ds of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501
        :type: list[str]
        """

        self._network_interface_i_ds = network_interface_i_ds

    @property
    def owner_id(self):
        """Gets the owner_id of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501

        The ID of the Amazon Web Services account that owns the endpoint.  # noqa: E501

        :return: The owner_id of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.

        The ID of the Amazon Web Services account that owns the endpoint.  # noqa: E501

        :param owner_id: The owner_id of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    @property
    def requester_managed(self):
        """Gets the requester_managed of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501

        Indicates whether the endpoint is being managed by its service.  # noqa: E501

        :return: The requester_managed of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501
        :rtype: bool
        """
        return self._requester_managed

    @requester_managed.setter
    def requester_managed(self, requester_managed):
        """Sets the requester_managed of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.

        Indicates whether the endpoint is being managed by its service.  # noqa: E501

        :param requester_managed: The requester_managed of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501
        :type: bool
        """

        self._requester_managed = requester_managed

    @property
    def state(self):
        """Gets the state of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501

        The state of the endpoint.  # noqa: E501

        :return: The state of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.

        The state of the endpoint.  # noqa: E501

        :param state: The state of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def vpc_endpoint_id(self):
        """Gets the vpc_endpoint_id of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501

        The ID of the endpoint.  # noqa: E501

        :return: The vpc_endpoint_id of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501
        :rtype: str
        """
        return self._vpc_endpoint_id

    @vpc_endpoint_id.setter
    def vpc_endpoint_id(self, vpc_endpoint_id):
        """Sets the vpc_endpoint_id of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.

        The ID of the endpoint.  # noqa: E501

        :param vpc_endpoint_id: The vpc_endpoint_id of this AwsK8sServicesEc2V1alpha1VPCEndpointStatus.  # noqa: E501
        :type: str
        """

        self._vpc_endpoint_id = vpc_endpoint_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1VPCEndpointStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1VPCEndpointStatus):
            return True

        return self.to_dict() != other.to_dict()
