# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterV1alpha3MachinePoolStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'available_replicas': 'int',
        'bootstrap_ready': 'bool',
        'conditions': 'list[IoXK8sClusterAddonsV1alpha3ClusterResourceSetStatusConditions]',
        'failure_message': 'str',
        'failure_reason': 'str',
        'infrastructure_ready': 'bool',
        'node_refs': 'list[IoXK8sClusterV1alpha3MachinePoolStatusNodeRefs]',
        'observed_generation': 'int',
        'phase': 'str',
        'ready_replicas': 'int',
        'replicas': 'int',
        'unavailable_replicas': 'int'
    }

    attribute_map = {
        'available_replicas': 'availableReplicas',
        'bootstrap_ready': 'bootstrapReady',
        'conditions': 'conditions',
        'failure_message': 'failureMessage',
        'failure_reason': 'failureReason',
        'infrastructure_ready': 'infrastructureReady',
        'node_refs': 'nodeRefs',
        'observed_generation': 'observedGeneration',
        'phase': 'phase',
        'ready_replicas': 'readyReplicas',
        'replicas': 'replicas',
        'unavailable_replicas': 'unavailableReplicas'
    }

    def __init__(self, available_replicas=None, bootstrap_ready=None, conditions=None, failure_message=None, failure_reason=None, infrastructure_ready=None, node_refs=None, observed_generation=None, phase=None, ready_replicas=None, replicas=None, unavailable_replicas=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterV1alpha3MachinePoolStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._available_replicas = None
        self._bootstrap_ready = None
        self._conditions = None
        self._failure_message = None
        self._failure_reason = None
        self._infrastructure_ready = None
        self._node_refs = None
        self._observed_generation = None
        self._phase = None
        self._ready_replicas = None
        self._replicas = None
        self._unavailable_replicas = None
        self.discriminator = None

        if available_replicas is not None:
            self.available_replicas = available_replicas
        if bootstrap_ready is not None:
            self.bootstrap_ready = bootstrap_ready
        if conditions is not None:
            self.conditions = conditions
        if failure_message is not None:
            self.failure_message = failure_message
        if failure_reason is not None:
            self.failure_reason = failure_reason
        if infrastructure_ready is not None:
            self.infrastructure_ready = infrastructure_ready
        if node_refs is not None:
            self.node_refs = node_refs
        if observed_generation is not None:
            self.observed_generation = observed_generation
        if phase is not None:
            self.phase = phase
        if ready_replicas is not None:
            self.ready_replicas = ready_replicas
        if replicas is not None:
            self.replicas = replicas
        if unavailable_replicas is not None:
            self.unavailable_replicas = unavailable_replicas

    @property
    def available_replicas(self):
        """Gets the available_replicas of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501

        The number of available replicas (ready for at least minReadySeconds) for this MachinePool.  # noqa: E501

        :return: The available_replicas of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501
        :rtype: int
        """
        return self._available_replicas

    @available_replicas.setter
    def available_replicas(self, available_replicas):
        """Sets the available_replicas of this IoXK8sClusterV1alpha3MachinePoolStatus.

        The number of available replicas (ready for at least minReadySeconds) for this MachinePool.  # noqa: E501

        :param available_replicas: The available_replicas of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501
        :type: int
        """

        self._available_replicas = available_replicas

    @property
    def bootstrap_ready(self):
        """Gets the bootstrap_ready of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501

        BootstrapReady is the state of the bootstrap provider.  # noqa: E501

        :return: The bootstrap_ready of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501
        :rtype: bool
        """
        return self._bootstrap_ready

    @bootstrap_ready.setter
    def bootstrap_ready(self, bootstrap_ready):
        """Sets the bootstrap_ready of this IoXK8sClusterV1alpha3MachinePoolStatus.

        BootstrapReady is the state of the bootstrap provider.  # noqa: E501

        :param bootstrap_ready: The bootstrap_ready of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501
        :type: bool
        """

        self._bootstrap_ready = bootstrap_ready

    @property
    def conditions(self):
        """Gets the conditions of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501

        Conditions define the current service state of the MachinePool.  # noqa: E501

        :return: The conditions of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501
        :rtype: list[IoXK8sClusterAddonsV1alpha3ClusterResourceSetStatusConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this IoXK8sClusterV1alpha3MachinePoolStatus.

        Conditions define the current service state of the MachinePool.  # noqa: E501

        :param conditions: The conditions of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501
        :type: list[IoXK8sClusterAddonsV1alpha3ClusterResourceSetStatusConditions]
        """

        self._conditions = conditions

    @property
    def failure_message(self):
        """Gets the failure_message of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501

        FailureMessage indicates that there is a problem reconciling the state, and will be set to a descriptive error message.  # noqa: E501

        :return: The failure_message of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501
        :rtype: str
        """
        return self._failure_message

    @failure_message.setter
    def failure_message(self, failure_message):
        """Sets the failure_message of this IoXK8sClusterV1alpha3MachinePoolStatus.

        FailureMessage indicates that there is a problem reconciling the state, and will be set to a descriptive error message.  # noqa: E501

        :param failure_message: The failure_message of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501
        :type: str
        """

        self._failure_message = failure_message

    @property
    def failure_reason(self):
        """Gets the failure_reason of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501

        FailureReason indicates that there is a problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.  # noqa: E501

        :return: The failure_reason of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this IoXK8sClusterV1alpha3MachinePoolStatus.

        FailureReason indicates that there is a problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.  # noqa: E501

        :param failure_reason: The failure_reason of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501
        :type: str
        """

        self._failure_reason = failure_reason

    @property
    def infrastructure_ready(self):
        """Gets the infrastructure_ready of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501

        InfrastructureReady is the state of the infrastructure provider.  # noqa: E501

        :return: The infrastructure_ready of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501
        :rtype: bool
        """
        return self._infrastructure_ready

    @infrastructure_ready.setter
    def infrastructure_ready(self, infrastructure_ready):
        """Sets the infrastructure_ready of this IoXK8sClusterV1alpha3MachinePoolStatus.

        InfrastructureReady is the state of the infrastructure provider.  # noqa: E501

        :param infrastructure_ready: The infrastructure_ready of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501
        :type: bool
        """

        self._infrastructure_ready = infrastructure_ready

    @property
    def node_refs(self):
        """Gets the node_refs of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501

        NodeRefs will point to the corresponding Nodes if it they exist.  # noqa: E501

        :return: The node_refs of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501
        :rtype: list[IoXK8sClusterV1alpha3MachinePoolStatusNodeRefs]
        """
        return self._node_refs

    @node_refs.setter
    def node_refs(self, node_refs):
        """Sets the node_refs of this IoXK8sClusterV1alpha3MachinePoolStatus.

        NodeRefs will point to the corresponding Nodes if it they exist.  # noqa: E501

        :param node_refs: The node_refs of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501
        :type: list[IoXK8sClusterV1alpha3MachinePoolStatusNodeRefs]
        """

        self._node_refs = node_refs

    @property
    def observed_generation(self):
        """Gets the observed_generation of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501

        ObservedGeneration is the latest generation observed by the controller.  # noqa: E501

        :return: The observed_generation of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501
        :rtype: int
        """
        return self._observed_generation

    @observed_generation.setter
    def observed_generation(self, observed_generation):
        """Sets the observed_generation of this IoXK8sClusterV1alpha3MachinePoolStatus.

        ObservedGeneration is the latest generation observed by the controller.  # noqa: E501

        :param observed_generation: The observed_generation of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501
        :type: int
        """

        self._observed_generation = observed_generation

    @property
    def phase(self):
        """Gets the phase of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501

        Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.  # noqa: E501

        :return: The phase of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this IoXK8sClusterV1alpha3MachinePoolStatus.

        Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.  # noqa: E501

        :param phase: The phase of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501
        :type: str
        """

        self._phase = phase

    @property
    def ready_replicas(self):
        """Gets the ready_replicas of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501

        The number of ready replicas for this MachinePool. A machine is considered ready when the node has been created and is \"Ready\".  # noqa: E501

        :return: The ready_replicas of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501
        :rtype: int
        """
        return self._ready_replicas

    @ready_replicas.setter
    def ready_replicas(self, ready_replicas):
        """Sets the ready_replicas of this IoXK8sClusterV1alpha3MachinePoolStatus.

        The number of ready replicas for this MachinePool. A machine is considered ready when the node has been created and is \"Ready\".  # noqa: E501

        :param ready_replicas: The ready_replicas of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501
        :type: int
        """

        self._ready_replicas = ready_replicas

    @property
    def replicas(self):
        """Gets the replicas of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501

        Replicas is the most recently observed number of replicas.  # noqa: E501

        :return: The replicas of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this IoXK8sClusterV1alpha3MachinePoolStatus.

        Replicas is the most recently observed number of replicas.  # noqa: E501

        :param replicas: The replicas of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def unavailable_replicas(self):
        """Gets the unavailable_replicas of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501

        Total number of unavailable machine instances targeted by this machine pool. This is the total number of machine instances that are still required for the machine pool to have 100% available capacity. They may either be machine instances that are running but not yet available or machine instances that still have not been created.  # noqa: E501

        :return: The unavailable_replicas of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501
        :rtype: int
        """
        return self._unavailable_replicas

    @unavailable_replicas.setter
    def unavailable_replicas(self, unavailable_replicas):
        """Sets the unavailable_replicas of this IoXK8sClusterV1alpha3MachinePoolStatus.

        Total number of unavailable machine instances targeted by this machine pool. This is the total number of machine instances that are still required for the machine pool to have 100% available capacity. They may either be machine instances that are running but not yet available or machine instances that still have not been created.  # noqa: E501

        :param unavailable_replicas: The unavailable_replicas of this IoXK8sClusterV1alpha3MachinePoolStatus.  # noqa: E501
        :type: int
        """

        self._unavailable_replicas = unavailable_replicas

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterV1alpha3MachinePoolStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterV1alpha3MachinePoolStatus):
            return True

        return self.to_dict() != other.to_dict()
