# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoQuestdbCrdV1alpha1QuestDBSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allowed_cidr': 'list[str]',
        'aws': 'IoQuestdbCrdV1alpha1QuestDBSpecAws',
        'config': 'str',
        'container': 'IoQuestdbCrdV1alpha1QuestDBSpecContainer',
        'ilp_auth': 'IoQuestdbCrdV1alpha1QuestDBSpecIlpAuth',
        'maintenance_mode': 'bool',
        'stateful_set': 'IoQuestdbCrdV1alpha1QuestDBSpecStatefulSet',
        'stopped': 'bool',
        'subdomain': 'str',
        'volume': 'IoQuestdbCrdV1alpha1QuestDBSpecVolume'
    }

    attribute_map = {
        'allowed_cidr': 'allowedCidr',
        'aws': 'aws',
        'config': 'config',
        'container': 'container',
        'ilp_auth': 'ilpAuth',
        'maintenance_mode': 'maintenanceMode',
        'stateful_set': 'statefulSet',
        'stopped': 'stopped',
        'subdomain': 'subdomain',
        'volume': 'volume'
    }

    def __init__(self, allowed_cidr=None, aws=None, config=None, container=None, ilp_auth=None, maintenance_mode=None, stateful_set=None, stopped=None, subdomain=None, volume=None, local_vars_configuration=None):  # noqa: E501
        """IoQuestdbCrdV1alpha1QuestDBSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._allowed_cidr = None
        self._aws = None
        self._config = None
        self._container = None
        self._ilp_auth = None
        self._maintenance_mode = None
        self._stateful_set = None
        self._stopped = None
        self._subdomain = None
        self._volume = None
        self.discriminator = None

        if allowed_cidr is not None:
            self.allowed_cidr = allowed_cidr
        if aws is not None:
            self.aws = aws
        if config is not None:
            self.config = config
        if container is not None:
            self.container = container
        if ilp_auth is not None:
            self.ilp_auth = ilp_auth
        if maintenance_mode is not None:
            self.maintenance_mode = maintenance_mode
        if stateful_set is not None:
            self.stateful_set = stateful_set
        if stopped is not None:
            self.stopped = stopped
        if subdomain is not None:
            self.subdomain = subdomain
        if volume is not None:
            self.volume = volume

    @property
    def allowed_cidr(self):
        """Gets the allowed_cidr of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501

        Defaults to an empty list, which allows external traffic from all sources. Otherwise, this sets the allowed CIDRs that traffic is allowed to flow to the database  # noqa: E501

        :return: The allowed_cidr of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_cidr

    @allowed_cidr.setter
    def allowed_cidr(self, allowed_cidr):
        """Sets the allowed_cidr of this IoQuestdbCrdV1alpha1QuestDBSpec.

        Defaults to an empty list, which allows external traffic from all sources. Otherwise, this sets the allowed CIDRs that traffic is allowed to flow to the database  # noqa: E501

        :param allowed_cidr: The allowed_cidr of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501
        :type: list[str]
        """

        self._allowed_cidr = allowed_cidr

    @property
    def aws(self):
        """Gets the aws of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501


        :return: The aws of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501
        :rtype: IoQuestdbCrdV1alpha1QuestDBSpecAws
        """
        return self._aws

    @aws.setter
    def aws(self, aws):
        """Sets the aws of this IoQuestdbCrdV1alpha1QuestDBSpec.


        :param aws: The aws of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501
        :type: IoQuestdbCrdV1alpha1QuestDBSpecAws
        """

        self._aws = aws

    @property
    def config(self):
        """Gets the config of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501

        QuestDB config file contents (raw string data)  # noqa: E501

        :return: The config of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501
        :rtype: str
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this IoQuestdbCrdV1alpha1QuestDBSpec.

        QuestDB config file contents (raw string data)  # noqa: E501

        :param config: The config of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501
        :type: str
        """

        self._config = config

    @property
    def container(self):
        """Gets the container of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501


        :return: The container of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501
        :rtype: IoQuestdbCrdV1alpha1QuestDBSpecContainer
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this IoQuestdbCrdV1alpha1QuestDBSpec.


        :param container: The container of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501
        :type: IoQuestdbCrdV1alpha1QuestDBSpecContainer
        """

        self._container = container

    @property
    def ilp_auth(self):
        """Gets the ilp_auth of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501


        :return: The ilp_auth of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501
        :rtype: IoQuestdbCrdV1alpha1QuestDBSpecIlpAuth
        """
        return self._ilp_auth

    @ilp_auth.setter
    def ilp_auth(self, ilp_auth):
        """Sets the ilp_auth of this IoQuestdbCrdV1alpha1QuestDBSpec.


        :param ilp_auth: The ilp_auth of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501
        :type: IoQuestdbCrdV1alpha1QuestDBSpecIlpAuth
        """

        self._ilp_auth = ilp_auth

    @property
    def maintenance_mode(self):
        """Gets the maintenance_mode of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501

        If set to true, will prevent any additional controller reconciliation from happening. This should be used in cases where you need to make a manual change to a resource, or need to debug the QuestDB's current state  # noqa: E501

        :return: The maintenance_mode of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501
        :rtype: bool
        """
        return self._maintenance_mode

    @maintenance_mode.setter
    def maintenance_mode(self, maintenance_mode):
        """Sets the maintenance_mode of this IoQuestdbCrdV1alpha1QuestDBSpec.

        If set to true, will prevent any additional controller reconciliation from happening. This should be used in cases where you need to make a manual change to a resource, or need to debug the QuestDB's current state  # noqa: E501

        :param maintenance_mode: The maintenance_mode of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501
        :type: bool
        """

        self._maintenance_mode = maintenance_mode

    @property
    def stateful_set(self):
        """Gets the stateful_set of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501


        :return: The stateful_set of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501
        :rtype: IoQuestdbCrdV1alpha1QuestDBSpecStatefulSet
        """
        return self._stateful_set

    @stateful_set.setter
    def stateful_set(self, stateful_set):
        """Sets the stateful_set of this IoQuestdbCrdV1alpha1QuestDBSpec.


        :param stateful_set: The stateful_set of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501
        :type: IoQuestdbCrdV1alpha1QuestDBSpecStatefulSet
        """

        self._stateful_set = stateful_set

    @property
    def stopped(self):
        """Gets the stopped of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501

        Whether the database is \"paused\" or not.  If true, all nodes, DNS records, and containers will be deleted, but the volume will still remain  # noqa: E501

        :return: The stopped of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501
        :rtype: bool
        """
        return self._stopped

    @stopped.setter
    def stopped(self, stopped):
        """Sets the stopped of this IoQuestdbCrdV1alpha1QuestDBSpec.

        Whether the database is \"paused\" or not.  If true, all nodes, DNS records, and containers will be deleted, but the volume will still remain  # noqa: E501

        :param stopped: The stopped of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501
        :type: bool
        """

        self._stopped = stopped

    @property
    def subdomain(self):
        """Gets the subdomain of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501

        Desired subdomain to place the ILP, PSQL, and HTTPS DNS records under  # noqa: E501

        :return: The subdomain of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this IoQuestdbCrdV1alpha1QuestDBSpec.

        Desired subdomain to place the ILP, PSQL, and HTTPS DNS records under  # noqa: E501

        :param subdomain: The subdomain of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501
        :type: str
        """

        self._subdomain = subdomain

    @property
    def volume(self):
        """Gets the volume of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501


        :return: The volume of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501
        :rtype: IoQuestdbCrdV1alpha1QuestDBSpecVolume
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this IoQuestdbCrdV1alpha1QuestDBSpec.


        :param volume: The volume of this IoQuestdbCrdV1alpha1QuestDBSpec.  # noqa: E501
        :type: IoQuestdbCrdV1alpha1QuestDBSpecVolume
        """

        self._volume = volume

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoQuestdbCrdV1alpha1QuestDBSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoQuestdbCrdV1alpha1QuestDBSpec):
            return True

        return self.to_dict() != other.to_dict()
