# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class V1VolumeSnapshotContentSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'deletion_policy': 'str',
        'driver': 'str',
        'source': 'V1VolumeSnapshotContentSpecSource',
        'source_volume_mode': 'str',
        'volume_snapshot_class_name': 'str',
        'volume_snapshot_ref': 'V1VolumeSnapshotContentSpecVolumeSnapshotRef'
    }

    attribute_map = {
        'deletion_policy': 'deletionPolicy',
        'driver': 'driver',
        'source': 'source',
        'source_volume_mode': 'sourceVolumeMode',
        'volume_snapshot_class_name': 'volumeSnapshotClassName',
        'volume_snapshot_ref': 'volumeSnapshotRef'
    }

    def __init__(self, deletion_policy=None, driver=None, source=None, source_volume_mode=None, volume_snapshot_class_name=None, volume_snapshot_ref=None, local_vars_configuration=None):  # noqa: E501
        """V1VolumeSnapshotContentSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._deletion_policy = None
        self._driver = None
        self._source = None
        self._source_volume_mode = None
        self._volume_snapshot_class_name = None
        self._volume_snapshot_ref = None
        self.discriminator = None

        self.deletion_policy = deletion_policy
        self.driver = driver
        self.source = source
        if source_volume_mode is not None:
            self.source_volume_mode = source_volume_mode
        if volume_snapshot_class_name is not None:
            self.volume_snapshot_class_name = volume_snapshot_class_name
        self.volume_snapshot_ref = volume_snapshot_ref

    @property
    def deletion_policy(self):
        """Gets the deletion_policy of this V1VolumeSnapshotContentSpec.  # noqa: E501

        deletionPolicy determines whether this VolumeSnapshotContent and its physical snapshot on the underlying storage system should be deleted when its bound VolumeSnapshot is deleted. Supported values are \"Retain\" and \"Delete\". \"Retain\" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. \"Delete\" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. For dynamically provisioned snapshots, this field will automatically be filled in by the CSI snapshotter sidecar with the \"DeletionPolicy\" field defined in the corresponding VolumeSnapshotClass. For pre-existing snapshots, users MUST specify this field when creating the VolumeSnapshotContent object. Required.  # noqa: E501

        :return: The deletion_policy of this V1VolumeSnapshotContentSpec.  # noqa: E501
        :rtype: str
        """
        return self._deletion_policy

    @deletion_policy.setter
    def deletion_policy(self, deletion_policy):
        """Sets the deletion_policy of this V1VolumeSnapshotContentSpec.

        deletionPolicy determines whether this VolumeSnapshotContent and its physical snapshot on the underlying storage system should be deleted when its bound VolumeSnapshot is deleted. Supported values are \"Retain\" and \"Delete\". \"Retain\" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. \"Delete\" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. For dynamically provisioned snapshots, this field will automatically be filled in by the CSI snapshotter sidecar with the \"DeletionPolicy\" field defined in the corresponding VolumeSnapshotClass. For pre-existing snapshots, users MUST specify this field when creating the VolumeSnapshotContent object. Required.  # noqa: E501

        :param deletion_policy: The deletion_policy of this V1VolumeSnapshotContentSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and deletion_policy is None:  # noqa: E501
            raise ValueError("Invalid value for `deletion_policy`, must not be `None`")  # noqa: E501
        allowed_values = ["Delete", "Retain"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and deletion_policy not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `deletion_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(deletion_policy, allowed_values)
            )

        self._deletion_policy = deletion_policy

    @property
    def driver(self):
        """Gets the driver of this V1VolumeSnapshotContentSpec.  # noqa: E501

        driver is the name of the CSI driver used to create the physical snapshot on the underlying storage system. This MUST be the same as the name returned by the CSI GetPluginName() call for that driver. Required.  # noqa: E501

        :return: The driver of this V1VolumeSnapshotContentSpec.  # noqa: E501
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this V1VolumeSnapshotContentSpec.

        driver is the name of the CSI driver used to create the physical snapshot on the underlying storage system. This MUST be the same as the name returned by the CSI GetPluginName() call for that driver. Required.  # noqa: E501

        :param driver: The driver of this V1VolumeSnapshotContentSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and driver is None:  # noqa: E501
            raise ValueError("Invalid value for `driver`, must not be `None`")  # noqa: E501

        self._driver = driver

    @property
    def source(self):
        """Gets the source of this V1VolumeSnapshotContentSpec.  # noqa: E501


        :return: The source of this V1VolumeSnapshotContentSpec.  # noqa: E501
        :rtype: V1VolumeSnapshotContentSpecSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this V1VolumeSnapshotContentSpec.


        :param source: The source of this V1VolumeSnapshotContentSpec.  # noqa: E501
        :type: V1VolumeSnapshotContentSpecSource
        """
        if self.local_vars_configuration.client_side_validation and source is None:  # noqa: E501
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def source_volume_mode(self):
        """Gets the source_volume_mode of this V1VolumeSnapshotContentSpec.  # noqa: E501

        SourceVolumeMode is the mode of the volume whose snapshot is taken. Can be either “Filesystem” or “Block”. If not specified, it indicates the source volume's mode is unknown. This field is immutable. This field is an alpha field.  # noqa: E501

        :return: The source_volume_mode of this V1VolumeSnapshotContentSpec.  # noqa: E501
        :rtype: str
        """
        return self._source_volume_mode

    @source_volume_mode.setter
    def source_volume_mode(self, source_volume_mode):
        """Sets the source_volume_mode of this V1VolumeSnapshotContentSpec.

        SourceVolumeMode is the mode of the volume whose snapshot is taken. Can be either “Filesystem” or “Block”. If not specified, it indicates the source volume's mode is unknown. This field is immutable. This field is an alpha field.  # noqa: E501

        :param source_volume_mode: The source_volume_mode of this V1VolumeSnapshotContentSpec.  # noqa: E501
        :type: str
        """

        self._source_volume_mode = source_volume_mode

    @property
    def volume_snapshot_class_name(self):
        """Gets the volume_snapshot_class_name of this V1VolumeSnapshotContentSpec.  # noqa: E501

        name of the VolumeSnapshotClass from which this snapshot was (or will be) created. Note that after provisioning, the VolumeSnapshotClass may be deleted or recreated with different set of values, and as such, should not be referenced post-snapshot creation.  # noqa: E501

        :return: The volume_snapshot_class_name of this V1VolumeSnapshotContentSpec.  # noqa: E501
        :rtype: str
        """
        return self._volume_snapshot_class_name

    @volume_snapshot_class_name.setter
    def volume_snapshot_class_name(self, volume_snapshot_class_name):
        """Sets the volume_snapshot_class_name of this V1VolumeSnapshotContentSpec.

        name of the VolumeSnapshotClass from which this snapshot was (or will be) created. Note that after provisioning, the VolumeSnapshotClass may be deleted or recreated with different set of values, and as such, should not be referenced post-snapshot creation.  # noqa: E501

        :param volume_snapshot_class_name: The volume_snapshot_class_name of this V1VolumeSnapshotContentSpec.  # noqa: E501
        :type: str
        """

        self._volume_snapshot_class_name = volume_snapshot_class_name

    @property
    def volume_snapshot_ref(self):
        """Gets the volume_snapshot_ref of this V1VolumeSnapshotContentSpec.  # noqa: E501


        :return: The volume_snapshot_ref of this V1VolumeSnapshotContentSpec.  # noqa: E501
        :rtype: V1VolumeSnapshotContentSpecVolumeSnapshotRef
        """
        return self._volume_snapshot_ref

    @volume_snapshot_ref.setter
    def volume_snapshot_ref(self, volume_snapshot_ref):
        """Sets the volume_snapshot_ref of this V1VolumeSnapshotContentSpec.


        :param volume_snapshot_ref: The volume_snapshot_ref of this V1VolumeSnapshotContentSpec.  # noqa: E501
        :type: V1VolumeSnapshotContentSpecVolumeSnapshotRef
        """
        if self.local_vars_configuration.client_side_validation and volume_snapshot_ref is None:  # noqa: E501
            raise ValueError("Invalid value for `volume_snapshot_ref`, must not be `None`")  # noqa: E501

        self._volume_snapshot_ref = volume_snapshot_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1VolumeSnapshotContentSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1VolumeSnapshotContentSpec):
            return True

        return self.to_dict() != other.to_dict()
