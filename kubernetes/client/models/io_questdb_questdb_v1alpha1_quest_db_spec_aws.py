# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoQuestdbQuestdbV1alpha1QuestDBSpecAws(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'eks_ca': 'str',
        'eks_url': 'str',
        'iam_instance_profile_arn': 'str',
        'image_id': 'str',
        'key_name': 'str',
        'region': 'str',
        'region_az': 'str',
        'security_group_ids': 'list[str]',
        'subnet_id': 'str'
    }

    attribute_map = {
        'eks_ca': 'eksCa',
        'eks_url': 'eksUrl',
        'iam_instance_profile_arn': 'iamInstanceProfileArn',
        'image_id': 'imageId',
        'key_name': 'keyName',
        'region': 'region',
        'region_az': 'regionAz',
        'security_group_ids': 'securityGroupIds',
        'subnet_id': 'subnetId'
    }

    def __init__(self, eks_ca=None, eks_url=None, iam_instance_profile_arn=None, image_id=None, key_name=None, region=None, region_az=None, security_group_ids=None, subnet_id=None, local_vars_configuration=None):  # noqa: E501
        """IoQuestdbQuestdbV1alpha1QuestDBSpecAws - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._eks_ca = None
        self._eks_url = None
        self._iam_instance_profile_arn = None
        self._image_id = None
        self._key_name = None
        self._region = None
        self._region_az = None
        self._security_group_ids = None
        self._subnet_id = None
        self.discriminator = None

        if eks_ca is not None:
            self.eks_ca = eks_ca
        if eks_url is not None:
            self.eks_url = eks_url
        if iam_instance_profile_arn is not None:
            self.iam_instance_profile_arn = iam_instance_profile_arn
        if image_id is not None:
            self.image_id = image_id
        if key_name is not None:
            self.key_name = key_name
        if region is not None:
            self.region = region
        if region_az is not None:
            self.region_az = region_az
        if security_group_ids is not None:
            self.security_group_ids = security_group_ids
        if subnet_id is not None:
            self.subnet_id = subnet_id

    @property
    def eks_ca(self):
        """Gets the eks_ca of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501


        :return: The eks_ca of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501
        :rtype: str
        """
        return self._eks_ca

    @eks_ca.setter
    def eks_ca(self, eks_ca):
        """Sets the eks_ca of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.


        :param eks_ca: The eks_ca of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501
        :type: str
        """

        self._eks_ca = eks_ca

    @property
    def eks_url(self):
        """Gets the eks_url of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501


        :return: The eks_url of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501
        :rtype: str
        """
        return self._eks_url

    @eks_url.setter
    def eks_url(self, eks_url):
        """Sets the eks_url of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.


        :param eks_url: The eks_url of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501
        :type: str
        """

        self._eks_url = eks_url

    @property
    def iam_instance_profile_arn(self):
        """Gets the iam_instance_profile_arn of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501


        :return: The iam_instance_profile_arn of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501
        :rtype: str
        """
        return self._iam_instance_profile_arn

    @iam_instance_profile_arn.setter
    def iam_instance_profile_arn(self, iam_instance_profile_arn):
        """Sets the iam_instance_profile_arn of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.


        :param iam_instance_profile_arn: The iam_instance_profile_arn of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501
        :type: str
        """

        self._iam_instance_profile_arn = iam_instance_profile_arn

    @property
    def image_id(self):
        """Gets the image_id of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501


        :return: The image_id of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.


        :param image_id: The image_id of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501
        :type: str
        """

        self._image_id = image_id

    @property
    def key_name(self):
        """Gets the key_name of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501


        :return: The key_name of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.


        :param key_name: The key_name of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501
        :type: str
        """

        self._key_name = key_name

    @property
    def region(self):
        """Gets the region of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501


        :return: The region of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.


        :param region: The region of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def region_az(self):
        """Gets the region_az of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501


        :return: The region_az of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501
        :rtype: str
        """
        return self._region_az

    @region_az.setter
    def region_az(self, region_az):
        """Sets the region_az of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.


        :param region_az: The region_az of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501
        :type: str
        """

        self._region_az = region_az

    @property
    def security_group_ids(self):
        """Gets the security_group_ids of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501


        :return: The security_group_ids of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501
        :rtype: list[str]
        """
        return self._security_group_ids

    @security_group_ids.setter
    def security_group_ids(self, security_group_ids):
        """Sets the security_group_ids of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.


        :param security_group_ids: The security_group_ids of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501
        :type: list[str]
        """

        self._security_group_ids = security_group_ids

    @property
    def subnet_id(self):
        """Gets the subnet_id of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501


        :return: The subnet_id of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.


        :param subnet_id: The subnet_id of this IoQuestdbQuestdbV1alpha1QuestDBSpecAws.  # noqa: E501
        :type: str
        """

        self._subnet_id = subnet_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoQuestdbQuestdbV1alpha1QuestDBSpecAws):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoQuestdbQuestdbV1alpha1QuestDBSpecAws):
            return True

        return self.to_dict() != other.to_dict()
