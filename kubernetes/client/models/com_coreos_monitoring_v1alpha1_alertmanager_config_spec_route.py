# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_continue': 'bool',
        'group_by': 'list[str]',
        'group_interval': 'str',
        'group_wait': 'str',
        'matchers': 'list[ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecSourceMatch]',
        'receiver': 'str',
        'repeat_interval': 'str',
        'routes': 'list[object]'
    }

    attribute_map = {
        '_continue': 'continue',
        'group_by': 'groupBy',
        'group_interval': 'groupInterval',
        'group_wait': 'groupWait',
        'matchers': 'matchers',
        'receiver': 'receiver',
        'repeat_interval': 'repeatInterval',
        'routes': 'routes'
    }

    def __init__(self, _continue=None, group_by=None, group_interval=None, group_wait=None, matchers=None, receiver=None, repeat_interval=None, routes=None, local_vars_configuration=None):  # noqa: E501
        """ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self.__continue = None
        self._group_by = None
        self._group_interval = None
        self._group_wait = None
        self._matchers = None
        self._receiver = None
        self._repeat_interval = None
        self._routes = None
        self.discriminator = None

        if _continue is not None:
            self._continue = _continue
        if group_by is not None:
            self.group_by = group_by
        if group_interval is not None:
            self.group_interval = group_interval
        if group_wait is not None:
            self.group_wait = group_wait
        if matchers is not None:
            self.matchers = matchers
        if receiver is not None:
            self.receiver = receiver
        if repeat_interval is not None:
            self.repeat_interval = repeat_interval
        if routes is not None:
            self.routes = routes

    @property
    def _continue(self):
        """Gets the _continue of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.  # noqa: E501

        Boolean indicating whether an alert should continue matching subsequent sibling nodes. It will always be overridden to true for the first-level route by the Prometheus operator.  # noqa: E501

        :return: The _continue of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.  # noqa: E501
        :rtype: bool
        """
        return self.__continue

    @_continue.setter
    def _continue(self, _continue):
        """Sets the _continue of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.

        Boolean indicating whether an alert should continue matching subsequent sibling nodes. It will always be overridden to true for the first-level route by the Prometheus operator.  # noqa: E501

        :param _continue: The _continue of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.  # noqa: E501
        :type: bool
        """

        self.__continue = _continue

    @property
    def group_by(self):
        """Gets the group_by of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.  # noqa: E501

        List of labels to group by.  # noqa: E501

        :return: The group_by of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_by

    @group_by.setter
    def group_by(self, group_by):
        """Sets the group_by of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.

        List of labels to group by.  # noqa: E501

        :param group_by: The group_by of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.  # noqa: E501
        :type: list[str]
        """

        self._group_by = group_by

    @property
    def group_interval(self):
        """Gets the group_interval of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.  # noqa: E501

        How long to wait before sending an updated notification. Must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).  # noqa: E501

        :return: The group_interval of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.  # noqa: E501
        :rtype: str
        """
        return self._group_interval

    @group_interval.setter
    def group_interval(self, group_interval):
        """Sets the group_interval of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.

        How long to wait before sending an updated notification. Must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).  # noqa: E501

        :param group_interval: The group_interval of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.  # noqa: E501
        :type: str
        """

        self._group_interval = group_interval

    @property
    def group_wait(self):
        """Gets the group_wait of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.  # noqa: E501

        How long to wait before sending the initial notification. Must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).  # noqa: E501

        :return: The group_wait of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.  # noqa: E501
        :rtype: str
        """
        return self._group_wait

    @group_wait.setter
    def group_wait(self, group_wait):
        """Sets the group_wait of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.

        How long to wait before sending the initial notification. Must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).  # noqa: E501

        :param group_wait: The group_wait of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.  # noqa: E501
        :type: str
        """

        self._group_wait = group_wait

    @property
    def matchers(self):
        """Gets the matchers of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.  # noqa: E501

        List of matchers that the alert’s labels should match. For the first level route, the operator removes any existing equality and regexp matcher on the `namespace` label and adds a `namespace: <object namespace>` matcher.  # noqa: E501

        :return: The matchers of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecSourceMatch]
        """
        return self._matchers

    @matchers.setter
    def matchers(self, matchers):
        """Sets the matchers of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.

        List of matchers that the alert’s labels should match. For the first level route, the operator removes any existing equality and regexp matcher on the `namespace` label and adds a `namespace: <object namespace>` matcher.  # noqa: E501

        :param matchers: The matchers of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.  # noqa: E501
        :type: list[ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecSourceMatch]
        """

        self._matchers = matchers

    @property
    def receiver(self):
        """Gets the receiver of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.  # noqa: E501

        Name of the receiver for this route. If not empty, it should be listed in the `receivers` field.  # noqa: E501

        :return: The receiver of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.  # noqa: E501
        :rtype: str
        """
        return self._receiver

    @receiver.setter
    def receiver(self, receiver):
        """Sets the receiver of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.

        Name of the receiver for this route. If not empty, it should be listed in the `receivers` field.  # noqa: E501

        :param receiver: The receiver of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.  # noqa: E501
        :type: str
        """

        self._receiver = receiver

    @property
    def repeat_interval(self):
        """Gets the repeat_interval of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.  # noqa: E501

        How long to wait before repeating the last notification. Must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).  # noqa: E501

        :return: The repeat_interval of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.  # noqa: E501
        :rtype: str
        """
        return self._repeat_interval

    @repeat_interval.setter
    def repeat_interval(self, repeat_interval):
        """Sets the repeat_interval of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.

        How long to wait before repeating the last notification. Must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).  # noqa: E501

        :param repeat_interval: The repeat_interval of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.  # noqa: E501
        :type: str
        """

        self._repeat_interval = repeat_interval

    @property
    def routes(self):
        """Gets the routes of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.  # noqa: E501

        Child routes.  # noqa: E501

        :return: The routes of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.  # noqa: E501
        :rtype: list[object]
        """
        return self._routes

    @routes.setter
    def routes(self, routes):
        """Sets the routes of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.

        Child routes.  # noqa: E501

        :param routes: The routes of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute.  # noqa: E501
        :type: list[object]
        """

        self._routes = routes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecRoute):
            return True

        return self.to_dict() != other.to_dict()
