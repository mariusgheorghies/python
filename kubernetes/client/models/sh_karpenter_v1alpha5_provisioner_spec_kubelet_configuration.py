# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ShKarpenterV1alpha5ProvisionerSpecKubeletConfiguration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cluster_dns': 'list[str]',
        'container_runtime': 'str'
    }

    attribute_map = {
        'cluster_dns': 'clusterDNS',
        'container_runtime': 'containerRuntime'
    }

    def __init__(self, cluster_dns=None, container_runtime=None, local_vars_configuration=None):  # noqa: E501
        """ShKarpenterV1alpha5ProvisionerSpecKubeletConfiguration - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cluster_dns = None
        self._container_runtime = None
        self.discriminator = None

        if cluster_dns is not None:
            self.cluster_dns = cluster_dns
        if container_runtime is not None:
            self.container_runtime = container_runtime

    @property
    def cluster_dns(self):
        """Gets the cluster_dns of this ShKarpenterV1alpha5ProvisionerSpecKubeletConfiguration.  # noqa: E501

        clusterDNS is a list of IP addresses for the cluster DNS server. Note that not all providers may use all addresses.  # noqa: E501

        :return: The cluster_dns of this ShKarpenterV1alpha5ProvisionerSpecKubeletConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._cluster_dns

    @cluster_dns.setter
    def cluster_dns(self, cluster_dns):
        """Sets the cluster_dns of this ShKarpenterV1alpha5ProvisionerSpecKubeletConfiguration.

        clusterDNS is a list of IP addresses for the cluster DNS server. Note that not all providers may use all addresses.  # noqa: E501

        :param cluster_dns: The cluster_dns of this ShKarpenterV1alpha5ProvisionerSpecKubeletConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._cluster_dns = cluster_dns

    @property
    def container_runtime(self):
        """Gets the container_runtime of this ShKarpenterV1alpha5ProvisionerSpecKubeletConfiguration.  # noqa: E501

        ContainerRuntime is the container runtime to be used with your worker nodes.  # noqa: E501

        :return: The container_runtime of this ShKarpenterV1alpha5ProvisionerSpecKubeletConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._container_runtime

    @container_runtime.setter
    def container_runtime(self, container_runtime):
        """Sets the container_runtime of this ShKarpenterV1alpha5ProvisionerSpecKubeletConfiguration.

        ContainerRuntime is the container runtime to be used with your worker nodes.  # noqa: E501

        :param container_runtime: The container_runtime of this ShKarpenterV1alpha5ProvisionerSpecKubeletConfiguration.  # noqa: E501
        :type: str
        """

        self._container_runtime = container_runtime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShKarpenterV1alpha5ProvisionerSpecKubeletConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ShKarpenterV1alpha5ProvisionerSpecKubeletConfiguration):
            return True

        return self.to_dict() != other.to_dict()
