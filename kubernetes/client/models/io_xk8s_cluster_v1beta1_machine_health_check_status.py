# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterV1beta1MachineHealthCheckStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'conditions': 'list[IoXK8sClusterAddonsV1beta1ClusterResourceSetStatusConditions]',
        'current_healthy': 'int',
        'expected_machines': 'int',
        'observed_generation': 'int',
        'remediations_allowed': 'int',
        'targets': 'list[str]'
    }

    attribute_map = {
        'conditions': 'conditions',
        'current_healthy': 'currentHealthy',
        'expected_machines': 'expectedMachines',
        'observed_generation': 'observedGeneration',
        'remediations_allowed': 'remediationsAllowed',
        'targets': 'targets'
    }

    def __init__(self, conditions=None, current_healthy=None, expected_machines=None, observed_generation=None, remediations_allowed=None, targets=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterV1beta1MachineHealthCheckStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._conditions = None
        self._current_healthy = None
        self._expected_machines = None
        self._observed_generation = None
        self._remediations_allowed = None
        self._targets = None
        self.discriminator = None

        if conditions is not None:
            self.conditions = conditions
        if current_healthy is not None:
            self.current_healthy = current_healthy
        if expected_machines is not None:
            self.expected_machines = expected_machines
        if observed_generation is not None:
            self.observed_generation = observed_generation
        if remediations_allowed is not None:
            self.remediations_allowed = remediations_allowed
        if targets is not None:
            self.targets = targets

    @property
    def conditions(self):
        """Gets the conditions of this IoXK8sClusterV1beta1MachineHealthCheckStatus.  # noqa: E501

        Conditions defines current service state of the MachineHealthCheck.  # noqa: E501

        :return: The conditions of this IoXK8sClusterV1beta1MachineHealthCheckStatus.  # noqa: E501
        :rtype: list[IoXK8sClusterAddonsV1beta1ClusterResourceSetStatusConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this IoXK8sClusterV1beta1MachineHealthCheckStatus.

        Conditions defines current service state of the MachineHealthCheck.  # noqa: E501

        :param conditions: The conditions of this IoXK8sClusterV1beta1MachineHealthCheckStatus.  # noqa: E501
        :type: list[IoXK8sClusterAddonsV1beta1ClusterResourceSetStatusConditions]
        """

        self._conditions = conditions

    @property
    def current_healthy(self):
        """Gets the current_healthy of this IoXK8sClusterV1beta1MachineHealthCheckStatus.  # noqa: E501

        total number of healthy machines counted by this machine health check  # noqa: E501

        :return: The current_healthy of this IoXK8sClusterV1beta1MachineHealthCheckStatus.  # noqa: E501
        :rtype: int
        """
        return self._current_healthy

    @current_healthy.setter
    def current_healthy(self, current_healthy):
        """Sets the current_healthy of this IoXK8sClusterV1beta1MachineHealthCheckStatus.

        total number of healthy machines counted by this machine health check  # noqa: E501

        :param current_healthy: The current_healthy of this IoXK8sClusterV1beta1MachineHealthCheckStatus.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                current_healthy is not None and current_healthy < 0):  # noqa: E501
            raise ValueError("Invalid value for `current_healthy`, must be a value greater than or equal to `0`")  # noqa: E501

        self._current_healthy = current_healthy

    @property
    def expected_machines(self):
        """Gets the expected_machines of this IoXK8sClusterV1beta1MachineHealthCheckStatus.  # noqa: E501

        total number of machines counted by this machine health check  # noqa: E501

        :return: The expected_machines of this IoXK8sClusterV1beta1MachineHealthCheckStatus.  # noqa: E501
        :rtype: int
        """
        return self._expected_machines

    @expected_machines.setter
    def expected_machines(self, expected_machines):
        """Sets the expected_machines of this IoXK8sClusterV1beta1MachineHealthCheckStatus.

        total number of machines counted by this machine health check  # noqa: E501

        :param expected_machines: The expected_machines of this IoXK8sClusterV1beta1MachineHealthCheckStatus.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                expected_machines is not None and expected_machines < 0):  # noqa: E501
            raise ValueError("Invalid value for `expected_machines`, must be a value greater than or equal to `0`")  # noqa: E501

        self._expected_machines = expected_machines

    @property
    def observed_generation(self):
        """Gets the observed_generation of this IoXK8sClusterV1beta1MachineHealthCheckStatus.  # noqa: E501

        ObservedGeneration is the latest generation observed by the controller.  # noqa: E501

        :return: The observed_generation of this IoXK8sClusterV1beta1MachineHealthCheckStatus.  # noqa: E501
        :rtype: int
        """
        return self._observed_generation

    @observed_generation.setter
    def observed_generation(self, observed_generation):
        """Sets the observed_generation of this IoXK8sClusterV1beta1MachineHealthCheckStatus.

        ObservedGeneration is the latest generation observed by the controller.  # noqa: E501

        :param observed_generation: The observed_generation of this IoXK8sClusterV1beta1MachineHealthCheckStatus.  # noqa: E501
        :type: int
        """

        self._observed_generation = observed_generation

    @property
    def remediations_allowed(self):
        """Gets the remediations_allowed of this IoXK8sClusterV1beta1MachineHealthCheckStatus.  # noqa: E501

        RemediationsAllowed is the number of further remediations allowed by this machine health check before maxUnhealthy short circuiting will be applied  # noqa: E501

        :return: The remediations_allowed of this IoXK8sClusterV1beta1MachineHealthCheckStatus.  # noqa: E501
        :rtype: int
        """
        return self._remediations_allowed

    @remediations_allowed.setter
    def remediations_allowed(self, remediations_allowed):
        """Sets the remediations_allowed of this IoXK8sClusterV1beta1MachineHealthCheckStatus.

        RemediationsAllowed is the number of further remediations allowed by this machine health check before maxUnhealthy short circuiting will be applied  # noqa: E501

        :param remediations_allowed: The remediations_allowed of this IoXK8sClusterV1beta1MachineHealthCheckStatus.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                remediations_allowed is not None and remediations_allowed < 0):  # noqa: E501
            raise ValueError("Invalid value for `remediations_allowed`, must be a value greater than or equal to `0`")  # noqa: E501

        self._remediations_allowed = remediations_allowed

    @property
    def targets(self):
        """Gets the targets of this IoXK8sClusterV1beta1MachineHealthCheckStatus.  # noqa: E501

        Targets shows the current list of machines the machine health check is watching  # noqa: E501

        :return: The targets of this IoXK8sClusterV1beta1MachineHealthCheckStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this IoXK8sClusterV1beta1MachineHealthCheckStatus.

        Targets shows the current list of machines the machine health check is watching  # noqa: E501

        :param targets: The targets of this IoXK8sClusterV1beta1MachineHealthCheckStatus.  # noqa: E501
        :type: list[str]
        """

        self._targets = targets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterV1beta1MachineHealthCheckStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterV1beta1MachineHealthCheckStatus):
            return True

        return self.to_dict() != other.to_dict()
