# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoArgoprojV1alpha1ApplicationStatusResources(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'group': 'str',
        'health': 'IoArgoprojV1alpha1ApplicationStatusHealth1',
        'hook': 'bool',
        'kind': 'str',
        'name': 'str',
        'namespace': 'str',
        'requires_pruning': 'bool',
        'status': 'str',
        'sync_wave': 'int',
        'version': 'str'
    }

    attribute_map = {
        'group': 'group',
        'health': 'health',
        'hook': 'hook',
        'kind': 'kind',
        'name': 'name',
        'namespace': 'namespace',
        'requires_pruning': 'requiresPruning',
        'status': 'status',
        'sync_wave': 'syncWave',
        'version': 'version'
    }

    def __init__(self, group=None, health=None, hook=None, kind=None, name=None, namespace=None, requires_pruning=None, status=None, sync_wave=None, version=None, local_vars_configuration=None):  # noqa: E501
        """IoArgoprojV1alpha1ApplicationStatusResources - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._group = None
        self._health = None
        self._hook = None
        self._kind = None
        self._name = None
        self._namespace = None
        self._requires_pruning = None
        self._status = None
        self._sync_wave = None
        self._version = None
        self.discriminator = None

        if group is not None:
            self.group = group
        if health is not None:
            self.health = health
        if hook is not None:
            self.hook = hook
        if kind is not None:
            self.kind = kind
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if requires_pruning is not None:
            self.requires_pruning = requires_pruning
        if status is not None:
            self.status = status
        if sync_wave is not None:
            self.sync_wave = sync_wave
        if version is not None:
            self.version = version

    @property
    def group(self):
        """Gets the group of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501


        :return: The group of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this IoArgoprojV1alpha1ApplicationStatusResources.


        :param group: The group of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def health(self):
        """Gets the health of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501


        :return: The health of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501
        :rtype: IoArgoprojV1alpha1ApplicationStatusHealth1
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this IoArgoprojV1alpha1ApplicationStatusResources.


        :param health: The health of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501
        :type: IoArgoprojV1alpha1ApplicationStatusHealth1
        """

        self._health = health

    @property
    def hook(self):
        """Gets the hook of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501


        :return: The hook of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501
        :rtype: bool
        """
        return self._hook

    @hook.setter
    def hook(self, hook):
        """Sets the hook of this IoArgoprojV1alpha1ApplicationStatusResources.


        :param hook: The hook of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501
        :type: bool
        """

        self._hook = hook

    @property
    def kind(self):
        """Gets the kind of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501


        :return: The kind of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this IoArgoprojV1alpha1ApplicationStatusResources.


        :param kind: The kind of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501


        :return: The name of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IoArgoprojV1alpha1ApplicationStatusResources.


        :param name: The name of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501


        :return: The namespace of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this IoArgoprojV1alpha1ApplicationStatusResources.


        :param namespace: The namespace of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def requires_pruning(self):
        """Gets the requires_pruning of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501


        :return: The requires_pruning of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501
        :rtype: bool
        """
        return self._requires_pruning

    @requires_pruning.setter
    def requires_pruning(self, requires_pruning):
        """Sets the requires_pruning of this IoArgoprojV1alpha1ApplicationStatusResources.


        :param requires_pruning: The requires_pruning of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501
        :type: bool
        """

        self._requires_pruning = requires_pruning

    @property
    def status(self):
        """Gets the status of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501

        SyncStatusCode is a type which represents possible comparison results  # noqa: E501

        :return: The status of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this IoArgoprojV1alpha1ApplicationStatusResources.

        SyncStatusCode is a type which represents possible comparison results  # noqa: E501

        :param status: The status of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def sync_wave(self):
        """Gets the sync_wave of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501


        :return: The sync_wave of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501
        :rtype: int
        """
        return self._sync_wave

    @sync_wave.setter
    def sync_wave(self, sync_wave):
        """Sets the sync_wave of this IoArgoprojV1alpha1ApplicationStatusResources.


        :param sync_wave: The sync_wave of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501
        :type: int
        """

        self._sync_wave = sync_wave

    @property
    def version(self):
        """Gets the version of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501


        :return: The version of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this IoArgoprojV1alpha1ApplicationStatusResources.


        :param version: The version of this IoArgoprojV1alpha1ApplicationStatusResources.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojV1alpha1ApplicationStatusResources):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojV1alpha1ApplicationStatusResources):
            return True

        return self.to_dict() != other.to_dict()
