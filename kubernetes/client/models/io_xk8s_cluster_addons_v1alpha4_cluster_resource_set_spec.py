# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterAddonsV1alpha4ClusterResourceSetSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cluster_selector': 'IoXK8sClusterAddonsV1alpha4ClusterResourceSetSpecClusterSelector',
        'resources': 'list[IoXK8sClusterAddonsV1alpha3ClusterResourceSetSpecResources]',
        'strategy': 'str'
    }

    attribute_map = {
        'cluster_selector': 'clusterSelector',
        'resources': 'resources',
        'strategy': 'strategy'
    }

    def __init__(self, cluster_selector=None, resources=None, strategy=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterAddonsV1alpha4ClusterResourceSetSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cluster_selector = None
        self._resources = None
        self._strategy = None
        self.discriminator = None

        self.cluster_selector = cluster_selector
        if resources is not None:
            self.resources = resources
        if strategy is not None:
            self.strategy = strategy

    @property
    def cluster_selector(self):
        """Gets the cluster_selector of this IoXK8sClusterAddonsV1alpha4ClusterResourceSetSpec.  # noqa: E501


        :return: The cluster_selector of this IoXK8sClusterAddonsV1alpha4ClusterResourceSetSpec.  # noqa: E501
        :rtype: IoXK8sClusterAddonsV1alpha4ClusterResourceSetSpecClusterSelector
        """
        return self._cluster_selector

    @cluster_selector.setter
    def cluster_selector(self, cluster_selector):
        """Sets the cluster_selector of this IoXK8sClusterAddonsV1alpha4ClusterResourceSetSpec.


        :param cluster_selector: The cluster_selector of this IoXK8sClusterAddonsV1alpha4ClusterResourceSetSpec.  # noqa: E501
        :type: IoXK8sClusterAddonsV1alpha4ClusterResourceSetSpecClusterSelector
        """
        if self.local_vars_configuration.client_side_validation and cluster_selector is None:  # noqa: E501
            raise ValueError("Invalid value for `cluster_selector`, must not be `None`")  # noqa: E501

        self._cluster_selector = cluster_selector

    @property
    def resources(self):
        """Gets the resources of this IoXK8sClusterAddonsV1alpha4ClusterResourceSetSpec.  # noqa: E501

        Resources is a list of Secrets/ConfigMaps where each contains 1 or more resources to be applied to remote clusters.  # noqa: E501

        :return: The resources of this IoXK8sClusterAddonsV1alpha4ClusterResourceSetSpec.  # noqa: E501
        :rtype: list[IoXK8sClusterAddonsV1alpha3ClusterResourceSetSpecResources]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this IoXK8sClusterAddonsV1alpha4ClusterResourceSetSpec.

        Resources is a list of Secrets/ConfigMaps where each contains 1 or more resources to be applied to remote clusters.  # noqa: E501

        :param resources: The resources of this IoXK8sClusterAddonsV1alpha4ClusterResourceSetSpec.  # noqa: E501
        :type: list[IoXK8sClusterAddonsV1alpha3ClusterResourceSetSpecResources]
        """

        self._resources = resources

    @property
    def strategy(self):
        """Gets the strategy of this IoXK8sClusterAddonsV1alpha4ClusterResourceSetSpec.  # noqa: E501

        Strategy is the strategy to be used during applying resources. Defaults to ApplyOnce. This field is immutable.  # noqa: E501

        :return: The strategy of this IoXK8sClusterAddonsV1alpha4ClusterResourceSetSpec.  # noqa: E501
        :rtype: str
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this IoXK8sClusterAddonsV1alpha4ClusterResourceSetSpec.

        Strategy is the strategy to be used during applying resources. Defaults to ApplyOnce. This field is immutable.  # noqa: E501

        :param strategy: The strategy of this IoXK8sClusterAddonsV1alpha4ClusterResourceSetSpec.  # noqa: E501
        :type: str
        """
        allowed_values = ["ApplyOnce"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and strategy not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(strategy, allowed_values)
            )

        self._strategy = strategy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterAddonsV1alpha4ClusterResourceSetSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterAddonsV1alpha4ClusterResourceSetSpec):
            return True

        return self.to_dict() != other.to_dict()
