# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'action': 'str',
        'destination': 'OrgProjectcalicoCrdV1GlobalNetworkPolicySpecDestination',
        'http': 'OrgProjectcalicoCrdV1GlobalNetworkPolicySpecHttp',
        'icmp': 'OrgProjectcalicoCrdV1GlobalNetworkPolicySpecIcmp',
        'ip_version': 'int',
        'metadata': 'OrgProjectcalicoCrdV1GlobalNetworkPolicySpecMetadata',
        'not_icmp': 'OrgProjectcalicoCrdV1GlobalNetworkPolicySpecNotICMP',
        'not_protocol': 'object',
        'protocol': 'object',
        'source': 'OrgProjectcalicoCrdV1GlobalNetworkPolicySpecSource'
    }

    attribute_map = {
        'action': 'action',
        'destination': 'destination',
        'http': 'http',
        'icmp': 'icmp',
        'ip_version': 'ipVersion',
        'metadata': 'metadata',
        'not_icmp': 'notICMP',
        'not_protocol': 'notProtocol',
        'protocol': 'protocol',
        'source': 'source'
    }

    def __init__(self, action=None, destination=None, http=None, icmp=None, ip_version=None, metadata=None, not_icmp=None, not_protocol=None, protocol=None, source=None, local_vars_configuration=None):  # noqa: E501
        """OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._action = None
        self._destination = None
        self._http = None
        self._icmp = None
        self._ip_version = None
        self._metadata = None
        self._not_icmp = None
        self._not_protocol = None
        self._protocol = None
        self._source = None
        self.discriminator = None

        self.action = action
        if destination is not None:
            self.destination = destination
        if http is not None:
            self.http = http
        if icmp is not None:
            self.icmp = icmp
        if ip_version is not None:
            self.ip_version = ip_version
        if metadata is not None:
            self.metadata = metadata
        if not_icmp is not None:
            self.not_icmp = not_icmp
        if not_protocol is not None:
            self.not_protocol = not_protocol
        if protocol is not None:
            self.protocol = protocol
        if source is not None:
            self.source = source

    @property
    def action(self):
        """Gets the action of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501


        :return: The action of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.


        :param action: The action of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and action is None:  # noqa: E501
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def destination(self):
        """Gets the destination of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501


        :return: The destination of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501
        :rtype: OrgProjectcalicoCrdV1GlobalNetworkPolicySpecDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.


        :param destination: The destination of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501
        :type: OrgProjectcalicoCrdV1GlobalNetworkPolicySpecDestination
        """

        self._destination = destination

    @property
    def http(self):
        """Gets the http of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501


        :return: The http of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501
        :rtype: OrgProjectcalicoCrdV1GlobalNetworkPolicySpecHttp
        """
        return self._http

    @http.setter
    def http(self, http):
        """Sets the http of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.


        :param http: The http of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501
        :type: OrgProjectcalicoCrdV1GlobalNetworkPolicySpecHttp
        """

        self._http = http

    @property
    def icmp(self):
        """Gets the icmp of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501


        :return: The icmp of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501
        :rtype: OrgProjectcalicoCrdV1GlobalNetworkPolicySpecIcmp
        """
        return self._icmp

    @icmp.setter
    def icmp(self, icmp):
        """Sets the icmp of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.


        :param icmp: The icmp of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501
        :type: OrgProjectcalicoCrdV1GlobalNetworkPolicySpecIcmp
        """

        self._icmp = icmp

    @property
    def ip_version(self):
        """Gets the ip_version of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501

        IPVersion is an optional field that restricts the rule to only match a specific IP version.  # noqa: E501

        :return: The ip_version of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501
        :rtype: int
        """
        return self._ip_version

    @ip_version.setter
    def ip_version(self, ip_version):
        """Sets the ip_version of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.

        IPVersion is an optional field that restricts the rule to only match a specific IP version.  # noqa: E501

        :param ip_version: The ip_version of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501
        :type: int
        """

        self._ip_version = ip_version

    @property
    def metadata(self):
        """Gets the metadata of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501


        :return: The metadata of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501
        :rtype: OrgProjectcalicoCrdV1GlobalNetworkPolicySpecMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.


        :param metadata: The metadata of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501
        :type: OrgProjectcalicoCrdV1GlobalNetworkPolicySpecMetadata
        """

        self._metadata = metadata

    @property
    def not_icmp(self):
        """Gets the not_icmp of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501


        :return: The not_icmp of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501
        :rtype: OrgProjectcalicoCrdV1GlobalNetworkPolicySpecNotICMP
        """
        return self._not_icmp

    @not_icmp.setter
    def not_icmp(self, not_icmp):
        """Sets the not_icmp of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.


        :param not_icmp: The not_icmp of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501
        :type: OrgProjectcalicoCrdV1GlobalNetworkPolicySpecNotICMP
        """

        self._not_icmp = not_icmp

    @property
    def not_protocol(self):
        """Gets the not_protocol of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501

        NotProtocol is the negated version of the Protocol field.  # noqa: E501

        :return: The not_protocol of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501
        :rtype: object
        """
        return self._not_protocol

    @not_protocol.setter
    def not_protocol(self, not_protocol):
        """Sets the not_protocol of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.

        NotProtocol is the negated version of the Protocol field.  # noqa: E501

        :param not_protocol: The not_protocol of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501
        :type: object
        """

        self._not_protocol = not_protocol

    @property
    def protocol(self):
        """Gets the protocol of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501

        Protocol is an optional field that restricts the rule to only apply to traffic of a specific IP protocol. Required if any of the EntityRules contain Ports (because ports only apply to certain protocols).   Must be one of these string values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\", \"SCTP\", \"UDPLite\" or an integer in the range 1-255.  # noqa: E501

        :return: The protocol of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501
        :rtype: object
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.

        Protocol is an optional field that restricts the rule to only apply to traffic of a specific IP protocol. Required if any of the EntityRules contain Ports (because ports only apply to certain protocols).   Must be one of these string values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\", \"SCTP\", \"UDPLite\" or an integer in the range 1-255.  # noqa: E501

        :param protocol: The protocol of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501
        :type: object
        """

        self._protocol = protocol

    @property
    def source(self):
        """Gets the source of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501


        :return: The source of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501
        :rtype: OrgProjectcalicoCrdV1GlobalNetworkPolicySpecSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.


        :param source: The source of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress.  # noqa: E501
        :type: OrgProjectcalicoCrdV1GlobalNetworkPolicySpecSource
        """

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrgProjectcalicoCrdV1GlobalNetworkPolicySpecEgress):
            return True

        return self.to_dict() != other.to_dict()
