# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cidr_i_pv4': 'str',
        'cidr_i_pv6': 'str',
        'description': 'str',
        'from_port': 'int',
        'ip_protocol': 'str',
        'is_egress': 'bool',
        'prefix_list_id': 'str',
        'security_group_rule_id': 'str',
        'tags': 'list[AwsK8sServicesEc2V1alpha1DHCPOptionsSpecTags]',
        'to_port': 'int'
    }

    attribute_map = {
        'cidr_i_pv4': 'cidrIPv4',
        'cidr_i_pv6': 'cidrIPv6',
        'description': 'description',
        'from_port': 'fromPort',
        'ip_protocol': 'ipProtocol',
        'is_egress': 'isEgress',
        'prefix_list_id': 'prefixListID',
        'security_group_rule_id': 'securityGroupRuleID',
        'tags': 'tags',
        'to_port': 'toPort'
    }

    def __init__(self, cidr_i_pv4=None, cidr_i_pv6=None, description=None, from_port=None, ip_protocol=None, is_egress=None, prefix_list_id=None, security_group_rule_id=None, tags=None, to_port=None, local_vars_configuration=None):  # noqa: E501
        """AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cidr_i_pv4 = None
        self._cidr_i_pv6 = None
        self._description = None
        self._from_port = None
        self._ip_protocol = None
        self._is_egress = None
        self._prefix_list_id = None
        self._security_group_rule_id = None
        self._tags = None
        self._to_port = None
        self.discriminator = None

        if cidr_i_pv4 is not None:
            self.cidr_i_pv4 = cidr_i_pv4
        if cidr_i_pv6 is not None:
            self.cidr_i_pv6 = cidr_i_pv6
        if description is not None:
            self.description = description
        if from_port is not None:
            self.from_port = from_port
        if ip_protocol is not None:
            self.ip_protocol = ip_protocol
        if is_egress is not None:
            self.is_egress = is_egress
        if prefix_list_id is not None:
            self.prefix_list_id = prefix_list_id
        if security_group_rule_id is not None:
            self.security_group_rule_id = security_group_rule_id
        if tags is not None:
            self.tags = tags
        if to_port is not None:
            self.to_port = to_port

    @property
    def cidr_i_pv4(self):
        """Gets the cidr_i_pv4 of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501


        :return: The cidr_i_pv4 of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501
        :rtype: str
        """
        return self._cidr_i_pv4

    @cidr_i_pv4.setter
    def cidr_i_pv4(self, cidr_i_pv4):
        """Sets the cidr_i_pv4 of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.


        :param cidr_i_pv4: The cidr_i_pv4 of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501
        :type: str
        """

        self._cidr_i_pv4 = cidr_i_pv4

    @property
    def cidr_i_pv6(self):
        """Gets the cidr_i_pv6 of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501


        :return: The cidr_i_pv6 of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501
        :rtype: str
        """
        return self._cidr_i_pv6

    @cidr_i_pv6.setter
    def cidr_i_pv6(self, cidr_i_pv6):
        """Sets the cidr_i_pv6 of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.


        :param cidr_i_pv6: The cidr_i_pv6 of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501
        :type: str
        """

        self._cidr_i_pv6 = cidr_i_pv6

    @property
    def description(self):
        """Gets the description of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501


        :return: The description of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.


        :param description: The description of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def from_port(self):
        """Gets the from_port of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501


        :return: The from_port of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501
        :rtype: int
        """
        return self._from_port

    @from_port.setter
    def from_port(self, from_port):
        """Sets the from_port of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.


        :param from_port: The from_port of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501
        :type: int
        """

        self._from_port = from_port

    @property
    def ip_protocol(self):
        """Gets the ip_protocol of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501


        :return: The ip_protocol of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501
        :rtype: str
        """
        return self._ip_protocol

    @ip_protocol.setter
    def ip_protocol(self, ip_protocol):
        """Sets the ip_protocol of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.


        :param ip_protocol: The ip_protocol of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501
        :type: str
        """

        self._ip_protocol = ip_protocol

    @property
    def is_egress(self):
        """Gets the is_egress of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501


        :return: The is_egress of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501
        :rtype: bool
        """
        return self._is_egress

    @is_egress.setter
    def is_egress(self, is_egress):
        """Sets the is_egress of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.


        :param is_egress: The is_egress of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501
        :type: bool
        """

        self._is_egress = is_egress

    @property
    def prefix_list_id(self):
        """Gets the prefix_list_id of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501


        :return: The prefix_list_id of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501
        :rtype: str
        """
        return self._prefix_list_id

    @prefix_list_id.setter
    def prefix_list_id(self, prefix_list_id):
        """Sets the prefix_list_id of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.


        :param prefix_list_id: The prefix_list_id of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501
        :type: str
        """

        self._prefix_list_id = prefix_list_id

    @property
    def security_group_rule_id(self):
        """Gets the security_group_rule_id of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501


        :return: The security_group_rule_id of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501
        :rtype: str
        """
        return self._security_group_rule_id

    @security_group_rule_id.setter
    def security_group_rule_id(self, security_group_rule_id):
        """Sets the security_group_rule_id of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.


        :param security_group_rule_id: The security_group_rule_id of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501
        :type: str
        """

        self._security_group_rule_id = security_group_rule_id

    @property
    def tags(self):
        """Gets the tags of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501


        :return: The tags of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1DHCPOptionsSpecTags]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.


        :param tags: The tags of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1DHCPOptionsSpecTags]
        """

        self._tags = tags

    @property
    def to_port(self):
        """Gets the to_port of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501


        :return: The to_port of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501
        :rtype: int
        """
        return self._to_port

    @to_port.setter
    def to_port(self, to_port):
        """Sets the to_port of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.


        :param to_port: The to_port of this AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules.  # noqa: E501
        :type: int
        """

        self._to_port = to_port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1SecurityGroupStatusRules):
            return True

        return self.to_dict() != other.to_dict()
