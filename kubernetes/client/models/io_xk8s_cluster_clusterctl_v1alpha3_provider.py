# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterClusterctlV1alpha3Provider(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_version': 'str',
        'kind': 'str',
        'metadata': 'V1ObjectMetaV2',
        'provider_name': 'str',
        'type': 'str',
        'version': 'str',
        'watched_namespace': 'str'
    }

    attribute_map = {
        'api_version': 'apiVersion',
        'kind': 'kind',
        'metadata': 'metadata',
        'provider_name': 'providerName',
        'type': 'type',
        'version': 'version',
        'watched_namespace': 'watchedNamespace'
    }

    def __init__(self, api_version=None, kind=None, metadata=None, provider_name=None, type=None, version=None, watched_namespace=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterClusterctlV1alpha3Provider - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_version = None
        self._kind = None
        self._metadata = None
        self._provider_name = None
        self._type = None
        self._version = None
        self._watched_namespace = None
        self.discriminator = None

        if api_version is not None:
            self.api_version = api_version
        if kind is not None:
            self.kind = kind
        if metadata is not None:
            self.metadata = metadata
        if provider_name is not None:
            self.provider_name = provider_name
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version
        if watched_namespace is not None:
            self.watched_namespace = watched_namespace

    @property
    def api_version(self):
        """Gets the api_version of this IoXK8sClusterClusterctlV1alpha3Provider.  # noqa: E501

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :return: The api_version of this IoXK8sClusterClusterctlV1alpha3Provider.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this IoXK8sClusterClusterctlV1alpha3Provider.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :param api_version: The api_version of this IoXK8sClusterClusterctlV1alpha3Provider.  # noqa: E501
        :type: str
        """

        self._api_version = api_version

    @property
    def kind(self):
        """Gets the kind of this IoXK8sClusterClusterctlV1alpha3Provider.  # noqa: E501

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this IoXK8sClusterClusterctlV1alpha3Provider.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this IoXK8sClusterClusterctlV1alpha3Provider.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this IoXK8sClusterClusterctlV1alpha3Provider.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def metadata(self):
        """Gets the metadata of this IoXK8sClusterClusterctlV1alpha3Provider.  # noqa: E501


        :return: The metadata of this IoXK8sClusterClusterctlV1alpha3Provider.  # noqa: E501
        :rtype: V1ObjectMetaV2
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this IoXK8sClusterClusterctlV1alpha3Provider.


        :param metadata: The metadata of this IoXK8sClusterClusterctlV1alpha3Provider.  # noqa: E501
        :type: V1ObjectMetaV2
        """

        self._metadata = metadata

    @property
    def provider_name(self):
        """Gets the provider_name of this IoXK8sClusterClusterctlV1alpha3Provider.  # noqa: E501

        ProviderName indicates the name of the provider.  # noqa: E501

        :return: The provider_name of this IoXK8sClusterClusterctlV1alpha3Provider.  # noqa: E501
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this IoXK8sClusterClusterctlV1alpha3Provider.

        ProviderName indicates the name of the provider.  # noqa: E501

        :param provider_name: The provider_name of this IoXK8sClusterClusterctlV1alpha3Provider.  # noqa: E501
        :type: str
        """

        self._provider_name = provider_name

    @property
    def type(self):
        """Gets the type of this IoXK8sClusterClusterctlV1alpha3Provider.  # noqa: E501

        Type indicates the type of the provider. See ProviderType for a list of supported values  # noqa: E501

        :return: The type of this IoXK8sClusterClusterctlV1alpha3Provider.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IoXK8sClusterClusterctlV1alpha3Provider.

        Type indicates the type of the provider. See ProviderType for a list of supported values  # noqa: E501

        :param type: The type of this IoXK8sClusterClusterctlV1alpha3Provider.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this IoXK8sClusterClusterctlV1alpha3Provider.  # noqa: E501

        Version indicates the component version.  # noqa: E501

        :return: The version of this IoXK8sClusterClusterctlV1alpha3Provider.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this IoXK8sClusterClusterctlV1alpha3Provider.

        Version indicates the component version.  # noqa: E501

        :param version: The version of this IoXK8sClusterClusterctlV1alpha3Provider.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def watched_namespace(self):
        """Gets the watched_namespace of this IoXK8sClusterClusterctlV1alpha3Provider.  # noqa: E501

        WatchedNamespace indicates the namespace where the provider controller is is watching. if empty the provider controller is watching for objects in all namespaces. Deprecated: in clusterctl v1alpha4 all the providers watch all the namespaces; this field will be removed in a future version of this API  # noqa: E501

        :return: The watched_namespace of this IoXK8sClusterClusterctlV1alpha3Provider.  # noqa: E501
        :rtype: str
        """
        return self._watched_namespace

    @watched_namespace.setter
    def watched_namespace(self, watched_namespace):
        """Sets the watched_namespace of this IoXK8sClusterClusterctlV1alpha3Provider.

        WatchedNamespace indicates the namespace where the provider controller is is watching. if empty the provider controller is watching for objects in all namespaces. Deprecated: in clusterctl v1alpha4 all the providers watch all the namespaces; this field will be removed in a future version of this API  # noqa: E501

        :param watched_namespace: The watched_namespace of this IoXK8sClusterClusterctlV1alpha3Provider.  # noqa: E501
        :type: str
        """

        self._watched_namespace = watched_namespace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterClusterctlV1alpha3Provider):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterClusterctlV1alpha3Provider):
            return True

        return self.to_dict() != other.to_dict()
