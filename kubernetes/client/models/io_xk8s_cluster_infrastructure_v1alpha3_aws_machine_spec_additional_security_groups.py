# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterInfrastructureV1alpha3AWSMachineSpecAdditionalSecurityGroups(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'arn': 'str',
        'filters': 'list[IoXK8sClusterInfrastructureV1alpha3AWSMachineSpecFilters]',
        'id': 'str'
    }

    attribute_map = {
        'arn': 'arn',
        'filters': 'filters',
        'id': 'id'
    }

    def __init__(self, arn=None, filters=None, id=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterInfrastructureV1alpha3AWSMachineSpecAdditionalSecurityGroups - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._arn = None
        self._filters = None
        self._id = None
        self.discriminator = None

        if arn is not None:
            self.arn = arn
        if filters is not None:
            self.filters = filters
        if id is not None:
            self.id = id

    @property
    def arn(self):
        """Gets the arn of this IoXK8sClusterInfrastructureV1alpha3AWSMachineSpecAdditionalSecurityGroups.  # noqa: E501

        ARN of resource  # noqa: E501

        :return: The arn of this IoXK8sClusterInfrastructureV1alpha3AWSMachineSpecAdditionalSecurityGroups.  # noqa: E501
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this IoXK8sClusterInfrastructureV1alpha3AWSMachineSpecAdditionalSecurityGroups.

        ARN of resource  # noqa: E501

        :param arn: The arn of this IoXK8sClusterInfrastructureV1alpha3AWSMachineSpecAdditionalSecurityGroups.  # noqa: E501
        :type: str
        """

        self._arn = arn

    @property
    def filters(self):
        """Gets the filters of this IoXK8sClusterInfrastructureV1alpha3AWSMachineSpecAdditionalSecurityGroups.  # noqa: E501

        Filters is a set of key/value pairs used to identify a resource They are applied according to the rules defined by the AWS API: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Filtering.html  # noqa: E501

        :return: The filters of this IoXK8sClusterInfrastructureV1alpha3AWSMachineSpecAdditionalSecurityGroups.  # noqa: E501
        :rtype: list[IoXK8sClusterInfrastructureV1alpha3AWSMachineSpecFilters]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this IoXK8sClusterInfrastructureV1alpha3AWSMachineSpecAdditionalSecurityGroups.

        Filters is a set of key/value pairs used to identify a resource They are applied according to the rules defined by the AWS API: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Filtering.html  # noqa: E501

        :param filters: The filters of this IoXK8sClusterInfrastructureV1alpha3AWSMachineSpecAdditionalSecurityGroups.  # noqa: E501
        :type: list[IoXK8sClusterInfrastructureV1alpha3AWSMachineSpecFilters]
        """

        self._filters = filters

    @property
    def id(self):
        """Gets the id of this IoXK8sClusterInfrastructureV1alpha3AWSMachineSpecAdditionalSecurityGroups.  # noqa: E501

        ID of resource  # noqa: E501

        :return: The id of this IoXK8sClusterInfrastructureV1alpha3AWSMachineSpecAdditionalSecurityGroups.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IoXK8sClusterInfrastructureV1alpha3AWSMachineSpecAdditionalSecurityGroups.

        ID of resource  # noqa: E501

        :param id: The id of this IoXK8sClusterInfrastructureV1alpha3AWSMachineSpecAdditionalSecurityGroups.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1alpha3AWSMachineSpecAdditionalSecurityGroups):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1alpha3AWSMachineSpecAdditionalSecurityGroups):
            return True

        return self.to_dict() != other.to_dict()
