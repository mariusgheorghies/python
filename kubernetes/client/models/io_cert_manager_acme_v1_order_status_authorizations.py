# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoCertManagerAcmeV1OrderStatusAuthorizations(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'challenges': 'list[IoCertManagerAcmeV1OrderStatusChallenges]',
        'identifier': 'str',
        'initial_state': 'str',
        'url': 'str',
        'wildcard': 'bool'
    }

    attribute_map = {
        'challenges': 'challenges',
        'identifier': 'identifier',
        'initial_state': 'initialState',
        'url': 'url',
        'wildcard': 'wildcard'
    }

    def __init__(self, challenges=None, identifier=None, initial_state=None, url=None, wildcard=None, local_vars_configuration=None):  # noqa: E501
        """IoCertManagerAcmeV1OrderStatusAuthorizations - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._challenges = None
        self._identifier = None
        self._initial_state = None
        self._url = None
        self._wildcard = None
        self.discriminator = None

        if challenges is not None:
            self.challenges = challenges
        if identifier is not None:
            self.identifier = identifier
        if initial_state is not None:
            self.initial_state = initial_state
        self.url = url
        if wildcard is not None:
            self.wildcard = wildcard

    @property
    def challenges(self):
        """Gets the challenges of this IoCertManagerAcmeV1OrderStatusAuthorizations.  # noqa: E501

        Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.  # noqa: E501

        :return: The challenges of this IoCertManagerAcmeV1OrderStatusAuthorizations.  # noqa: E501
        :rtype: list[IoCertManagerAcmeV1OrderStatusChallenges]
        """
        return self._challenges

    @challenges.setter
    def challenges(self, challenges):
        """Sets the challenges of this IoCertManagerAcmeV1OrderStatusAuthorizations.

        Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.  # noqa: E501

        :param challenges: The challenges of this IoCertManagerAcmeV1OrderStatusAuthorizations.  # noqa: E501
        :type: list[IoCertManagerAcmeV1OrderStatusChallenges]
        """

        self._challenges = challenges

    @property
    def identifier(self):
        """Gets the identifier of this IoCertManagerAcmeV1OrderStatusAuthorizations.  # noqa: E501

        Identifier is the DNS name to be validated as part of this authorization  # noqa: E501

        :return: The identifier of this IoCertManagerAcmeV1OrderStatusAuthorizations.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this IoCertManagerAcmeV1OrderStatusAuthorizations.

        Identifier is the DNS name to be validated as part of this authorization  # noqa: E501

        :param identifier: The identifier of this IoCertManagerAcmeV1OrderStatusAuthorizations.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def initial_state(self):
        """Gets the initial_state of this IoCertManagerAcmeV1OrderStatusAuthorizations.  # noqa: E501

        InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.  # noqa: E501

        :return: The initial_state of this IoCertManagerAcmeV1OrderStatusAuthorizations.  # noqa: E501
        :rtype: str
        """
        return self._initial_state

    @initial_state.setter
    def initial_state(self, initial_state):
        """Sets the initial_state of this IoCertManagerAcmeV1OrderStatusAuthorizations.

        InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.  # noqa: E501

        :param initial_state: The initial_state of this IoCertManagerAcmeV1OrderStatusAuthorizations.  # noqa: E501
        :type: str
        """
        allowed_values = ["valid", "ready", "pending", "processing", "invalid", "expired", "errored"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and initial_state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `initial_state` ({0}), must be one of {1}"  # noqa: E501
                .format(initial_state, allowed_values)
            )

        self._initial_state = initial_state

    @property
    def url(self):
        """Gets the url of this IoCertManagerAcmeV1OrderStatusAuthorizations.  # noqa: E501

        URL is the URL of the Authorization that must be completed  # noqa: E501

        :return: The url of this IoCertManagerAcmeV1OrderStatusAuthorizations.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IoCertManagerAcmeV1OrderStatusAuthorizations.

        URL is the URL of the Authorization that must be completed  # noqa: E501

        :param url: The url of this IoCertManagerAcmeV1OrderStatusAuthorizations.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def wildcard(self):
        """Gets the wildcard of this IoCertManagerAcmeV1OrderStatusAuthorizations.  # noqa: E501

        Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.  # noqa: E501

        :return: The wildcard of this IoCertManagerAcmeV1OrderStatusAuthorizations.  # noqa: E501
        :rtype: bool
        """
        return self._wildcard

    @wildcard.setter
    def wildcard(self, wildcard):
        """Sets the wildcard of this IoCertManagerAcmeV1OrderStatusAuthorizations.

        Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.  # noqa: E501

        :param wildcard: The wildcard of this IoCertManagerAcmeV1OrderStatusAuthorizations.  # noqa: E501
        :type: bool
        """

        self._wildcard = wildcard

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoCertManagerAcmeV1OrderStatusAuthorizations):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoCertManagerAcmeV1OrderStatusAuthorizations):
            return True

        return self.to_dict() != other.to_dict()
