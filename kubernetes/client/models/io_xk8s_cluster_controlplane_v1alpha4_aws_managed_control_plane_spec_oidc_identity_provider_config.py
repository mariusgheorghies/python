# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'client_id': 'str',
        'groups_claim': 'str',
        'groups_prefix': 'str',
        'identity_provider_config_name': 'str',
        'issuer_url': 'str',
        'required_claims': 'dict(str, str)',
        'tags': 'dict(str, str)',
        'username_claim': 'str',
        'username_prefix': 'str'
    }

    attribute_map = {
        'client_id': 'clientId',
        'groups_claim': 'groupsClaim',
        'groups_prefix': 'groupsPrefix',
        'identity_provider_config_name': 'identityProviderConfigName',
        'issuer_url': 'issuerUrl',
        'required_claims': 'requiredClaims',
        'tags': 'tags',
        'username_claim': 'usernameClaim',
        'username_prefix': 'usernamePrefix'
    }

    def __init__(self, client_id=None, groups_claim=None, groups_prefix=None, identity_provider_config_name=None, issuer_url=None, required_claims=None, tags=None, username_claim=None, username_prefix=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._client_id = None
        self._groups_claim = None
        self._groups_prefix = None
        self._identity_provider_config_name = None
        self._issuer_url = None
        self._required_claims = None
        self._tags = None
        self._username_claim = None
        self._username_prefix = None
        self.discriminator = None

        if client_id is not None:
            self.client_id = client_id
        if groups_claim is not None:
            self.groups_claim = groups_claim
        if groups_prefix is not None:
            self.groups_prefix = groups_prefix
        if identity_provider_config_name is not None:
            self.identity_provider_config_name = identity_provider_config_name
        if issuer_url is not None:
            self.issuer_url = issuer_url
        if required_claims is not None:
            self.required_claims = required_claims
        if tags is not None:
            self.tags = tags
        if username_claim is not None:
            self.username_claim = username_claim
        if username_prefix is not None:
            self.username_prefix = username_prefix

    @property
    def client_id(self):
        """Gets the client_id of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501

        This is also known as audience. The ID for the client application that makes authentication requests to the OpenID identity provider.  # noqa: E501

        :return: The client_id of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.

        This is also known as audience. The ID for the client application that makes authentication requests to the OpenID identity provider.  # noqa: E501

        :param client_id: The client_id of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def groups_claim(self):
        """Gets the groups_claim of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501

        The JWT claim that the provider uses to return your groups.  # noqa: E501

        :return: The groups_claim of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501
        :rtype: str
        """
        return self._groups_claim

    @groups_claim.setter
    def groups_claim(self, groups_claim):
        """Sets the groups_claim of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.

        The JWT claim that the provider uses to return your groups.  # noqa: E501

        :param groups_claim: The groups_claim of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501
        :type: str
        """

        self._groups_claim = groups_claim

    @property
    def groups_prefix(self):
        """Gets the groups_prefix of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501

        The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups). For example, the valueoidc: will create group names like oidc:engineering and oidc:infra.  # noqa: E501

        :return: The groups_prefix of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501
        :rtype: str
        """
        return self._groups_prefix

    @groups_prefix.setter
    def groups_prefix(self, groups_prefix):
        """Sets the groups_prefix of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.

        The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups). For example, the valueoidc: will create group names like oidc:engineering and oidc:infra.  # noqa: E501

        :param groups_prefix: The groups_prefix of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501
        :type: str
        """

        self._groups_prefix = groups_prefix

    @property
    def identity_provider_config_name(self):
        """Gets the identity_provider_config_name of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501

        The name of the OIDC provider configuration.   IdentityProviderConfigName is a required field  # noqa: E501

        :return: The identity_provider_config_name of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501
        :rtype: str
        """
        return self._identity_provider_config_name

    @identity_provider_config_name.setter
    def identity_provider_config_name(self, identity_provider_config_name):
        """Sets the identity_provider_config_name of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.

        The name of the OIDC provider configuration.   IdentityProviderConfigName is a required field  # noqa: E501

        :param identity_provider_config_name: The identity_provider_config_name of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501
        :type: str
        """

        self._identity_provider_config_name = identity_provider_config_name

    @property
    def issuer_url(self):
        """Gets the issuer_url of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501

        The URL of the OpenID identity provider that allows the API server to discover public signing keys for verifying tokens. The URL must begin with https:// and should correspond to the iss claim in the provider's OIDC ID tokens. Per the OIDC standard, path components are allowed but query parameters are not. Typically the URL consists of only a hostname, like https://server.example.org or https://example.com. This URL should point to the level below .well-known/openid-configuration and must be publicly accessible over the internet.  # noqa: E501

        :return: The issuer_url of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501
        :rtype: str
        """
        return self._issuer_url

    @issuer_url.setter
    def issuer_url(self, issuer_url):
        """Sets the issuer_url of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.

        The URL of the OpenID identity provider that allows the API server to discover public signing keys for verifying tokens. The URL must begin with https:// and should correspond to the iss claim in the provider's OIDC ID tokens. Per the OIDC standard, path components are allowed but query parameters are not. Typically the URL consists of only a hostname, like https://server.example.org or https://example.com. This URL should point to the level below .well-known/openid-configuration and must be publicly accessible over the internet.  # noqa: E501

        :param issuer_url: The issuer_url of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501
        :type: str
        """

        self._issuer_url = issuer_url

    @property
    def required_claims(self):
        """Gets the required_claims of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501

        The key value pairs that describe required claims in the identity token. If set, each claim is verified to be present in the token with a matching value. For the maximum number of claims that you can require, see Amazon EKS service quotas (https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html) in the Amazon EKS User Guide.  # noqa: E501

        :return: The required_claims of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._required_claims

    @required_claims.setter
    def required_claims(self, required_claims):
        """Sets the required_claims of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.

        The key value pairs that describe required claims in the identity token. If set, each claim is verified to be present in the token with a matching value. For the maximum number of claims that you can require, see Amazon EKS service quotas (https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html) in the Amazon EKS User Guide.  # noqa: E501

        :param required_claims: The required_claims of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501
        :type: dict(str, str)
        """

        self._required_claims = required_claims

    @property
    def tags(self):
        """Gets the tags of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501

        tags to apply to oidc identity provider association  # noqa: E501

        :return: The tags of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.

        tags to apply to oidc identity provider association  # noqa: E501

        :param tags: The tags of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501
        :type: dict(str, str)
        """

        self._tags = tags

    @property
    def username_claim(self):
        """Gets the username_claim of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501

        The JSON Web Token (JWT) claim to use as the username. The default is sub, which is expected to be a unique identifier of the end user. You can choose other claims, such as email or name, depending on the OpenID identity provider. Claims other than email are prefixed with the issuer URL to prevent naming clashes with other plug-ins.  # noqa: E501

        :return: The username_claim of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501
        :rtype: str
        """
        return self._username_claim

    @username_claim.setter
    def username_claim(self, username_claim):
        """Sets the username_claim of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.

        The JSON Web Token (JWT) claim to use as the username. The default is sub, which is expected to be a unique identifier of the end user. You can choose other claims, such as email or name, depending on the OpenID identity provider. Claims other than email are prefixed with the issuer URL to prevent naming clashes with other plug-ins.  # noqa: E501

        :param username_claim: The username_claim of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501
        :type: str
        """

        self._username_claim = username_claim

    @property
    def username_prefix(self):
        """Gets the username_prefix of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501

        The prefix that is prepended to username claims to prevent clashes with existing names. If you do not provide this field, and username is a value other than email, the prefix defaults to issuerurl#. You can use the value - to disable all prefixing.  # noqa: E501

        :return: The username_prefix of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501
        :rtype: str
        """
        return self._username_prefix

    @username_prefix.setter
    def username_prefix(self, username_prefix):
        """Sets the username_prefix of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.

        The prefix that is prepended to username claims to prevent clashes with existing names. If you do not provide this field, and username is a value other than email, the prefix defaults to issuerurl#. You can use the value - to disable all prefixing.  # noqa: E501

        :param username_prefix: The username_prefix of this IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig.  # noqa: E501
        :type: str
        """

        self._username_prefix = username_prefix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterControlplaneV1alpha4AWSManagedControlPlaneSpecOidcIdentityProviderConfig):
            return True

        return self.to_dict() != other.to_dict()
