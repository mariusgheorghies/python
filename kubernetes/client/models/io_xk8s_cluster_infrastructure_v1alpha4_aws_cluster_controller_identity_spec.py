# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterInfrastructureV1alpha4AWSClusterControllerIdentitySpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allowed_namespaces': 'object'
    }

    attribute_map = {
        'allowed_namespaces': 'allowedNamespaces'
    }

    def __init__(self, allowed_namespaces=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterInfrastructureV1alpha4AWSClusterControllerIdentitySpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._allowed_namespaces = None
        self.discriminator = None

        if allowed_namespaces is not None:
            self.allowed_namespaces = allowed_namespaces

    @property
    def allowed_namespaces(self):
        """Gets the allowed_namespaces of this IoXK8sClusterInfrastructureV1alpha4AWSClusterControllerIdentitySpec.  # noqa: E501

        AllowedNamespaces is used to identify which namespaces are allowed to use the identity from. Namespaces can be selected either using an array of namespaces or with label selector. An empty allowedNamespaces object indicates that AWSClusters can use this identity from any namespace. If this object is nil, no namespaces will be allowed (default behaviour, if this field is not provided) A namespace should be either in the NamespaceList or match with Selector to use the identity.  # noqa: E501

        :return: The allowed_namespaces of this IoXK8sClusterInfrastructureV1alpha4AWSClusterControllerIdentitySpec.  # noqa: E501
        :rtype: object
        """
        return self._allowed_namespaces

    @allowed_namespaces.setter
    def allowed_namespaces(self, allowed_namespaces):
        """Sets the allowed_namespaces of this IoXK8sClusterInfrastructureV1alpha4AWSClusterControllerIdentitySpec.

        AllowedNamespaces is used to identify which namespaces are allowed to use the identity from. Namespaces can be selected either using an array of namespaces or with label selector. An empty allowedNamespaces object indicates that AWSClusters can use this identity from any namespace. If this object is nil, no namespaces will be allowed (default behaviour, if this field is not provided) A namespace should be either in the NamespaceList or match with Selector to use the identity.  # noqa: E501

        :param allowed_namespaces: The allowed_namespaces of this IoXK8sClusterInfrastructureV1alpha4AWSClusterControllerIdentitySpec.  # noqa: E501
        :type: object
        """

        self._allowed_namespaces = allowed_namespaces

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1alpha4AWSClusterControllerIdentitySpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1alpha4AWSClusterControllerIdentitySpec):
            return True

        return self.to_dict() != other.to_dict()
