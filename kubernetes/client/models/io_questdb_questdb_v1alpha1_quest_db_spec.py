# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoQuestdbQuestdbV1alpha1QuestDBSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aws': 'IoQuestdbQuestdbV1alpha1QuestDBSpecAws',
        'cluster_name': 'str',
        'config': 'IoQuestdbQuestdbV1alpha1QuestDBSpecConfig',
        'container': 'IoQuestdbQuestdbV1alpha1QuestDBSpecContainer',
        'db_name': 'str',
        'instance_type': 'str',
        'instance_uuid': 'str',
        'monitoring_enabled': 'bool',
        'org_id': 'str',
        'single_tenant': 'bool',
        'subdomain': 'str',
        'tenant_app': 'bool',
        'volume': 'IoQuestdbQuestdbV1alpha1QuestDBSpecVolume',
        'volume_uuid': 'str'
    }

    attribute_map = {
        'aws': 'aws',
        'cluster_name': 'clusterName',
        'config': 'config',
        'container': 'container',
        'db_name': 'dbName',
        'instance_type': 'instanceType',
        'instance_uuid': 'instanceUUID',
        'monitoring_enabled': 'monitoringEnabled',
        'org_id': 'orgId',
        'single_tenant': 'singleTenant',
        'subdomain': 'subdomain',
        'tenant_app': 'tenantApp',
        'volume': 'volume',
        'volume_uuid': 'volumeUUID'
    }

    def __init__(self, aws=None, cluster_name=None, config=None, container=None, db_name=None, instance_type=None, instance_uuid=None, monitoring_enabled=None, org_id=None, single_tenant=None, subdomain=None, tenant_app=None, volume=None, volume_uuid=None, local_vars_configuration=None):  # noqa: E501
        """IoQuestdbQuestdbV1alpha1QuestDBSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._aws = None
        self._cluster_name = None
        self._config = None
        self._container = None
        self._db_name = None
        self._instance_type = None
        self._instance_uuid = None
        self._monitoring_enabled = None
        self._org_id = None
        self._single_tenant = None
        self._subdomain = None
        self._tenant_app = None
        self._volume = None
        self._volume_uuid = None
        self.discriminator = None

        if aws is not None:
            self.aws = aws
        if cluster_name is not None:
            self.cluster_name = cluster_name
        if config is not None:
            self.config = config
        if container is not None:
            self.container = container
        self.db_name = db_name
        if instance_type is not None:
            self.instance_type = instance_type
        self.instance_uuid = instance_uuid
        if monitoring_enabled is not None:
            self.monitoring_enabled = monitoring_enabled
        self.org_id = org_id
        if single_tenant is not None:
            self.single_tenant = single_tenant
        if subdomain is not None:
            self.subdomain = subdomain
        if tenant_app is not None:
            self.tenant_app = tenant_app
        if volume is not None:
            self.volume = volume
        self.volume_uuid = volume_uuid

    @property
    def aws(self):
        """Gets the aws of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501


        :return: The aws of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :rtype: IoQuestdbQuestdbV1alpha1QuestDBSpecAws
        """
        return self._aws

    @aws.setter
    def aws(self, aws):
        """Sets the aws of this IoQuestdbQuestdbV1alpha1QuestDBSpec.


        :param aws: The aws of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :type: IoQuestdbQuestdbV1alpha1QuestDBSpecAws
        """

        self._aws = aws

    @property
    def cluster_name(self):
        """Gets the cluster_name of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501


        :return: The cluster_name of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this IoQuestdbQuestdbV1alpha1QuestDBSpec.


        :param cluster_name: The cluster_name of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def config(self):
        """Gets the config of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501


        :return: The config of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :rtype: IoQuestdbQuestdbV1alpha1QuestDBSpecConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this IoQuestdbQuestdbV1alpha1QuestDBSpec.


        :param config: The config of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :type: IoQuestdbQuestdbV1alpha1QuestDBSpecConfig
        """

        self._config = config

    @property
    def container(self):
        """Gets the container of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501


        :return: The container of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :rtype: IoQuestdbQuestdbV1alpha1QuestDBSpecContainer
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this IoQuestdbQuestdbV1alpha1QuestDBSpec.


        :param container: The container of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :type: IoQuestdbQuestdbV1alpha1QuestDBSpecContainer
        """

        self._container = container

    @property
    def db_name(self):
        """Gets the db_name of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501


        :return: The db_name of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :rtype: str
        """
        return self._db_name

    @db_name.setter
    def db_name(self, db_name):
        """Sets the db_name of this IoQuestdbQuestdbV1alpha1QuestDBSpec.


        :param db_name: The db_name of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and db_name is None:  # noqa: E501
            raise ValueError("Invalid value for `db_name`, must not be `None`")  # noqa: E501

        self._db_name = db_name

    @property
    def instance_type(self):
        """Gets the instance_type of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501


        :return: The instance_type of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this IoQuestdbQuestdbV1alpha1QuestDBSpec.


        :param instance_type: The instance_type of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :type: str
        """

        self._instance_type = instance_type

    @property
    def instance_uuid(self):
        """Gets the instance_uuid of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501


        :return: The instance_uuid of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :rtype: str
        """
        return self._instance_uuid

    @instance_uuid.setter
    def instance_uuid(self, instance_uuid):
        """Sets the instance_uuid of this IoQuestdbQuestdbV1alpha1QuestDBSpec.


        :param instance_uuid: The instance_uuid of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and instance_uuid is None:  # noqa: E501
            raise ValueError("Invalid value for `instance_uuid`, must not be `None`")  # noqa: E501

        self._instance_uuid = instance_uuid

    @property
    def monitoring_enabled(self):
        """Gets the monitoring_enabled of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501


        :return: The monitoring_enabled of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :rtype: bool
        """
        return self._monitoring_enabled

    @monitoring_enabled.setter
    def monitoring_enabled(self, monitoring_enabled):
        """Sets the monitoring_enabled of this IoQuestdbQuestdbV1alpha1QuestDBSpec.


        :param monitoring_enabled: The monitoring_enabled of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :type: bool
        """

        self._monitoring_enabled = monitoring_enabled

    @property
    def org_id(self):
        """Gets the org_id of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501

        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run \"make\" to regenerate code after modifying this file  # noqa: E501

        :return: The org_id of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this IoQuestdbQuestdbV1alpha1QuestDBSpec.

        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run \"make\" to regenerate code after modifying this file  # noqa: E501

        :param org_id: The org_id of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def single_tenant(self):
        """Gets the single_tenant of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501


        :return: The single_tenant of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :rtype: bool
        """
        return self._single_tenant

    @single_tenant.setter
    def single_tenant(self, single_tenant):
        """Sets the single_tenant of this IoQuestdbQuestdbV1alpha1QuestDBSpec.


        :param single_tenant: The single_tenant of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :type: bool
        """

        self._single_tenant = single_tenant

    @property
    def subdomain(self):
        """Gets the subdomain of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501


        :return: The subdomain of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this IoQuestdbQuestdbV1alpha1QuestDBSpec.


        :param subdomain: The subdomain of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :type: str
        """

        self._subdomain = subdomain

    @property
    def tenant_app(self):
        """Gets the tenant_app of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501


        :return: The tenant_app of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :rtype: bool
        """
        return self._tenant_app

    @tenant_app.setter
    def tenant_app(self, tenant_app):
        """Sets the tenant_app of this IoQuestdbQuestdbV1alpha1QuestDBSpec.


        :param tenant_app: The tenant_app of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :type: bool
        """

        self._tenant_app = tenant_app

    @property
    def volume(self):
        """Gets the volume of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501


        :return: The volume of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :rtype: IoQuestdbQuestdbV1alpha1QuestDBSpecVolume
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this IoQuestdbQuestdbV1alpha1QuestDBSpec.


        :param volume: The volume of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :type: IoQuestdbQuestdbV1alpha1QuestDBSpecVolume
        """

        self._volume = volume

    @property
    def volume_uuid(self):
        """Gets the volume_uuid of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501


        :return: The volume_uuid of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :rtype: str
        """
        return self._volume_uuid

    @volume_uuid.setter
    def volume_uuid(self, volume_uuid):
        """Sets the volume_uuid of this IoQuestdbQuestdbV1alpha1QuestDBSpec.


        :param volume_uuid: The volume_uuid of this IoQuestdbQuestdbV1alpha1QuestDBSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and volume_uuid is None:  # noqa: E501
            raise ValueError("Invalid value for `volume_uuid`, must not be `None`")  # noqa: E501

        self._volume_uuid = volume_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoQuestdbQuestdbV1alpha1QuestDBSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoQuestdbQuestdbV1alpha1QuestDBSpec):
            return True

        return self.to_dict() != other.to_dict()
