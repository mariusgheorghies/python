# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoCertManagerAcmeV1OrderStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'authorizations': 'list[IoCertManagerAcmeV1OrderStatusAuthorizations]',
        'certificate': 'str',
        'failure_time': 'datetime',
        'finalize_url': 'str',
        'reason': 'str',
        'state': 'str',
        'url': 'str'
    }

    attribute_map = {
        'authorizations': 'authorizations',
        'certificate': 'certificate',
        'failure_time': 'failureTime',
        'finalize_url': 'finalizeURL',
        'reason': 'reason',
        'state': 'state',
        'url': 'url'
    }

    def __init__(self, authorizations=None, certificate=None, failure_time=None, finalize_url=None, reason=None, state=None, url=None, local_vars_configuration=None):  # noqa: E501
        """IoCertManagerAcmeV1OrderStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._authorizations = None
        self._certificate = None
        self._failure_time = None
        self._finalize_url = None
        self._reason = None
        self._state = None
        self._url = None
        self.discriminator = None

        if authorizations is not None:
            self.authorizations = authorizations
        if certificate is not None:
            self.certificate = certificate
        if failure_time is not None:
            self.failure_time = failure_time
        if finalize_url is not None:
            self.finalize_url = finalize_url
        if reason is not None:
            self.reason = reason
        if state is not None:
            self.state = state
        if url is not None:
            self.url = url

    @property
    def authorizations(self):
        """Gets the authorizations of this IoCertManagerAcmeV1OrderStatus.  # noqa: E501

        Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.  # noqa: E501

        :return: The authorizations of this IoCertManagerAcmeV1OrderStatus.  # noqa: E501
        :rtype: list[IoCertManagerAcmeV1OrderStatusAuthorizations]
        """
        return self._authorizations

    @authorizations.setter
    def authorizations(self, authorizations):
        """Sets the authorizations of this IoCertManagerAcmeV1OrderStatus.

        Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.  # noqa: E501

        :param authorizations: The authorizations of this IoCertManagerAcmeV1OrderStatus.  # noqa: E501
        :type: list[IoCertManagerAcmeV1OrderStatusAuthorizations]
        """

        self._authorizations = authorizations

    @property
    def certificate(self):
        """Gets the certificate of this IoCertManagerAcmeV1OrderStatus.  # noqa: E501

        Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.  # noqa: E501

        :return: The certificate of this IoCertManagerAcmeV1OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this IoCertManagerAcmeV1OrderStatus.

        Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.  # noqa: E501

        :param certificate: The certificate of this IoCertManagerAcmeV1OrderStatus.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                certificate is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', certificate)):  # noqa: E501
            raise ValueError(r"Invalid value for `certificate`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._certificate = certificate

    @property
    def failure_time(self):
        """Gets the failure_time of this IoCertManagerAcmeV1OrderStatus.  # noqa: E501

        FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.  # noqa: E501

        :return: The failure_time of this IoCertManagerAcmeV1OrderStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._failure_time

    @failure_time.setter
    def failure_time(self, failure_time):
        """Sets the failure_time of this IoCertManagerAcmeV1OrderStatus.

        FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.  # noqa: E501

        :param failure_time: The failure_time of this IoCertManagerAcmeV1OrderStatus.  # noqa: E501
        :type: datetime
        """

        self._failure_time = failure_time

    @property
    def finalize_url(self):
        """Gets the finalize_url of this IoCertManagerAcmeV1OrderStatus.  # noqa: E501

        FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.  # noqa: E501

        :return: The finalize_url of this IoCertManagerAcmeV1OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._finalize_url

    @finalize_url.setter
    def finalize_url(self, finalize_url):
        """Sets the finalize_url of this IoCertManagerAcmeV1OrderStatus.

        FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.  # noqa: E501

        :param finalize_url: The finalize_url of this IoCertManagerAcmeV1OrderStatus.  # noqa: E501
        :type: str
        """

        self._finalize_url = finalize_url

    @property
    def reason(self):
        """Gets the reason of this IoCertManagerAcmeV1OrderStatus.  # noqa: E501

        Reason optionally provides more information about a why the order is in the current state.  # noqa: E501

        :return: The reason of this IoCertManagerAcmeV1OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this IoCertManagerAcmeV1OrderStatus.

        Reason optionally provides more information about a why the order is in the current state.  # noqa: E501

        :param reason: The reason of this IoCertManagerAcmeV1OrderStatus.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def state(self):
        """Gets the state of this IoCertManagerAcmeV1OrderStatus.  # noqa: E501

        State contains the current state of this Order resource. States 'success' and 'expired' are 'final'  # noqa: E501

        :return: The state of this IoCertManagerAcmeV1OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this IoCertManagerAcmeV1OrderStatus.

        State contains the current state of this Order resource. States 'success' and 'expired' are 'final'  # noqa: E501

        :param state: The state of this IoCertManagerAcmeV1OrderStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["valid", "ready", "pending", "processing", "invalid", "expired", "errored"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def url(self):
        """Gets the url of this IoCertManagerAcmeV1OrderStatus.  # noqa: E501

        URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.  # noqa: E501

        :return: The url of this IoCertManagerAcmeV1OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IoCertManagerAcmeV1OrderStatus.

        URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.  # noqa: E501

        :param url: The url of this IoCertManagerAcmeV1OrderStatus.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoCertManagerAcmeV1OrderStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoCertManagerAcmeV1OrderStatus):
            return True

        return self.to_dict() != other.to_dict()
