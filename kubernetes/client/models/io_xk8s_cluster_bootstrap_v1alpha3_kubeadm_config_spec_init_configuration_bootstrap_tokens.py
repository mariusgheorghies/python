# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'expires': 'datetime',
        'groups': 'list[str]',
        'token': 'str',
        'ttl': 'str',
        'usages': 'list[str]'
    }

    attribute_map = {
        'description': 'description',
        'expires': 'expires',
        'groups': 'groups',
        'token': 'token',
        'ttl': 'ttl',
        'usages': 'usages'
    }

    def __init__(self, description=None, expires=None, groups=None, token=None, ttl=None, usages=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._expires = None
        self._groups = None
        self._token = None
        self._ttl = None
        self._usages = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if expires is not None:
            self.expires = expires
        if groups is not None:
            self.groups = groups
        self.token = token
        if ttl is not None:
            self.ttl = ttl
        if usages is not None:
            self.usages = usages

    @property
    def description(self):
        """Gets the description of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens.  # noqa: E501

        Description sets a human-friendly message why this token exists and what it's used for, so other administrators can know its purpose.  # noqa: E501

        :return: The description of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens.

        Description sets a human-friendly message why this token exists and what it's used for, so other administrators can know its purpose.  # noqa: E501

        :param description: The description of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def expires(self):
        """Gets the expires of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens.  # noqa: E501

        Expires specifies the timestamp when this token expires. Defaults to being set dynamically at runtime based on the TTL. Expires and TTL are mutually exclusive.  # noqa: E501

        :return: The expires of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens.  # noqa: E501
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens.

        Expires specifies the timestamp when this token expires. Defaults to being set dynamically at runtime based on the TTL. Expires and TTL are mutually exclusive.  # noqa: E501

        :param expires: The expires of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens.  # noqa: E501
        :type: datetime
        """

        self._expires = expires

    @property
    def groups(self):
        """Gets the groups of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens.  # noqa: E501

        Groups specifies the extra groups that this token will authenticate as when/if used for authentication  # noqa: E501

        :return: The groups of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens.

        Groups specifies the extra groups that this token will authenticate as when/if used for authentication  # noqa: E501

        :param groups: The groups of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens.  # noqa: E501
        :type: list[str]
        """

        self._groups = groups

    @property
    def token(self):
        """Gets the token of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens.  # noqa: E501

        Token is used for establishing bidirectional trust between nodes and control-planes. Used for joining nodes in the cluster.  # noqa: E501

        :return: The token of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens.

        Token is used for establishing bidirectional trust between nodes and control-planes. Used for joining nodes in the cluster.  # noqa: E501

        :param token: The token of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and token is None:  # noqa: E501
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def ttl(self):
        """Gets the ttl of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens.  # noqa: E501

        TTL defines the time to live for this token. Defaults to 24h. Expires and TTL are mutually exclusive.  # noqa: E501

        :return: The ttl of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens.  # noqa: E501
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens.

        TTL defines the time to live for this token. Defaults to 24h. Expires and TTL are mutually exclusive.  # noqa: E501

        :param ttl: The ttl of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens.  # noqa: E501
        :type: str
        """

        self._ttl = ttl

    @property
    def usages(self):
        """Gets the usages of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens.  # noqa: E501

        Usages describes the ways in which this token can be used. Can by default be used for establishing bidirectional trust, but that can be changed here.  # noqa: E501

        :return: The usages of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens.  # noqa: E501
        :rtype: list[str]
        """
        return self._usages

    @usages.setter
    def usages(self, usages):
        """Sets the usages of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens.

        Usages describes the ways in which this token can be used. Can by default be used for establishing bidirectional trust, but that can be changed here.  # noqa: E501

        :param usages: The usages of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens.  # noqa: E501
        :type: list[str]
        """

        self._usages = usages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationBootstrapTokens):
            return True

        return self.to_dict() != other.to_dict()
