# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'block_size': 'int',
        'cidr': 'str',
        'encapsulation': 'str',
        'nat_outgoing': 'str',
        'node_selector': 'str'
    }

    attribute_map = {
        'block_size': 'blockSize',
        'cidr': 'cidr',
        'encapsulation': 'encapsulation',
        'nat_outgoing': 'natOutgoing',
        'node_selector': 'nodeSelector'
    }

    def __init__(self, block_size=None, cidr=None, encapsulation=None, nat_outgoing=None, node_selector=None, local_vars_configuration=None):  # noqa: E501
        """IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._block_size = None
        self._cidr = None
        self._encapsulation = None
        self._nat_outgoing = None
        self._node_selector = None
        self.discriminator = None

        if block_size is not None:
            self.block_size = block_size
        self.cidr = cidr
        if encapsulation is not None:
            self.encapsulation = encapsulation
        if nat_outgoing is not None:
            self.nat_outgoing = nat_outgoing
        if node_selector is not None:
            self.node_selector = node_selector

    @property
    def block_size(self):
        """Gets the block_size of this IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools.  # noqa: E501

        BlockSize specifies the CIDR prefex length to use when allocating per-node IP blocks from the main IP pool CIDR. Default: 26 (IPv4), 122 (IPv6)  # noqa: E501

        :return: The block_size of this IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools.  # noqa: E501
        :rtype: int
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """Sets the block_size of this IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools.

        BlockSize specifies the CIDR prefex length to use when allocating per-node IP blocks from the main IP pool CIDR. Default: 26 (IPv4), 122 (IPv6)  # noqa: E501

        :param block_size: The block_size of this IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools.  # noqa: E501
        :type: int
        """

        self._block_size = block_size

    @property
    def cidr(self):
        """Gets the cidr of this IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools.  # noqa: E501

        CIDR contains the address range for the IP Pool in classless inter-domain routing format.  # noqa: E501

        :return: The cidr of this IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools.  # noqa: E501
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools.

        CIDR contains the address range for the IP Pool in classless inter-domain routing format.  # noqa: E501

        :param cidr: The cidr of this IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cidr is None:  # noqa: E501
            raise ValueError("Invalid value for `cidr`, must not be `None`")  # noqa: E501

        self._cidr = cidr

    @property
    def encapsulation(self):
        """Gets the encapsulation of this IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools.  # noqa: E501

        Encapsulation specifies the encapsulation type that will be used with the IP Pool. Default: IPIP  # noqa: E501

        :return: The encapsulation of this IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools.  # noqa: E501
        :rtype: str
        """
        return self._encapsulation

    @encapsulation.setter
    def encapsulation(self, encapsulation):
        """Sets the encapsulation of this IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools.

        Encapsulation specifies the encapsulation type that will be used with the IP Pool. Default: IPIP  # noqa: E501

        :param encapsulation: The encapsulation of this IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools.  # noqa: E501
        :type: str
        """
        allowed_values = ["IPIPCrossSubnet", "IPIP", "VXLAN", "VXLANCrossSubnet", "None"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and encapsulation not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `encapsulation` ({0}), must be one of {1}"  # noqa: E501
                .format(encapsulation, allowed_values)
            )

        self._encapsulation = encapsulation

    @property
    def nat_outgoing(self):
        """Gets the nat_outgoing of this IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools.  # noqa: E501

        NATOutgoing specifies if NAT will be enabled or disabled for outgoing traffic. Default: Enabled  # noqa: E501

        :return: The nat_outgoing of this IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools.  # noqa: E501
        :rtype: str
        """
        return self._nat_outgoing

    @nat_outgoing.setter
    def nat_outgoing(self, nat_outgoing):
        """Sets the nat_outgoing of this IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools.

        NATOutgoing specifies if NAT will be enabled or disabled for outgoing traffic. Default: Enabled  # noqa: E501

        :param nat_outgoing: The nat_outgoing of this IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools.  # noqa: E501
        :type: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and nat_outgoing not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `nat_outgoing` ({0}), must be one of {1}"  # noqa: E501
                .format(nat_outgoing, allowed_values)
            )

        self._nat_outgoing = nat_outgoing

    @property
    def node_selector(self):
        """Gets the node_selector of this IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools.  # noqa: E501

        NodeSelector specifies the node selector that will be set for the IP Pool. Default: 'all()'  # noqa: E501

        :return: The node_selector of this IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools.  # noqa: E501
        :rtype: str
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools.

        NodeSelector specifies the node selector that will be set for the IP Pool. Default: 'all()'  # noqa: E501

        :param node_selector: The node_selector of this IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools.  # noqa: E501
        :type: str
        """

        self._node_selector = node_selector

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoTigeraOperatorV1InstallationSpecCalicoNetworkIpPools):
            return True

        return self.to_dict() != other.to_dict()
