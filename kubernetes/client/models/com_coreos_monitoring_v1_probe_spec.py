# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComCoreosMonitoringV1ProbeSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'authorization': 'ComCoreosMonitoringV1PodMonitorSpecAuthorization',
        'basic_auth': 'ComCoreosMonitoringV1PodMonitorSpecBasicAuth',
        'bearer_token_secret': 'ComCoreosMonitoringV1ProbeSpecBearerTokenSecret',
        'interval': 'str',
        'job_name': 'str',
        'label_limit': 'int',
        'label_name_length_limit': 'int',
        'label_value_length_limit': 'int',
        'metric_relabelings': 'list[ComCoreosMonitoringV1PodMonitorSpecMetricRelabelings]',
        'module': 'str',
        'oauth2': 'ComCoreosMonitoringV1PodMonitorSpecOauth2',
        'prober': 'ComCoreosMonitoringV1ProbeSpecProber',
        'sample_limit': 'int',
        'scrape_timeout': 'str',
        'target_limit': 'int',
        'targets': 'ComCoreosMonitoringV1ProbeSpecTargets',
        'tls_config': 'ComCoreosMonitoringV1PodMonitorSpecTlsConfig'
    }

    attribute_map = {
        'authorization': 'authorization',
        'basic_auth': 'basicAuth',
        'bearer_token_secret': 'bearerTokenSecret',
        'interval': 'interval',
        'job_name': 'jobName',
        'label_limit': 'labelLimit',
        'label_name_length_limit': 'labelNameLengthLimit',
        'label_value_length_limit': 'labelValueLengthLimit',
        'metric_relabelings': 'metricRelabelings',
        'module': 'module',
        'oauth2': 'oauth2',
        'prober': 'prober',
        'sample_limit': 'sampleLimit',
        'scrape_timeout': 'scrapeTimeout',
        'target_limit': 'targetLimit',
        'targets': 'targets',
        'tls_config': 'tlsConfig'
    }

    def __init__(self, authorization=None, basic_auth=None, bearer_token_secret=None, interval=None, job_name=None, label_limit=None, label_name_length_limit=None, label_value_length_limit=None, metric_relabelings=None, module=None, oauth2=None, prober=None, sample_limit=None, scrape_timeout=None, target_limit=None, targets=None, tls_config=None, local_vars_configuration=None):  # noqa: E501
        """ComCoreosMonitoringV1ProbeSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._authorization = None
        self._basic_auth = None
        self._bearer_token_secret = None
        self._interval = None
        self._job_name = None
        self._label_limit = None
        self._label_name_length_limit = None
        self._label_value_length_limit = None
        self._metric_relabelings = None
        self._module = None
        self._oauth2 = None
        self._prober = None
        self._sample_limit = None
        self._scrape_timeout = None
        self._target_limit = None
        self._targets = None
        self._tls_config = None
        self.discriminator = None

        if authorization is not None:
            self.authorization = authorization
        if basic_auth is not None:
            self.basic_auth = basic_auth
        if bearer_token_secret is not None:
            self.bearer_token_secret = bearer_token_secret
        if interval is not None:
            self.interval = interval
        if job_name is not None:
            self.job_name = job_name
        if label_limit is not None:
            self.label_limit = label_limit
        if label_name_length_limit is not None:
            self.label_name_length_limit = label_name_length_limit
        if label_value_length_limit is not None:
            self.label_value_length_limit = label_value_length_limit
        if metric_relabelings is not None:
            self.metric_relabelings = metric_relabelings
        if module is not None:
            self.module = module
        if oauth2 is not None:
            self.oauth2 = oauth2
        if prober is not None:
            self.prober = prober
        if sample_limit is not None:
            self.sample_limit = sample_limit
        if scrape_timeout is not None:
            self.scrape_timeout = scrape_timeout
        if target_limit is not None:
            self.target_limit = target_limit
        if targets is not None:
            self.targets = targets
        if tls_config is not None:
            self.tls_config = tls_config

    @property
    def authorization(self):
        """Gets the authorization of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501


        :return: The authorization of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PodMonitorSpecAuthorization
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """Sets the authorization of this ComCoreosMonitoringV1ProbeSpec.


        :param authorization: The authorization of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PodMonitorSpecAuthorization
        """

        self._authorization = authorization

    @property
    def basic_auth(self):
        """Gets the basic_auth of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501


        :return: The basic_auth of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PodMonitorSpecBasicAuth
        """
        return self._basic_auth

    @basic_auth.setter
    def basic_auth(self, basic_auth):
        """Sets the basic_auth of this ComCoreosMonitoringV1ProbeSpec.


        :param basic_auth: The basic_auth of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PodMonitorSpecBasicAuth
        """

        self._basic_auth = basic_auth

    @property
    def bearer_token_secret(self):
        """Gets the bearer_token_secret of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501


        :return: The bearer_token_secret of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1ProbeSpecBearerTokenSecret
        """
        return self._bearer_token_secret

    @bearer_token_secret.setter
    def bearer_token_secret(self, bearer_token_secret):
        """Sets the bearer_token_secret of this ComCoreosMonitoringV1ProbeSpec.


        :param bearer_token_secret: The bearer_token_secret of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1ProbeSpecBearerTokenSecret
        """

        self._bearer_token_secret = bearer_token_secret

    @property
    def interval(self):
        """Gets the interval of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501

        Interval at which targets are probed using the configured prober. If not specified Prometheus' global scrape interval is used.  # noqa: E501

        :return: The interval of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ComCoreosMonitoringV1ProbeSpec.

        Interval at which targets are probed using the configured prober. If not specified Prometheus' global scrape interval is used.  # noqa: E501

        :param interval: The interval of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                interval is not None and not re.search(r'^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$', interval)):  # noqa: E501
            raise ValueError(r"Invalid value for `interval`, must be a follow pattern or equal to `/^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$/`")  # noqa: E501

        self._interval = interval

    @property
    def job_name(self):
        """Gets the job_name of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501

        The job name assigned to scraped metrics by default.  # noqa: E501

        :return: The job_name of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this ComCoreosMonitoringV1ProbeSpec.

        The job name assigned to scraped metrics by default.  # noqa: E501

        :param job_name: The job_name of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :type: str
        """

        self._job_name = job_name

    @property
    def label_limit(self):
        """Gets the label_limit of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501

        Per-scrape limit on number of labels that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.  # noqa: E501

        :return: The label_limit of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :rtype: int
        """
        return self._label_limit

    @label_limit.setter
    def label_limit(self, label_limit):
        """Sets the label_limit of this ComCoreosMonitoringV1ProbeSpec.

        Per-scrape limit on number of labels that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.  # noqa: E501

        :param label_limit: The label_limit of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :type: int
        """

        self._label_limit = label_limit

    @property
    def label_name_length_limit(self):
        """Gets the label_name_length_limit of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501

        Per-scrape limit on length of labels name that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.  # noqa: E501

        :return: The label_name_length_limit of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :rtype: int
        """
        return self._label_name_length_limit

    @label_name_length_limit.setter
    def label_name_length_limit(self, label_name_length_limit):
        """Sets the label_name_length_limit of this ComCoreosMonitoringV1ProbeSpec.

        Per-scrape limit on length of labels name that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.  # noqa: E501

        :param label_name_length_limit: The label_name_length_limit of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :type: int
        """

        self._label_name_length_limit = label_name_length_limit

    @property
    def label_value_length_limit(self):
        """Gets the label_value_length_limit of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501

        Per-scrape limit on length of labels value that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.  # noqa: E501

        :return: The label_value_length_limit of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :rtype: int
        """
        return self._label_value_length_limit

    @label_value_length_limit.setter
    def label_value_length_limit(self, label_value_length_limit):
        """Sets the label_value_length_limit of this ComCoreosMonitoringV1ProbeSpec.

        Per-scrape limit on length of labels value that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.  # noqa: E501

        :param label_value_length_limit: The label_value_length_limit of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :type: int
        """

        self._label_value_length_limit = label_value_length_limit

    @property
    def metric_relabelings(self):
        """Gets the metric_relabelings of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501

        MetricRelabelConfigs to apply to samples before ingestion.  # noqa: E501

        :return: The metric_relabelings of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1PodMonitorSpecMetricRelabelings]
        """
        return self._metric_relabelings

    @metric_relabelings.setter
    def metric_relabelings(self, metric_relabelings):
        """Sets the metric_relabelings of this ComCoreosMonitoringV1ProbeSpec.

        MetricRelabelConfigs to apply to samples before ingestion.  # noqa: E501

        :param metric_relabelings: The metric_relabelings of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1PodMonitorSpecMetricRelabelings]
        """

        self._metric_relabelings = metric_relabelings

    @property
    def module(self):
        """Gets the module of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501

        The module to use for probing specifying how to probe the target. Example module configuring in the blackbox exporter: https://github.com/prometheus/blackbox_exporter/blob/master/example.yml  # noqa: E501

        :return: The module of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :rtype: str
        """
        return self._module

    @module.setter
    def module(self, module):
        """Sets the module of this ComCoreosMonitoringV1ProbeSpec.

        The module to use for probing specifying how to probe the target. Example module configuring in the blackbox exporter: https://github.com/prometheus/blackbox_exporter/blob/master/example.yml  # noqa: E501

        :param module: The module of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :type: str
        """

        self._module = module

    @property
    def oauth2(self):
        """Gets the oauth2 of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501


        :return: The oauth2 of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PodMonitorSpecOauth2
        """
        return self._oauth2

    @oauth2.setter
    def oauth2(self, oauth2):
        """Sets the oauth2 of this ComCoreosMonitoringV1ProbeSpec.


        :param oauth2: The oauth2 of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PodMonitorSpecOauth2
        """

        self._oauth2 = oauth2

    @property
    def prober(self):
        """Gets the prober of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501


        :return: The prober of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1ProbeSpecProber
        """
        return self._prober

    @prober.setter
    def prober(self, prober):
        """Sets the prober of this ComCoreosMonitoringV1ProbeSpec.


        :param prober: The prober of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1ProbeSpecProber
        """

        self._prober = prober

    @property
    def sample_limit(self):
        """Gets the sample_limit of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501

        SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.  # noqa: E501

        :return: The sample_limit of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :rtype: int
        """
        return self._sample_limit

    @sample_limit.setter
    def sample_limit(self, sample_limit):
        """Sets the sample_limit of this ComCoreosMonitoringV1ProbeSpec.

        SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.  # noqa: E501

        :param sample_limit: The sample_limit of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :type: int
        """

        self._sample_limit = sample_limit

    @property
    def scrape_timeout(self):
        """Gets the scrape_timeout of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501

        Timeout for scraping metrics from the Prometheus exporter. If not specified, the Prometheus global scrape interval is used.  # noqa: E501

        :return: The scrape_timeout of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :rtype: str
        """
        return self._scrape_timeout

    @scrape_timeout.setter
    def scrape_timeout(self, scrape_timeout):
        """Sets the scrape_timeout of this ComCoreosMonitoringV1ProbeSpec.

        Timeout for scraping metrics from the Prometheus exporter. If not specified, the Prometheus global scrape interval is used.  # noqa: E501

        :param scrape_timeout: The scrape_timeout of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                scrape_timeout is not None and not re.search(r'^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$', scrape_timeout)):  # noqa: E501
            raise ValueError(r"Invalid value for `scrape_timeout`, must be a follow pattern or equal to `/^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$/`")  # noqa: E501

        self._scrape_timeout = scrape_timeout

    @property
    def target_limit(self):
        """Gets the target_limit of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501

        TargetLimit defines a limit on the number of scraped targets that will be accepted.  # noqa: E501

        :return: The target_limit of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :rtype: int
        """
        return self._target_limit

    @target_limit.setter
    def target_limit(self, target_limit):
        """Sets the target_limit of this ComCoreosMonitoringV1ProbeSpec.

        TargetLimit defines a limit on the number of scraped targets that will be accepted.  # noqa: E501

        :param target_limit: The target_limit of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :type: int
        """

        self._target_limit = target_limit

    @property
    def targets(self):
        """Gets the targets of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501


        :return: The targets of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1ProbeSpecTargets
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this ComCoreosMonitoringV1ProbeSpec.


        :param targets: The targets of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1ProbeSpecTargets
        """

        self._targets = targets

    @property
    def tls_config(self):
        """Gets the tls_config of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501


        :return: The tls_config of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PodMonitorSpecTlsConfig
        """
        return self._tls_config

    @tls_config.setter
    def tls_config(self, tls_config):
        """Sets the tls_config of this ComCoreosMonitoringV1ProbeSpec.


        :param tls_config: The tls_config of this ComCoreosMonitoringV1ProbeSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PodMonitorSpecTlsConfig
        """

        self._tls_config = tls_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComCoreosMonitoringV1ProbeSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComCoreosMonitoringV1ProbeSpec):
            return True

        return self.to_dict() != other.to_dict()
