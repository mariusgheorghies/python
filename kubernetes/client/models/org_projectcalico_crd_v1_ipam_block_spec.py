# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class OrgProjectcalicoCrdV1IPAMBlockSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'affinity': 'str',
        'allocations': 'list[object]',
        'attributes': 'list[OrgProjectcalicoCrdV1IPAMBlockSpecAttributes]',
        'cidr': 'str',
        'deleted': 'bool',
        'strict_affinity': 'bool',
        'unallocated': 'list[int]'
    }

    attribute_map = {
        'affinity': 'affinity',
        'allocations': 'allocations',
        'attributes': 'attributes',
        'cidr': 'cidr',
        'deleted': 'deleted',
        'strict_affinity': 'strictAffinity',
        'unallocated': 'unallocated'
    }

    def __init__(self, affinity=None, allocations=None, attributes=None, cidr=None, deleted=None, strict_affinity=None, unallocated=None, local_vars_configuration=None):  # noqa: E501
        """OrgProjectcalicoCrdV1IPAMBlockSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._affinity = None
        self._allocations = None
        self._attributes = None
        self._cidr = None
        self._deleted = None
        self._strict_affinity = None
        self._unallocated = None
        self.discriminator = None

        if affinity is not None:
            self.affinity = affinity
        self.allocations = allocations
        self.attributes = attributes
        self.cidr = cidr
        if deleted is not None:
            self.deleted = deleted
        self.strict_affinity = strict_affinity
        self.unallocated = unallocated

    @property
    def affinity(self):
        """Gets the affinity of this OrgProjectcalicoCrdV1IPAMBlockSpec.  # noqa: E501


        :return: The affinity of this OrgProjectcalicoCrdV1IPAMBlockSpec.  # noqa: E501
        :rtype: str
        """
        return self._affinity

    @affinity.setter
    def affinity(self, affinity):
        """Sets the affinity of this OrgProjectcalicoCrdV1IPAMBlockSpec.


        :param affinity: The affinity of this OrgProjectcalicoCrdV1IPAMBlockSpec.  # noqa: E501
        :type: str
        """

        self._affinity = affinity

    @property
    def allocations(self):
        """Gets the allocations of this OrgProjectcalicoCrdV1IPAMBlockSpec.  # noqa: E501


        :return: The allocations of this OrgProjectcalicoCrdV1IPAMBlockSpec.  # noqa: E501
        :rtype: list[object]
        """
        return self._allocations

    @allocations.setter
    def allocations(self, allocations):
        """Sets the allocations of this OrgProjectcalicoCrdV1IPAMBlockSpec.


        :param allocations: The allocations of this OrgProjectcalicoCrdV1IPAMBlockSpec.  # noqa: E501
        :type: list[object]
        """
        if self.local_vars_configuration.client_side_validation and allocations is None:  # noqa: E501
            raise ValueError("Invalid value for `allocations`, must not be `None`")  # noqa: E501

        self._allocations = allocations

    @property
    def attributes(self):
        """Gets the attributes of this OrgProjectcalicoCrdV1IPAMBlockSpec.  # noqa: E501


        :return: The attributes of this OrgProjectcalicoCrdV1IPAMBlockSpec.  # noqa: E501
        :rtype: list[OrgProjectcalicoCrdV1IPAMBlockSpecAttributes]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this OrgProjectcalicoCrdV1IPAMBlockSpec.


        :param attributes: The attributes of this OrgProjectcalicoCrdV1IPAMBlockSpec.  # noqa: E501
        :type: list[OrgProjectcalicoCrdV1IPAMBlockSpecAttributes]
        """
        if self.local_vars_configuration.client_side_validation and attributes is None:  # noqa: E501
            raise ValueError("Invalid value for `attributes`, must not be `None`")  # noqa: E501

        self._attributes = attributes

    @property
    def cidr(self):
        """Gets the cidr of this OrgProjectcalicoCrdV1IPAMBlockSpec.  # noqa: E501


        :return: The cidr of this OrgProjectcalicoCrdV1IPAMBlockSpec.  # noqa: E501
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this OrgProjectcalicoCrdV1IPAMBlockSpec.


        :param cidr: The cidr of this OrgProjectcalicoCrdV1IPAMBlockSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cidr is None:  # noqa: E501
            raise ValueError("Invalid value for `cidr`, must not be `None`")  # noqa: E501

        self._cidr = cidr

    @property
    def deleted(self):
        """Gets the deleted of this OrgProjectcalicoCrdV1IPAMBlockSpec.  # noqa: E501


        :return: The deleted of this OrgProjectcalicoCrdV1IPAMBlockSpec.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this OrgProjectcalicoCrdV1IPAMBlockSpec.


        :param deleted: The deleted of this OrgProjectcalicoCrdV1IPAMBlockSpec.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def strict_affinity(self):
        """Gets the strict_affinity of this OrgProjectcalicoCrdV1IPAMBlockSpec.  # noqa: E501


        :return: The strict_affinity of this OrgProjectcalicoCrdV1IPAMBlockSpec.  # noqa: E501
        :rtype: bool
        """
        return self._strict_affinity

    @strict_affinity.setter
    def strict_affinity(self, strict_affinity):
        """Sets the strict_affinity of this OrgProjectcalicoCrdV1IPAMBlockSpec.


        :param strict_affinity: The strict_affinity of this OrgProjectcalicoCrdV1IPAMBlockSpec.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and strict_affinity is None:  # noqa: E501
            raise ValueError("Invalid value for `strict_affinity`, must not be `None`")  # noqa: E501

        self._strict_affinity = strict_affinity

    @property
    def unallocated(self):
        """Gets the unallocated of this OrgProjectcalicoCrdV1IPAMBlockSpec.  # noqa: E501


        :return: The unallocated of this OrgProjectcalicoCrdV1IPAMBlockSpec.  # noqa: E501
        :rtype: list[int]
        """
        return self._unallocated

    @unallocated.setter
    def unallocated(self, unallocated):
        """Sets the unallocated of this OrgProjectcalicoCrdV1IPAMBlockSpec.


        :param unallocated: The unallocated of this OrgProjectcalicoCrdV1IPAMBlockSpec.  # noqa: E501
        :type: list[int]
        """
        if self.local_vars_configuration.client_side_validation and unallocated is None:  # noqa: E501
            raise ValueError("Invalid value for `unallocated`, must not be `None`")  # noqa: E501

        self._unallocated = unallocated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgProjectcalicoCrdV1IPAMBlockSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrgProjectcalicoCrdV1IPAMBlockSpec):
            return True

        return self.to_dict() != other.to_dict()
