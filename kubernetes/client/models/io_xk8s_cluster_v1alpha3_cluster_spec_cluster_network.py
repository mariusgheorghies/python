# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterV1alpha3ClusterSpecClusterNetwork(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_server_port': 'int',
        'pods': 'IoXK8sClusterV1alpha3ClusterSpecClusterNetworkPods',
        'service_domain': 'str',
        'services': 'IoXK8sClusterV1alpha3ClusterSpecClusterNetworkServices'
    }

    attribute_map = {
        'api_server_port': 'apiServerPort',
        'pods': 'pods',
        'service_domain': 'serviceDomain',
        'services': 'services'
    }

    def __init__(self, api_server_port=None, pods=None, service_domain=None, services=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterV1alpha3ClusterSpecClusterNetwork - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_server_port = None
        self._pods = None
        self._service_domain = None
        self._services = None
        self.discriminator = None

        if api_server_port is not None:
            self.api_server_port = api_server_port
        if pods is not None:
            self.pods = pods
        if service_domain is not None:
            self.service_domain = service_domain
        if services is not None:
            self.services = services

    @property
    def api_server_port(self):
        """Gets the api_server_port of this IoXK8sClusterV1alpha3ClusterSpecClusterNetwork.  # noqa: E501

        APIServerPort specifies the port the API Server should bind to. Defaults to 6443.  # noqa: E501

        :return: The api_server_port of this IoXK8sClusterV1alpha3ClusterSpecClusterNetwork.  # noqa: E501
        :rtype: int
        """
        return self._api_server_port

    @api_server_port.setter
    def api_server_port(self, api_server_port):
        """Sets the api_server_port of this IoXK8sClusterV1alpha3ClusterSpecClusterNetwork.

        APIServerPort specifies the port the API Server should bind to. Defaults to 6443.  # noqa: E501

        :param api_server_port: The api_server_port of this IoXK8sClusterV1alpha3ClusterSpecClusterNetwork.  # noqa: E501
        :type: int
        """

        self._api_server_port = api_server_port

    @property
    def pods(self):
        """Gets the pods of this IoXK8sClusterV1alpha3ClusterSpecClusterNetwork.  # noqa: E501


        :return: The pods of this IoXK8sClusterV1alpha3ClusterSpecClusterNetwork.  # noqa: E501
        :rtype: IoXK8sClusterV1alpha3ClusterSpecClusterNetworkPods
        """
        return self._pods

    @pods.setter
    def pods(self, pods):
        """Sets the pods of this IoXK8sClusterV1alpha3ClusterSpecClusterNetwork.


        :param pods: The pods of this IoXK8sClusterV1alpha3ClusterSpecClusterNetwork.  # noqa: E501
        :type: IoXK8sClusterV1alpha3ClusterSpecClusterNetworkPods
        """

        self._pods = pods

    @property
    def service_domain(self):
        """Gets the service_domain of this IoXK8sClusterV1alpha3ClusterSpecClusterNetwork.  # noqa: E501

        Domain name for services.  # noqa: E501

        :return: The service_domain of this IoXK8sClusterV1alpha3ClusterSpecClusterNetwork.  # noqa: E501
        :rtype: str
        """
        return self._service_domain

    @service_domain.setter
    def service_domain(self, service_domain):
        """Sets the service_domain of this IoXK8sClusterV1alpha3ClusterSpecClusterNetwork.

        Domain name for services.  # noqa: E501

        :param service_domain: The service_domain of this IoXK8sClusterV1alpha3ClusterSpecClusterNetwork.  # noqa: E501
        :type: str
        """

        self._service_domain = service_domain

    @property
    def services(self):
        """Gets the services of this IoXK8sClusterV1alpha3ClusterSpecClusterNetwork.  # noqa: E501


        :return: The services of this IoXK8sClusterV1alpha3ClusterSpecClusterNetwork.  # noqa: E501
        :rtype: IoXK8sClusterV1alpha3ClusterSpecClusterNetworkServices
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this IoXK8sClusterV1alpha3ClusterSpecClusterNetwork.


        :param services: The services of this IoXK8sClusterV1alpha3ClusterSpecClusterNetwork.  # noqa: E501
        :type: IoXK8sClusterV1alpha3ClusterSpecClusterNetworkServices
        """

        self._services = services

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterV1alpha3ClusterSpecClusterNetwork):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterV1alpha3ClusterSpecClusterNetwork):
            return True

        return self.to_dict() != other.to_dict()
