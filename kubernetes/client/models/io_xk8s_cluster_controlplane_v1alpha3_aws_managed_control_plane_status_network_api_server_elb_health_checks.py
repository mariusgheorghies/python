# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'healthy_threshold': 'int',
        'interval': 'int',
        'target': 'str',
        'timeout': 'int',
        'unhealthy_threshold': 'int'
    }

    attribute_map = {
        'healthy_threshold': 'healthyThreshold',
        'interval': 'interval',
        'target': 'target',
        'timeout': 'timeout',
        'unhealthy_threshold': 'unhealthyThreshold'
    }

    def __init__(self, healthy_threshold=None, interval=None, target=None, timeout=None, unhealthy_threshold=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._healthy_threshold = None
        self._interval = None
        self._target = None
        self._timeout = None
        self._unhealthy_threshold = None
        self.discriminator = None

        self.healthy_threshold = healthy_threshold
        self.interval = interval
        self.target = target
        self.timeout = timeout
        self.unhealthy_threshold = unhealthy_threshold

    @property
    def healthy_threshold(self):
        """Gets the healthy_threshold of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks.  # noqa: E501


        :return: The healthy_threshold of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks.  # noqa: E501
        :rtype: int
        """
        return self._healthy_threshold

    @healthy_threshold.setter
    def healthy_threshold(self, healthy_threshold):
        """Sets the healthy_threshold of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks.


        :param healthy_threshold: The healthy_threshold of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and healthy_threshold is None:  # noqa: E501
            raise ValueError("Invalid value for `healthy_threshold`, must not be `None`")  # noqa: E501

        self._healthy_threshold = healthy_threshold

    @property
    def interval(self):
        """Gets the interval of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks.  # noqa: E501

        A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.  # noqa: E501

        :return: The interval of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks.

        A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.  # noqa: E501

        :param interval: The interval of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and interval is None:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must not be `None`")  # noqa: E501

        self._interval = interval

    @property
    def target(self):
        """Gets the target of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks.  # noqa: E501


        :return: The target of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks.


        :param target: The target of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and target is None:  # noqa: E501
            raise ValueError("Invalid value for `target`, must not be `None`")  # noqa: E501

        self._target = target

    @property
    def timeout(self):
        """Gets the timeout of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks.  # noqa: E501

        A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.  # noqa: E501

        :return: The timeout of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks.

        A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.  # noqa: E501

        :param timeout: The timeout of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and timeout is None:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must not be `None`")  # noqa: E501

        self._timeout = timeout

    @property
    def unhealthy_threshold(self):
        """Gets the unhealthy_threshold of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks.  # noqa: E501


        :return: The unhealthy_threshold of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks.  # noqa: E501
        :rtype: int
        """
        return self._unhealthy_threshold

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, unhealthy_threshold):
        """Sets the unhealthy_threshold of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks.


        :param unhealthy_threshold: The unhealthy_threshold of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and unhealthy_threshold is None:  # noqa: E501
            raise ValueError("Invalid value for `unhealthy_threshold`, must not be `None`")  # noqa: E501

        self._unhealthy_threshold = unhealthy_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks):
            return True

        return self.to_dict() != other.to_dict()
