# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoArgoprojV1alpha1ApplicationSetSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'generators': 'list[IoArgoprojV1alpha1ApplicationSetSpecGenerators]',
        'go_template': 'bool',
        'preserved_fields': 'IoArgoprojV1alpha1ApplicationSetSpecPreservedFields',
        'strategy': 'IoArgoprojV1alpha1ApplicationSetSpecStrategy',
        'sync_policy': 'IoArgoprojV1alpha1ApplicationSetSpecSyncPolicy',
        'template': 'IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResourceTemplate'
    }

    attribute_map = {
        'generators': 'generators',
        'go_template': 'goTemplate',
        'preserved_fields': 'preservedFields',
        'strategy': 'strategy',
        'sync_policy': 'syncPolicy',
        'template': 'template'
    }

    def __init__(self, generators=None, go_template=None, preserved_fields=None, strategy=None, sync_policy=None, template=None, local_vars_configuration=None):  # noqa: E501
        """IoArgoprojV1alpha1ApplicationSetSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._generators = None
        self._go_template = None
        self._preserved_fields = None
        self._strategy = None
        self._sync_policy = None
        self._template = None
        self.discriminator = None

        self.generators = generators
        if go_template is not None:
            self.go_template = go_template
        if preserved_fields is not None:
            self.preserved_fields = preserved_fields
        if strategy is not None:
            self.strategy = strategy
        if sync_policy is not None:
            self.sync_policy = sync_policy
        self.template = template

    @property
    def generators(self):
        """Gets the generators of this IoArgoprojV1alpha1ApplicationSetSpec.  # noqa: E501


        :return: The generators of this IoArgoprojV1alpha1ApplicationSetSpec.  # noqa: E501
        :rtype: list[IoArgoprojV1alpha1ApplicationSetSpecGenerators]
        """
        return self._generators

    @generators.setter
    def generators(self, generators):
        """Sets the generators of this IoArgoprojV1alpha1ApplicationSetSpec.


        :param generators: The generators of this IoArgoprojV1alpha1ApplicationSetSpec.  # noqa: E501
        :type: list[IoArgoprojV1alpha1ApplicationSetSpecGenerators]
        """
        if self.local_vars_configuration.client_side_validation and generators is None:  # noqa: E501
            raise ValueError("Invalid value for `generators`, must not be `None`")  # noqa: E501

        self._generators = generators

    @property
    def go_template(self):
        """Gets the go_template of this IoArgoprojV1alpha1ApplicationSetSpec.  # noqa: E501


        :return: The go_template of this IoArgoprojV1alpha1ApplicationSetSpec.  # noqa: E501
        :rtype: bool
        """
        return self._go_template

    @go_template.setter
    def go_template(self, go_template):
        """Sets the go_template of this IoArgoprojV1alpha1ApplicationSetSpec.


        :param go_template: The go_template of this IoArgoprojV1alpha1ApplicationSetSpec.  # noqa: E501
        :type: bool
        """

        self._go_template = go_template

    @property
    def preserved_fields(self):
        """Gets the preserved_fields of this IoArgoprojV1alpha1ApplicationSetSpec.  # noqa: E501


        :return: The preserved_fields of this IoArgoprojV1alpha1ApplicationSetSpec.  # noqa: E501
        :rtype: IoArgoprojV1alpha1ApplicationSetSpecPreservedFields
        """
        return self._preserved_fields

    @preserved_fields.setter
    def preserved_fields(self, preserved_fields):
        """Sets the preserved_fields of this IoArgoprojV1alpha1ApplicationSetSpec.


        :param preserved_fields: The preserved_fields of this IoArgoprojV1alpha1ApplicationSetSpec.  # noqa: E501
        :type: IoArgoprojV1alpha1ApplicationSetSpecPreservedFields
        """

        self._preserved_fields = preserved_fields

    @property
    def strategy(self):
        """Gets the strategy of this IoArgoprojV1alpha1ApplicationSetSpec.  # noqa: E501


        :return: The strategy of this IoArgoprojV1alpha1ApplicationSetSpec.  # noqa: E501
        :rtype: IoArgoprojV1alpha1ApplicationSetSpecStrategy
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this IoArgoprojV1alpha1ApplicationSetSpec.


        :param strategy: The strategy of this IoArgoprojV1alpha1ApplicationSetSpec.  # noqa: E501
        :type: IoArgoprojV1alpha1ApplicationSetSpecStrategy
        """

        self._strategy = strategy

    @property
    def sync_policy(self):
        """Gets the sync_policy of this IoArgoprojV1alpha1ApplicationSetSpec.  # noqa: E501


        :return: The sync_policy of this IoArgoprojV1alpha1ApplicationSetSpec.  # noqa: E501
        :rtype: IoArgoprojV1alpha1ApplicationSetSpecSyncPolicy
        """
        return self._sync_policy

    @sync_policy.setter
    def sync_policy(self, sync_policy):
        """Sets the sync_policy of this IoArgoprojV1alpha1ApplicationSetSpec.


        :param sync_policy: The sync_policy of this IoArgoprojV1alpha1ApplicationSetSpec.  # noqa: E501
        :type: IoArgoprojV1alpha1ApplicationSetSpecSyncPolicy
        """

        self._sync_policy = sync_policy

    @property
    def template(self):
        """Gets the template of this IoArgoprojV1alpha1ApplicationSetSpec.  # noqa: E501


        :return: The template of this IoArgoprojV1alpha1ApplicationSetSpec.  # noqa: E501
        :rtype: IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResourceTemplate
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this IoArgoprojV1alpha1ApplicationSetSpec.


        :param template: The template of this IoArgoprojV1alpha1ApplicationSetSpec.  # noqa: E501
        :type: IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResourceTemplate
        """
        if self.local_vars_configuration.client_side_validation and template is None:  # noqa: E501
            raise ValueError("Invalid value for `template`, must not be `None`")  # noqa: E501

        self._template = template

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojV1alpha1ApplicationSetSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojV1alpha1ApplicationSetSpec):
            return True

        return self.to_dict() != other.to_dict()
