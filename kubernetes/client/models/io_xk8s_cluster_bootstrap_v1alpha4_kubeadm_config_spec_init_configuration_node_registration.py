# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfigurationNodeRegistration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cri_socket': 'str',
        'ignore_preflight_errors': 'list[str]',
        'kubelet_extra_args': 'dict(str, str)',
        'name': 'str',
        'taints': 'list[IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationNodeRegistrationTaints]'
    }

    attribute_map = {
        'cri_socket': 'criSocket',
        'ignore_preflight_errors': 'ignorePreflightErrors',
        'kubelet_extra_args': 'kubeletExtraArgs',
        'name': 'name',
        'taints': 'taints'
    }

    def __init__(self, cri_socket=None, ignore_preflight_errors=None, kubelet_extra_args=None, name=None, taints=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfigurationNodeRegistration - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cri_socket = None
        self._ignore_preflight_errors = None
        self._kubelet_extra_args = None
        self._name = None
        self._taints = None
        self.discriminator = None

        if cri_socket is not None:
            self.cri_socket = cri_socket
        if ignore_preflight_errors is not None:
            self.ignore_preflight_errors = ignore_preflight_errors
        if kubelet_extra_args is not None:
            self.kubelet_extra_args = kubelet_extra_args
        if name is not None:
            self.name = name
        if taints is not None:
            self.taints = taints

    @property
    def cri_socket(self):
        """Gets the cri_socket of this IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfigurationNodeRegistration.  # noqa: E501

        CRISocket is used to retrieve container runtime info. This information will be annotated to the Node API object, for later re-use  # noqa: E501

        :return: The cri_socket of this IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfigurationNodeRegistration.  # noqa: E501
        :rtype: str
        """
        return self._cri_socket

    @cri_socket.setter
    def cri_socket(self, cri_socket):
        """Sets the cri_socket of this IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfigurationNodeRegistration.

        CRISocket is used to retrieve container runtime info. This information will be annotated to the Node API object, for later re-use  # noqa: E501

        :param cri_socket: The cri_socket of this IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfigurationNodeRegistration.  # noqa: E501
        :type: str
        """

        self._cri_socket = cri_socket

    @property
    def ignore_preflight_errors(self):
        """Gets the ignore_preflight_errors of this IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfigurationNodeRegistration.  # noqa: E501

        IgnorePreflightErrors provides a slice of pre-flight errors to be ignored when the current node is registered.  # noqa: E501

        :return: The ignore_preflight_errors of this IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfigurationNodeRegistration.  # noqa: E501
        :rtype: list[str]
        """
        return self._ignore_preflight_errors

    @ignore_preflight_errors.setter
    def ignore_preflight_errors(self, ignore_preflight_errors):
        """Sets the ignore_preflight_errors of this IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfigurationNodeRegistration.

        IgnorePreflightErrors provides a slice of pre-flight errors to be ignored when the current node is registered.  # noqa: E501

        :param ignore_preflight_errors: The ignore_preflight_errors of this IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfigurationNodeRegistration.  # noqa: E501
        :type: list[str]
        """

        self._ignore_preflight_errors = ignore_preflight_errors

    @property
    def kubelet_extra_args(self):
        """Gets the kubelet_extra_args of this IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfigurationNodeRegistration.  # noqa: E501

        KubeletExtraArgs passes through extra arguments to the kubelet. The arguments here are passed to the kubelet command line via the environment file kubeadm writes at runtime for the kubelet to source. This overrides the generic base-level configuration in the kubelet-config-1.X ConfigMap Flags have higher priority when parsing. These values are local and specific to the node kubeadm is executing on.  # noqa: E501

        :return: The kubelet_extra_args of this IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfigurationNodeRegistration.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._kubelet_extra_args

    @kubelet_extra_args.setter
    def kubelet_extra_args(self, kubelet_extra_args):
        """Sets the kubelet_extra_args of this IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfigurationNodeRegistration.

        KubeletExtraArgs passes through extra arguments to the kubelet. The arguments here are passed to the kubelet command line via the environment file kubeadm writes at runtime for the kubelet to source. This overrides the generic base-level configuration in the kubelet-config-1.X ConfigMap Flags have higher priority when parsing. These values are local and specific to the node kubeadm is executing on.  # noqa: E501

        :param kubelet_extra_args: The kubelet_extra_args of this IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfigurationNodeRegistration.  # noqa: E501
        :type: dict(str, str)
        """

        self._kubelet_extra_args = kubelet_extra_args

    @property
    def name(self):
        """Gets the name of this IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfigurationNodeRegistration.  # noqa: E501

        Name is the `.Metadata.Name` field of the Node API object that will be created in this `kubeadm init` or `kubeadm join` operation. This field is also used in the CommonName field of the kubelet's client certificate to the API server. Defaults to the hostname of the node if not provided.  # noqa: E501

        :return: The name of this IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfigurationNodeRegistration.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfigurationNodeRegistration.

        Name is the `.Metadata.Name` field of the Node API object that will be created in this `kubeadm init` or `kubeadm join` operation. This field is also used in the CommonName field of the kubelet's client certificate to the API server. Defaults to the hostname of the node if not provided.  # noqa: E501

        :param name: The name of this IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfigurationNodeRegistration.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def taints(self):
        """Gets the taints of this IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfigurationNodeRegistration.  # noqa: E501

        Taints specifies the taints the Node API object should be registered with. If this field is unset, i.e. nil, in the `kubeadm init` process it will be defaulted to []v1.Taint{'node-role.kubernetes.io/master=\"\"'}. If you don't want to taint your control-plane node, set this field to an empty slice, i.e. `taints: {}` in the YAML file. This field is solely used for Node registration.  # noqa: E501

        :return: The taints of this IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfigurationNodeRegistration.  # noqa: E501
        :rtype: list[IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationNodeRegistrationTaints]
        """
        return self._taints

    @taints.setter
    def taints(self, taints):
        """Sets the taints of this IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfigurationNodeRegistration.

        Taints specifies the taints the Node API object should be registered with. If this field is unset, i.e. nil, in the `kubeadm init` process it will be defaulted to []v1.Taint{'node-role.kubernetes.io/master=\"\"'}. If you don't want to taint your control-plane node, set this field to an empty slice, i.e. `taints: {}` in the YAML file. This field is solely used for Node registration.  # noqa: E501

        :param taints: The taints of this IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfigurationNodeRegistration.  # noqa: E501
        :type: list[IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecInitConfigurationNodeRegistrationTaints]
        """

        self._taints = taints

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfigurationNodeRegistration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterBootstrapV1alpha4KubeadmConfigSpecInitConfigurationNodeRegistration):
            return True

        return self.to_dict() != other.to_dict()
