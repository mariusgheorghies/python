# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterV1alpha4MachineStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'addresses': 'list[IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusBastionAddresses]',
        'bootstrap_ready': 'bool',
        'conditions': 'list[IoXK8sClusterAddonsV1alpha3ClusterResourceSetStatusConditions]',
        'failure_message': 'str',
        'failure_reason': 'str',
        'infrastructure_ready': 'bool',
        'last_updated': 'datetime',
        'node_info': 'IoXK8sClusterV1alpha4MachineStatusNodeInfo',
        'node_ref': 'IoXK8sClusterV1alpha3MachineStatusNodeRef',
        'observed_generation': 'int',
        'phase': 'str',
        'version': 'str'
    }

    attribute_map = {
        'addresses': 'addresses',
        'bootstrap_ready': 'bootstrapReady',
        'conditions': 'conditions',
        'failure_message': 'failureMessage',
        'failure_reason': 'failureReason',
        'infrastructure_ready': 'infrastructureReady',
        'last_updated': 'lastUpdated',
        'node_info': 'nodeInfo',
        'node_ref': 'nodeRef',
        'observed_generation': 'observedGeneration',
        'phase': 'phase',
        'version': 'version'
    }

    def __init__(self, addresses=None, bootstrap_ready=None, conditions=None, failure_message=None, failure_reason=None, infrastructure_ready=None, last_updated=None, node_info=None, node_ref=None, observed_generation=None, phase=None, version=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterV1alpha4MachineStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._addresses = None
        self._bootstrap_ready = None
        self._conditions = None
        self._failure_message = None
        self._failure_reason = None
        self._infrastructure_ready = None
        self._last_updated = None
        self._node_info = None
        self._node_ref = None
        self._observed_generation = None
        self._phase = None
        self._version = None
        self.discriminator = None

        if addresses is not None:
            self.addresses = addresses
        if bootstrap_ready is not None:
            self.bootstrap_ready = bootstrap_ready
        if conditions is not None:
            self.conditions = conditions
        if failure_message is not None:
            self.failure_message = failure_message
        if failure_reason is not None:
            self.failure_reason = failure_reason
        if infrastructure_ready is not None:
            self.infrastructure_ready = infrastructure_ready
        if last_updated is not None:
            self.last_updated = last_updated
        if node_info is not None:
            self.node_info = node_info
        if node_ref is not None:
            self.node_ref = node_ref
        if observed_generation is not None:
            self.observed_generation = observed_generation
        if phase is not None:
            self.phase = phase
        if version is not None:
            self.version = version

    @property
    def addresses(self):
        """Gets the addresses of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501

        Addresses is a list of addresses assigned to the machine. This field is copied from the infrastructure provider reference.  # noqa: E501

        :return: The addresses of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501
        :rtype: list[IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusBastionAddresses]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this IoXK8sClusterV1alpha4MachineStatus.

        Addresses is a list of addresses assigned to the machine. This field is copied from the infrastructure provider reference.  # noqa: E501

        :param addresses: The addresses of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501
        :type: list[IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusBastionAddresses]
        """

        self._addresses = addresses

    @property
    def bootstrap_ready(self):
        """Gets the bootstrap_ready of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501

        BootstrapReady is the state of the bootstrap provider.  # noqa: E501

        :return: The bootstrap_ready of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501
        :rtype: bool
        """
        return self._bootstrap_ready

    @bootstrap_ready.setter
    def bootstrap_ready(self, bootstrap_ready):
        """Sets the bootstrap_ready of this IoXK8sClusterV1alpha4MachineStatus.

        BootstrapReady is the state of the bootstrap provider.  # noqa: E501

        :param bootstrap_ready: The bootstrap_ready of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501
        :type: bool
        """

        self._bootstrap_ready = bootstrap_ready

    @property
    def conditions(self):
        """Gets the conditions of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501

        Conditions defines current service state of the Machine.  # noqa: E501

        :return: The conditions of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501
        :rtype: list[IoXK8sClusterAddonsV1alpha3ClusterResourceSetStatusConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this IoXK8sClusterV1alpha4MachineStatus.

        Conditions defines current service state of the Machine.  # noqa: E501

        :param conditions: The conditions of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501
        :type: list[IoXK8sClusterAddonsV1alpha3ClusterResourceSetStatusConditions]
        """

        self._conditions = conditions

    @property
    def failure_message(self):
        """Gets the failure_message of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501

        FailureMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption.   This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.   Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.  # noqa: E501

        :return: The failure_message of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501
        :rtype: str
        """
        return self._failure_message

    @failure_message.setter
    def failure_message(self, failure_message):
        """Sets the failure_message of this IoXK8sClusterV1alpha4MachineStatus.

        FailureMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption.   This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.   Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.  # noqa: E501

        :param failure_message: The failure_message of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501
        :type: str
        """

        self._failure_message = failure_message

    @property
    def failure_reason(self):
        """Gets the failure_reason of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501

        FailureReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation.   This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.   Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.  # noqa: E501

        :return: The failure_reason of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this IoXK8sClusterV1alpha4MachineStatus.

        FailureReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation.   This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.   Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.  # noqa: E501

        :param failure_reason: The failure_reason of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501
        :type: str
        """

        self._failure_reason = failure_reason

    @property
    def infrastructure_ready(self):
        """Gets the infrastructure_ready of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501

        InfrastructureReady is the state of the infrastructure provider.  # noqa: E501

        :return: The infrastructure_ready of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501
        :rtype: bool
        """
        return self._infrastructure_ready

    @infrastructure_ready.setter
    def infrastructure_ready(self, infrastructure_ready):
        """Sets the infrastructure_ready of this IoXK8sClusterV1alpha4MachineStatus.

        InfrastructureReady is the state of the infrastructure provider.  # noqa: E501

        :param infrastructure_ready: The infrastructure_ready of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501
        :type: bool
        """

        self._infrastructure_ready = infrastructure_ready

    @property
    def last_updated(self):
        """Gets the last_updated of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501

        LastUpdated identifies when the phase of the Machine last transitioned.  # noqa: E501

        :return: The last_updated of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this IoXK8sClusterV1alpha4MachineStatus.

        LastUpdated identifies when the phase of the Machine last transitioned.  # noqa: E501

        :param last_updated: The last_updated of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def node_info(self):
        """Gets the node_info of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501


        :return: The node_info of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501
        :rtype: IoXK8sClusterV1alpha4MachineStatusNodeInfo
        """
        return self._node_info

    @node_info.setter
    def node_info(self, node_info):
        """Sets the node_info of this IoXK8sClusterV1alpha4MachineStatus.


        :param node_info: The node_info of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501
        :type: IoXK8sClusterV1alpha4MachineStatusNodeInfo
        """

        self._node_info = node_info

    @property
    def node_ref(self):
        """Gets the node_ref of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501


        :return: The node_ref of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501
        :rtype: IoXK8sClusterV1alpha3MachineStatusNodeRef
        """
        return self._node_ref

    @node_ref.setter
    def node_ref(self, node_ref):
        """Sets the node_ref of this IoXK8sClusterV1alpha4MachineStatus.


        :param node_ref: The node_ref of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501
        :type: IoXK8sClusterV1alpha3MachineStatusNodeRef
        """

        self._node_ref = node_ref

    @property
    def observed_generation(self):
        """Gets the observed_generation of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501

        ObservedGeneration is the latest generation observed by the controller.  # noqa: E501

        :return: The observed_generation of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501
        :rtype: int
        """
        return self._observed_generation

    @observed_generation.setter
    def observed_generation(self, observed_generation):
        """Sets the observed_generation of this IoXK8sClusterV1alpha4MachineStatus.

        ObservedGeneration is the latest generation observed by the controller.  # noqa: E501

        :param observed_generation: The observed_generation of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501
        :type: int
        """

        self._observed_generation = observed_generation

    @property
    def phase(self):
        """Gets the phase of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501

        Phase represents the current phase of machine actuation. E.g. Pending, Running, Terminating, Failed etc.  # noqa: E501

        :return: The phase of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this IoXK8sClusterV1alpha4MachineStatus.

        Phase represents the current phase of machine actuation. E.g. Pending, Running, Terminating, Failed etc.  # noqa: E501

        :param phase: The phase of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501
        :type: str
        """

        self._phase = phase

    @property
    def version(self):
        """Gets the version of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501

        Version specifies the current version of Kubernetes running on the corresponding Node. This is meant to be a means of bubbling up status from the Node to the Machine. It is entirely optional, but useful for end-user UX if it’s present.  # noqa: E501

        :return: The version of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this IoXK8sClusterV1alpha4MachineStatus.

        Version specifies the current version of Kubernetes running on the corresponding Node. This is meant to be a means of bubbling up status from the Node to the Machine. It is entirely optional, but useful for end-user UX if it’s present.  # noqa: E501

        :param version: The version of this IoXK8sClusterV1alpha4MachineStatus.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterV1alpha4MachineStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterV1alpha4MachineStatus):
            return True

        return self.to_dict() != other.to_dict()
