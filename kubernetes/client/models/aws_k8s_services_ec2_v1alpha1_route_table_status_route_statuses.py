# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'carrier_gateway_id': 'str',
        'core_network_arn': 'str',
        'destination_cidr_block': 'str',
        'destination_i_pv6_cidr_block': 'str',
        'destination_prefix_list_id': 'str',
        'egress_only_internet_gateway_id': 'str',
        'gateway_id': 'str',
        'instance_id': 'str',
        'instance_owner_id': 'str',
        'local_gateway_id': 'str',
        'nat_gateway_id': 'str',
        'network_interface_id': 'str',
        'origin': 'str',
        'state': 'str',
        'transit_gateway_id': 'str',
        'vpc_peering_connection_id': 'str'
    }

    attribute_map = {
        'carrier_gateway_id': 'carrierGatewayID',
        'core_network_arn': 'coreNetworkARN',
        'destination_cidr_block': 'destinationCIDRBlock',
        'destination_i_pv6_cidr_block': 'destinationIPv6CIDRBlock',
        'destination_prefix_list_id': 'destinationPrefixListID',
        'egress_only_internet_gateway_id': 'egressOnlyInternetGatewayID',
        'gateway_id': 'gatewayID',
        'instance_id': 'instanceID',
        'instance_owner_id': 'instanceOwnerID',
        'local_gateway_id': 'localGatewayID',
        'nat_gateway_id': 'natGatewayID',
        'network_interface_id': 'networkInterfaceID',
        'origin': 'origin',
        'state': 'state',
        'transit_gateway_id': 'transitGatewayID',
        'vpc_peering_connection_id': 'vpcPeeringConnectionID'
    }

    def __init__(self, carrier_gateway_id=None, core_network_arn=None, destination_cidr_block=None, destination_i_pv6_cidr_block=None, destination_prefix_list_id=None, egress_only_internet_gateway_id=None, gateway_id=None, instance_id=None, instance_owner_id=None, local_gateway_id=None, nat_gateway_id=None, network_interface_id=None, origin=None, state=None, transit_gateway_id=None, vpc_peering_connection_id=None, local_vars_configuration=None):  # noqa: E501
        """AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._carrier_gateway_id = None
        self._core_network_arn = None
        self._destination_cidr_block = None
        self._destination_i_pv6_cidr_block = None
        self._destination_prefix_list_id = None
        self._egress_only_internet_gateway_id = None
        self._gateway_id = None
        self._instance_id = None
        self._instance_owner_id = None
        self._local_gateway_id = None
        self._nat_gateway_id = None
        self._network_interface_id = None
        self._origin = None
        self._state = None
        self._transit_gateway_id = None
        self._vpc_peering_connection_id = None
        self.discriminator = None

        if carrier_gateway_id is not None:
            self.carrier_gateway_id = carrier_gateway_id
        if core_network_arn is not None:
            self.core_network_arn = core_network_arn
        if destination_cidr_block is not None:
            self.destination_cidr_block = destination_cidr_block
        if destination_i_pv6_cidr_block is not None:
            self.destination_i_pv6_cidr_block = destination_i_pv6_cidr_block
        if destination_prefix_list_id is not None:
            self.destination_prefix_list_id = destination_prefix_list_id
        if egress_only_internet_gateway_id is not None:
            self.egress_only_internet_gateway_id = egress_only_internet_gateway_id
        if gateway_id is not None:
            self.gateway_id = gateway_id
        if instance_id is not None:
            self.instance_id = instance_id
        if instance_owner_id is not None:
            self.instance_owner_id = instance_owner_id
        if local_gateway_id is not None:
            self.local_gateway_id = local_gateway_id
        if nat_gateway_id is not None:
            self.nat_gateway_id = nat_gateway_id
        if network_interface_id is not None:
            self.network_interface_id = network_interface_id
        if origin is not None:
            self.origin = origin
        if state is not None:
            self.state = state
        if transit_gateway_id is not None:
            self.transit_gateway_id = transit_gateway_id
        if vpc_peering_connection_id is not None:
            self.vpc_peering_connection_id = vpc_peering_connection_id

    @property
    def carrier_gateway_id(self):
        """Gets the carrier_gateway_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501


        :return: The carrier_gateway_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :rtype: str
        """
        return self._carrier_gateway_id

    @carrier_gateway_id.setter
    def carrier_gateway_id(self, carrier_gateway_id):
        """Sets the carrier_gateway_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.


        :param carrier_gateway_id: The carrier_gateway_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :type: str
        """

        self._carrier_gateway_id = carrier_gateway_id

    @property
    def core_network_arn(self):
        """Gets the core_network_arn of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501


        :return: The core_network_arn of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :rtype: str
        """
        return self._core_network_arn

    @core_network_arn.setter
    def core_network_arn(self, core_network_arn):
        """Sets the core_network_arn of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.


        :param core_network_arn: The core_network_arn of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :type: str
        """

        self._core_network_arn = core_network_arn

    @property
    def destination_cidr_block(self):
        """Gets the destination_cidr_block of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501


        :return: The destination_cidr_block of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :rtype: str
        """
        return self._destination_cidr_block

    @destination_cidr_block.setter
    def destination_cidr_block(self, destination_cidr_block):
        """Sets the destination_cidr_block of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.


        :param destination_cidr_block: The destination_cidr_block of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :type: str
        """

        self._destination_cidr_block = destination_cidr_block

    @property
    def destination_i_pv6_cidr_block(self):
        """Gets the destination_i_pv6_cidr_block of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501


        :return: The destination_i_pv6_cidr_block of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :rtype: str
        """
        return self._destination_i_pv6_cidr_block

    @destination_i_pv6_cidr_block.setter
    def destination_i_pv6_cidr_block(self, destination_i_pv6_cidr_block):
        """Sets the destination_i_pv6_cidr_block of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.


        :param destination_i_pv6_cidr_block: The destination_i_pv6_cidr_block of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :type: str
        """

        self._destination_i_pv6_cidr_block = destination_i_pv6_cidr_block

    @property
    def destination_prefix_list_id(self):
        """Gets the destination_prefix_list_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501


        :return: The destination_prefix_list_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :rtype: str
        """
        return self._destination_prefix_list_id

    @destination_prefix_list_id.setter
    def destination_prefix_list_id(self, destination_prefix_list_id):
        """Sets the destination_prefix_list_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.


        :param destination_prefix_list_id: The destination_prefix_list_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :type: str
        """

        self._destination_prefix_list_id = destination_prefix_list_id

    @property
    def egress_only_internet_gateway_id(self):
        """Gets the egress_only_internet_gateway_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501


        :return: The egress_only_internet_gateway_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :rtype: str
        """
        return self._egress_only_internet_gateway_id

    @egress_only_internet_gateway_id.setter
    def egress_only_internet_gateway_id(self, egress_only_internet_gateway_id):
        """Sets the egress_only_internet_gateway_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.


        :param egress_only_internet_gateway_id: The egress_only_internet_gateway_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :type: str
        """

        self._egress_only_internet_gateway_id = egress_only_internet_gateway_id

    @property
    def gateway_id(self):
        """Gets the gateway_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501


        :return: The gateway_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :rtype: str
        """
        return self._gateway_id

    @gateway_id.setter
    def gateway_id(self, gateway_id):
        """Sets the gateway_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.


        :param gateway_id: The gateway_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :type: str
        """

        self._gateway_id = gateway_id

    @property
    def instance_id(self):
        """Gets the instance_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501


        :return: The instance_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.


        :param instance_id: The instance_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def instance_owner_id(self):
        """Gets the instance_owner_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501


        :return: The instance_owner_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :rtype: str
        """
        return self._instance_owner_id

    @instance_owner_id.setter
    def instance_owner_id(self, instance_owner_id):
        """Sets the instance_owner_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.


        :param instance_owner_id: The instance_owner_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :type: str
        """

        self._instance_owner_id = instance_owner_id

    @property
    def local_gateway_id(self):
        """Gets the local_gateway_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501


        :return: The local_gateway_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :rtype: str
        """
        return self._local_gateway_id

    @local_gateway_id.setter
    def local_gateway_id(self, local_gateway_id):
        """Sets the local_gateway_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.


        :param local_gateway_id: The local_gateway_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :type: str
        """

        self._local_gateway_id = local_gateway_id

    @property
    def nat_gateway_id(self):
        """Gets the nat_gateway_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501


        :return: The nat_gateway_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :rtype: str
        """
        return self._nat_gateway_id

    @nat_gateway_id.setter
    def nat_gateway_id(self, nat_gateway_id):
        """Sets the nat_gateway_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.


        :param nat_gateway_id: The nat_gateway_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :type: str
        """

        self._nat_gateway_id = nat_gateway_id

    @property
    def network_interface_id(self):
        """Gets the network_interface_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501


        :return: The network_interface_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :rtype: str
        """
        return self._network_interface_id

    @network_interface_id.setter
    def network_interface_id(self, network_interface_id):
        """Sets the network_interface_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.


        :param network_interface_id: The network_interface_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :type: str
        """

        self._network_interface_id = network_interface_id

    @property
    def origin(self):
        """Gets the origin of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501


        :return: The origin of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.


        :param origin: The origin of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :type: str
        """

        self._origin = origin

    @property
    def state(self):
        """Gets the state of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501


        :return: The state of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.


        :param state: The state of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def transit_gateway_id(self):
        """Gets the transit_gateway_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501


        :return: The transit_gateway_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :rtype: str
        """
        return self._transit_gateway_id

    @transit_gateway_id.setter
    def transit_gateway_id(self, transit_gateway_id):
        """Sets the transit_gateway_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.


        :param transit_gateway_id: The transit_gateway_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :type: str
        """

        self._transit_gateway_id = transit_gateway_id

    @property
    def vpc_peering_connection_id(self):
        """Gets the vpc_peering_connection_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501


        :return: The vpc_peering_connection_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :rtype: str
        """
        return self._vpc_peering_connection_id

    @vpc_peering_connection_id.setter
    def vpc_peering_connection_id(self, vpc_peering_connection_id):
        """Sets the vpc_peering_connection_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.


        :param vpc_peering_connection_id: The vpc_peering_connection_id of this AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses.  # noqa: E501
        :type: str
        """

        self._vpc_peering_connection_id = vpc_peering_connection_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses):
            return True

        return self.to_dict() != other.to_dict()
