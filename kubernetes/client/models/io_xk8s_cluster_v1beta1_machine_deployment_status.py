# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterV1beta1MachineDeploymentStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'available_replicas': 'int',
        'conditions': 'list[IoXK8sClusterAddonsV1beta1ClusterResourceSetStatusConditions]',
        'observed_generation': 'int',
        'phase': 'str',
        'ready_replicas': 'int',
        'replicas': 'int',
        'selector': 'str',
        'unavailable_replicas': 'int',
        'updated_replicas': 'int'
    }

    attribute_map = {
        'available_replicas': 'availableReplicas',
        'conditions': 'conditions',
        'observed_generation': 'observedGeneration',
        'phase': 'phase',
        'ready_replicas': 'readyReplicas',
        'replicas': 'replicas',
        'selector': 'selector',
        'unavailable_replicas': 'unavailableReplicas',
        'updated_replicas': 'updatedReplicas'
    }

    def __init__(self, available_replicas=None, conditions=None, observed_generation=None, phase=None, ready_replicas=None, replicas=None, selector=None, unavailable_replicas=None, updated_replicas=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterV1beta1MachineDeploymentStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._available_replicas = None
        self._conditions = None
        self._observed_generation = None
        self._phase = None
        self._ready_replicas = None
        self._replicas = None
        self._selector = None
        self._unavailable_replicas = None
        self._updated_replicas = None
        self.discriminator = None

        if available_replicas is not None:
            self.available_replicas = available_replicas
        if conditions is not None:
            self.conditions = conditions
        if observed_generation is not None:
            self.observed_generation = observed_generation
        if phase is not None:
            self.phase = phase
        if ready_replicas is not None:
            self.ready_replicas = ready_replicas
        if replicas is not None:
            self.replicas = replicas
        if selector is not None:
            self.selector = selector
        if unavailable_replicas is not None:
            self.unavailable_replicas = unavailable_replicas
        if updated_replicas is not None:
            self.updated_replicas = updated_replicas

    @property
    def available_replicas(self):
        """Gets the available_replicas of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501

        Total number of available machines (ready for at least minReadySeconds) targeted by this deployment.  # noqa: E501

        :return: The available_replicas of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501
        :rtype: int
        """
        return self._available_replicas

    @available_replicas.setter
    def available_replicas(self, available_replicas):
        """Sets the available_replicas of this IoXK8sClusterV1beta1MachineDeploymentStatus.

        Total number of available machines (ready for at least minReadySeconds) targeted by this deployment.  # noqa: E501

        :param available_replicas: The available_replicas of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501
        :type: int
        """

        self._available_replicas = available_replicas

    @property
    def conditions(self):
        """Gets the conditions of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501

        Conditions defines current service state of the MachineDeployment.  # noqa: E501

        :return: The conditions of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501
        :rtype: list[IoXK8sClusterAddonsV1beta1ClusterResourceSetStatusConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this IoXK8sClusterV1beta1MachineDeploymentStatus.

        Conditions defines current service state of the MachineDeployment.  # noqa: E501

        :param conditions: The conditions of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501
        :type: list[IoXK8sClusterAddonsV1beta1ClusterResourceSetStatusConditions]
        """

        self._conditions = conditions

    @property
    def observed_generation(self):
        """Gets the observed_generation of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501

        The generation observed by the deployment controller.  # noqa: E501

        :return: The observed_generation of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501
        :rtype: int
        """
        return self._observed_generation

    @observed_generation.setter
    def observed_generation(self, observed_generation):
        """Sets the observed_generation of this IoXK8sClusterV1beta1MachineDeploymentStatus.

        The generation observed by the deployment controller.  # noqa: E501

        :param observed_generation: The observed_generation of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501
        :type: int
        """

        self._observed_generation = observed_generation

    @property
    def phase(self):
        """Gets the phase of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501

        Phase represents the current phase of a MachineDeployment (ScalingUp, ScalingDown, Running, Failed, or Unknown).  # noqa: E501

        :return: The phase of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this IoXK8sClusterV1beta1MachineDeploymentStatus.

        Phase represents the current phase of a MachineDeployment (ScalingUp, ScalingDown, Running, Failed, or Unknown).  # noqa: E501

        :param phase: The phase of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501
        :type: str
        """

        self._phase = phase

    @property
    def ready_replicas(self):
        """Gets the ready_replicas of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501

        Total number of ready machines targeted by this deployment.  # noqa: E501

        :return: The ready_replicas of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501
        :rtype: int
        """
        return self._ready_replicas

    @ready_replicas.setter
    def ready_replicas(self, ready_replicas):
        """Sets the ready_replicas of this IoXK8sClusterV1beta1MachineDeploymentStatus.

        Total number of ready machines targeted by this deployment.  # noqa: E501

        :param ready_replicas: The ready_replicas of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501
        :type: int
        """

        self._ready_replicas = ready_replicas

    @property
    def replicas(self):
        """Gets the replicas of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501

        Total number of non-terminated machines targeted by this deployment (their labels match the selector).  # noqa: E501

        :return: The replicas of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this IoXK8sClusterV1beta1MachineDeploymentStatus.

        Total number of non-terminated machines targeted by this deployment (their labels match the selector).  # noqa: E501

        :param replicas: The replicas of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def selector(self):
        """Gets the selector of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501

        Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors  # noqa: E501

        :return: The selector of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this IoXK8sClusterV1beta1MachineDeploymentStatus.

        Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors  # noqa: E501

        :param selector: The selector of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501
        :type: str
        """

        self._selector = selector

    @property
    def unavailable_replicas(self):
        """Gets the unavailable_replicas of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501

        Total number of unavailable machines targeted by this deployment. This is the total number of machines that are still required for the deployment to have 100% available capacity. They may either be machines that are running but not yet available or machines that still have not been created.  # noqa: E501

        :return: The unavailable_replicas of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501
        :rtype: int
        """
        return self._unavailable_replicas

    @unavailable_replicas.setter
    def unavailable_replicas(self, unavailable_replicas):
        """Sets the unavailable_replicas of this IoXK8sClusterV1beta1MachineDeploymentStatus.

        Total number of unavailable machines targeted by this deployment. This is the total number of machines that are still required for the deployment to have 100% available capacity. They may either be machines that are running but not yet available or machines that still have not been created.  # noqa: E501

        :param unavailable_replicas: The unavailable_replicas of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501
        :type: int
        """

        self._unavailable_replicas = unavailable_replicas

    @property
    def updated_replicas(self):
        """Gets the updated_replicas of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501

        Total number of non-terminated machines targeted by this deployment that have the desired template spec.  # noqa: E501

        :return: The updated_replicas of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501
        :rtype: int
        """
        return self._updated_replicas

    @updated_replicas.setter
    def updated_replicas(self, updated_replicas):
        """Sets the updated_replicas of this IoXK8sClusterV1beta1MachineDeploymentStatus.

        Total number of non-terminated machines targeted by this deployment that have the desired template spec.  # noqa: E501

        :param updated_replicas: The updated_replicas of this IoXK8sClusterV1beta1MachineDeploymentStatus.  # noqa: E501
        :type: int
        """

        self._updated_replicas = updated_replicas

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterV1beta1MachineDeploymentStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterV1beta1MachineDeploymentStatus):
            return True

        return self.to_dict() != other.to_dict()
