# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterV1alpha4MachineSetStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'available_replicas': 'int',
        'conditions': 'list[IoXK8sClusterAddonsV1alpha3ClusterResourceSetStatusConditions]',
        'failure_message': 'str',
        'failure_reason': 'str',
        'fully_labeled_replicas': 'int',
        'observed_generation': 'int',
        'ready_replicas': 'int',
        'replicas': 'int',
        'selector': 'str'
    }

    attribute_map = {
        'available_replicas': 'availableReplicas',
        'conditions': 'conditions',
        'failure_message': 'failureMessage',
        'failure_reason': 'failureReason',
        'fully_labeled_replicas': 'fullyLabeledReplicas',
        'observed_generation': 'observedGeneration',
        'ready_replicas': 'readyReplicas',
        'replicas': 'replicas',
        'selector': 'selector'
    }

    def __init__(self, available_replicas=None, conditions=None, failure_message=None, failure_reason=None, fully_labeled_replicas=None, observed_generation=None, ready_replicas=None, replicas=None, selector=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterV1alpha4MachineSetStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._available_replicas = None
        self._conditions = None
        self._failure_message = None
        self._failure_reason = None
        self._fully_labeled_replicas = None
        self._observed_generation = None
        self._ready_replicas = None
        self._replicas = None
        self._selector = None
        self.discriminator = None

        if available_replicas is not None:
            self.available_replicas = available_replicas
        if conditions is not None:
            self.conditions = conditions
        if failure_message is not None:
            self.failure_message = failure_message
        if failure_reason is not None:
            self.failure_reason = failure_reason
        if fully_labeled_replicas is not None:
            self.fully_labeled_replicas = fully_labeled_replicas
        if observed_generation is not None:
            self.observed_generation = observed_generation
        if ready_replicas is not None:
            self.ready_replicas = ready_replicas
        if replicas is not None:
            self.replicas = replicas
        if selector is not None:
            self.selector = selector

    @property
    def available_replicas(self):
        """Gets the available_replicas of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501

        The number of available replicas (ready for at least minReadySeconds) for this MachineSet.  # noqa: E501

        :return: The available_replicas of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501
        :rtype: int
        """
        return self._available_replicas

    @available_replicas.setter
    def available_replicas(self, available_replicas):
        """Sets the available_replicas of this IoXK8sClusterV1alpha4MachineSetStatus.

        The number of available replicas (ready for at least minReadySeconds) for this MachineSet.  # noqa: E501

        :param available_replicas: The available_replicas of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501
        :type: int
        """

        self._available_replicas = available_replicas

    @property
    def conditions(self):
        """Gets the conditions of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501

        Conditions defines current service state of the MachineSet.  # noqa: E501

        :return: The conditions of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501
        :rtype: list[IoXK8sClusterAddonsV1alpha3ClusterResourceSetStatusConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this IoXK8sClusterV1alpha4MachineSetStatus.

        Conditions defines current service state of the MachineSet.  # noqa: E501

        :param conditions: The conditions of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501
        :type: list[IoXK8sClusterAddonsV1alpha3ClusterResourceSetStatusConditions]
        """

        self._conditions = conditions

    @property
    def failure_message(self):
        """Gets the failure_message of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501


        :return: The failure_message of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501
        :rtype: str
        """
        return self._failure_message

    @failure_message.setter
    def failure_message(self, failure_message):
        """Sets the failure_message of this IoXK8sClusterV1alpha4MachineSetStatus.


        :param failure_message: The failure_message of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501
        :type: str
        """

        self._failure_message = failure_message

    @property
    def failure_reason(self):
        """Gets the failure_reason of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501

        In the event that there is a terminal problem reconciling the replicas, both FailureReason and FailureMessage will be set. FailureReason will be populated with a succinct value suitable for machine interpretation, while FailureMessage will contain a more verbose string suitable for logging and human consumption.   These fields should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the MachineTemplate's spec or the configuration of the machine controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the machine controller, or the responsible machine controller itself being critically misconfigured.   Any transient errors that occur during the reconciliation of Machines can be added as events to the MachineSet object and/or logged in the controller's output.  # noqa: E501

        :return: The failure_reason of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this IoXK8sClusterV1alpha4MachineSetStatus.

        In the event that there is a terminal problem reconciling the replicas, both FailureReason and FailureMessage will be set. FailureReason will be populated with a succinct value suitable for machine interpretation, while FailureMessage will contain a more verbose string suitable for logging and human consumption.   These fields should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the MachineTemplate's spec or the configuration of the machine controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the machine controller, or the responsible machine controller itself being critically misconfigured.   Any transient errors that occur during the reconciliation of Machines can be added as events to the MachineSet object and/or logged in the controller's output.  # noqa: E501

        :param failure_reason: The failure_reason of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501
        :type: str
        """

        self._failure_reason = failure_reason

    @property
    def fully_labeled_replicas(self):
        """Gets the fully_labeled_replicas of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501

        The number of replicas that have labels matching the labels of the machine template of the MachineSet.  # noqa: E501

        :return: The fully_labeled_replicas of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501
        :rtype: int
        """
        return self._fully_labeled_replicas

    @fully_labeled_replicas.setter
    def fully_labeled_replicas(self, fully_labeled_replicas):
        """Sets the fully_labeled_replicas of this IoXK8sClusterV1alpha4MachineSetStatus.

        The number of replicas that have labels matching the labels of the machine template of the MachineSet.  # noqa: E501

        :param fully_labeled_replicas: The fully_labeled_replicas of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501
        :type: int
        """

        self._fully_labeled_replicas = fully_labeled_replicas

    @property
    def observed_generation(self):
        """Gets the observed_generation of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501

        ObservedGeneration reflects the generation of the most recently observed MachineSet.  # noqa: E501

        :return: The observed_generation of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501
        :rtype: int
        """
        return self._observed_generation

    @observed_generation.setter
    def observed_generation(self, observed_generation):
        """Sets the observed_generation of this IoXK8sClusterV1alpha4MachineSetStatus.

        ObservedGeneration reflects the generation of the most recently observed MachineSet.  # noqa: E501

        :param observed_generation: The observed_generation of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501
        :type: int
        """

        self._observed_generation = observed_generation

    @property
    def ready_replicas(self):
        """Gets the ready_replicas of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501

        The number of ready replicas for this MachineSet. A machine is considered ready when the node has been created and is \"Ready\".  # noqa: E501

        :return: The ready_replicas of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501
        :rtype: int
        """
        return self._ready_replicas

    @ready_replicas.setter
    def ready_replicas(self, ready_replicas):
        """Sets the ready_replicas of this IoXK8sClusterV1alpha4MachineSetStatus.

        The number of ready replicas for this MachineSet. A machine is considered ready when the node has been created and is \"Ready\".  # noqa: E501

        :param ready_replicas: The ready_replicas of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501
        :type: int
        """

        self._ready_replicas = ready_replicas

    @property
    def replicas(self):
        """Gets the replicas of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501

        Replicas is the most recently observed number of replicas.  # noqa: E501

        :return: The replicas of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this IoXK8sClusterV1alpha4MachineSetStatus.

        Replicas is the most recently observed number of replicas.  # noqa: E501

        :param replicas: The replicas of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def selector(self):
        """Gets the selector of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501

        Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors  # noqa: E501

        :return: The selector of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this IoXK8sClusterV1alpha4MachineSetStatus.

        Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors  # noqa: E501

        :param selector: The selector of this IoXK8sClusterV1alpha4MachineSetStatus.  # noqa: E501
        :type: str
        """

        self._selector = selector

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterV1alpha4MachineSetStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterV1alpha4MachineSetStatus):
            return True

        return self.to_dict() != other.to_dict()
