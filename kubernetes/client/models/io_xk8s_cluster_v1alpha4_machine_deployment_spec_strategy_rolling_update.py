# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterV1alpha4MachineDeploymentSpecStrategyRollingUpdate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'delete_policy': 'str',
        'max_surge': 'object',
        'max_unavailable': 'object'
    }

    attribute_map = {
        'delete_policy': 'deletePolicy',
        'max_surge': 'maxSurge',
        'max_unavailable': 'maxUnavailable'
    }

    def __init__(self, delete_policy=None, max_surge=None, max_unavailable=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterV1alpha4MachineDeploymentSpecStrategyRollingUpdate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._delete_policy = None
        self._max_surge = None
        self._max_unavailable = None
        self.discriminator = None

        if delete_policy is not None:
            self.delete_policy = delete_policy
        if max_surge is not None:
            self.max_surge = max_surge
        if max_unavailable is not None:
            self.max_unavailable = max_unavailable

    @property
    def delete_policy(self):
        """Gets the delete_policy of this IoXK8sClusterV1alpha4MachineDeploymentSpecStrategyRollingUpdate.  # noqa: E501

        DeletePolicy defines the policy used by the MachineDeployment to identify nodes to delete when downscaling. Valid values are \"Random, \"Newest\", \"Oldest\" When no value is supplied, the default DeletePolicy of MachineSet is used  # noqa: E501

        :return: The delete_policy of this IoXK8sClusterV1alpha4MachineDeploymentSpecStrategyRollingUpdate.  # noqa: E501
        :rtype: str
        """
        return self._delete_policy

    @delete_policy.setter
    def delete_policy(self, delete_policy):
        """Sets the delete_policy of this IoXK8sClusterV1alpha4MachineDeploymentSpecStrategyRollingUpdate.

        DeletePolicy defines the policy used by the MachineDeployment to identify nodes to delete when downscaling. Valid values are \"Random, \"Newest\", \"Oldest\" When no value is supplied, the default DeletePolicy of MachineSet is used  # noqa: E501

        :param delete_policy: The delete_policy of this IoXK8sClusterV1alpha4MachineDeploymentSpecStrategyRollingUpdate.  # noqa: E501
        :type: str
        """
        allowed_values = ["Random", "Newest", "Oldest"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and delete_policy not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `delete_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(delete_policy, allowed_values)
            )

        self._delete_policy = delete_policy

    @property
    def max_surge(self):
        """Gets the max_surge of this IoXK8sClusterV1alpha4MachineDeploymentSpecStrategyRollingUpdate.  # noqa: E501

        The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.  # noqa: E501

        :return: The max_surge of this IoXK8sClusterV1alpha4MachineDeploymentSpecStrategyRollingUpdate.  # noqa: E501
        :rtype: object
        """
        return self._max_surge

    @max_surge.setter
    def max_surge(self, max_surge):
        """Sets the max_surge of this IoXK8sClusterV1alpha4MachineDeploymentSpecStrategyRollingUpdate.

        The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.  # noqa: E501

        :param max_surge: The max_surge of this IoXK8sClusterV1alpha4MachineDeploymentSpecStrategyRollingUpdate.  # noqa: E501
        :type: object
        """

        self._max_surge = max_surge

    @property
    def max_unavailable(self):
        """Gets the max_unavailable of this IoXK8sClusterV1alpha4MachineDeploymentSpecStrategyRollingUpdate.  # noqa: E501

        The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.  # noqa: E501

        :return: The max_unavailable of this IoXK8sClusterV1alpha4MachineDeploymentSpecStrategyRollingUpdate.  # noqa: E501
        :rtype: object
        """
        return self._max_unavailable

    @max_unavailable.setter
    def max_unavailable(self, max_unavailable):
        """Sets the max_unavailable of this IoXK8sClusterV1alpha4MachineDeploymentSpecStrategyRollingUpdate.

        The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.  # noqa: E501

        :param max_unavailable: The max_unavailable of this IoXK8sClusterV1alpha4MachineDeploymentSpecStrategyRollingUpdate.  # noqa: E501
        :type: object
        """

        self._max_unavailable = max_unavailable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterV1alpha4MachineDeploymentSpecStrategyRollingUpdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterV1alpha4MachineDeploymentSpecStrategyRollingUpdate):
            return True

        return self.to_dict() != other.to_dict()
