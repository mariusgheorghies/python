# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class AwsK8sServicesEc2V1alpha1NetworkACLSpecAssociations(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'network_acl_association_id': 'str',
        'network_aclid': 'str',
        'subnet_id': 'str',
        'subnet_ref': 'AwsK8sServicesEc2V1alpha1NetworkACLSpecSubnetRef'
    }

    attribute_map = {
        'network_acl_association_id': 'networkACLAssociationID',
        'network_aclid': 'networkACLID',
        'subnet_id': 'subnetID',
        'subnet_ref': 'subnetRef'
    }

    def __init__(self, network_acl_association_id=None, network_aclid=None, subnet_id=None, subnet_ref=None, local_vars_configuration=None):  # noqa: E501
        """AwsK8sServicesEc2V1alpha1NetworkACLSpecAssociations - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._network_acl_association_id = None
        self._network_aclid = None
        self._subnet_id = None
        self._subnet_ref = None
        self.discriminator = None

        if network_acl_association_id is not None:
            self.network_acl_association_id = network_acl_association_id
        if network_aclid is not None:
            self.network_aclid = network_aclid
        if subnet_id is not None:
            self.subnet_id = subnet_id
        if subnet_ref is not None:
            self.subnet_ref = subnet_ref

    @property
    def network_acl_association_id(self):
        """Gets the network_acl_association_id of this AwsK8sServicesEc2V1alpha1NetworkACLSpecAssociations.  # noqa: E501


        :return: The network_acl_association_id of this AwsK8sServicesEc2V1alpha1NetworkACLSpecAssociations.  # noqa: E501
        :rtype: str
        """
        return self._network_acl_association_id

    @network_acl_association_id.setter
    def network_acl_association_id(self, network_acl_association_id):
        """Sets the network_acl_association_id of this AwsK8sServicesEc2V1alpha1NetworkACLSpecAssociations.


        :param network_acl_association_id: The network_acl_association_id of this AwsK8sServicesEc2V1alpha1NetworkACLSpecAssociations.  # noqa: E501
        :type: str
        """

        self._network_acl_association_id = network_acl_association_id

    @property
    def network_aclid(self):
        """Gets the network_aclid of this AwsK8sServicesEc2V1alpha1NetworkACLSpecAssociations.  # noqa: E501


        :return: The network_aclid of this AwsK8sServicesEc2V1alpha1NetworkACLSpecAssociations.  # noqa: E501
        :rtype: str
        """
        return self._network_aclid

    @network_aclid.setter
    def network_aclid(self, network_aclid):
        """Sets the network_aclid of this AwsK8sServicesEc2V1alpha1NetworkACLSpecAssociations.


        :param network_aclid: The network_aclid of this AwsK8sServicesEc2V1alpha1NetworkACLSpecAssociations.  # noqa: E501
        :type: str
        """

        self._network_aclid = network_aclid

    @property
    def subnet_id(self):
        """Gets the subnet_id of this AwsK8sServicesEc2V1alpha1NetworkACLSpecAssociations.  # noqa: E501


        :return: The subnet_id of this AwsK8sServicesEc2V1alpha1NetworkACLSpecAssociations.  # noqa: E501
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this AwsK8sServicesEc2V1alpha1NetworkACLSpecAssociations.


        :param subnet_id: The subnet_id of this AwsK8sServicesEc2V1alpha1NetworkACLSpecAssociations.  # noqa: E501
        :type: str
        """

        self._subnet_id = subnet_id

    @property
    def subnet_ref(self):
        """Gets the subnet_ref of this AwsK8sServicesEc2V1alpha1NetworkACLSpecAssociations.  # noqa: E501


        :return: The subnet_ref of this AwsK8sServicesEc2V1alpha1NetworkACLSpecAssociations.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1NetworkACLSpecSubnetRef
        """
        return self._subnet_ref

    @subnet_ref.setter
    def subnet_ref(self, subnet_ref):
        """Sets the subnet_ref of this AwsK8sServicesEc2V1alpha1NetworkACLSpecAssociations.


        :param subnet_ref: The subnet_ref of this AwsK8sServicesEc2V1alpha1NetworkACLSpecAssociations.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1NetworkACLSpecSubnetRef
        """

        self._subnet_ref = subnet_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1NetworkACLSpecAssociations):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1NetworkACLSpecAssociations):
            return True

        return self.to_dict() != other.to_dict()
