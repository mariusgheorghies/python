# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data': 'dict(str, str)',
        'engine_version': 'str',
        'metadata': 'IoExternalSecretsV1alpha1ExternalSecretSpecTargetTemplateMetadata',
        'template_from': 'list[IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateTemplateFrom]',
        'type': 'str'
    }

    attribute_map = {
        'data': 'data',
        'engine_version': 'engineVersion',
        'metadata': 'metadata',
        'template_from': 'templateFrom',
        'type': 'type'
    }

    def __init__(self, data=None, engine_version=None, metadata=None, template_from=None, type=None, local_vars_configuration=None):  # noqa: E501
        """IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._data = None
        self._engine_version = None
        self._metadata = None
        self._template_from = None
        self._type = None
        self.discriminator = None

        if data is not None:
            self.data = data
        if engine_version is not None:
            self.engine_version = engine_version
        if metadata is not None:
            self.metadata = metadata
        if template_from is not None:
            self.template_from = template_from
        if type is not None:
            self.type = type

    @property
    def data(self):
        """Gets the data of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplate.  # noqa: E501


        :return: The data of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplate.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplate.


        :param data: The data of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplate.  # noqa: E501
        :type: dict(str, str)
        """

        self._data = data

    @property
    def engine_version(self):
        """Gets the engine_version of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplate.  # noqa: E501


        :return: The engine_version of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplate.  # noqa: E501
        :rtype: str
        """
        return self._engine_version

    @engine_version.setter
    def engine_version(self, engine_version):
        """Sets the engine_version of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplate.


        :param engine_version: The engine_version of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplate.  # noqa: E501
        :type: str
        """

        self._engine_version = engine_version

    @property
    def metadata(self):
        """Gets the metadata of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplate.  # noqa: E501


        :return: The metadata of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplate.  # noqa: E501
        :rtype: IoExternalSecretsV1alpha1ExternalSecretSpecTargetTemplateMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplate.


        :param metadata: The metadata of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplate.  # noqa: E501
        :type: IoExternalSecretsV1alpha1ExternalSecretSpecTargetTemplateMetadata
        """

        self._metadata = metadata

    @property
    def template_from(self):
        """Gets the template_from of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplate.  # noqa: E501


        :return: The template_from of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplate.  # noqa: E501
        :rtype: list[IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateTemplateFrom]
        """
        return self._template_from

    @template_from.setter
    def template_from(self, template_from):
        """Sets the template_from of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplate.


        :param template_from: The template_from of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplate.  # noqa: E501
        :type: list[IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplateTemplateFrom]
        """

        self._template_from = template_from

    @property
    def type(self):
        """Gets the type of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplate.  # noqa: E501


        :return: The type of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplate.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplate.


        :param type: The type of this IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplate.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTargetTemplate):
            return True

        return self.to_dict() != other.to_dict()
