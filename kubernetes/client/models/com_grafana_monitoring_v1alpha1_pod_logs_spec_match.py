# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComGrafanaMonitoringV1alpha1PodLogsSpecMatch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'action': 'str',
        'drop_counter_reason': 'str',
        'pipeline_name': 'str',
        'selector': 'str',
        'stages': 'str'
    }

    attribute_map = {
        'action': 'action',
        'drop_counter_reason': 'dropCounterReason',
        'pipeline_name': 'pipelineName',
        'selector': 'selector',
        'stages': 'stages'
    }

    def __init__(self, action=None, drop_counter_reason=None, pipeline_name=None, selector=None, stages=None, local_vars_configuration=None):  # noqa: E501
        """ComGrafanaMonitoringV1alpha1PodLogsSpecMatch - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._action = None
        self._drop_counter_reason = None
        self._pipeline_name = None
        self._selector = None
        self._stages = None
        self.discriminator = None

        if action is not None:
            self.action = action
        if drop_counter_reason is not None:
            self.drop_counter_reason = drop_counter_reason
        if pipeline_name is not None:
            self.pipeline_name = pipeline_name
        self.selector = selector
        if stages is not None:
            self.stages = stages

    @property
    def action(self):
        """Gets the action of this ComGrafanaMonitoringV1alpha1PodLogsSpecMatch.  # noqa: E501

        Determines what action is taken when the selector matches the log line. Can be keep or drop. Defaults to keep. When set to drop, entries are dropped and no later metrics are recorded. Stages must be empty when dropping metrics.  # noqa: E501

        :return: The action of this ComGrafanaMonitoringV1alpha1PodLogsSpecMatch.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ComGrafanaMonitoringV1alpha1PodLogsSpecMatch.

        Determines what action is taken when the selector matches the log line. Can be keep or drop. Defaults to keep. When set to drop, entries are dropped and no later metrics are recorded. Stages must be empty when dropping metrics.  # noqa: E501

        :param action: The action of this ComGrafanaMonitoringV1alpha1PodLogsSpecMatch.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def drop_counter_reason(self):
        """Gets the drop_counter_reason of this ComGrafanaMonitoringV1alpha1PodLogsSpecMatch.  # noqa: E501

        Every time a log line is dropped, the metric logentry_dropped_lines_total is incremented. A \"reason\" label is added, and can be customized by providing a custom value here. Defaults to \"match_stage.\"  # noqa: E501

        :return: The drop_counter_reason of this ComGrafanaMonitoringV1alpha1PodLogsSpecMatch.  # noqa: E501
        :rtype: str
        """
        return self._drop_counter_reason

    @drop_counter_reason.setter
    def drop_counter_reason(self, drop_counter_reason):
        """Sets the drop_counter_reason of this ComGrafanaMonitoringV1alpha1PodLogsSpecMatch.

        Every time a log line is dropped, the metric logentry_dropped_lines_total is incremented. A \"reason\" label is added, and can be customized by providing a custom value here. Defaults to \"match_stage.\"  # noqa: E501

        :param drop_counter_reason: The drop_counter_reason of this ComGrafanaMonitoringV1alpha1PodLogsSpecMatch.  # noqa: E501
        :type: str
        """

        self._drop_counter_reason = drop_counter_reason

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this ComGrafanaMonitoringV1alpha1PodLogsSpecMatch.  # noqa: E501

        Names the pipeline. When defined, creates an additional label in the pipeline_duration_seconds histogram, where the value is concatenated with job_name using an underscore.  # noqa: E501

        :return: The pipeline_name of this ComGrafanaMonitoringV1alpha1PodLogsSpecMatch.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this ComGrafanaMonitoringV1alpha1PodLogsSpecMatch.

        Names the pipeline. When defined, creates an additional label in the pipeline_duration_seconds histogram, where the value is concatenated with job_name using an underscore.  # noqa: E501

        :param pipeline_name: The pipeline_name of this ComGrafanaMonitoringV1alpha1PodLogsSpecMatch.  # noqa: E501
        :type: str
        """

        self._pipeline_name = pipeline_name

    @property
    def selector(self):
        """Gets the selector of this ComGrafanaMonitoringV1alpha1PodLogsSpecMatch.  # noqa: E501

        LogQL stream selector and filter expressions. Required.  # noqa: E501

        :return: The selector of this ComGrafanaMonitoringV1alpha1PodLogsSpecMatch.  # noqa: E501
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this ComGrafanaMonitoringV1alpha1PodLogsSpecMatch.

        LogQL stream selector and filter expressions. Required.  # noqa: E501

        :param selector: The selector of this ComGrafanaMonitoringV1alpha1PodLogsSpecMatch.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and selector is None:  # noqa: E501
            raise ValueError("Invalid value for `selector`, must not be `None`")  # noqa: E501

        self._selector = selector

    @property
    def stages(self):
        """Gets the stages of this ComGrafanaMonitoringV1alpha1PodLogsSpecMatch.  # noqa: E501

        Nested set of pipeline stages to execute when action is keep and the log line matches selector.   An example value for stages may be:   stages: | - json: {} - labelAllow: [foo, bar]   Note that stages is a string because SIG API Machinery does not support recursive types, and so it cannot be validated for correctness. Be careful not to mistype anything.  # noqa: E501

        :return: The stages of this ComGrafanaMonitoringV1alpha1PodLogsSpecMatch.  # noqa: E501
        :rtype: str
        """
        return self._stages

    @stages.setter
    def stages(self, stages):
        """Sets the stages of this ComGrafanaMonitoringV1alpha1PodLogsSpecMatch.

        Nested set of pipeline stages to execute when action is keep and the log line matches selector.   An example value for stages may be:   stages: | - json: {} - labelAllow: [foo, bar]   Note that stages is a string because SIG API Machinery does not support recursive types, and so it cannot be validated for correctness. Be careful not to mistype anything.  # noqa: E501

        :param stages: The stages of this ComGrafanaMonitoringV1alpha1PodLogsSpecMatch.  # noqa: E501
        :type: str
        """

        self._stages = stages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1PodLogsSpecMatch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1PodLogsSpecMatch):
            return True

        return self.to_dict() != other.to_dict()
