# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoRyanorthK8sV1beta1ScheduledVolumeSnapshotSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'persistent_volume_claim_name': 'str',
        'snapshot_class_name': 'str',
        'snapshot_frequency': 'object',
        'snapshot_labels': 'dict(str, str)',
        'snapshot_retention': 'object'
    }

    attribute_map = {
        'persistent_volume_claim_name': 'persistentVolumeClaimName',
        'snapshot_class_name': 'snapshotClassName',
        'snapshot_frequency': 'snapshotFrequency',
        'snapshot_labels': 'snapshotLabels',
        'snapshot_retention': 'snapshotRetention'
    }

    def __init__(self, persistent_volume_claim_name=None, snapshot_class_name=None, snapshot_frequency=None, snapshot_labels=None, snapshot_retention=None, local_vars_configuration=None):  # noqa: E501
        """IoRyanorthK8sV1beta1ScheduledVolumeSnapshotSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._persistent_volume_claim_name = None
        self._snapshot_class_name = None
        self._snapshot_frequency = None
        self._snapshot_labels = None
        self._snapshot_retention = None
        self.discriminator = None

        self.persistent_volume_claim_name = persistent_volume_claim_name
        self.snapshot_class_name = snapshot_class_name
        self.snapshot_frequency = snapshot_frequency
        if snapshot_labels is not None:
            self.snapshot_labels = snapshot_labels
        self.snapshot_retention = snapshot_retention

    @property
    def persistent_volume_claim_name(self):
        """Gets the persistent_volume_claim_name of this IoRyanorthK8sV1beta1ScheduledVolumeSnapshotSpec.  # noqa: E501

        The name of the persistent volume claim snapshots should be taken against.  # noqa: E501

        :return: The persistent_volume_claim_name of this IoRyanorthK8sV1beta1ScheduledVolumeSnapshotSpec.  # noqa: E501
        :rtype: str
        """
        return self._persistent_volume_claim_name

    @persistent_volume_claim_name.setter
    def persistent_volume_claim_name(self, persistent_volume_claim_name):
        """Sets the persistent_volume_claim_name of this IoRyanorthK8sV1beta1ScheduledVolumeSnapshotSpec.

        The name of the persistent volume claim snapshots should be taken against.  # noqa: E501

        :param persistent_volume_claim_name: The persistent_volume_claim_name of this IoRyanorthK8sV1beta1ScheduledVolumeSnapshotSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and persistent_volume_claim_name is None:  # noqa: E501
            raise ValueError("Invalid value for `persistent_volume_claim_name`, must not be `None`")  # noqa: E501

        self._persistent_volume_claim_name = persistent_volume_claim_name

    @property
    def snapshot_class_name(self):
        """Gets the snapshot_class_name of this IoRyanorthK8sV1beta1ScheduledVolumeSnapshotSpec.  # noqa: E501

        The name of the VolumeSnapshotClass to be used for generating the snapshot.  # noqa: E501

        :return: The snapshot_class_name of this IoRyanorthK8sV1beta1ScheduledVolumeSnapshotSpec.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_class_name

    @snapshot_class_name.setter
    def snapshot_class_name(self, snapshot_class_name):
        """Sets the snapshot_class_name of this IoRyanorthK8sV1beta1ScheduledVolumeSnapshotSpec.

        The name of the VolumeSnapshotClass to be used for generating the snapshot.  # noqa: E501

        :param snapshot_class_name: The snapshot_class_name of this IoRyanorthK8sV1beta1ScheduledVolumeSnapshotSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and snapshot_class_name is None:  # noqa: E501
            raise ValueError("Invalid value for `snapshot_class_name`, must not be `None`")  # noqa: E501

        self._snapshot_class_name = snapshot_class_name

    @property
    def snapshot_frequency(self):
        """Gets the snapshot_frequency of this IoRyanorthK8sV1beta1ScheduledVolumeSnapshotSpec.  # noqa: E501

        How often a snapshot should be created against the persistent volume. Value can be provided as a string (e.g. 30m, 5h, 4d, 1w, etc.) or an integer (interpretted in hours).   # noqa: E501

        :return: The snapshot_frequency of this IoRyanorthK8sV1beta1ScheduledVolumeSnapshotSpec.  # noqa: E501
        :rtype: object
        """
        return self._snapshot_frequency

    @snapshot_frequency.setter
    def snapshot_frequency(self, snapshot_frequency):
        """Sets the snapshot_frequency of this IoRyanorthK8sV1beta1ScheduledVolumeSnapshotSpec.

        How often a snapshot should be created against the persistent volume. Value can be provided as a string (e.g. 30m, 5h, 4d, 1w, etc.) or an integer (interpretted in hours).   # noqa: E501

        :param snapshot_frequency: The snapshot_frequency of this IoRyanorthK8sV1beta1ScheduledVolumeSnapshotSpec.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and snapshot_frequency is None:  # noqa: E501
            raise ValueError("Invalid value for `snapshot_frequency`, must not be `None`")  # noqa: E501

        self._snapshot_frequency = snapshot_frequency

    @property
    def snapshot_labels(self):
        """Gets the snapshot_labels of this IoRyanorthK8sV1beta1ScheduledVolumeSnapshotSpec.  # noqa: E501

        Labels to include on the VolumeSnapshot objects.  # noqa: E501

        :return: The snapshot_labels of this IoRyanorthK8sV1beta1ScheduledVolumeSnapshotSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._snapshot_labels

    @snapshot_labels.setter
    def snapshot_labels(self, snapshot_labels):
        """Sets the snapshot_labels of this IoRyanorthK8sV1beta1ScheduledVolumeSnapshotSpec.

        Labels to include on the VolumeSnapshot objects.  # noqa: E501

        :param snapshot_labels: The snapshot_labels of this IoRyanorthK8sV1beta1ScheduledVolumeSnapshotSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._snapshot_labels = snapshot_labels

    @property
    def snapshot_retention(self):
        """Gets the snapshot_retention of this IoRyanorthK8sV1beta1ScheduledVolumeSnapshotSpec.  # noqa: E501

        How long a snapshot should be retained. Value can be provided as a string (e.g. 30m, 5h, 4d, 1w, etc.) or an integer (interpretted in hours). Negative values indicate indefinite retention.   # noqa: E501

        :return: The snapshot_retention of this IoRyanorthK8sV1beta1ScheduledVolumeSnapshotSpec.  # noqa: E501
        :rtype: object
        """
        return self._snapshot_retention

    @snapshot_retention.setter
    def snapshot_retention(self, snapshot_retention):
        """Sets the snapshot_retention of this IoRyanorthK8sV1beta1ScheduledVolumeSnapshotSpec.

        How long a snapshot should be retained. Value can be provided as a string (e.g. 30m, 5h, 4d, 1w, etc.) or an integer (interpretted in hours). Negative values indicate indefinite retention.   # noqa: E501

        :param snapshot_retention: The snapshot_retention of this IoRyanorthK8sV1beta1ScheduledVolumeSnapshotSpec.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and snapshot_retention is None:  # noqa: E501
            raise ValueError("Invalid value for `snapshot_retention`, must not be `None`")  # noqa: E501

        self._snapshot_retention = snapshot_retention

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoRyanorthK8sV1beta1ScheduledVolumeSnapshotSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoRyanorthK8sV1beta1ScheduledVolumeSnapshotSpec):
            return True

        return self.to_dict() != other.to_dict()
