# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class OrgProjectcalicoCrdV1IPAMHandleSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'block': 'dict(str, int)',
        'deleted': 'bool',
        'handle_id': 'str'
    }

    attribute_map = {
        'block': 'block',
        'deleted': 'deleted',
        'handle_id': 'handleID'
    }

    def __init__(self, block=None, deleted=None, handle_id=None, local_vars_configuration=None):  # noqa: E501
        """OrgProjectcalicoCrdV1IPAMHandleSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._block = None
        self._deleted = None
        self._handle_id = None
        self.discriminator = None

        self.block = block
        if deleted is not None:
            self.deleted = deleted
        self.handle_id = handle_id

    @property
    def block(self):
        """Gets the block of this OrgProjectcalicoCrdV1IPAMHandleSpec.  # noqa: E501


        :return: The block of this OrgProjectcalicoCrdV1IPAMHandleSpec.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this OrgProjectcalicoCrdV1IPAMHandleSpec.


        :param block: The block of this OrgProjectcalicoCrdV1IPAMHandleSpec.  # noqa: E501
        :type: dict(str, int)
        """
        if self.local_vars_configuration.client_side_validation and block is None:  # noqa: E501
            raise ValueError("Invalid value for `block`, must not be `None`")  # noqa: E501

        self._block = block

    @property
    def deleted(self):
        """Gets the deleted of this OrgProjectcalicoCrdV1IPAMHandleSpec.  # noqa: E501


        :return: The deleted of this OrgProjectcalicoCrdV1IPAMHandleSpec.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this OrgProjectcalicoCrdV1IPAMHandleSpec.


        :param deleted: The deleted of this OrgProjectcalicoCrdV1IPAMHandleSpec.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def handle_id(self):
        """Gets the handle_id of this OrgProjectcalicoCrdV1IPAMHandleSpec.  # noqa: E501


        :return: The handle_id of this OrgProjectcalicoCrdV1IPAMHandleSpec.  # noqa: E501
        :rtype: str
        """
        return self._handle_id

    @handle_id.setter
    def handle_id(self, handle_id):
        """Sets the handle_id of this OrgProjectcalicoCrdV1IPAMHandleSpec.


        :param handle_id: The handle_id of this OrgProjectcalicoCrdV1IPAMHandleSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and handle_id is None:  # noqa: E501
            raise ValueError("Invalid value for `handle_id`, must not be `None`")  # noqa: E501

        self._handle_id = handle_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgProjectcalicoCrdV1IPAMHandleSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrgProjectcalicoCrdV1IPAMHandleSpec):
            return True

        return self.to_dict() != other.to_dict()
