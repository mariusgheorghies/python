# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoExternalSecretsV1alpha1PushSecretSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data': 'list[IoExternalSecretsV1alpha1PushSecretSpecData]',
        'deletion_policy': 'str',
        'refresh_interval': 'str',
        'secret_store_refs': 'list[IoExternalSecretsV1alpha1PushSecretSpecSecretStoreRefs]',
        'selector': 'IoExternalSecretsV1alpha1PushSecretSpecSelector'
    }

    attribute_map = {
        'data': 'data',
        'deletion_policy': 'deletionPolicy',
        'refresh_interval': 'refreshInterval',
        'secret_store_refs': 'secretStoreRefs',
        'selector': 'selector'
    }

    def __init__(self, data=None, deletion_policy=None, refresh_interval=None, secret_store_refs=None, selector=None, local_vars_configuration=None):  # noqa: E501
        """IoExternalSecretsV1alpha1PushSecretSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._data = None
        self._deletion_policy = None
        self._refresh_interval = None
        self._secret_store_refs = None
        self._selector = None
        self.discriminator = None

        if data is not None:
            self.data = data
        if deletion_policy is not None:
            self.deletion_policy = deletion_policy
        if refresh_interval is not None:
            self.refresh_interval = refresh_interval
        self.secret_store_refs = secret_store_refs
        self.selector = selector

    @property
    def data(self):
        """Gets the data of this IoExternalSecretsV1alpha1PushSecretSpec.  # noqa: E501

        Secret Data that should be pushed to providers  # noqa: E501

        :return: The data of this IoExternalSecretsV1alpha1PushSecretSpec.  # noqa: E501
        :rtype: list[IoExternalSecretsV1alpha1PushSecretSpecData]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this IoExternalSecretsV1alpha1PushSecretSpec.

        Secret Data that should be pushed to providers  # noqa: E501

        :param data: The data of this IoExternalSecretsV1alpha1PushSecretSpec.  # noqa: E501
        :type: list[IoExternalSecretsV1alpha1PushSecretSpecData]
        """

        self._data = data

    @property
    def deletion_policy(self):
        """Gets the deletion_policy of this IoExternalSecretsV1alpha1PushSecretSpec.  # noqa: E501

        Deletion Policy to handle Secrets in the provider. Possible Values: \"Delete/None\". Defaults to \"None\".  # noqa: E501

        :return: The deletion_policy of this IoExternalSecretsV1alpha1PushSecretSpec.  # noqa: E501
        :rtype: str
        """
        return self._deletion_policy

    @deletion_policy.setter
    def deletion_policy(self, deletion_policy):
        """Sets the deletion_policy of this IoExternalSecretsV1alpha1PushSecretSpec.

        Deletion Policy to handle Secrets in the provider. Possible Values: \"Delete/None\". Defaults to \"None\".  # noqa: E501

        :param deletion_policy: The deletion_policy of this IoExternalSecretsV1alpha1PushSecretSpec.  # noqa: E501
        :type: str
        """

        self._deletion_policy = deletion_policy

    @property
    def refresh_interval(self):
        """Gets the refresh_interval of this IoExternalSecretsV1alpha1PushSecretSpec.  # noqa: E501

        The Interval to which External Secrets will try to push a secret definition  # noqa: E501

        :return: The refresh_interval of this IoExternalSecretsV1alpha1PushSecretSpec.  # noqa: E501
        :rtype: str
        """
        return self._refresh_interval

    @refresh_interval.setter
    def refresh_interval(self, refresh_interval):
        """Sets the refresh_interval of this IoExternalSecretsV1alpha1PushSecretSpec.

        The Interval to which External Secrets will try to push a secret definition  # noqa: E501

        :param refresh_interval: The refresh_interval of this IoExternalSecretsV1alpha1PushSecretSpec.  # noqa: E501
        :type: str
        """

        self._refresh_interval = refresh_interval

    @property
    def secret_store_refs(self):
        """Gets the secret_store_refs of this IoExternalSecretsV1alpha1PushSecretSpec.  # noqa: E501


        :return: The secret_store_refs of this IoExternalSecretsV1alpha1PushSecretSpec.  # noqa: E501
        :rtype: list[IoExternalSecretsV1alpha1PushSecretSpecSecretStoreRefs]
        """
        return self._secret_store_refs

    @secret_store_refs.setter
    def secret_store_refs(self, secret_store_refs):
        """Sets the secret_store_refs of this IoExternalSecretsV1alpha1PushSecretSpec.


        :param secret_store_refs: The secret_store_refs of this IoExternalSecretsV1alpha1PushSecretSpec.  # noqa: E501
        :type: list[IoExternalSecretsV1alpha1PushSecretSpecSecretStoreRefs]
        """
        if self.local_vars_configuration.client_side_validation and secret_store_refs is None:  # noqa: E501
            raise ValueError("Invalid value for `secret_store_refs`, must not be `None`")  # noqa: E501

        self._secret_store_refs = secret_store_refs

    @property
    def selector(self):
        """Gets the selector of this IoExternalSecretsV1alpha1PushSecretSpec.  # noqa: E501


        :return: The selector of this IoExternalSecretsV1alpha1PushSecretSpec.  # noqa: E501
        :rtype: IoExternalSecretsV1alpha1PushSecretSpecSelector
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this IoExternalSecretsV1alpha1PushSecretSpec.


        :param selector: The selector of this IoExternalSecretsV1alpha1PushSecretSpec.  # noqa: E501
        :type: IoExternalSecretsV1alpha1PushSecretSpecSelector
        """
        if self.local_vars_configuration.client_side_validation and selector is None:  # noqa: E501
            raise ValueError("Invalid value for `selector`, must not be `None`")  # noqa: E501

        self._selector = selector

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoExternalSecretsV1alpha1PushSecretSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoExternalSecretsV1alpha1PushSecretSpec):
            return True

        return self.to_dict() != other.to_dict()
