# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'content': 'str',
        'content_from': 'IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecContentFrom',
        'encoding': 'str',
        'owner': 'str',
        'path': 'str',
        'permissions': 'str'
    }

    attribute_map = {
        'content': 'content',
        'content_from': 'contentFrom',
        'encoding': 'encoding',
        'owner': 'owner',
        'path': 'path',
        'permissions': 'permissions'
    }

    def __init__(self, content=None, content_from=None, encoding=None, owner=None, path=None, permissions=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._content = None
        self._content_from = None
        self._encoding = None
        self._owner = None
        self._path = None
        self._permissions = None
        self.discriminator = None

        if content is not None:
            self.content = content
        if content_from is not None:
            self.content_from = content_from
        if encoding is not None:
            self.encoding = encoding
        if owner is not None:
            self.owner = owner
        self.path = path
        if permissions is not None:
            self.permissions = permissions

    @property
    def content(self):
        """Gets the content of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles.  # noqa: E501

        Content is the actual content of the file.  # noqa: E501

        :return: The content of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles.

        Content is the actual content of the file.  # noqa: E501

        :param content: The content of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def content_from(self):
        """Gets the content_from of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles.  # noqa: E501


        :return: The content_from of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles.  # noqa: E501
        :rtype: IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecContentFrom
        """
        return self._content_from

    @content_from.setter
    def content_from(self, content_from):
        """Sets the content_from of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles.


        :param content_from: The content_from of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles.  # noqa: E501
        :type: IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecContentFrom
        """

        self._content_from = content_from

    @property
    def encoding(self):
        """Gets the encoding of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles.  # noqa: E501

        Encoding specifies the encoding of the file contents.  # noqa: E501

        :return: The encoding of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles.  # noqa: E501
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles.

        Encoding specifies the encoding of the file contents.  # noqa: E501

        :param encoding: The encoding of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles.  # noqa: E501
        :type: str
        """
        allowed_values = ["base64", "gzip", "gzip+base64"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and encoding not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `encoding` ({0}), must be one of {1}"  # noqa: E501
                .format(encoding, allowed_values)
            )

        self._encoding = encoding

    @property
    def owner(self):
        """Gets the owner of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles.  # noqa: E501

        Owner specifies the ownership of the file, e.g. \"root:root\".  # noqa: E501

        :return: The owner of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles.

        Owner specifies the ownership of the file, e.g. \"root:root\".  # noqa: E501

        :param owner: The owner of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def path(self):
        """Gets the path of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles.  # noqa: E501

        Path specifies the full path on disk where to store the file.  # noqa: E501

        :return: The path of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles.

        Path specifies the full path on disk where to store the file.  # noqa: E501

        :param path: The path of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and path is None:  # noqa: E501
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def permissions(self):
        """Gets the permissions of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles.  # noqa: E501

        Permissions specifies the permissions to assign to the file, e.g. \"0640\".  # noqa: E501

        :return: The permissions of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles.  # noqa: E501
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles.

        Permissions specifies the permissions to assign to the file, e.g. \"0640\".  # noqa: E501

        :param permissions: The permissions of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles.  # noqa: E501
        :type: str
        """

        self._permissions = permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecFiles):
            return True

        return self.to_dict() != other.to_dict()
