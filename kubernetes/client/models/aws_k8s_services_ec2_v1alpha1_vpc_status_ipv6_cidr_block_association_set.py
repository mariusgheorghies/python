# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class AwsK8sServicesEc2V1alpha1VPCStatusIpv6CIDRBlockAssociationSet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'association_id': 'str',
        'ipv6_cidr_block': 'str',
        'ipv6_cidr_block_state': 'AwsK8sServicesEc2V1alpha1SubnetStatusIpv6CIDRBlockState',
        'ipv6_pool': 'str',
        'network_border_group': 'str'
    }

    attribute_map = {
        'association_id': 'associationID',
        'ipv6_cidr_block': 'ipv6CIDRBlock',
        'ipv6_cidr_block_state': 'ipv6CIDRBlockState',
        'ipv6_pool': 'ipv6Pool',
        'network_border_group': 'networkBorderGroup'
    }

    def __init__(self, association_id=None, ipv6_cidr_block=None, ipv6_cidr_block_state=None, ipv6_pool=None, network_border_group=None, local_vars_configuration=None):  # noqa: E501
        """AwsK8sServicesEc2V1alpha1VPCStatusIpv6CIDRBlockAssociationSet - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._association_id = None
        self._ipv6_cidr_block = None
        self._ipv6_cidr_block_state = None
        self._ipv6_pool = None
        self._network_border_group = None
        self.discriminator = None

        if association_id is not None:
            self.association_id = association_id
        if ipv6_cidr_block is not None:
            self.ipv6_cidr_block = ipv6_cidr_block
        if ipv6_cidr_block_state is not None:
            self.ipv6_cidr_block_state = ipv6_cidr_block_state
        if ipv6_pool is not None:
            self.ipv6_pool = ipv6_pool
        if network_border_group is not None:
            self.network_border_group = network_border_group

    @property
    def association_id(self):
        """Gets the association_id of this AwsK8sServicesEc2V1alpha1VPCStatusIpv6CIDRBlockAssociationSet.  # noqa: E501


        :return: The association_id of this AwsK8sServicesEc2V1alpha1VPCStatusIpv6CIDRBlockAssociationSet.  # noqa: E501
        :rtype: str
        """
        return self._association_id

    @association_id.setter
    def association_id(self, association_id):
        """Sets the association_id of this AwsK8sServicesEc2V1alpha1VPCStatusIpv6CIDRBlockAssociationSet.


        :param association_id: The association_id of this AwsK8sServicesEc2V1alpha1VPCStatusIpv6CIDRBlockAssociationSet.  # noqa: E501
        :type: str
        """

        self._association_id = association_id

    @property
    def ipv6_cidr_block(self):
        """Gets the ipv6_cidr_block of this AwsK8sServicesEc2V1alpha1VPCStatusIpv6CIDRBlockAssociationSet.  # noqa: E501


        :return: The ipv6_cidr_block of this AwsK8sServicesEc2V1alpha1VPCStatusIpv6CIDRBlockAssociationSet.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_cidr_block

    @ipv6_cidr_block.setter
    def ipv6_cidr_block(self, ipv6_cidr_block):
        """Sets the ipv6_cidr_block of this AwsK8sServicesEc2V1alpha1VPCStatusIpv6CIDRBlockAssociationSet.


        :param ipv6_cidr_block: The ipv6_cidr_block of this AwsK8sServicesEc2V1alpha1VPCStatusIpv6CIDRBlockAssociationSet.  # noqa: E501
        :type: str
        """

        self._ipv6_cidr_block = ipv6_cidr_block

    @property
    def ipv6_cidr_block_state(self):
        """Gets the ipv6_cidr_block_state of this AwsK8sServicesEc2V1alpha1VPCStatusIpv6CIDRBlockAssociationSet.  # noqa: E501


        :return: The ipv6_cidr_block_state of this AwsK8sServicesEc2V1alpha1VPCStatusIpv6CIDRBlockAssociationSet.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1SubnetStatusIpv6CIDRBlockState
        """
        return self._ipv6_cidr_block_state

    @ipv6_cidr_block_state.setter
    def ipv6_cidr_block_state(self, ipv6_cidr_block_state):
        """Sets the ipv6_cidr_block_state of this AwsK8sServicesEc2V1alpha1VPCStatusIpv6CIDRBlockAssociationSet.


        :param ipv6_cidr_block_state: The ipv6_cidr_block_state of this AwsK8sServicesEc2V1alpha1VPCStatusIpv6CIDRBlockAssociationSet.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1SubnetStatusIpv6CIDRBlockState
        """

        self._ipv6_cidr_block_state = ipv6_cidr_block_state

    @property
    def ipv6_pool(self):
        """Gets the ipv6_pool of this AwsK8sServicesEc2V1alpha1VPCStatusIpv6CIDRBlockAssociationSet.  # noqa: E501


        :return: The ipv6_pool of this AwsK8sServicesEc2V1alpha1VPCStatusIpv6CIDRBlockAssociationSet.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_pool

    @ipv6_pool.setter
    def ipv6_pool(self, ipv6_pool):
        """Sets the ipv6_pool of this AwsK8sServicesEc2V1alpha1VPCStatusIpv6CIDRBlockAssociationSet.


        :param ipv6_pool: The ipv6_pool of this AwsK8sServicesEc2V1alpha1VPCStatusIpv6CIDRBlockAssociationSet.  # noqa: E501
        :type: str
        """

        self._ipv6_pool = ipv6_pool

    @property
    def network_border_group(self):
        """Gets the network_border_group of this AwsK8sServicesEc2V1alpha1VPCStatusIpv6CIDRBlockAssociationSet.  # noqa: E501


        :return: The network_border_group of this AwsK8sServicesEc2V1alpha1VPCStatusIpv6CIDRBlockAssociationSet.  # noqa: E501
        :rtype: str
        """
        return self._network_border_group

    @network_border_group.setter
    def network_border_group(self, network_border_group):
        """Sets the network_border_group of this AwsK8sServicesEc2V1alpha1VPCStatusIpv6CIDRBlockAssociationSet.


        :param network_border_group: The network_border_group of this AwsK8sServicesEc2V1alpha1VPCStatusIpv6CIDRBlockAssociationSet.  # noqa: E501
        :type: str
        """

        self._network_border_group = network_border_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1VPCStatusIpv6CIDRBlockAssociationSet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1VPCStatusIpv6CIDRBlockAssociationSet):
            return True

        return self.to_dict() != other.to_dict()
