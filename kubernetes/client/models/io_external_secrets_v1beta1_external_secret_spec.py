# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoExternalSecretsV1beta1ExternalSecretSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data': 'list[IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecData]',
        'data_from': 'list[IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecDataFrom]',
        'refresh_interval': 'str',
        'secret_store_ref': 'IoExternalSecretsV1alpha1ExternalSecretSpecSecretStoreRef',
        'target': 'IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTarget'
    }

    attribute_map = {
        'data': 'data',
        'data_from': 'dataFrom',
        'refresh_interval': 'refreshInterval',
        'secret_store_ref': 'secretStoreRef',
        'target': 'target'
    }

    def __init__(self, data=None, data_from=None, refresh_interval=None, secret_store_ref=None, target=None, local_vars_configuration=None):  # noqa: E501
        """IoExternalSecretsV1beta1ExternalSecretSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._data = None
        self._data_from = None
        self._refresh_interval = None
        self._secret_store_ref = None
        self._target = None
        self.discriminator = None

        if data is not None:
            self.data = data
        if data_from is not None:
            self.data_from = data_from
        if refresh_interval is not None:
            self.refresh_interval = refresh_interval
        if secret_store_ref is not None:
            self.secret_store_ref = secret_store_ref
        if target is not None:
            self.target = target

    @property
    def data(self):
        """Gets the data of this IoExternalSecretsV1beta1ExternalSecretSpec.  # noqa: E501

        Data defines the connection between the Kubernetes Secret keys and the Provider data  # noqa: E501

        :return: The data of this IoExternalSecretsV1beta1ExternalSecretSpec.  # noqa: E501
        :rtype: list[IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecData]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this IoExternalSecretsV1beta1ExternalSecretSpec.

        Data defines the connection between the Kubernetes Secret keys and the Provider data  # noqa: E501

        :param data: The data of this IoExternalSecretsV1beta1ExternalSecretSpec.  # noqa: E501
        :type: list[IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecData]
        """

        self._data = data

    @property
    def data_from(self):
        """Gets the data_from of this IoExternalSecretsV1beta1ExternalSecretSpec.  # noqa: E501

        DataFrom is used to fetch all properties from a specific Provider data If multiple entries are specified, the Secret keys are merged in the specified order  # noqa: E501

        :return: The data_from of this IoExternalSecretsV1beta1ExternalSecretSpec.  # noqa: E501
        :rtype: list[IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecDataFrom]
        """
        return self._data_from

    @data_from.setter
    def data_from(self, data_from):
        """Sets the data_from of this IoExternalSecretsV1beta1ExternalSecretSpec.

        DataFrom is used to fetch all properties from a specific Provider data If multiple entries are specified, the Secret keys are merged in the specified order  # noqa: E501

        :param data_from: The data_from of this IoExternalSecretsV1beta1ExternalSecretSpec.  # noqa: E501
        :type: list[IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecDataFrom]
        """

        self._data_from = data_from

    @property
    def refresh_interval(self):
        """Gets the refresh_interval of this IoExternalSecretsV1beta1ExternalSecretSpec.  # noqa: E501

        RefreshInterval is the amount of time before the values are read again from the SecretStore provider Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\" May be set to zero to fetch and create it once. Defaults to 1h.  # noqa: E501

        :return: The refresh_interval of this IoExternalSecretsV1beta1ExternalSecretSpec.  # noqa: E501
        :rtype: str
        """
        return self._refresh_interval

    @refresh_interval.setter
    def refresh_interval(self, refresh_interval):
        """Sets the refresh_interval of this IoExternalSecretsV1beta1ExternalSecretSpec.

        RefreshInterval is the amount of time before the values are read again from the SecretStore provider Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\" May be set to zero to fetch and create it once. Defaults to 1h.  # noqa: E501

        :param refresh_interval: The refresh_interval of this IoExternalSecretsV1beta1ExternalSecretSpec.  # noqa: E501
        :type: str
        """

        self._refresh_interval = refresh_interval

    @property
    def secret_store_ref(self):
        """Gets the secret_store_ref of this IoExternalSecretsV1beta1ExternalSecretSpec.  # noqa: E501


        :return: The secret_store_ref of this IoExternalSecretsV1beta1ExternalSecretSpec.  # noqa: E501
        :rtype: IoExternalSecretsV1alpha1ExternalSecretSpecSecretStoreRef
        """
        return self._secret_store_ref

    @secret_store_ref.setter
    def secret_store_ref(self, secret_store_ref):
        """Sets the secret_store_ref of this IoExternalSecretsV1beta1ExternalSecretSpec.


        :param secret_store_ref: The secret_store_ref of this IoExternalSecretsV1beta1ExternalSecretSpec.  # noqa: E501
        :type: IoExternalSecretsV1alpha1ExternalSecretSpecSecretStoreRef
        """

        self._secret_store_ref = secret_store_ref

    @property
    def target(self):
        """Gets the target of this IoExternalSecretsV1beta1ExternalSecretSpec.  # noqa: E501


        :return: The target of this IoExternalSecretsV1beta1ExternalSecretSpec.  # noqa: E501
        :rtype: IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this IoExternalSecretsV1beta1ExternalSecretSpec.


        :param target: The target of this IoExternalSecretsV1beta1ExternalSecretSpec.  # noqa: E501
        :type: IoExternalSecretsV1beta1ClusterExternalSecretSpecExternalSecretSpecTarget
        """

        self._target = target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoExternalSecretsV1beta1ExternalSecretSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoExternalSecretsV1beta1ExternalSecretSpec):
            return True

        return self.to_dict() != other.to_dict()
