# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'action_on_failure': 'str',
        'fallback_formats': 'list[str]',
        'format': 'str',
        'location': 'str',
        'source': 'str'
    }

    attribute_map = {
        'action_on_failure': 'actionOnFailure',
        'fallback_formats': 'fallbackFormats',
        'format': 'format',
        'location': 'location',
        'source': 'source'
    }

    def __init__(self, action_on_failure=None, fallback_formats=None, format=None, location=None, source=None, local_vars_configuration=None):  # noqa: E501
        """ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._action_on_failure = None
        self._fallback_formats = None
        self._format = None
        self._location = None
        self._source = None
        self.discriminator = None

        if action_on_failure is not None:
            self.action_on_failure = action_on_failure
        if fallback_formats is not None:
            self.fallback_formats = fallback_formats
        self.format = format
        if location is not None:
            self.location = location
        self.source = source

    @property
    def action_on_failure(self):
        """Gets the action_on_failure of this ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp.  # noqa: E501

        Action to take when the timestamp can't be extracted or parsed. Can be skip or fudge. Defaults to fudge.  # noqa: E501

        :return: The action_on_failure of this ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp.  # noqa: E501
        :rtype: str
        """
        return self._action_on_failure

    @action_on_failure.setter
    def action_on_failure(self, action_on_failure):
        """Sets the action_on_failure of this ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp.

        Action to take when the timestamp can't be extracted or parsed. Can be skip or fudge. Defaults to fudge.  # noqa: E501

        :param action_on_failure: The action_on_failure of this ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp.  # noqa: E501
        :type: str
        """

        self._action_on_failure = action_on_failure

    @property
    def fallback_formats(self):
        """Gets the fallback_formats of this ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp.  # noqa: E501

        Fallback formats to try if format fails.  # noqa: E501

        :return: The fallback_formats of this ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp.  # noqa: E501
        :rtype: list[str]
        """
        return self._fallback_formats

    @fallback_formats.setter
    def fallback_formats(self, fallback_formats):
        """Sets the fallback_formats of this ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp.

        Fallback formats to try if format fails.  # noqa: E501

        :param fallback_formats: The fallback_formats of this ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp.  # noqa: E501
        :type: list[str]
        """

        self._fallback_formats = fallback_formats

    @property
    def format(self):
        """Gets the format of this ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp.  # noqa: E501

        Determines format of the time string. Required. Can be one of: ANSIC, UnixDate, RubyDate, RFC822, RFC822Z, RFC850, RFC1123, RFC1123Z, RFC3339, RFC3339Nano, Unix, UnixMs, UnixUs, UnixNs.  # noqa: E501

        :return: The format of this ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp.

        Determines format of the time string. Required. Can be one of: ANSIC, UnixDate, RubyDate, RFC822, RFC822Z, RFC850, RFC1123, RFC1123Z, RFC3339, RFC3339Nano, Unix, UnixMs, UnixUs, UnixNs.  # noqa: E501

        :param format: The format of this ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and format is None:  # noqa: E501
            raise ValueError("Invalid value for `format`, must not be `None`")  # noqa: E501

        self._format = format

    @property
    def location(self):
        """Gets the location of this ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp.  # noqa: E501

        IANA Timezone Database string.  # noqa: E501

        :return: The location of this ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp.

        IANA Timezone Database string.  # noqa: E501

        :param location: The location of this ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def source(self):
        """Gets the source of this ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp.  # noqa: E501

        Name from extracted data to use as the timestamp. Required.  # noqa: E501

        :return: The source of this ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp.

        Name from extracted data to use as the timestamp. Required.  # noqa: E501

        :param source: The source of this ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and source is None:  # noqa: E501
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1PodLogsSpecTimestamp):
            return True

        return self.to_dict() != other.to_dict()
