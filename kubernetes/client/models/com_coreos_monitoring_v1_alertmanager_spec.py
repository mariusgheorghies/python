# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComCoreosMonitoringV1AlertmanagerSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'additional_peers': 'list[str]',
        'affinity': 'ComCoreosMonitoringV1AlertmanagerSpecAffinity',
        'alertmanager_config_namespace_selector': 'ComCoreosMonitoringV1AlertmanagerSpecAlertmanagerConfigNamespaceSelector',
        'alertmanager_config_selector': 'ComCoreosMonitoringV1AlertmanagerSpecAlertmanagerConfigSelector',
        'base_image': 'str',
        'cluster_advertise_address': 'str',
        'cluster_gossip_interval': 'str',
        'cluster_peer_timeout': 'str',
        'cluster_pushpull_interval': 'str',
        'config_maps': 'list[str]',
        'config_secret': 'str',
        'containers': 'list[ComCoreosMonitoringV1AlertmanagerSpecContainers]',
        'external_url': 'str',
        'force_enable_cluster_mode': 'bool',
        'image': 'str',
        'image_pull_secrets': 'list[ComCoreosMonitoringV1AlertmanagerSpecImagePullSecrets]',
        'init_containers': 'list[ComCoreosMonitoringV1AlertmanagerSpecContainers]',
        'listen_local': 'bool',
        'log_format': 'str',
        'log_level': 'str',
        'min_ready_seconds': 'int',
        'node_selector': 'dict(str, str)',
        'paused': 'bool',
        'pod_metadata': 'ComCoreosMonitoringV1AlertmanagerSpecPodMetadata',
        'port_name': 'str',
        'priority_class_name': 'str',
        'replicas': 'int',
        'resources': 'ComCoreosMonitoringV1AlertmanagerSpecResources1',
        'retention': 'str',
        'route_prefix': 'str',
        'secrets': 'list[str]',
        'security_context': 'ComCoreosMonitoringV1AlertmanagerSpecSecurityContext1',
        'service_account_name': 'str',
        'sha': 'str',
        'storage': 'ComCoreosMonitoringV1AlertmanagerSpecStorage',
        'tag': 'str',
        'tolerations': 'list[ComCoreosMonitoringV1AlertmanagerSpecTolerations]',
        'topology_spread_constraints': 'list[ComCoreosMonitoringV1AlertmanagerSpecTopologySpreadConstraints]',
        'version': 'str',
        'volume_mounts': 'list[ComCoreosMonitoringV1AlertmanagerSpecVolumeMounts]',
        'volumes': 'list[ComCoreosMonitoringV1AlertmanagerSpecVolumes]'
    }

    attribute_map = {
        'additional_peers': 'additionalPeers',
        'affinity': 'affinity',
        'alertmanager_config_namespace_selector': 'alertmanagerConfigNamespaceSelector',
        'alertmanager_config_selector': 'alertmanagerConfigSelector',
        'base_image': 'baseImage',
        'cluster_advertise_address': 'clusterAdvertiseAddress',
        'cluster_gossip_interval': 'clusterGossipInterval',
        'cluster_peer_timeout': 'clusterPeerTimeout',
        'cluster_pushpull_interval': 'clusterPushpullInterval',
        'config_maps': 'configMaps',
        'config_secret': 'configSecret',
        'containers': 'containers',
        'external_url': 'externalUrl',
        'force_enable_cluster_mode': 'forceEnableClusterMode',
        'image': 'image',
        'image_pull_secrets': 'imagePullSecrets',
        'init_containers': 'initContainers',
        'listen_local': 'listenLocal',
        'log_format': 'logFormat',
        'log_level': 'logLevel',
        'min_ready_seconds': 'minReadySeconds',
        'node_selector': 'nodeSelector',
        'paused': 'paused',
        'pod_metadata': 'podMetadata',
        'port_name': 'portName',
        'priority_class_name': 'priorityClassName',
        'replicas': 'replicas',
        'resources': 'resources',
        'retention': 'retention',
        'route_prefix': 'routePrefix',
        'secrets': 'secrets',
        'security_context': 'securityContext',
        'service_account_name': 'serviceAccountName',
        'sha': 'sha',
        'storage': 'storage',
        'tag': 'tag',
        'tolerations': 'tolerations',
        'topology_spread_constraints': 'topologySpreadConstraints',
        'version': 'version',
        'volume_mounts': 'volumeMounts',
        'volumes': 'volumes'
    }

    def __init__(self, additional_peers=None, affinity=None, alertmanager_config_namespace_selector=None, alertmanager_config_selector=None, base_image=None, cluster_advertise_address=None, cluster_gossip_interval=None, cluster_peer_timeout=None, cluster_pushpull_interval=None, config_maps=None, config_secret=None, containers=None, external_url=None, force_enable_cluster_mode=None, image=None, image_pull_secrets=None, init_containers=None, listen_local=None, log_format=None, log_level=None, min_ready_seconds=None, node_selector=None, paused=None, pod_metadata=None, port_name=None, priority_class_name=None, replicas=None, resources=None, retention=None, route_prefix=None, secrets=None, security_context=None, service_account_name=None, sha=None, storage=None, tag=None, tolerations=None, topology_spread_constraints=None, version=None, volume_mounts=None, volumes=None, local_vars_configuration=None):  # noqa: E501
        """ComCoreosMonitoringV1AlertmanagerSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._additional_peers = None
        self._affinity = None
        self._alertmanager_config_namespace_selector = None
        self._alertmanager_config_selector = None
        self._base_image = None
        self._cluster_advertise_address = None
        self._cluster_gossip_interval = None
        self._cluster_peer_timeout = None
        self._cluster_pushpull_interval = None
        self._config_maps = None
        self._config_secret = None
        self._containers = None
        self._external_url = None
        self._force_enable_cluster_mode = None
        self._image = None
        self._image_pull_secrets = None
        self._init_containers = None
        self._listen_local = None
        self._log_format = None
        self._log_level = None
        self._min_ready_seconds = None
        self._node_selector = None
        self._paused = None
        self._pod_metadata = None
        self._port_name = None
        self._priority_class_name = None
        self._replicas = None
        self._resources = None
        self._retention = None
        self._route_prefix = None
        self._secrets = None
        self._security_context = None
        self._service_account_name = None
        self._sha = None
        self._storage = None
        self._tag = None
        self._tolerations = None
        self._topology_spread_constraints = None
        self._version = None
        self._volume_mounts = None
        self._volumes = None
        self.discriminator = None

        if additional_peers is not None:
            self.additional_peers = additional_peers
        if affinity is not None:
            self.affinity = affinity
        if alertmanager_config_namespace_selector is not None:
            self.alertmanager_config_namespace_selector = alertmanager_config_namespace_selector
        if alertmanager_config_selector is not None:
            self.alertmanager_config_selector = alertmanager_config_selector
        if base_image is not None:
            self.base_image = base_image
        if cluster_advertise_address is not None:
            self.cluster_advertise_address = cluster_advertise_address
        if cluster_gossip_interval is not None:
            self.cluster_gossip_interval = cluster_gossip_interval
        if cluster_peer_timeout is not None:
            self.cluster_peer_timeout = cluster_peer_timeout
        if cluster_pushpull_interval is not None:
            self.cluster_pushpull_interval = cluster_pushpull_interval
        if config_maps is not None:
            self.config_maps = config_maps
        if config_secret is not None:
            self.config_secret = config_secret
        if containers is not None:
            self.containers = containers
        if external_url is not None:
            self.external_url = external_url
        if force_enable_cluster_mode is not None:
            self.force_enable_cluster_mode = force_enable_cluster_mode
        if image is not None:
            self.image = image
        if image_pull_secrets is not None:
            self.image_pull_secrets = image_pull_secrets
        if init_containers is not None:
            self.init_containers = init_containers
        if listen_local is not None:
            self.listen_local = listen_local
        if log_format is not None:
            self.log_format = log_format
        if log_level is not None:
            self.log_level = log_level
        if min_ready_seconds is not None:
            self.min_ready_seconds = min_ready_seconds
        if node_selector is not None:
            self.node_selector = node_selector
        if paused is not None:
            self.paused = paused
        if pod_metadata is not None:
            self.pod_metadata = pod_metadata
        if port_name is not None:
            self.port_name = port_name
        if priority_class_name is not None:
            self.priority_class_name = priority_class_name
        if replicas is not None:
            self.replicas = replicas
        if resources is not None:
            self.resources = resources
        if retention is not None:
            self.retention = retention
        if route_prefix is not None:
            self.route_prefix = route_prefix
        if secrets is not None:
            self.secrets = secrets
        if security_context is not None:
            self.security_context = security_context
        if service_account_name is not None:
            self.service_account_name = service_account_name
        if sha is not None:
            self.sha = sha
        if storage is not None:
            self.storage = storage
        if tag is not None:
            self.tag = tag
        if tolerations is not None:
            self.tolerations = tolerations
        if topology_spread_constraints is not None:
            self.topology_spread_constraints = topology_spread_constraints
        if version is not None:
            self.version = version
        if volume_mounts is not None:
            self.volume_mounts = volume_mounts
        if volumes is not None:
            self.volumes = volumes

    @property
    def additional_peers(self):
        """Gets the additional_peers of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        AdditionalPeers allows injecting a set of additional Alertmanagers to peer with to form a highly available cluster.  # noqa: E501

        :return: The additional_peers of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_peers

    @additional_peers.setter
    def additional_peers(self, additional_peers):
        """Sets the additional_peers of this ComCoreosMonitoringV1AlertmanagerSpec.

        AdditionalPeers allows injecting a set of additional Alertmanagers to peer with to form a highly available cluster.  # noqa: E501

        :param additional_peers: The additional_peers of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: list[str]
        """

        self._additional_peers = additional_peers

    @property
    def affinity(self):
        """Gets the affinity of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501


        :return: The affinity of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1AlertmanagerSpecAffinity
        """
        return self._affinity

    @affinity.setter
    def affinity(self, affinity):
        """Sets the affinity of this ComCoreosMonitoringV1AlertmanagerSpec.


        :param affinity: The affinity of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1AlertmanagerSpecAffinity
        """

        self._affinity = affinity

    @property
    def alertmanager_config_namespace_selector(self):
        """Gets the alertmanager_config_namespace_selector of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501


        :return: The alertmanager_config_namespace_selector of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1AlertmanagerSpecAlertmanagerConfigNamespaceSelector
        """
        return self._alertmanager_config_namespace_selector

    @alertmanager_config_namespace_selector.setter
    def alertmanager_config_namespace_selector(self, alertmanager_config_namespace_selector):
        """Sets the alertmanager_config_namespace_selector of this ComCoreosMonitoringV1AlertmanagerSpec.


        :param alertmanager_config_namespace_selector: The alertmanager_config_namespace_selector of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1AlertmanagerSpecAlertmanagerConfigNamespaceSelector
        """

        self._alertmanager_config_namespace_selector = alertmanager_config_namespace_selector

    @property
    def alertmanager_config_selector(self):
        """Gets the alertmanager_config_selector of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501


        :return: The alertmanager_config_selector of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1AlertmanagerSpecAlertmanagerConfigSelector
        """
        return self._alertmanager_config_selector

    @alertmanager_config_selector.setter
    def alertmanager_config_selector(self, alertmanager_config_selector):
        """Sets the alertmanager_config_selector of this ComCoreosMonitoringV1AlertmanagerSpec.


        :param alertmanager_config_selector: The alertmanager_config_selector of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1AlertmanagerSpecAlertmanagerConfigSelector
        """

        self._alertmanager_config_selector = alertmanager_config_selector

    @property
    def base_image(self):
        """Gets the base_image of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        Base image that is used to deploy pods, without tag. Deprecated: use 'image' instead  # noqa: E501

        :return: The base_image of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: str
        """
        return self._base_image

    @base_image.setter
    def base_image(self, base_image):
        """Sets the base_image of this ComCoreosMonitoringV1AlertmanagerSpec.

        Base image that is used to deploy pods, without tag. Deprecated: use 'image' instead  # noqa: E501

        :param base_image: The base_image of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: str
        """

        self._base_image = base_image

    @property
    def cluster_advertise_address(self):
        """Gets the cluster_advertise_address of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        ClusterAdvertiseAddress is the explicit address to advertise in cluster. Needs to be provided for non RFC1918 [1] (public) addresses. [1] RFC1918: https://tools.ietf.org/html/rfc1918  # noqa: E501

        :return: The cluster_advertise_address of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: str
        """
        return self._cluster_advertise_address

    @cluster_advertise_address.setter
    def cluster_advertise_address(self, cluster_advertise_address):
        """Sets the cluster_advertise_address of this ComCoreosMonitoringV1AlertmanagerSpec.

        ClusterAdvertiseAddress is the explicit address to advertise in cluster. Needs to be provided for non RFC1918 [1] (public) addresses. [1] RFC1918: https://tools.ietf.org/html/rfc1918  # noqa: E501

        :param cluster_advertise_address: The cluster_advertise_address of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: str
        """

        self._cluster_advertise_address = cluster_advertise_address

    @property
    def cluster_gossip_interval(self):
        """Gets the cluster_gossip_interval of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        Interval between gossip attempts.  # noqa: E501

        :return: The cluster_gossip_interval of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: str
        """
        return self._cluster_gossip_interval

    @cluster_gossip_interval.setter
    def cluster_gossip_interval(self, cluster_gossip_interval):
        """Sets the cluster_gossip_interval of this ComCoreosMonitoringV1AlertmanagerSpec.

        Interval between gossip attempts.  # noqa: E501

        :param cluster_gossip_interval: The cluster_gossip_interval of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: str
        """

        self._cluster_gossip_interval = cluster_gossip_interval

    @property
    def cluster_peer_timeout(self):
        """Gets the cluster_peer_timeout of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        Timeout for cluster peering.  # noqa: E501

        :return: The cluster_peer_timeout of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: str
        """
        return self._cluster_peer_timeout

    @cluster_peer_timeout.setter
    def cluster_peer_timeout(self, cluster_peer_timeout):
        """Sets the cluster_peer_timeout of this ComCoreosMonitoringV1AlertmanagerSpec.

        Timeout for cluster peering.  # noqa: E501

        :param cluster_peer_timeout: The cluster_peer_timeout of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: str
        """

        self._cluster_peer_timeout = cluster_peer_timeout

    @property
    def cluster_pushpull_interval(self):
        """Gets the cluster_pushpull_interval of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        Interval between pushpull attempts.  # noqa: E501

        :return: The cluster_pushpull_interval of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: str
        """
        return self._cluster_pushpull_interval

    @cluster_pushpull_interval.setter
    def cluster_pushpull_interval(self, cluster_pushpull_interval):
        """Sets the cluster_pushpull_interval of this ComCoreosMonitoringV1AlertmanagerSpec.

        Interval between pushpull attempts.  # noqa: E501

        :param cluster_pushpull_interval: The cluster_pushpull_interval of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: str
        """

        self._cluster_pushpull_interval = cluster_pushpull_interval

    @property
    def config_maps(self):
        """Gets the config_maps of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        ConfigMaps is a list of ConfigMaps in the same namespace as the Alertmanager object, which shall be mounted into the Alertmanager Pods. The ConfigMaps are mounted into /etc/alertmanager/configmaps/<configmap-name>.  # noqa: E501

        :return: The config_maps of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._config_maps

    @config_maps.setter
    def config_maps(self, config_maps):
        """Sets the config_maps of this ComCoreosMonitoringV1AlertmanagerSpec.

        ConfigMaps is a list of ConfigMaps in the same namespace as the Alertmanager object, which shall be mounted into the Alertmanager Pods. The ConfigMaps are mounted into /etc/alertmanager/configmaps/<configmap-name>.  # noqa: E501

        :param config_maps: The config_maps of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: list[str]
        """

        self._config_maps = config_maps

    @property
    def config_secret(self):
        """Gets the config_secret of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        ConfigSecret is the name of a Kubernetes Secret in the same namespace as the Alertmanager object, which contains configuration for this Alertmanager instance. Defaults to 'alertmanager-<alertmanager-name>' The secret is mounted into /etc/alertmanager/config.  # noqa: E501

        :return: The config_secret of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: str
        """
        return self._config_secret

    @config_secret.setter
    def config_secret(self, config_secret):
        """Sets the config_secret of this ComCoreosMonitoringV1AlertmanagerSpec.

        ConfigSecret is the name of a Kubernetes Secret in the same namespace as the Alertmanager object, which contains configuration for this Alertmanager instance. Defaults to 'alertmanager-<alertmanager-name>' The secret is mounted into /etc/alertmanager/config.  # noqa: E501

        :param config_secret: The config_secret of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: str
        """

        self._config_secret = config_secret

    @property
    def containers(self):
        """Gets the containers of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        Containers allows injecting additional containers. This is meant to allow adding an authentication proxy to an Alertmanager pod. Containers described here modify an operator generated container if they share the same name and modifications are done via a strategic merge patch. The current container names are: `alertmanager` and `config-reloader`. Overriding containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.  # noqa: E501

        :return: The containers of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecContainers]
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this ComCoreosMonitoringV1AlertmanagerSpec.

        Containers allows injecting additional containers. This is meant to allow adding an authentication proxy to an Alertmanager pod. Containers described here modify an operator generated container if they share the same name and modifications are done via a strategic merge patch. The current container names are: `alertmanager` and `config-reloader`. Overriding containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.  # noqa: E501

        :param containers: The containers of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecContainers]
        """

        self._containers = containers

    @property
    def external_url(self):
        """Gets the external_url of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        The external URL the Alertmanager instances will be available under. This is necessary to generate correct URLs. This is necessary if Alertmanager is not served from root of a DNS name.  # noqa: E501

        :return: The external_url of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this ComCoreosMonitoringV1AlertmanagerSpec.

        The external URL the Alertmanager instances will be available under. This is necessary to generate correct URLs. This is necessary if Alertmanager is not served from root of a DNS name.  # noqa: E501

        :param external_url: The external_url of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: str
        """

        self._external_url = external_url

    @property
    def force_enable_cluster_mode(self):
        """Gets the force_enable_cluster_mode of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        ForceEnableClusterMode ensures Alertmanager does not deactivate the cluster mode when running with a single replica. Use case is e.g. spanning an Alertmanager cluster across Kubernetes clusters with a single replica in each.  # noqa: E501

        :return: The force_enable_cluster_mode of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: bool
        """
        return self._force_enable_cluster_mode

    @force_enable_cluster_mode.setter
    def force_enable_cluster_mode(self, force_enable_cluster_mode):
        """Sets the force_enable_cluster_mode of this ComCoreosMonitoringV1AlertmanagerSpec.

        ForceEnableClusterMode ensures Alertmanager does not deactivate the cluster mode when running with a single replica. Use case is e.g. spanning an Alertmanager cluster across Kubernetes clusters with a single replica in each.  # noqa: E501

        :param force_enable_cluster_mode: The force_enable_cluster_mode of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: bool
        """

        self._force_enable_cluster_mode = force_enable_cluster_mode

    @property
    def image(self):
        """Gets the image of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Alertmanager is being configured.  # noqa: E501

        :return: The image of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ComCoreosMonitoringV1AlertmanagerSpec.

        Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Alertmanager is being configured.  # noqa: E501

        :param image: The image of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def image_pull_secrets(self):
        """Gets the image_pull_secrets of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        An optional list of references to secrets in the same namespace to use for pulling prometheus and alertmanager images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod  # noqa: E501

        :return: The image_pull_secrets of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecImagePullSecrets]
        """
        return self._image_pull_secrets

    @image_pull_secrets.setter
    def image_pull_secrets(self, image_pull_secrets):
        """Sets the image_pull_secrets of this ComCoreosMonitoringV1AlertmanagerSpec.

        An optional list of references to secrets in the same namespace to use for pulling prometheus and alertmanager images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod  # noqa: E501

        :param image_pull_secrets: The image_pull_secrets of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecImagePullSecrets]
        """

        self._image_pull_secrets = image_pull_secrets

    @property
    def init_containers(self):
        """Gets the init_containers of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the Alertmanager configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.  # noqa: E501

        :return: The init_containers of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecContainers]
        """
        return self._init_containers

    @init_containers.setter
    def init_containers(self, init_containers):
        """Sets the init_containers of this ComCoreosMonitoringV1AlertmanagerSpec.

        InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the Alertmanager configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.  # noqa: E501

        :param init_containers: The init_containers of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecContainers]
        """

        self._init_containers = init_containers

    @property
    def listen_local(self):
        """Gets the listen_local of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        ListenLocal makes the Alertmanager server listen on loopback, so that it does not bind against the Pod IP. Note this is only for the Alertmanager UI, not the gossip communication.  # noqa: E501

        :return: The listen_local of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: bool
        """
        return self._listen_local

    @listen_local.setter
    def listen_local(self, listen_local):
        """Sets the listen_local of this ComCoreosMonitoringV1AlertmanagerSpec.

        ListenLocal makes the Alertmanager server listen on loopback, so that it does not bind against the Pod IP. Note this is only for the Alertmanager UI, not the gossip communication.  # noqa: E501

        :param listen_local: The listen_local of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: bool
        """

        self._listen_local = listen_local

    @property
    def log_format(self):
        """Gets the log_format of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        Log format for Alertmanager to be configured with.  # noqa: E501

        :return: The log_format of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: str
        """
        return self._log_format

    @log_format.setter
    def log_format(self, log_format):
        """Sets the log_format of this ComCoreosMonitoringV1AlertmanagerSpec.

        Log format for Alertmanager to be configured with.  # noqa: E501

        :param log_format: The log_format of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: str
        """

        self._log_format = log_format

    @property
    def log_level(self):
        """Gets the log_level of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        Log level for Alertmanager to be configured with.  # noqa: E501

        :return: The log_level of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: str
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this ComCoreosMonitoringV1AlertmanagerSpec.

        Log level for Alertmanager to be configured with.  # noqa: E501

        :param log_level: The log_level of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: str
        """

        self._log_level = log_level

    @property
    def min_ready_seconds(self):
        """Gets the min_ready_seconds of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready) This is an alpha field and requires enabling StatefulSetMinReadySeconds feature gate.  # noqa: E501

        :return: The min_ready_seconds of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: int
        """
        return self._min_ready_seconds

    @min_ready_seconds.setter
    def min_ready_seconds(self, min_ready_seconds):
        """Sets the min_ready_seconds of this ComCoreosMonitoringV1AlertmanagerSpec.

        Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready) This is an alpha field and requires enabling StatefulSetMinReadySeconds feature gate.  # noqa: E501

        :param min_ready_seconds: The min_ready_seconds of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: int
        """

        self._min_ready_seconds = min_ready_seconds

    @property
    def node_selector(self):
        """Gets the node_selector of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        Define which Nodes the Pods are scheduled on.  # noqa: E501

        :return: The node_selector of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this ComCoreosMonitoringV1AlertmanagerSpec.

        Define which Nodes the Pods are scheduled on.  # noqa: E501

        :param node_selector: The node_selector of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._node_selector = node_selector

    @property
    def paused(self):
        """Gets the paused of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        If set to true all actions on the underlying managed objects are not goint to be performed, except for delete actions.  # noqa: E501

        :return: The paused of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: bool
        """
        return self._paused

    @paused.setter
    def paused(self, paused):
        """Sets the paused of this ComCoreosMonitoringV1AlertmanagerSpec.

        If set to true all actions on the underlying managed objects are not goint to be performed, except for delete actions.  # noqa: E501

        :param paused: The paused of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: bool
        """

        self._paused = paused

    @property
    def pod_metadata(self):
        """Gets the pod_metadata of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501


        :return: The pod_metadata of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1AlertmanagerSpecPodMetadata
        """
        return self._pod_metadata

    @pod_metadata.setter
    def pod_metadata(self, pod_metadata):
        """Sets the pod_metadata of this ComCoreosMonitoringV1AlertmanagerSpec.


        :param pod_metadata: The pod_metadata of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1AlertmanagerSpecPodMetadata
        """

        self._pod_metadata = pod_metadata

    @property
    def port_name(self):
        """Gets the port_name of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        Port name used for the pods and governing service. This defaults to web  # noqa: E501

        :return: The port_name of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: str
        """
        return self._port_name

    @port_name.setter
    def port_name(self, port_name):
        """Sets the port_name of this ComCoreosMonitoringV1AlertmanagerSpec.

        Port name used for the pods and governing service. This defaults to web  # noqa: E501

        :param port_name: The port_name of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: str
        """

        self._port_name = port_name

    @property
    def priority_class_name(self):
        """Gets the priority_class_name of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        Priority class assigned to the Pods  # noqa: E501

        :return: The priority_class_name of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: str
        """
        return self._priority_class_name

    @priority_class_name.setter
    def priority_class_name(self, priority_class_name):
        """Sets the priority_class_name of this ComCoreosMonitoringV1AlertmanagerSpec.

        Priority class assigned to the Pods  # noqa: E501

        :param priority_class_name: The priority_class_name of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: str
        """

        self._priority_class_name = priority_class_name

    @property
    def replicas(self):
        """Gets the replicas of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        Size is the expected size of the alertmanager cluster. The controller will eventually make the size of the running cluster equal to the expected size.  # noqa: E501

        :return: The replicas of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this ComCoreosMonitoringV1AlertmanagerSpec.

        Size is the expected size of the alertmanager cluster. The controller will eventually make the size of the running cluster equal to the expected size.  # noqa: E501

        :param replicas: The replicas of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def resources(self):
        """Gets the resources of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501


        :return: The resources of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1AlertmanagerSpecResources1
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this ComCoreosMonitoringV1AlertmanagerSpec.


        :param resources: The resources of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1AlertmanagerSpecResources1
        """

        self._resources = resources

    @property
    def retention(self):
        """Gets the retention of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        Time duration Alertmanager shall retain data for. Default is '120h', and must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).  # noqa: E501

        :return: The retention of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: str
        """
        return self._retention

    @retention.setter
    def retention(self, retention):
        """Sets the retention of this ComCoreosMonitoringV1AlertmanagerSpec.

        Time duration Alertmanager shall retain data for. Default is '120h', and must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).  # noqa: E501

        :param retention: The retention of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: str
        """

        self._retention = retention

    @property
    def route_prefix(self):
        """Gets the route_prefix of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        The route prefix Alertmanager registers HTTP handlers for. This is useful, if using ExternalURL and a proxy is rewriting HTTP routes of a request, and the actual ExternalURL is still true, but the server serves requests under a different route prefix. For example for use with `kubectl proxy`.  # noqa: E501

        :return: The route_prefix of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: str
        """
        return self._route_prefix

    @route_prefix.setter
    def route_prefix(self, route_prefix):
        """Sets the route_prefix of this ComCoreosMonitoringV1AlertmanagerSpec.

        The route prefix Alertmanager registers HTTP handlers for. This is useful, if using ExternalURL and a proxy is rewriting HTTP routes of a request, and the actual ExternalURL is still true, but the server serves requests under a different route prefix. For example for use with `kubectl proxy`.  # noqa: E501

        :param route_prefix: The route_prefix of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: str
        """

        self._route_prefix = route_prefix

    @property
    def secrets(self):
        """Gets the secrets of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        Secrets is a list of Secrets in the same namespace as the Alertmanager object, which shall be mounted into the Alertmanager Pods. The Secrets are mounted into /etc/alertmanager/secrets/<secret-name>.  # noqa: E501

        :return: The secrets of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this ComCoreosMonitoringV1AlertmanagerSpec.

        Secrets is a list of Secrets in the same namespace as the Alertmanager object, which shall be mounted into the Alertmanager Pods. The Secrets are mounted into /etc/alertmanager/secrets/<secret-name>.  # noqa: E501

        :param secrets: The secrets of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: list[str]
        """

        self._secrets = secrets

    @property
    def security_context(self):
        """Gets the security_context of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501


        :return: The security_context of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1AlertmanagerSpecSecurityContext1
        """
        return self._security_context

    @security_context.setter
    def security_context(self, security_context):
        """Sets the security_context of this ComCoreosMonitoringV1AlertmanagerSpec.


        :param security_context: The security_context of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1AlertmanagerSpecSecurityContext1
        """

        self._security_context = security_context

    @property
    def service_account_name(self):
        """Gets the service_account_name of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        ServiceAccountName is the name of the ServiceAccount to use to run the Prometheus Pods.  # noqa: E501

        :return: The service_account_name of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: str
        """
        return self._service_account_name

    @service_account_name.setter
    def service_account_name(self, service_account_name):
        """Sets the service_account_name of this ComCoreosMonitoringV1AlertmanagerSpec.

        ServiceAccountName is the name of the ServiceAccount to use to run the Prometheus Pods.  # noqa: E501

        :param service_account_name: The service_account_name of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: str
        """

        self._service_account_name = service_account_name

    @property
    def sha(self):
        """Gets the sha of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        SHA of Alertmanager container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set. Deprecated: use 'image' instead.  The image digest can be specified as part of the image URL.  # noqa: E501

        :return: The sha of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this ComCoreosMonitoringV1AlertmanagerSpec.

        SHA of Alertmanager container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set. Deprecated: use 'image' instead.  The image digest can be specified as part of the image URL.  # noqa: E501

        :param sha: The sha of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: str
        """

        self._sha = sha

    @property
    def storage(self):
        """Gets the storage of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501


        :return: The storage of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1AlertmanagerSpecStorage
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this ComCoreosMonitoringV1AlertmanagerSpec.


        :param storage: The storage of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1AlertmanagerSpecStorage
        """

        self._storage = storage

    @property
    def tag(self):
        """Gets the tag of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        Tag of Alertmanager container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set. Deprecated: use 'image' instead.  The image tag can be specified as part of the image URL.  # noqa: E501

        :return: The tag of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ComCoreosMonitoringV1AlertmanagerSpec.

        Tag of Alertmanager container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set. Deprecated: use 'image' instead.  The image tag can be specified as part of the image URL.  # noqa: E501

        :param tag: The tag of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def tolerations(self):
        """Gets the tolerations of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        If specified, the pod's tolerations.  # noqa: E501

        :return: The tolerations of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecTolerations]
        """
        return self._tolerations

    @tolerations.setter
    def tolerations(self, tolerations):
        """Sets the tolerations of this ComCoreosMonitoringV1AlertmanagerSpec.

        If specified, the pod's tolerations.  # noqa: E501

        :param tolerations: The tolerations of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecTolerations]
        """

        self._tolerations = tolerations

    @property
    def topology_spread_constraints(self):
        """Gets the topology_spread_constraints of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        If specified, the pod's topology spread constraints.  # noqa: E501

        :return: The topology_spread_constraints of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecTopologySpreadConstraints]
        """
        return self._topology_spread_constraints

    @topology_spread_constraints.setter
    def topology_spread_constraints(self, topology_spread_constraints):
        """Sets the topology_spread_constraints of this ComCoreosMonitoringV1AlertmanagerSpec.

        If specified, the pod's topology spread constraints.  # noqa: E501

        :param topology_spread_constraints: The topology_spread_constraints of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecTopologySpreadConstraints]
        """

        self._topology_spread_constraints = topology_spread_constraints

    @property
    def version(self):
        """Gets the version of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        Version the cluster should be on.  # noqa: E501

        :return: The version of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ComCoreosMonitoringV1AlertmanagerSpec.

        Version the cluster should be on.  # noqa: E501

        :param version: The version of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def volume_mounts(self):
        """Gets the volume_mounts of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the alertmanager container, that are generated as a result of StorageSpec objects.  # noqa: E501

        :return: The volume_mounts of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecVolumeMounts]
        """
        return self._volume_mounts

    @volume_mounts.setter
    def volume_mounts(self, volume_mounts):
        """Sets the volume_mounts of this ComCoreosMonitoringV1AlertmanagerSpec.

        VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the alertmanager container, that are generated as a result of StorageSpec objects.  # noqa: E501

        :param volume_mounts: The volume_mounts of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecVolumeMounts]
        """

        self._volume_mounts = volume_mounts

    @property
    def volumes(self):
        """Gets the volumes of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501

        Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.  # noqa: E501

        :return: The volumes of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecVolumes]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this ComCoreosMonitoringV1AlertmanagerSpec.

        Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.  # noqa: E501

        :param volumes: The volumes of this ComCoreosMonitoringV1AlertmanagerSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecVolumes]
        """

        self._volumes = volumes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComCoreosMonitoringV1AlertmanagerSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComCoreosMonitoringV1AlertmanagerSpec):
            return True

        return self.to_dict() != other.to_dict()
