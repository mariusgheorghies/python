# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'additional_tags': 'dict(str, str)',
        'cluster_name': 'str',
        'profile_name': 'str',
        'role_name': 'str',
        'selectors': 'list[IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpecSelectors]',
        'subnet_i_ds': 'list[str]'
    }

    attribute_map = {
        'additional_tags': 'additionalTags',
        'cluster_name': 'clusterName',
        'profile_name': 'profileName',
        'role_name': 'roleName',
        'selectors': 'selectors',
        'subnet_i_ds': 'subnetIDs'
    }

    def __init__(self, additional_tags=None, cluster_name=None, profile_name=None, role_name=None, selectors=None, subnet_i_ds=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._additional_tags = None
        self._cluster_name = None
        self._profile_name = None
        self._role_name = None
        self._selectors = None
        self._subnet_i_ds = None
        self.discriminator = None

        if additional_tags is not None:
            self.additional_tags = additional_tags
        self.cluster_name = cluster_name
        if profile_name is not None:
            self.profile_name = profile_name
        if role_name is not None:
            self.role_name = role_name
        if selectors is not None:
            self.selectors = selectors
        if subnet_i_ds is not None:
            self.subnet_i_ds = subnet_i_ds

    @property
    def additional_tags(self):
        """Gets the additional_tags of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec.  # noqa: E501

        AdditionalTags is an optional set of tags to add to AWS resources managed by the AWS provider, in addition to the ones added by default.  # noqa: E501

        :return: The additional_tags of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._additional_tags

    @additional_tags.setter
    def additional_tags(self, additional_tags):
        """Sets the additional_tags of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec.

        AdditionalTags is an optional set of tags to add to AWS resources managed by the AWS provider, in addition to the ones added by default.  # noqa: E501

        :param additional_tags: The additional_tags of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._additional_tags = additional_tags

    @property
    def cluster_name(self):
        """Gets the cluster_name of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec.  # noqa: E501

        ClusterName is the name of the Cluster this object belongs to.  # noqa: E501

        :return: The cluster_name of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec.

        ClusterName is the name of the Cluster this object belongs to.  # noqa: E501

        :param cluster_name: The cluster_name of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cluster_name is None:  # noqa: E501
            raise ValueError("Invalid value for `cluster_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cluster_name is not None and len(cluster_name) < 1):
            raise ValueError("Invalid value for `cluster_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._cluster_name = cluster_name

    @property
    def profile_name(self):
        """Gets the profile_name of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec.  # noqa: E501

        ProfileName specifies the profile name.  # noqa: E501

        :return: The profile_name of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec.  # noqa: E501
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec.

        ProfileName specifies the profile name.  # noqa: E501

        :param profile_name: The profile_name of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec.  # noqa: E501
        :type: str
        """

        self._profile_name = profile_name

    @property
    def role_name(self):
        """Gets the role_name of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec.  # noqa: E501

        RoleName specifies the name of IAM role for this fargate pool If the role is pre-existing we will treat it as unmanaged and not delete it on deletion. If the EKSEnableIAM feature flag is true and no name is supplied then a role is created.  # noqa: E501

        :return: The role_name of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec.

        RoleName specifies the name of IAM role for this fargate pool If the role is pre-existing we will treat it as unmanaged and not delete it on deletion. If the EKSEnableIAM feature flag is true and no name is supplied then a role is created.  # noqa: E501

        :param role_name: The role_name of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec.  # noqa: E501
        :type: str
        """

        self._role_name = role_name

    @property
    def selectors(self):
        """Gets the selectors of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec.  # noqa: E501

        Selectors specify fargate pod selectors.  # noqa: E501

        :return: The selectors of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec.  # noqa: E501
        :rtype: list[IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpecSelectors]
        """
        return self._selectors

    @selectors.setter
    def selectors(self, selectors):
        """Sets the selectors of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec.

        Selectors specify fargate pod selectors.  # noqa: E501

        :param selectors: The selectors of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec.  # noqa: E501
        :type: list[IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpecSelectors]
        """

        self._selectors = selectors

    @property
    def subnet_i_ds(self):
        """Gets the subnet_i_ds of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec.  # noqa: E501

        SubnetIDs specifies which subnets are used for the auto scaling group of this nodegroup.  # noqa: E501

        :return: The subnet_i_ds of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._subnet_i_ds

    @subnet_i_ds.setter
    def subnet_i_ds(self, subnet_i_ds):
        """Sets the subnet_i_ds of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec.

        SubnetIDs specifies which subnets are used for the auto scaling group of this nodegroup.  # noqa: E501

        :param subnet_i_ds: The subnet_i_ds of this IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec.  # noqa: E501
        :type: list[str]
        """

        self._subnet_i_ds = subnet_i_ds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1beta1AWSFargateProfileSpec):
            return True

        return self.to_dict() != other.to_dict()
