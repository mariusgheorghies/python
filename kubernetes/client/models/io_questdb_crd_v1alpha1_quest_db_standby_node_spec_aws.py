# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'default_security_group_ids': 'list[str]',
        'iam_instance_profile_arn': 'str',
        'image_id': 'str',
        'instance_type': 'str',
        'key_name': 'str',
        'region': 'str',
        'region_az': 'str',
        'subnet_id': 'str'
    }

    attribute_map = {
        'default_security_group_ids': 'defaultSecurityGroupIds',
        'iam_instance_profile_arn': 'iamInstanceProfileArn',
        'image_id': 'imageId',
        'instance_type': 'instanceType',
        'key_name': 'keyName',
        'region': 'region',
        'region_az': 'regionAz',
        'subnet_id': 'subnetId'
    }

    def __init__(self, default_security_group_ids=None, iam_instance_profile_arn=None, image_id=None, instance_type=None, key_name=None, region=None, region_az=None, subnet_id=None, local_vars_configuration=None):  # noqa: E501
        """IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._default_security_group_ids = None
        self._iam_instance_profile_arn = None
        self._image_id = None
        self._instance_type = None
        self._key_name = None
        self._region = None
        self._region_az = None
        self._subnet_id = None
        self.discriminator = None

        self.default_security_group_ids = default_security_group_ids
        self.iam_instance_profile_arn = iam_instance_profile_arn
        self.image_id = image_id
        self.instance_type = instance_type
        self.key_name = key_name
        self.region = region
        self.region_az = region_az
        self.subnet_id = subnet_id

    @property
    def default_security_group_ids(self):
        """Gets the default_security_group_ids of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.  # noqa: E501

        Default Security group IDs, this is needed for deletion  # noqa: E501

        :return: The default_security_group_ids of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.  # noqa: E501
        :rtype: list[str]
        """
        return self._default_security_group_ids

    @default_security_group_ids.setter
    def default_security_group_ids(self, default_security_group_ids):
        """Sets the default_security_group_ids of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.

        Default Security group IDs, this is needed for deletion  # noqa: E501

        :param default_security_group_ids: The default_security_group_ids of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and default_security_group_ids is None:  # noqa: E501
            raise ValueError("Invalid value for `default_security_group_ids`, must not be `None`")  # noqa: E501

        self._default_security_group_ids = default_security_group_ids

    @property
    def iam_instance_profile_arn(self):
        """Gets the iam_instance_profile_arn of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.  # noqa: E501

        IAM instance profile ARN that each database node is running under  # noqa: E501

        :return: The iam_instance_profile_arn of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.  # noqa: E501
        :rtype: str
        """
        return self._iam_instance_profile_arn

    @iam_instance_profile_arn.setter
    def iam_instance_profile_arn(self, iam_instance_profile_arn):
        """Sets the iam_instance_profile_arn of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.

        IAM instance profile ARN that each database node is running under  # noqa: E501

        :param iam_instance_profile_arn: The iam_instance_profile_arn of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and iam_instance_profile_arn is None:  # noqa: E501
            raise ValueError("Invalid value for `iam_instance_profile_arn`, must not be `None`")  # noqa: E501

        self._iam_instance_profile_arn = iam_instance_profile_arn

    @property
    def image_id(self):
        """Gets the image_id of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.  # noqa: E501

        AMI ID used for each database instance  # noqa: E501

        :return: The image_id of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.

        AMI ID used for each database instance  # noqa: E501

        :param image_id: The image_id of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and image_id is None:  # noqa: E501
            raise ValueError("Invalid value for `image_id`, must not be `None`")  # noqa: E501

        self._image_id = image_id

    @property
    def instance_type(self):
        """Gets the instance_type of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.  # noqa: E501

        AWS Instance Type  # noqa: E501

        :return: The instance_type of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.

        AWS Instance Type  # noqa: E501

        :param instance_type: The instance_type of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and instance_type is None:  # noqa: E501
            raise ValueError("Invalid value for `instance_type`, must not be `None`")  # noqa: E501

        self._instance_type = instance_type

    @property
    def key_name(self):
        """Gets the key_name of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.  # noqa: E501

        SSH key used to launch each database instance  # noqa: E501

        :return: The key_name of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.  # noqa: E501
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.

        SSH key used to launch each database instance  # noqa: E501

        :param key_name: The key_name of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and key_name is None:  # noqa: E501
            raise ValueError("Invalid value for `key_name`, must not be `None`")  # noqa: E501

        self._key_name = key_name

    @property
    def region(self):
        """Gets the region of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.  # noqa: E501

        AWS Region (example: eu-west-1)  # noqa: E501

        :return: The region of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.

        AWS Region (example: eu-west-1)  # noqa: E501

        :param region: The region of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and region is None:  # noqa: E501
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def region_az(self):
        """Gets the region_az of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.  # noqa: E501

        AWS Region Availability Zone (example: eu-west-1a)  # noqa: E501

        :return: The region_az of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.  # noqa: E501
        :rtype: str
        """
        return self._region_az

    @region_az.setter
    def region_az(self, region_az):
        """Sets the region_az of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.

        AWS Region Availability Zone (example: eu-west-1a)  # noqa: E501

        :param region_az: The region_az of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and region_az is None:  # noqa: E501
            raise ValueError("Invalid value for `region_az`, must not be `None`")  # noqa: E501

        self._region_az = region_az

    @property
    def subnet_id(self):
        """Gets the subnet_id of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.  # noqa: E501

        AWS Subnet ID of the kubernetes cluster  # noqa: E501

        :return: The subnet_id of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.  # noqa: E501
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.

        AWS Subnet ID of the kubernetes cluster  # noqa: E501

        :param subnet_id: The subnet_id of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and subnet_id is None:  # noqa: E501
            raise ValueError("Invalid value for `subnet_id`, must not be `None`")  # noqa: E501

        self._subnet_id = subnet_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoQuestdbCrdV1alpha1QuestDBStandbyNodeSpecAws):
            return True

        return self.to_dict() != other.to_dict()
