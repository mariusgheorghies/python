# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_server': 'IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationApiServer',
        'api_version': 'str',
        'certificates_dir': 'str',
        'cluster_name': 'str',
        'control_plane_endpoint': 'str',
        'controller_manager': 'IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationControllerManager',
        'dns': 'IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationDns',
        'etcd': 'IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcd',
        'feature_gates': 'dict(str, bool)',
        'image_repository': 'str',
        'kind': 'str',
        'kubernetes_version': 'str',
        'networking': 'IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationNetworking',
        'scheduler': 'IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationScheduler',
        'use_hyper_kube_image': 'bool'
    }

    attribute_map = {
        'api_server': 'apiServer',
        'api_version': 'apiVersion',
        'certificates_dir': 'certificatesDir',
        'cluster_name': 'clusterName',
        'control_plane_endpoint': 'controlPlaneEndpoint',
        'controller_manager': 'controllerManager',
        'dns': 'dns',
        'etcd': 'etcd',
        'feature_gates': 'featureGates',
        'image_repository': 'imageRepository',
        'kind': 'kind',
        'kubernetes_version': 'kubernetesVersion',
        'networking': 'networking',
        'scheduler': 'scheduler',
        'use_hyper_kube_image': 'useHyperKubeImage'
    }

    def __init__(self, api_server=None, api_version=None, certificates_dir=None, cluster_name=None, control_plane_endpoint=None, controller_manager=None, dns=None, etcd=None, feature_gates=None, image_repository=None, kind=None, kubernetes_version=None, networking=None, scheduler=None, use_hyper_kube_image=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_server = None
        self._api_version = None
        self._certificates_dir = None
        self._cluster_name = None
        self._control_plane_endpoint = None
        self._controller_manager = None
        self._dns = None
        self._etcd = None
        self._feature_gates = None
        self._image_repository = None
        self._kind = None
        self._kubernetes_version = None
        self._networking = None
        self._scheduler = None
        self._use_hyper_kube_image = None
        self.discriminator = None

        if api_server is not None:
            self.api_server = api_server
        if api_version is not None:
            self.api_version = api_version
        if certificates_dir is not None:
            self.certificates_dir = certificates_dir
        if cluster_name is not None:
            self.cluster_name = cluster_name
        if control_plane_endpoint is not None:
            self.control_plane_endpoint = control_plane_endpoint
        if controller_manager is not None:
            self.controller_manager = controller_manager
        if dns is not None:
            self.dns = dns
        if etcd is not None:
            self.etcd = etcd
        if feature_gates is not None:
            self.feature_gates = feature_gates
        if image_repository is not None:
            self.image_repository = image_repository
        if kind is not None:
            self.kind = kind
        if kubernetes_version is not None:
            self.kubernetes_version = kubernetes_version
        if networking is not None:
            self.networking = networking
        if scheduler is not None:
            self.scheduler = scheduler
        if use_hyper_kube_image is not None:
            self.use_hyper_kube_image = use_hyper_kube_image

    @property
    def api_server(self):
        """Gets the api_server of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501


        :return: The api_server of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :rtype: IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationApiServer
        """
        return self._api_server

    @api_server.setter
    def api_server(self, api_server):
        """Sets the api_server of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.


        :param api_server: The api_server of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :type: IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationApiServer
        """

        self._api_server = api_server

    @property
    def api_version(self):
        """Gets the api_version of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :return: The api_version of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :param api_version: The api_version of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :type: str
        """

        self._api_version = api_version

    @property
    def certificates_dir(self):
        """Gets the certificates_dir of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501

        CertificatesDir specifies where to store or look for all required certificates. NB: if not provided, this will default to `/etc/kubernetes/pki`  # noqa: E501

        :return: The certificates_dir of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._certificates_dir

    @certificates_dir.setter
    def certificates_dir(self, certificates_dir):
        """Sets the certificates_dir of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.

        CertificatesDir specifies where to store or look for all required certificates. NB: if not provided, this will default to `/etc/kubernetes/pki`  # noqa: E501

        :param certificates_dir: The certificates_dir of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :type: str
        """

        self._certificates_dir = certificates_dir

    @property
    def cluster_name(self):
        """Gets the cluster_name of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501

        The cluster name  # noqa: E501

        :return: The cluster_name of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.

        The cluster name  # noqa: E501

        :param cluster_name: The cluster_name of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def control_plane_endpoint(self):
        """Gets the control_plane_endpoint of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501

        ControlPlaneEndpoint sets a stable IP address or DNS name for the control plane; it can be a valid IP address or a RFC-1123 DNS subdomain, both with optional TCP port. In case the ControlPlaneEndpoint is not specified, the AdvertiseAddress + BindPort are used; in case the ControlPlaneEndpoint is specified but without a TCP port, the BindPort is used. Possible usages are: e.g. In a cluster with more than one control plane instances, this field should be assigned the address of the external load balancer in front of the control plane instances. e.g.  in environments with enforced node recycling, the ControlPlaneEndpoint could be used for assigning a stable DNS to the control plane. NB: This value defaults to the first value in the Cluster object status.apiEndpoints array.  # noqa: E501

        :return: The control_plane_endpoint of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._control_plane_endpoint

    @control_plane_endpoint.setter
    def control_plane_endpoint(self, control_plane_endpoint):
        """Sets the control_plane_endpoint of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.

        ControlPlaneEndpoint sets a stable IP address or DNS name for the control plane; it can be a valid IP address or a RFC-1123 DNS subdomain, both with optional TCP port. In case the ControlPlaneEndpoint is not specified, the AdvertiseAddress + BindPort are used; in case the ControlPlaneEndpoint is specified but without a TCP port, the BindPort is used. Possible usages are: e.g. In a cluster with more than one control plane instances, this field should be assigned the address of the external load balancer in front of the control plane instances. e.g.  in environments with enforced node recycling, the ControlPlaneEndpoint could be used for assigning a stable DNS to the control plane. NB: This value defaults to the first value in the Cluster object status.apiEndpoints array.  # noqa: E501

        :param control_plane_endpoint: The control_plane_endpoint of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :type: str
        """

        self._control_plane_endpoint = control_plane_endpoint

    @property
    def controller_manager(self):
        """Gets the controller_manager of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501


        :return: The controller_manager of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :rtype: IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationControllerManager
        """
        return self._controller_manager

    @controller_manager.setter
    def controller_manager(self, controller_manager):
        """Sets the controller_manager of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.


        :param controller_manager: The controller_manager of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :type: IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationControllerManager
        """

        self._controller_manager = controller_manager

    @property
    def dns(self):
        """Gets the dns of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501


        :return: The dns of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :rtype: IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationDns
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.


        :param dns: The dns of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :type: IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationDns
        """

        self._dns = dns

    @property
    def etcd(self):
        """Gets the etcd of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501


        :return: The etcd of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :rtype: IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcd
        """
        return self._etcd

    @etcd.setter
    def etcd(self, etcd):
        """Sets the etcd of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.


        :param etcd: The etcd of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :type: IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcd
        """

        self._etcd = etcd

    @property
    def feature_gates(self):
        """Gets the feature_gates of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501

        FeatureGates enabled by the user.  # noqa: E501

        :return: The feature_gates of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._feature_gates

    @feature_gates.setter
    def feature_gates(self, feature_gates):
        """Sets the feature_gates of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.

        FeatureGates enabled by the user.  # noqa: E501

        :param feature_gates: The feature_gates of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :type: dict(str, bool)
        """

        self._feature_gates = feature_gates

    @property
    def image_repository(self):
        """Gets the image_repository of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501

        ImageRepository sets the container registry to pull images from. If empty, `k8s.gcr.io` will be used by default; in case of kubernetes version is a CI build (kubernetes version starts with `ci/` or `ci-cross/`) `gcr.io/k8s-staging-ci-images` will be used as a default for control plane components and for kube-proxy, while `k8s.gcr.io` will be used for all the other images.  # noqa: E501

        :return: The image_repository of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._image_repository

    @image_repository.setter
    def image_repository(self, image_repository):
        """Sets the image_repository of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.

        ImageRepository sets the container registry to pull images from. If empty, `k8s.gcr.io` will be used by default; in case of kubernetes version is a CI build (kubernetes version starts with `ci/` or `ci-cross/`) `gcr.io/k8s-staging-ci-images` will be used as a default for control plane components and for kube-proxy, while `k8s.gcr.io` will be used for all the other images.  # noqa: E501

        :param image_repository: The image_repository of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :type: str
        """

        self._image_repository = image_repository

    @property
    def kind(self):
        """Gets the kind of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def kubernetes_version(self):
        """Gets the kubernetes_version of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501

        KubernetesVersion is the target version of the control plane. NB: This value defaults to the Machine object spec.version  # noqa: E501

        :return: The kubernetes_version of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._kubernetes_version

    @kubernetes_version.setter
    def kubernetes_version(self, kubernetes_version):
        """Sets the kubernetes_version of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.

        KubernetesVersion is the target version of the control plane. NB: This value defaults to the Machine object spec.version  # noqa: E501

        :param kubernetes_version: The kubernetes_version of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :type: str
        """

        self._kubernetes_version = kubernetes_version

    @property
    def networking(self):
        """Gets the networking of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501


        :return: The networking of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :rtype: IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationNetworking
        """
        return self._networking

    @networking.setter
    def networking(self, networking):
        """Sets the networking of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.


        :param networking: The networking of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :type: IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationNetworking
        """

        self._networking = networking

    @property
    def scheduler(self):
        """Gets the scheduler of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501


        :return: The scheduler of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :rtype: IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationScheduler
        """
        return self._scheduler

    @scheduler.setter
    def scheduler(self, scheduler):
        """Sets the scheduler of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.


        :param scheduler: The scheduler of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :type: IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationScheduler
        """

        self._scheduler = scheduler

    @property
    def use_hyper_kube_image(self):
        """Gets the use_hyper_kube_image of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501

        UseHyperKubeImage controls if hyperkube should be used for Kubernetes components instead of their respective separate images  # noqa: E501

        :return: The use_hyper_kube_image of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._use_hyper_kube_image

    @use_hyper_kube_image.setter
    def use_hyper_kube_image(self, use_hyper_kube_image):
        """Sets the use_hyper_kube_image of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.

        UseHyperKubeImage controls if hyperkube should be used for Kubernetes components instead of their respective separate images  # noqa: E501

        :param use_hyper_kube_image: The use_hyper_kube_image of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration.  # noqa: E501
        :type: bool
        """

        self._use_hyper_kube_image = use_hyper_kube_image

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfiguration):
            return True

        return self.to_dict() != other.to_dict()
