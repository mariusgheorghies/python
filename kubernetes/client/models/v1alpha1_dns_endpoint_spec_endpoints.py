# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class V1alpha1DNSEndpointSpecEndpoints(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dns_name': 'str',
        'labels': 'dict(str, str)',
        'provider_specific': 'list[V1alpha1DNSEndpointSpecProviderSpecific]',
        'record_ttl': 'int',
        'record_type': 'str',
        'set_identifier': 'str',
        'targets': 'list[str]'
    }

    attribute_map = {
        'dns_name': 'dnsName',
        'labels': 'labels',
        'provider_specific': 'providerSpecific',
        'record_ttl': 'recordTTL',
        'record_type': 'recordType',
        'set_identifier': 'setIdentifier',
        'targets': 'targets'
    }

    def __init__(self, dns_name=None, labels=None, provider_specific=None, record_ttl=None, record_type=None, set_identifier=None, targets=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1DNSEndpointSpecEndpoints - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._dns_name = None
        self._labels = None
        self._provider_specific = None
        self._record_ttl = None
        self._record_type = None
        self._set_identifier = None
        self._targets = None
        self.discriminator = None

        if dns_name is not None:
            self.dns_name = dns_name
        if labels is not None:
            self.labels = labels
        if provider_specific is not None:
            self.provider_specific = provider_specific
        if record_ttl is not None:
            self.record_ttl = record_ttl
        if record_type is not None:
            self.record_type = record_type
        if set_identifier is not None:
            self.set_identifier = set_identifier
        if targets is not None:
            self.targets = targets

    @property
    def dns_name(self):
        """Gets the dns_name of this V1alpha1DNSEndpointSpecEndpoints.  # noqa: E501

        The hostname of the DNS record  # noqa: E501

        :return: The dns_name of this V1alpha1DNSEndpointSpecEndpoints.  # noqa: E501
        :rtype: str
        """
        return self._dns_name

    @dns_name.setter
    def dns_name(self, dns_name):
        """Sets the dns_name of this V1alpha1DNSEndpointSpecEndpoints.

        The hostname of the DNS record  # noqa: E501

        :param dns_name: The dns_name of this V1alpha1DNSEndpointSpecEndpoints.  # noqa: E501
        :type: str
        """

        self._dns_name = dns_name

    @property
    def labels(self):
        """Gets the labels of this V1alpha1DNSEndpointSpecEndpoints.  # noqa: E501

        Labels stores labels defined for the Endpoint  # noqa: E501

        :return: The labels of this V1alpha1DNSEndpointSpecEndpoints.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this V1alpha1DNSEndpointSpecEndpoints.

        Labels stores labels defined for the Endpoint  # noqa: E501

        :param labels: The labels of this V1alpha1DNSEndpointSpecEndpoints.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def provider_specific(self):
        """Gets the provider_specific of this V1alpha1DNSEndpointSpecEndpoints.  # noqa: E501

        ProviderSpecific stores provider specific config  # noqa: E501

        :return: The provider_specific of this V1alpha1DNSEndpointSpecEndpoints.  # noqa: E501
        :rtype: list[V1alpha1DNSEndpointSpecProviderSpecific]
        """
        return self._provider_specific

    @provider_specific.setter
    def provider_specific(self, provider_specific):
        """Sets the provider_specific of this V1alpha1DNSEndpointSpecEndpoints.

        ProviderSpecific stores provider specific config  # noqa: E501

        :param provider_specific: The provider_specific of this V1alpha1DNSEndpointSpecEndpoints.  # noqa: E501
        :type: list[V1alpha1DNSEndpointSpecProviderSpecific]
        """

        self._provider_specific = provider_specific

    @property
    def record_ttl(self):
        """Gets the record_ttl of this V1alpha1DNSEndpointSpecEndpoints.  # noqa: E501

        TTL for the record  # noqa: E501

        :return: The record_ttl of this V1alpha1DNSEndpointSpecEndpoints.  # noqa: E501
        :rtype: int
        """
        return self._record_ttl

    @record_ttl.setter
    def record_ttl(self, record_ttl):
        """Sets the record_ttl of this V1alpha1DNSEndpointSpecEndpoints.

        TTL for the record  # noqa: E501

        :param record_ttl: The record_ttl of this V1alpha1DNSEndpointSpecEndpoints.  # noqa: E501
        :type: int
        """

        self._record_ttl = record_ttl

    @property
    def record_type(self):
        """Gets the record_type of this V1alpha1DNSEndpointSpecEndpoints.  # noqa: E501

        RecordType type of record, e.g. CNAME, A, SRV, TXT etc  # noqa: E501

        :return: The record_type of this V1alpha1DNSEndpointSpecEndpoints.  # noqa: E501
        :rtype: str
        """
        return self._record_type

    @record_type.setter
    def record_type(self, record_type):
        """Sets the record_type of this V1alpha1DNSEndpointSpecEndpoints.

        RecordType type of record, e.g. CNAME, A, SRV, TXT etc  # noqa: E501

        :param record_type: The record_type of this V1alpha1DNSEndpointSpecEndpoints.  # noqa: E501
        :type: str
        """

        self._record_type = record_type

    @property
    def set_identifier(self):
        """Gets the set_identifier of this V1alpha1DNSEndpointSpecEndpoints.  # noqa: E501

        Identifier to distinguish multiple records with the same name and type (e.g. Route53 records with routing policies other than 'simple')  # noqa: E501

        :return: The set_identifier of this V1alpha1DNSEndpointSpecEndpoints.  # noqa: E501
        :rtype: str
        """
        return self._set_identifier

    @set_identifier.setter
    def set_identifier(self, set_identifier):
        """Sets the set_identifier of this V1alpha1DNSEndpointSpecEndpoints.

        Identifier to distinguish multiple records with the same name and type (e.g. Route53 records with routing policies other than 'simple')  # noqa: E501

        :param set_identifier: The set_identifier of this V1alpha1DNSEndpointSpecEndpoints.  # noqa: E501
        :type: str
        """

        self._set_identifier = set_identifier

    @property
    def targets(self):
        """Gets the targets of this V1alpha1DNSEndpointSpecEndpoints.  # noqa: E501

        The targets the DNS record points to  # noqa: E501

        :return: The targets of this V1alpha1DNSEndpointSpecEndpoints.  # noqa: E501
        :rtype: list[str]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this V1alpha1DNSEndpointSpecEndpoints.

        The targets the DNS record points to  # noqa: E501

        :param targets: The targets of this V1alpha1DNSEndpointSpecEndpoints.  # noqa: E501
        :type: list[str]
        """

        self._targets = targets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1DNSEndpointSpecEndpoints):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1DNSEndpointSpecEndpoints):
            return True

        return self.to_dict() != other.to_dict()
