# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComCoreosMonitoringV1ThanosRulerSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'affinity': 'ComCoreosMonitoringV1AlertmanagerSpecAffinity',
        'alert_drop_labels': 'list[str]',
        'alert_query_url': 'str',
        'alertmanagers_config': 'ComCoreosMonitoringV1ThanosRulerSpecAlertmanagersConfig',
        'alertmanagers_url': 'list[str]',
        'containers': 'list[ComCoreosMonitoringV1AlertmanagerSpecContainers]',
        'enforced_namespace_label': 'str',
        'evaluation_interval': 'str',
        'external_prefix': 'str',
        'grpc_server_tls_config': 'ComCoreosMonitoringV1PrometheusSpecThanosGrpcServerTlsConfig',
        'image': 'str',
        'image_pull_secrets': 'list[ComCoreosMonitoringV1AlertmanagerSpecImagePullSecrets]',
        'init_containers': 'list[ComCoreosMonitoringV1AlertmanagerSpecContainers]',
        'labels': 'dict(str, str)',
        'listen_local': 'bool',
        'log_format': 'str',
        'log_level': 'str',
        'node_selector': 'dict(str, str)',
        'object_storage_config': 'ComCoreosMonitoringV1PrometheusSpecThanosObjectStorageConfig',
        'object_storage_config_file': 'str',
        'paused': 'bool',
        'pod_metadata': 'ComCoreosMonitoringV1ThanosRulerSpecPodMetadata',
        'port_name': 'str',
        'priority_class_name': 'str',
        'prometheus_rules_excluded_from_enforce': 'list[ComCoreosMonitoringV1PrometheusSpecPrometheusRulesExcludedFromEnforce]',
        'query_config': 'ComCoreosMonitoringV1ThanosRulerSpecQueryConfig',
        'query_endpoints': 'list[str]',
        'replicas': 'int',
        'resources': 'ComCoreosMonitoringV1ThanosRulerSpecResources',
        'retention': 'str',
        'route_prefix': 'str',
        'rule_namespace_selector': 'ComCoreosMonitoringV1ThanosRulerSpecRuleNamespaceSelector',
        'rule_selector': 'ComCoreosMonitoringV1ThanosRulerSpecRuleSelector',
        'security_context': 'ComCoreosMonitoringV1AlertmanagerSpecSecurityContext1',
        'service_account_name': 'str',
        'storage': 'ComCoreosMonitoringV1PrometheusSpecStorage',
        'tolerations': 'list[ComCoreosMonitoringV1AlertmanagerSpecTolerations]',
        'topology_spread_constraints': 'list[ComCoreosMonitoringV1AlertmanagerSpecTopologySpreadConstraints]',
        'tracing_config': 'ComCoreosMonitoringV1PrometheusSpecThanosTracingConfig',
        'volumes': 'list[ComCoreosMonitoringV1AlertmanagerSpecVolumes]'
    }

    attribute_map = {
        'affinity': 'affinity',
        'alert_drop_labels': 'alertDropLabels',
        'alert_query_url': 'alertQueryUrl',
        'alertmanagers_config': 'alertmanagersConfig',
        'alertmanagers_url': 'alertmanagersUrl',
        'containers': 'containers',
        'enforced_namespace_label': 'enforcedNamespaceLabel',
        'evaluation_interval': 'evaluationInterval',
        'external_prefix': 'externalPrefix',
        'grpc_server_tls_config': 'grpcServerTlsConfig',
        'image': 'image',
        'image_pull_secrets': 'imagePullSecrets',
        'init_containers': 'initContainers',
        'labels': 'labels',
        'listen_local': 'listenLocal',
        'log_format': 'logFormat',
        'log_level': 'logLevel',
        'node_selector': 'nodeSelector',
        'object_storage_config': 'objectStorageConfig',
        'object_storage_config_file': 'objectStorageConfigFile',
        'paused': 'paused',
        'pod_metadata': 'podMetadata',
        'port_name': 'portName',
        'priority_class_name': 'priorityClassName',
        'prometheus_rules_excluded_from_enforce': 'prometheusRulesExcludedFromEnforce',
        'query_config': 'queryConfig',
        'query_endpoints': 'queryEndpoints',
        'replicas': 'replicas',
        'resources': 'resources',
        'retention': 'retention',
        'route_prefix': 'routePrefix',
        'rule_namespace_selector': 'ruleNamespaceSelector',
        'rule_selector': 'ruleSelector',
        'security_context': 'securityContext',
        'service_account_name': 'serviceAccountName',
        'storage': 'storage',
        'tolerations': 'tolerations',
        'topology_spread_constraints': 'topologySpreadConstraints',
        'tracing_config': 'tracingConfig',
        'volumes': 'volumes'
    }

    def __init__(self, affinity=None, alert_drop_labels=None, alert_query_url=None, alertmanagers_config=None, alertmanagers_url=None, containers=None, enforced_namespace_label=None, evaluation_interval=None, external_prefix=None, grpc_server_tls_config=None, image=None, image_pull_secrets=None, init_containers=None, labels=None, listen_local=None, log_format=None, log_level=None, node_selector=None, object_storage_config=None, object_storage_config_file=None, paused=None, pod_metadata=None, port_name=None, priority_class_name=None, prometheus_rules_excluded_from_enforce=None, query_config=None, query_endpoints=None, replicas=None, resources=None, retention=None, route_prefix=None, rule_namespace_selector=None, rule_selector=None, security_context=None, service_account_name=None, storage=None, tolerations=None, topology_spread_constraints=None, tracing_config=None, volumes=None, local_vars_configuration=None):  # noqa: E501
        """ComCoreosMonitoringV1ThanosRulerSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._affinity = None
        self._alert_drop_labels = None
        self._alert_query_url = None
        self._alertmanagers_config = None
        self._alertmanagers_url = None
        self._containers = None
        self._enforced_namespace_label = None
        self._evaluation_interval = None
        self._external_prefix = None
        self._grpc_server_tls_config = None
        self._image = None
        self._image_pull_secrets = None
        self._init_containers = None
        self._labels = None
        self._listen_local = None
        self._log_format = None
        self._log_level = None
        self._node_selector = None
        self._object_storage_config = None
        self._object_storage_config_file = None
        self._paused = None
        self._pod_metadata = None
        self._port_name = None
        self._priority_class_name = None
        self._prometheus_rules_excluded_from_enforce = None
        self._query_config = None
        self._query_endpoints = None
        self._replicas = None
        self._resources = None
        self._retention = None
        self._route_prefix = None
        self._rule_namespace_selector = None
        self._rule_selector = None
        self._security_context = None
        self._service_account_name = None
        self._storage = None
        self._tolerations = None
        self._topology_spread_constraints = None
        self._tracing_config = None
        self._volumes = None
        self.discriminator = None

        if affinity is not None:
            self.affinity = affinity
        if alert_drop_labels is not None:
            self.alert_drop_labels = alert_drop_labels
        if alert_query_url is not None:
            self.alert_query_url = alert_query_url
        if alertmanagers_config is not None:
            self.alertmanagers_config = alertmanagers_config
        if alertmanagers_url is not None:
            self.alertmanagers_url = alertmanagers_url
        if containers is not None:
            self.containers = containers
        if enforced_namespace_label is not None:
            self.enforced_namespace_label = enforced_namespace_label
        if evaluation_interval is not None:
            self.evaluation_interval = evaluation_interval
        if external_prefix is not None:
            self.external_prefix = external_prefix
        if grpc_server_tls_config is not None:
            self.grpc_server_tls_config = grpc_server_tls_config
        if image is not None:
            self.image = image
        if image_pull_secrets is not None:
            self.image_pull_secrets = image_pull_secrets
        if init_containers is not None:
            self.init_containers = init_containers
        if labels is not None:
            self.labels = labels
        if listen_local is not None:
            self.listen_local = listen_local
        if log_format is not None:
            self.log_format = log_format
        if log_level is not None:
            self.log_level = log_level
        if node_selector is not None:
            self.node_selector = node_selector
        if object_storage_config is not None:
            self.object_storage_config = object_storage_config
        if object_storage_config_file is not None:
            self.object_storage_config_file = object_storage_config_file
        if paused is not None:
            self.paused = paused
        if pod_metadata is not None:
            self.pod_metadata = pod_metadata
        if port_name is not None:
            self.port_name = port_name
        if priority_class_name is not None:
            self.priority_class_name = priority_class_name
        if prometheus_rules_excluded_from_enforce is not None:
            self.prometheus_rules_excluded_from_enforce = prometheus_rules_excluded_from_enforce
        if query_config is not None:
            self.query_config = query_config
        if query_endpoints is not None:
            self.query_endpoints = query_endpoints
        if replicas is not None:
            self.replicas = replicas
        if resources is not None:
            self.resources = resources
        if retention is not None:
            self.retention = retention
        if route_prefix is not None:
            self.route_prefix = route_prefix
        if rule_namespace_selector is not None:
            self.rule_namespace_selector = rule_namespace_selector
        if rule_selector is not None:
            self.rule_selector = rule_selector
        if security_context is not None:
            self.security_context = security_context
        if service_account_name is not None:
            self.service_account_name = service_account_name
        if storage is not None:
            self.storage = storage
        if tolerations is not None:
            self.tolerations = tolerations
        if topology_spread_constraints is not None:
            self.topology_spread_constraints = topology_spread_constraints
        if tracing_config is not None:
            self.tracing_config = tracing_config
        if volumes is not None:
            self.volumes = volumes

    @property
    def affinity(self):
        """Gets the affinity of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501


        :return: The affinity of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1AlertmanagerSpecAffinity
        """
        return self._affinity

    @affinity.setter
    def affinity(self, affinity):
        """Sets the affinity of this ComCoreosMonitoringV1ThanosRulerSpec.


        :param affinity: The affinity of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1AlertmanagerSpecAffinity
        """

        self._affinity = affinity

    @property
    def alert_drop_labels(self):
        """Gets the alert_drop_labels of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        AlertDropLabels configure the label names which should be dropped in ThanosRuler alerts. If `labels` field is not provided, `thanos_ruler_replica` will be dropped in alerts by default.  # noqa: E501

        :return: The alert_drop_labels of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._alert_drop_labels

    @alert_drop_labels.setter
    def alert_drop_labels(self, alert_drop_labels):
        """Sets the alert_drop_labels of this ComCoreosMonitoringV1ThanosRulerSpec.

        AlertDropLabels configure the label names which should be dropped in ThanosRuler alerts. If `labels` field is not provided, `thanos_ruler_replica` will be dropped in alerts by default.  # noqa: E501

        :param alert_drop_labels: The alert_drop_labels of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: list[str]
        """

        self._alert_drop_labels = alert_drop_labels

    @property
    def alert_query_url(self):
        """Gets the alert_query_url of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        The external Query URL the Thanos Ruler will set in the 'Source' field of all alerts. Maps to the '--alert.query-url' CLI arg.  # noqa: E501

        :return: The alert_query_url of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: str
        """
        return self._alert_query_url

    @alert_query_url.setter
    def alert_query_url(self, alert_query_url):
        """Sets the alert_query_url of this ComCoreosMonitoringV1ThanosRulerSpec.

        The external Query URL the Thanos Ruler will set in the 'Source' field of all alerts. Maps to the '--alert.query-url' CLI arg.  # noqa: E501

        :param alert_query_url: The alert_query_url of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: str
        """

        self._alert_query_url = alert_query_url

    @property
    def alertmanagers_config(self):
        """Gets the alertmanagers_config of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501


        :return: The alertmanagers_config of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1ThanosRulerSpecAlertmanagersConfig
        """
        return self._alertmanagers_config

    @alertmanagers_config.setter
    def alertmanagers_config(self, alertmanagers_config):
        """Sets the alertmanagers_config of this ComCoreosMonitoringV1ThanosRulerSpec.


        :param alertmanagers_config: The alertmanagers_config of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1ThanosRulerSpecAlertmanagersConfig
        """

        self._alertmanagers_config = alertmanagers_config

    @property
    def alertmanagers_url(self):
        """Gets the alertmanagers_url of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        Define URLs to send alerts to Alertmanager.  For Thanos v0.10.0 and higher, AlertManagersConfig should be used instead.  Note: this field will be ignored if AlertManagersConfig is specified. Maps to the `alertmanagers.url` arg.  # noqa: E501

        :return: The alertmanagers_url of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._alertmanagers_url

    @alertmanagers_url.setter
    def alertmanagers_url(self, alertmanagers_url):
        """Sets the alertmanagers_url of this ComCoreosMonitoringV1ThanosRulerSpec.

        Define URLs to send alerts to Alertmanager.  For Thanos v0.10.0 and higher, AlertManagersConfig should be used instead.  Note: this field will be ignored if AlertManagersConfig is specified. Maps to the `alertmanagers.url` arg.  # noqa: E501

        :param alertmanagers_url: The alertmanagers_url of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: list[str]
        """

        self._alertmanagers_url = alertmanagers_url

    @property
    def containers(self):
        """Gets the containers of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        Containers allows injecting additional containers or modifying operator generated containers. This can be used to allow adding an authentication proxy to a ThanosRuler pod or to change the behavior of an operator generated container. Containers described here modify an operator generated container if they share the same name and modifications are done via a strategic merge patch. The current container names are: `thanos-ruler` and `config-reloader`. Overriding containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.  # noqa: E501

        :return: The containers of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecContainers]
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this ComCoreosMonitoringV1ThanosRulerSpec.

        Containers allows injecting additional containers or modifying operator generated containers. This can be used to allow adding an authentication proxy to a ThanosRuler pod or to change the behavior of an operator generated container. Containers described here modify an operator generated container if they share the same name and modifications are done via a strategic merge patch. The current container names are: `thanos-ruler` and `config-reloader`. Overriding containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.  # noqa: E501

        :param containers: The containers of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecContainers]
        """

        self._containers = containers

    @property
    def enforced_namespace_label(self):
        """Gets the enforced_namespace_label of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        EnforcedNamespaceLabel enforces adding a namespace label of origin for each alert and metric that is user created. The label value will always be the namespace of the object that is being created.  # noqa: E501

        :return: The enforced_namespace_label of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: str
        """
        return self._enforced_namespace_label

    @enforced_namespace_label.setter
    def enforced_namespace_label(self, enforced_namespace_label):
        """Sets the enforced_namespace_label of this ComCoreosMonitoringV1ThanosRulerSpec.

        EnforcedNamespaceLabel enforces adding a namespace label of origin for each alert and metric that is user created. The label value will always be the namespace of the object that is being created.  # noqa: E501

        :param enforced_namespace_label: The enforced_namespace_label of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: str
        """

        self._enforced_namespace_label = enforced_namespace_label

    @property
    def evaluation_interval(self):
        """Gets the evaluation_interval of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        Interval between consecutive evaluations.  # noqa: E501

        :return: The evaluation_interval of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_interval

    @evaluation_interval.setter
    def evaluation_interval(self, evaluation_interval):
        """Sets the evaluation_interval of this ComCoreosMonitoringV1ThanosRulerSpec.

        Interval between consecutive evaluations.  # noqa: E501

        :param evaluation_interval: The evaluation_interval of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: str
        """

        self._evaluation_interval = evaluation_interval

    @property
    def external_prefix(self):
        """Gets the external_prefix of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        The external URL the Thanos Ruler instances will be available under. This is necessary to generate correct URLs. This is necessary if Thanos Ruler is not served from root of a DNS name.  # noqa: E501

        :return: The external_prefix of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: str
        """
        return self._external_prefix

    @external_prefix.setter
    def external_prefix(self, external_prefix):
        """Sets the external_prefix of this ComCoreosMonitoringV1ThanosRulerSpec.

        The external URL the Thanos Ruler instances will be available under. This is necessary to generate correct URLs. This is necessary if Thanos Ruler is not served from root of a DNS name.  # noqa: E501

        :param external_prefix: The external_prefix of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: str
        """

        self._external_prefix = external_prefix

    @property
    def grpc_server_tls_config(self):
        """Gets the grpc_server_tls_config of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501


        :return: The grpc_server_tls_config of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecThanosGrpcServerTlsConfig
        """
        return self._grpc_server_tls_config

    @grpc_server_tls_config.setter
    def grpc_server_tls_config(self, grpc_server_tls_config):
        """Sets the grpc_server_tls_config of this ComCoreosMonitoringV1ThanosRulerSpec.


        :param grpc_server_tls_config: The grpc_server_tls_config of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecThanosGrpcServerTlsConfig
        """

        self._grpc_server_tls_config = grpc_server_tls_config

    @property
    def image(self):
        """Gets the image of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        Thanos container image URL.  # noqa: E501

        :return: The image of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ComCoreosMonitoringV1ThanosRulerSpec.

        Thanos container image URL.  # noqa: E501

        :param image: The image of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def image_pull_secrets(self):
        """Gets the image_pull_secrets of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        An optional list of references to secrets in the same namespace to use for pulling thanos images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod  # noqa: E501

        :return: The image_pull_secrets of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecImagePullSecrets]
        """
        return self._image_pull_secrets

    @image_pull_secrets.setter
    def image_pull_secrets(self, image_pull_secrets):
        """Sets the image_pull_secrets of this ComCoreosMonitoringV1ThanosRulerSpec.

        An optional list of references to secrets in the same namespace to use for pulling thanos images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod  # noqa: E501

        :param image_pull_secrets: The image_pull_secrets of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecImagePullSecrets]
        """

        self._image_pull_secrets = image_pull_secrets

    @property
    def init_containers(self):
        """Gets the init_containers of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the ThanosRuler configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.  # noqa: E501

        :return: The init_containers of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecContainers]
        """
        return self._init_containers

    @init_containers.setter
    def init_containers(self, init_containers):
        """Sets the init_containers of this ComCoreosMonitoringV1ThanosRulerSpec.

        InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the ThanosRuler configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.  # noqa: E501

        :param init_containers: The init_containers of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecContainers]
        """

        self._init_containers = init_containers

    @property
    def labels(self):
        """Gets the labels of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        Labels configure the external label pairs to ThanosRuler. If not provided, default replica label `thanos_ruler_replica` will be added as a label and be dropped in alerts.  # noqa: E501

        :return: The labels of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ComCoreosMonitoringV1ThanosRulerSpec.

        Labels configure the external label pairs to ThanosRuler. If not provided, default replica label `thanos_ruler_replica` will be added as a label and be dropped in alerts.  # noqa: E501

        :param labels: The labels of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def listen_local(self):
        """Gets the listen_local of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        ListenLocal makes the Thanos ruler listen on loopback, so that it does not bind against the Pod IP.  # noqa: E501

        :return: The listen_local of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: bool
        """
        return self._listen_local

    @listen_local.setter
    def listen_local(self, listen_local):
        """Sets the listen_local of this ComCoreosMonitoringV1ThanosRulerSpec.

        ListenLocal makes the Thanos ruler listen on loopback, so that it does not bind against the Pod IP.  # noqa: E501

        :param listen_local: The listen_local of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: bool
        """

        self._listen_local = listen_local

    @property
    def log_format(self):
        """Gets the log_format of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        Log format for ThanosRuler to be configured with.  # noqa: E501

        :return: The log_format of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: str
        """
        return self._log_format

    @log_format.setter
    def log_format(self, log_format):
        """Sets the log_format of this ComCoreosMonitoringV1ThanosRulerSpec.

        Log format for ThanosRuler to be configured with.  # noqa: E501

        :param log_format: The log_format of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: str
        """

        self._log_format = log_format

    @property
    def log_level(self):
        """Gets the log_level of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        Log level for ThanosRuler to be configured with.  # noqa: E501

        :return: The log_level of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: str
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this ComCoreosMonitoringV1ThanosRulerSpec.

        Log level for ThanosRuler to be configured with.  # noqa: E501

        :param log_level: The log_level of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: str
        """

        self._log_level = log_level

    @property
    def node_selector(self):
        """Gets the node_selector of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        Define which Nodes the Pods are scheduled on.  # noqa: E501

        :return: The node_selector of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this ComCoreosMonitoringV1ThanosRulerSpec.

        Define which Nodes the Pods are scheduled on.  # noqa: E501

        :param node_selector: The node_selector of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._node_selector = node_selector

    @property
    def object_storage_config(self):
        """Gets the object_storage_config of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501


        :return: The object_storage_config of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecThanosObjectStorageConfig
        """
        return self._object_storage_config

    @object_storage_config.setter
    def object_storage_config(self, object_storage_config):
        """Sets the object_storage_config of this ComCoreosMonitoringV1ThanosRulerSpec.


        :param object_storage_config: The object_storage_config of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecThanosObjectStorageConfig
        """

        self._object_storage_config = object_storage_config

    @property
    def object_storage_config_file(self):
        """Gets the object_storage_config_file of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        ObjectStorageConfigFile specifies the path of the object storage configuration file. When used alongside with ObjectStorageConfig, ObjectStorageConfigFile takes precedence.  # noqa: E501

        :return: The object_storage_config_file of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: str
        """
        return self._object_storage_config_file

    @object_storage_config_file.setter
    def object_storage_config_file(self, object_storage_config_file):
        """Sets the object_storage_config_file of this ComCoreosMonitoringV1ThanosRulerSpec.

        ObjectStorageConfigFile specifies the path of the object storage configuration file. When used alongside with ObjectStorageConfig, ObjectStorageConfigFile takes precedence.  # noqa: E501

        :param object_storage_config_file: The object_storage_config_file of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: str
        """

        self._object_storage_config_file = object_storage_config_file

    @property
    def paused(self):
        """Gets the paused of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        When a ThanosRuler deployment is paused, no actions except for deletion will be performed on the underlying objects.  # noqa: E501

        :return: The paused of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: bool
        """
        return self._paused

    @paused.setter
    def paused(self, paused):
        """Sets the paused of this ComCoreosMonitoringV1ThanosRulerSpec.

        When a ThanosRuler deployment is paused, no actions except for deletion will be performed on the underlying objects.  # noqa: E501

        :param paused: The paused of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: bool
        """

        self._paused = paused

    @property
    def pod_metadata(self):
        """Gets the pod_metadata of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501


        :return: The pod_metadata of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1ThanosRulerSpecPodMetadata
        """
        return self._pod_metadata

    @pod_metadata.setter
    def pod_metadata(self, pod_metadata):
        """Sets the pod_metadata of this ComCoreosMonitoringV1ThanosRulerSpec.


        :param pod_metadata: The pod_metadata of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1ThanosRulerSpecPodMetadata
        """

        self._pod_metadata = pod_metadata

    @property
    def port_name(self):
        """Gets the port_name of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        Port name used for the pods and governing service. This defaults to web  # noqa: E501

        :return: The port_name of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: str
        """
        return self._port_name

    @port_name.setter
    def port_name(self, port_name):
        """Sets the port_name of this ComCoreosMonitoringV1ThanosRulerSpec.

        Port name used for the pods and governing service. This defaults to web  # noqa: E501

        :param port_name: The port_name of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: str
        """

        self._port_name = port_name

    @property
    def priority_class_name(self):
        """Gets the priority_class_name of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        Priority class assigned to the Pods  # noqa: E501

        :return: The priority_class_name of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: str
        """
        return self._priority_class_name

    @priority_class_name.setter
    def priority_class_name(self, priority_class_name):
        """Sets the priority_class_name of this ComCoreosMonitoringV1ThanosRulerSpec.

        Priority class assigned to the Pods  # noqa: E501

        :param priority_class_name: The priority_class_name of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: str
        """

        self._priority_class_name = priority_class_name

    @property
    def prometheus_rules_excluded_from_enforce(self):
        """Gets the prometheus_rules_excluded_from_enforce of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        PrometheusRulesExcludedFromEnforce - list of Prometheus rules to be excluded from enforcing of adding namespace labels. Works only if enforcedNamespaceLabel set to true. Make sure both ruleNamespace and ruleName are set for each pair  # noqa: E501

        :return: The prometheus_rules_excluded_from_enforce of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1PrometheusSpecPrometheusRulesExcludedFromEnforce]
        """
        return self._prometheus_rules_excluded_from_enforce

    @prometheus_rules_excluded_from_enforce.setter
    def prometheus_rules_excluded_from_enforce(self, prometheus_rules_excluded_from_enforce):
        """Sets the prometheus_rules_excluded_from_enforce of this ComCoreosMonitoringV1ThanosRulerSpec.

        PrometheusRulesExcludedFromEnforce - list of Prometheus rules to be excluded from enforcing of adding namespace labels. Works only if enforcedNamespaceLabel set to true. Make sure both ruleNamespace and ruleName are set for each pair  # noqa: E501

        :param prometheus_rules_excluded_from_enforce: The prometheus_rules_excluded_from_enforce of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1PrometheusSpecPrometheusRulesExcludedFromEnforce]
        """

        self._prometheus_rules_excluded_from_enforce = prometheus_rules_excluded_from_enforce

    @property
    def query_config(self):
        """Gets the query_config of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501


        :return: The query_config of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1ThanosRulerSpecQueryConfig
        """
        return self._query_config

    @query_config.setter
    def query_config(self, query_config):
        """Sets the query_config of this ComCoreosMonitoringV1ThanosRulerSpec.


        :param query_config: The query_config of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1ThanosRulerSpecQueryConfig
        """

        self._query_config = query_config

    @property
    def query_endpoints(self):
        """Gets the query_endpoints of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        QueryEndpoints defines Thanos querier endpoints from which to query metrics. Maps to the --query flag of thanos ruler.  # noqa: E501

        :return: The query_endpoints of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._query_endpoints

    @query_endpoints.setter
    def query_endpoints(self, query_endpoints):
        """Sets the query_endpoints of this ComCoreosMonitoringV1ThanosRulerSpec.

        QueryEndpoints defines Thanos querier endpoints from which to query metrics. Maps to the --query flag of thanos ruler.  # noqa: E501

        :param query_endpoints: The query_endpoints of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: list[str]
        """

        self._query_endpoints = query_endpoints

    @property
    def replicas(self):
        """Gets the replicas of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        Number of thanos ruler instances to deploy.  # noqa: E501

        :return: The replicas of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this ComCoreosMonitoringV1ThanosRulerSpec.

        Number of thanos ruler instances to deploy.  # noqa: E501

        :param replicas: The replicas of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def resources(self):
        """Gets the resources of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501


        :return: The resources of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1ThanosRulerSpecResources
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this ComCoreosMonitoringV1ThanosRulerSpec.


        :param resources: The resources of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1ThanosRulerSpecResources
        """

        self._resources = resources

    @property
    def retention(self):
        """Gets the retention of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        Time duration ThanosRuler shall retain data for. Default is '24h', and must match the regular expression `[0-9]+(ms|s|m|h|d|w|y)` (milliseconds seconds minutes hours days weeks years).  # noqa: E501

        :return: The retention of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: str
        """
        return self._retention

    @retention.setter
    def retention(self, retention):
        """Sets the retention of this ComCoreosMonitoringV1ThanosRulerSpec.

        Time duration ThanosRuler shall retain data for. Default is '24h', and must match the regular expression `[0-9]+(ms|s|m|h|d|w|y)` (milliseconds seconds minutes hours days weeks years).  # noqa: E501

        :param retention: The retention of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: str
        """

        self._retention = retention

    @property
    def route_prefix(self):
        """Gets the route_prefix of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        The route prefix ThanosRuler registers HTTP handlers for. This allows thanos UI to be served on a sub-path.  # noqa: E501

        :return: The route_prefix of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: str
        """
        return self._route_prefix

    @route_prefix.setter
    def route_prefix(self, route_prefix):
        """Sets the route_prefix of this ComCoreosMonitoringV1ThanosRulerSpec.

        The route prefix ThanosRuler registers HTTP handlers for. This allows thanos UI to be served on a sub-path.  # noqa: E501

        :param route_prefix: The route_prefix of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: str
        """

        self._route_prefix = route_prefix

    @property
    def rule_namespace_selector(self):
        """Gets the rule_namespace_selector of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501


        :return: The rule_namespace_selector of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1ThanosRulerSpecRuleNamespaceSelector
        """
        return self._rule_namespace_selector

    @rule_namespace_selector.setter
    def rule_namespace_selector(self, rule_namespace_selector):
        """Sets the rule_namespace_selector of this ComCoreosMonitoringV1ThanosRulerSpec.


        :param rule_namespace_selector: The rule_namespace_selector of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1ThanosRulerSpecRuleNamespaceSelector
        """

        self._rule_namespace_selector = rule_namespace_selector

    @property
    def rule_selector(self):
        """Gets the rule_selector of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501


        :return: The rule_selector of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1ThanosRulerSpecRuleSelector
        """
        return self._rule_selector

    @rule_selector.setter
    def rule_selector(self, rule_selector):
        """Sets the rule_selector of this ComCoreosMonitoringV1ThanosRulerSpec.


        :param rule_selector: The rule_selector of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1ThanosRulerSpecRuleSelector
        """

        self._rule_selector = rule_selector

    @property
    def security_context(self):
        """Gets the security_context of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501


        :return: The security_context of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1AlertmanagerSpecSecurityContext1
        """
        return self._security_context

    @security_context.setter
    def security_context(self, security_context):
        """Sets the security_context of this ComCoreosMonitoringV1ThanosRulerSpec.


        :param security_context: The security_context of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1AlertmanagerSpecSecurityContext1
        """

        self._security_context = security_context

    @property
    def service_account_name(self):
        """Gets the service_account_name of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        ServiceAccountName is the name of the ServiceAccount to use to run the Thanos Ruler Pods.  # noqa: E501

        :return: The service_account_name of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: str
        """
        return self._service_account_name

    @service_account_name.setter
    def service_account_name(self, service_account_name):
        """Sets the service_account_name of this ComCoreosMonitoringV1ThanosRulerSpec.

        ServiceAccountName is the name of the ServiceAccount to use to run the Thanos Ruler Pods.  # noqa: E501

        :param service_account_name: The service_account_name of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: str
        """

        self._service_account_name = service_account_name

    @property
    def storage(self):
        """Gets the storage of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501


        :return: The storage of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecStorage
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this ComCoreosMonitoringV1ThanosRulerSpec.


        :param storage: The storage of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecStorage
        """

        self._storage = storage

    @property
    def tolerations(self):
        """Gets the tolerations of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        If specified, the pod's tolerations.  # noqa: E501

        :return: The tolerations of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecTolerations]
        """
        return self._tolerations

    @tolerations.setter
    def tolerations(self, tolerations):
        """Sets the tolerations of this ComCoreosMonitoringV1ThanosRulerSpec.

        If specified, the pod's tolerations.  # noqa: E501

        :param tolerations: The tolerations of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecTolerations]
        """

        self._tolerations = tolerations

    @property
    def topology_spread_constraints(self):
        """Gets the topology_spread_constraints of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        If specified, the pod's topology spread constraints.  # noqa: E501

        :return: The topology_spread_constraints of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecTopologySpreadConstraints]
        """
        return self._topology_spread_constraints

    @topology_spread_constraints.setter
    def topology_spread_constraints(self, topology_spread_constraints):
        """Sets the topology_spread_constraints of this ComCoreosMonitoringV1ThanosRulerSpec.

        If specified, the pod's topology spread constraints.  # noqa: E501

        :param topology_spread_constraints: The topology_spread_constraints of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecTopologySpreadConstraints]
        """

        self._topology_spread_constraints = topology_spread_constraints

    @property
    def tracing_config(self):
        """Gets the tracing_config of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501


        :return: The tracing_config of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecThanosTracingConfig
        """
        return self._tracing_config

    @tracing_config.setter
    def tracing_config(self, tracing_config):
        """Sets the tracing_config of this ComCoreosMonitoringV1ThanosRulerSpec.


        :param tracing_config: The tracing_config of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecThanosTracingConfig
        """

        self._tracing_config = tracing_config

    @property
    def volumes(self):
        """Gets the volumes of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501

        Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.  # noqa: E501

        :return: The volumes of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecVolumes]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this ComCoreosMonitoringV1ThanosRulerSpec.

        Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.  # noqa: E501

        :param volumes: The volumes of this ComCoreosMonitoringV1ThanosRulerSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecVolumes]
        """

        self._volumes = volumes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComCoreosMonitoringV1ThanosRulerSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComCoreosMonitoringV1ThanosRulerSpec):
            return True

        return self.to_dict() != other.to_dict()
