# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'config_map_ref': 'str',
        'label_selector': 'IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResourceLabelSelector',
        'name': 'str',
        'requeue_after_seconds': 'int',
        'template': 'IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResourceTemplate',
        'values': 'dict(str, str)'
    }

    attribute_map = {
        'config_map_ref': 'configMapRef',
        'label_selector': 'labelSelector',
        'name': 'name',
        'requeue_after_seconds': 'requeueAfterSeconds',
        'template': 'template',
        'values': 'values'
    }

    def __init__(self, config_map_ref=None, label_selector=None, name=None, requeue_after_seconds=None, template=None, values=None, local_vars_configuration=None):  # noqa: E501
        """IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._config_map_ref = None
        self._label_selector = None
        self._name = None
        self._requeue_after_seconds = None
        self._template = None
        self._values = None
        self.discriminator = None

        self.config_map_ref = config_map_ref
        if label_selector is not None:
            self.label_selector = label_selector
        if name is not None:
            self.name = name
        if requeue_after_seconds is not None:
            self.requeue_after_seconds = requeue_after_seconds
        if template is not None:
            self.template = template
        if values is not None:
            self.values = values

    @property
    def config_map_ref(self):
        """Gets the config_map_ref of this IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource.  # noqa: E501


        :return: The config_map_ref of this IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource.  # noqa: E501
        :rtype: str
        """
        return self._config_map_ref

    @config_map_ref.setter
    def config_map_ref(self, config_map_ref):
        """Sets the config_map_ref of this IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource.


        :param config_map_ref: The config_map_ref of this IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and config_map_ref is None:  # noqa: E501
            raise ValueError("Invalid value for `config_map_ref`, must not be `None`")  # noqa: E501

        self._config_map_ref = config_map_ref

    @property
    def label_selector(self):
        """Gets the label_selector of this IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource.  # noqa: E501


        :return: The label_selector of this IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource.  # noqa: E501
        :rtype: IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResourceLabelSelector
        """
        return self._label_selector

    @label_selector.setter
    def label_selector(self, label_selector):
        """Sets the label_selector of this IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource.


        :param label_selector: The label_selector of this IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource.  # noqa: E501
        :type: IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResourceLabelSelector
        """

        self._label_selector = label_selector

    @property
    def name(self):
        """Gets the name of this IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource.  # noqa: E501


        :return: The name of this IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource.


        :param name: The name of this IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def requeue_after_seconds(self):
        """Gets the requeue_after_seconds of this IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource.  # noqa: E501


        :return: The requeue_after_seconds of this IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource.  # noqa: E501
        :rtype: int
        """
        return self._requeue_after_seconds

    @requeue_after_seconds.setter
    def requeue_after_seconds(self, requeue_after_seconds):
        """Sets the requeue_after_seconds of this IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource.


        :param requeue_after_seconds: The requeue_after_seconds of this IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource.  # noqa: E501
        :type: int
        """

        self._requeue_after_seconds = requeue_after_seconds

    @property
    def template(self):
        """Gets the template of this IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource.  # noqa: E501


        :return: The template of this IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource.  # noqa: E501
        :rtype: IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResourceTemplate
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource.


        :param template: The template of this IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource.  # noqa: E501
        :type: IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResourceTemplate
        """

        self._template = template

    @property
    def values(self):
        """Gets the values of this IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource.  # noqa: E501


        :return: The values of this IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource.


        :param values: The values of this IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource.  # noqa: E501
        :type: dict(str, str)
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResource):
            return True

        return self.to_dict() != other.to_dict()
