# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allowed_namespaces': 'object',
        'duration_seconds': 'int',
        'external_id': 'str',
        'inline_policy': 'str',
        'policy_ar_ns': 'list[str]',
        'role_arn': 'str',
        'session_name': 'str',
        'source_identity_ref': 'IoXK8sClusterInfrastructureV1alpha3AWSClusterRoleIdentitySpecSourceIdentityRef'
    }

    attribute_map = {
        'allowed_namespaces': 'allowedNamespaces',
        'duration_seconds': 'durationSeconds',
        'external_id': 'externalID',
        'inline_policy': 'inlinePolicy',
        'policy_ar_ns': 'policyARNs',
        'role_arn': 'roleARN',
        'session_name': 'sessionName',
        'source_identity_ref': 'sourceIdentityRef'
    }

    def __init__(self, allowed_namespaces=None, duration_seconds=None, external_id=None, inline_policy=None, policy_ar_ns=None, role_arn=None, session_name=None, source_identity_ref=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._allowed_namespaces = None
        self._duration_seconds = None
        self._external_id = None
        self._inline_policy = None
        self._policy_ar_ns = None
        self._role_arn = None
        self._session_name = None
        self._source_identity_ref = None
        self.discriminator = None

        if allowed_namespaces is not None:
            self.allowed_namespaces = allowed_namespaces
        if duration_seconds is not None:
            self.duration_seconds = duration_seconds
        if external_id is not None:
            self.external_id = external_id
        if inline_policy is not None:
            self.inline_policy = inline_policy
        if policy_ar_ns is not None:
            self.policy_ar_ns = policy_ar_ns
        self.role_arn = role_arn
        if session_name is not None:
            self.session_name = session_name
        if source_identity_ref is not None:
            self.source_identity_ref = source_identity_ref

    @property
    def allowed_namespaces(self):
        """Gets the allowed_namespaces of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.  # noqa: E501

        AllowedNamespaces is used to identify which namespaces are allowed to use the identity from. Namespaces can be selected either using an array of namespaces or with label selector. An empty allowedNamespaces object indicates that AWSClusters can use this identity from any namespace. If this object is nil, no namespaces will be allowed (default behaviour, if this field is not provided) A namespace should be either in the NamespaceList or match with Selector to use the identity.  # noqa: E501

        :return: The allowed_namespaces of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.  # noqa: E501
        :rtype: object
        """
        return self._allowed_namespaces

    @allowed_namespaces.setter
    def allowed_namespaces(self, allowed_namespaces):
        """Sets the allowed_namespaces of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.

        AllowedNamespaces is used to identify which namespaces are allowed to use the identity from. Namespaces can be selected either using an array of namespaces or with label selector. An empty allowedNamespaces object indicates that AWSClusters can use this identity from any namespace. If this object is nil, no namespaces will be allowed (default behaviour, if this field is not provided) A namespace should be either in the NamespaceList or match with Selector to use the identity.  # noqa: E501

        :param allowed_namespaces: The allowed_namespaces of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.  # noqa: E501
        :type: object
        """

        self._allowed_namespaces = allowed_namespaces

    @property
    def duration_seconds(self):
        """Gets the duration_seconds of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.  # noqa: E501

        The duration, in seconds, of the role session before it is renewed.  # noqa: E501

        :return: The duration_seconds of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.  # noqa: E501
        :rtype: int
        """
        return self._duration_seconds

    @duration_seconds.setter
    def duration_seconds(self, duration_seconds):
        """Sets the duration_seconds of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.

        The duration, in seconds, of the role session before it is renewed.  # noqa: E501

        :param duration_seconds: The duration_seconds of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                duration_seconds is not None and duration_seconds > 43200):  # noqa: E501
            raise ValueError("Invalid value for `duration_seconds`, must be a value less than or equal to `43200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                duration_seconds is not None and duration_seconds < 900):  # noqa: E501
            raise ValueError("Invalid value for `duration_seconds`, must be a value greater than or equal to `900`")  # noqa: E501

        self._duration_seconds = duration_seconds

    @property
    def external_id(self):
        """Gets the external_id of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.  # noqa: E501

        A unique identifier that might be required when you assume a role in another account. If the administrator of the account to which the role belongs provided you with an external ID, then provide that value in the ExternalId parameter. This value can be any string, such as a passphrase or account number. A cross-account role is usually set up to trust everyone in an account. Therefore, the administrator of the trusting account might send an external ID to the administrator of the trusted account. That way, only someone with the ID can assume the role, rather than everyone in the account. For more information about the external ID, see How to Use an External ID When Granting Access to Your AWS Resources to a Third Party in the IAM User Guide.  # noqa: E501

        :return: The external_id of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.

        A unique identifier that might be required when you assume a role in another account. If the administrator of the account to which the role belongs provided you with an external ID, then provide that value in the ExternalId parameter. This value can be any string, such as a passphrase or account number. A cross-account role is usually set up to trust everyone in an account. Therefore, the administrator of the trusting account might send an external ID to the administrator of the trusted account. That way, only someone with the ID can assume the role, rather than everyone in the account. For more information about the external ID, see How to Use an External ID When Granting Access to Your AWS Resources to a Third Party in the IAM User Guide.  # noqa: E501

        :param external_id: The external_id of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def inline_policy(self):
        """Gets the inline_policy of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.  # noqa: E501

        An IAM policy as a JSON-encoded string that you want to use as an inline session policy.  # noqa: E501

        :return: The inline_policy of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.  # noqa: E501
        :rtype: str
        """
        return self._inline_policy

    @inline_policy.setter
    def inline_policy(self, inline_policy):
        """Sets the inline_policy of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.

        An IAM policy as a JSON-encoded string that you want to use as an inline session policy.  # noqa: E501

        :param inline_policy: The inline_policy of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.  # noqa: E501
        :type: str
        """

        self._inline_policy = inline_policy

    @property
    def policy_ar_ns(self):
        """Gets the policy_ar_ns of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.  # noqa: E501

        The Amazon Resource Names (ARNs) of the IAM managed policies that you want to use as managed session policies. The policies must exist in the same account as the role.  # noqa: E501

        :return: The policy_ar_ns of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._policy_ar_ns

    @policy_ar_ns.setter
    def policy_ar_ns(self, policy_ar_ns):
        """Sets the policy_ar_ns of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.

        The Amazon Resource Names (ARNs) of the IAM managed policies that you want to use as managed session policies. The policies must exist in the same account as the role.  # noqa: E501

        :param policy_ar_ns: The policy_ar_ns of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.  # noqa: E501
        :type: list[str]
        """

        self._policy_ar_ns = policy_ar_ns

    @property
    def role_arn(self):
        """Gets the role_arn of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.  # noqa: E501

        The Amazon Resource Name (ARN) of the role to assume.  # noqa: E501

        :return: The role_arn of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.  # noqa: E501
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.

        The Amazon Resource Name (ARN) of the role to assume.  # noqa: E501

        :param role_arn: The role_arn of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and role_arn is None:  # noqa: E501
            raise ValueError("Invalid value for `role_arn`, must not be `None`")  # noqa: E501

        self._role_arn = role_arn

    @property
    def session_name(self):
        """Gets the session_name of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.  # noqa: E501

        An identifier for the assumed role session  # noqa: E501

        :return: The session_name of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.  # noqa: E501
        :rtype: str
        """
        return self._session_name

    @session_name.setter
    def session_name(self, session_name):
        """Sets the session_name of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.

        An identifier for the assumed role session  # noqa: E501

        :param session_name: The session_name of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.  # noqa: E501
        :type: str
        """

        self._session_name = session_name

    @property
    def source_identity_ref(self):
        """Gets the source_identity_ref of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.  # noqa: E501


        :return: The source_identity_ref of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.  # noqa: E501
        :rtype: IoXK8sClusterInfrastructureV1alpha3AWSClusterRoleIdentitySpecSourceIdentityRef
        """
        return self._source_identity_ref

    @source_identity_ref.setter
    def source_identity_ref(self, source_identity_ref):
        """Sets the source_identity_ref of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.


        :param source_identity_ref: The source_identity_ref of this IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec.  # noqa: E501
        :type: IoXK8sClusterInfrastructureV1alpha3AWSClusterRoleIdentitySpecSourceIdentityRef
        """

        self._source_identity_ref = source_identity_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1alpha4AWSClusterRoleIdentitySpec):
            return True

        return self.to_dict() != other.to_dict()
