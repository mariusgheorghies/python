# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cni': 'IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecCni',
        'security_group_overrides': 'dict(str, str)',
        'subnets': 'list[IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets]',
        'vpc': 'IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc'
    }

    attribute_map = {
        'cni': 'cni',
        'security_group_overrides': 'securityGroupOverrides',
        'subnets': 'subnets',
        'vpc': 'vpc'
    }

    def __init__(self, cni=None, security_group_overrides=None, subnets=None, vpc=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cni = None
        self._security_group_overrides = None
        self._subnets = None
        self._vpc = None
        self.discriminator = None

        if cni is not None:
            self.cni = cni
        if security_group_overrides is not None:
            self.security_group_overrides = security_group_overrides
        if subnets is not None:
            self.subnets = subnets
        if vpc is not None:
            self.vpc = vpc

    @property
    def cni(self):
        """Gets the cni of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpec.  # noqa: E501


        :return: The cni of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpec.  # noqa: E501
        :rtype: IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecCni
        """
        return self._cni

    @cni.setter
    def cni(self, cni):
        """Sets the cni of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpec.


        :param cni: The cni of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpec.  # noqa: E501
        :type: IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecCni
        """

        self._cni = cni

    @property
    def security_group_overrides(self):
        """Gets the security_group_overrides of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpec.  # noqa: E501

        SecurityGroupOverrides is an optional set of security groups to use for cluster instances This is optional - if not provided new security groups will be created for the cluster  # noqa: E501

        :return: The security_group_overrides of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._security_group_overrides

    @security_group_overrides.setter
    def security_group_overrides(self, security_group_overrides):
        """Sets the security_group_overrides of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpec.

        SecurityGroupOverrides is an optional set of security groups to use for cluster instances This is optional - if not provided new security groups will be created for the cluster  # noqa: E501

        :param security_group_overrides: The security_group_overrides of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._security_group_overrides = security_group_overrides

    @property
    def subnets(self):
        """Gets the subnets of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpec.  # noqa: E501

        Subnets configuration.  # noqa: E501

        :return: The subnets of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpec.  # noqa: E501
        :rtype: list[IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets]
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpec.

        Subnets configuration.  # noqa: E501

        :param subnets: The subnets of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpec.  # noqa: E501
        :type: list[IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecSubnets]
        """

        self._subnets = subnets

    @property
    def vpc(self):
        """Gets the vpc of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpec.  # noqa: E501


        :return: The vpc of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpec.  # noqa: E501
        :rtype: IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc
        """
        return self._vpc

    @vpc.setter
    def vpc(self, vpc):
        """Sets the vpc of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpec.


        :param vpc: The vpc of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpec.  # noqa: E501
        :type: IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpecVpc
        """

        self._vpc = vpc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneSpecNetworkSpec):
            return True

        return self.to_dict() != other.to_dict()
