# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoArgoprojV1alpha1ApplicationStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'conditions': 'list[IoArgoprojV1alpha1ApplicationStatusConditions]',
        'health': 'IoArgoprojV1alpha1ApplicationStatusHealth',
        'history': 'list[IoArgoprojV1alpha1ApplicationStatusHistory]',
        'observed_at': 'datetime',
        'operation_state': 'IoArgoprojV1alpha1ApplicationStatusOperationState',
        'reconciled_at': 'datetime',
        'resource_health_source': 'str',
        'resources': 'list[IoArgoprojV1alpha1ApplicationStatusResources]',
        'source_type': 'str',
        'source_types': 'list[str]',
        'summary': 'IoArgoprojV1alpha1ApplicationStatusSummary',
        'sync': 'IoArgoprojV1alpha1ApplicationStatusSync'
    }

    attribute_map = {
        'conditions': 'conditions',
        'health': 'health',
        'history': 'history',
        'observed_at': 'observedAt',
        'operation_state': 'operationState',
        'reconciled_at': 'reconciledAt',
        'resource_health_source': 'resourceHealthSource',
        'resources': 'resources',
        'source_type': 'sourceType',
        'source_types': 'sourceTypes',
        'summary': 'summary',
        'sync': 'sync'
    }

    def __init__(self, conditions=None, health=None, history=None, observed_at=None, operation_state=None, reconciled_at=None, resource_health_source=None, resources=None, source_type=None, source_types=None, summary=None, sync=None, local_vars_configuration=None):  # noqa: E501
        """IoArgoprojV1alpha1ApplicationStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._conditions = None
        self._health = None
        self._history = None
        self._observed_at = None
        self._operation_state = None
        self._reconciled_at = None
        self._resource_health_source = None
        self._resources = None
        self._source_type = None
        self._source_types = None
        self._summary = None
        self._sync = None
        self.discriminator = None

        if conditions is not None:
            self.conditions = conditions
        if health is not None:
            self.health = health
        if history is not None:
            self.history = history
        if observed_at is not None:
            self.observed_at = observed_at
        if operation_state is not None:
            self.operation_state = operation_state
        if reconciled_at is not None:
            self.reconciled_at = reconciled_at
        if resource_health_source is not None:
            self.resource_health_source = resource_health_source
        if resources is not None:
            self.resources = resources
        if source_type is not None:
            self.source_type = source_type
        if source_types is not None:
            self.source_types = source_types
        if summary is not None:
            self.summary = summary
        if sync is not None:
            self.sync = sync

    @property
    def conditions(self):
        """Gets the conditions of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501

        Conditions is a list of currently observed application conditions  # noqa: E501

        :return: The conditions of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501
        :rtype: list[IoArgoprojV1alpha1ApplicationStatusConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this IoArgoprojV1alpha1ApplicationStatus.

        Conditions is a list of currently observed application conditions  # noqa: E501

        :param conditions: The conditions of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501
        :type: list[IoArgoprojV1alpha1ApplicationStatusConditions]
        """

        self._conditions = conditions

    @property
    def health(self):
        """Gets the health of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501


        :return: The health of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501
        :rtype: IoArgoprojV1alpha1ApplicationStatusHealth
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this IoArgoprojV1alpha1ApplicationStatus.


        :param health: The health of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501
        :type: IoArgoprojV1alpha1ApplicationStatusHealth
        """

        self._health = health

    @property
    def history(self):
        """Gets the history of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501

        History contains information about the application's sync history  # noqa: E501

        :return: The history of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501
        :rtype: list[IoArgoprojV1alpha1ApplicationStatusHistory]
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this IoArgoprojV1alpha1ApplicationStatus.

        History contains information about the application's sync history  # noqa: E501

        :param history: The history of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501
        :type: list[IoArgoprojV1alpha1ApplicationStatusHistory]
        """

        self._history = history

    @property
    def observed_at(self):
        """Gets the observed_at of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501

        ObservedAt indicates when the application state was updated without querying latest git state Deprecated: controller no longer updates ObservedAt field  # noqa: E501

        :return: The observed_at of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._observed_at

    @observed_at.setter
    def observed_at(self, observed_at):
        """Sets the observed_at of this IoArgoprojV1alpha1ApplicationStatus.

        ObservedAt indicates when the application state was updated without querying latest git state Deprecated: controller no longer updates ObservedAt field  # noqa: E501

        :param observed_at: The observed_at of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501
        :type: datetime
        """

        self._observed_at = observed_at

    @property
    def operation_state(self):
        """Gets the operation_state of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501


        :return: The operation_state of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501
        :rtype: IoArgoprojV1alpha1ApplicationStatusOperationState
        """
        return self._operation_state

    @operation_state.setter
    def operation_state(self, operation_state):
        """Sets the operation_state of this IoArgoprojV1alpha1ApplicationStatus.


        :param operation_state: The operation_state of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501
        :type: IoArgoprojV1alpha1ApplicationStatusOperationState
        """

        self._operation_state = operation_state

    @property
    def reconciled_at(self):
        """Gets the reconciled_at of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501

        ReconciledAt indicates when the application state was reconciled using the latest git version  # noqa: E501

        :return: The reconciled_at of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._reconciled_at

    @reconciled_at.setter
    def reconciled_at(self, reconciled_at):
        """Sets the reconciled_at of this IoArgoprojV1alpha1ApplicationStatus.

        ReconciledAt indicates when the application state was reconciled using the latest git version  # noqa: E501

        :param reconciled_at: The reconciled_at of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501
        :type: datetime
        """

        self._reconciled_at = reconciled_at

    @property
    def resource_health_source(self):
        """Gets the resource_health_source of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501

        ResourceHealthSource indicates where the resource health status is stored: inline if not set or appTree  # noqa: E501

        :return: The resource_health_source of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501
        :rtype: str
        """
        return self._resource_health_source

    @resource_health_source.setter
    def resource_health_source(self, resource_health_source):
        """Sets the resource_health_source of this IoArgoprojV1alpha1ApplicationStatus.

        ResourceHealthSource indicates where the resource health status is stored: inline if not set or appTree  # noqa: E501

        :param resource_health_source: The resource_health_source of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501
        :type: str
        """

        self._resource_health_source = resource_health_source

    @property
    def resources(self):
        """Gets the resources of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501

        Resources is a list of Kubernetes resources managed by this application  # noqa: E501

        :return: The resources of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501
        :rtype: list[IoArgoprojV1alpha1ApplicationStatusResources]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this IoArgoprojV1alpha1ApplicationStatus.

        Resources is a list of Kubernetes resources managed by this application  # noqa: E501

        :param resources: The resources of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501
        :type: list[IoArgoprojV1alpha1ApplicationStatusResources]
        """

        self._resources = resources

    @property
    def source_type(self):
        """Gets the source_type of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501

        SourceType specifies the type of this application  # noqa: E501

        :return: The source_type of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this IoArgoprojV1alpha1ApplicationStatus.

        SourceType specifies the type of this application  # noqa: E501

        :param source_type: The source_type of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501
        :type: str
        """

        self._source_type = source_type

    @property
    def source_types(self):
        """Gets the source_types of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501

        SourceTypes specifies the type of the sources included in the application  # noqa: E501

        :return: The source_types of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._source_types

    @source_types.setter
    def source_types(self, source_types):
        """Sets the source_types of this IoArgoprojV1alpha1ApplicationStatus.

        SourceTypes specifies the type of the sources included in the application  # noqa: E501

        :param source_types: The source_types of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501
        :type: list[str]
        """

        self._source_types = source_types

    @property
    def summary(self):
        """Gets the summary of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501


        :return: The summary of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501
        :rtype: IoArgoprojV1alpha1ApplicationStatusSummary
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this IoArgoprojV1alpha1ApplicationStatus.


        :param summary: The summary of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501
        :type: IoArgoprojV1alpha1ApplicationStatusSummary
        """

        self._summary = summary

    @property
    def sync(self):
        """Gets the sync of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501


        :return: The sync of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501
        :rtype: IoArgoprojV1alpha1ApplicationStatusSync
        """
        return self._sync

    @sync.setter
    def sync(self, sync):
        """Sets the sync of this IoArgoprojV1alpha1ApplicationStatus.


        :param sync: The sync of this IoArgoprojV1alpha1ApplicationStatus.  # noqa: E501
        :type: IoArgoprojV1alpha1ApplicationStatusSync
        """

        self._sync = sync

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojV1alpha1ApplicationStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojV1alpha1ApplicationStatus):
            return True

        return self.to_dict() != other.to_dict()
