# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupPartitions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'device': 'str',
        'layout': 'bool',
        'overwrite': 'bool',
        'table_type': 'str'
    }

    attribute_map = {
        'device': 'device',
        'layout': 'layout',
        'overwrite': 'overwrite',
        'table_type': 'tableType'
    }

    def __init__(self, device=None, layout=None, overwrite=None, table_type=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupPartitions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._device = None
        self._layout = None
        self._overwrite = None
        self._table_type = None
        self.discriminator = None

        self.device = device
        self.layout = layout
        if overwrite is not None:
            self.overwrite = overwrite
        if table_type is not None:
            self.table_type = table_type

    @property
    def device(self):
        """Gets the device of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupPartitions.  # noqa: E501

        Device is the name of the device.  # noqa: E501

        :return: The device of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupPartitions.  # noqa: E501
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupPartitions.

        Device is the name of the device.  # noqa: E501

        :param device: The device of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupPartitions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and device is None:  # noqa: E501
            raise ValueError("Invalid value for `device`, must not be `None`")  # noqa: E501

        self._device = device

    @property
    def layout(self):
        """Gets the layout of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupPartitions.  # noqa: E501

        Layout specifies the device layout. If it is true, a single partition will be created for the entire device. When layout is false, it means don't partition or ignore existing partitioning.  # noqa: E501

        :return: The layout of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupPartitions.  # noqa: E501
        :rtype: bool
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupPartitions.

        Layout specifies the device layout. If it is true, a single partition will be created for the entire device. When layout is false, it means don't partition or ignore existing partitioning.  # noqa: E501

        :param layout: The layout of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupPartitions.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and layout is None:  # noqa: E501
            raise ValueError("Invalid value for `layout`, must not be `None`")  # noqa: E501

        self._layout = layout

    @property
    def overwrite(self):
        """Gets the overwrite of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupPartitions.  # noqa: E501

        Overwrite describes whether to skip checks and create the partition if a partition or filesystem is found on the device. Use with caution. Default is 'false'.  # noqa: E501

        :return: The overwrite of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupPartitions.  # noqa: E501
        :rtype: bool
        """
        return self._overwrite

    @overwrite.setter
    def overwrite(self, overwrite):
        """Sets the overwrite of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupPartitions.

        Overwrite describes whether to skip checks and create the partition if a partition or filesystem is found on the device. Use with caution. Default is 'false'.  # noqa: E501

        :param overwrite: The overwrite of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupPartitions.  # noqa: E501
        :type: bool
        """

        self._overwrite = overwrite

    @property
    def table_type(self):
        """Gets the table_type of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupPartitions.  # noqa: E501

        TableType specifies the tupe of partition table. The following are supported: 'mbr': default and setups a MS-DOS partition table 'gpt': setups a GPT partition table  # noqa: E501

        :return: The table_type of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupPartitions.  # noqa: E501
        :rtype: str
        """
        return self._table_type

    @table_type.setter
    def table_type(self, table_type):
        """Sets the table_type of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupPartitions.

        TableType specifies the tupe of partition table. The following are supported: 'mbr': default and setups a MS-DOS partition table 'gpt': setups a GPT partition table  # noqa: E501

        :param table_type: The table_type of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupPartitions.  # noqa: E501
        :type: str
        """

        self._table_type = table_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupPartitions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupPartitions):
            return True

        return self.to_dict() != other.to_dict()
