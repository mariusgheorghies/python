# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class OrgProjectcalicoCrdV1KubeControllersConfigurationStatusRunningConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'controllers': 'OrgProjectcalicoCrdV1KubeControllersConfigurationSpecControllers',
        'etcd_v3_compaction_period': 'str',
        'health_checks': 'str',
        'log_severity_screen': 'str'
    }

    attribute_map = {
        'controllers': 'controllers',
        'etcd_v3_compaction_period': 'etcdV3CompactionPeriod',
        'health_checks': 'healthChecks',
        'log_severity_screen': 'logSeverityScreen'
    }

    def __init__(self, controllers=None, etcd_v3_compaction_period=None, health_checks=None, log_severity_screen=None, local_vars_configuration=None):  # noqa: E501
        """OrgProjectcalicoCrdV1KubeControllersConfigurationStatusRunningConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._controllers = None
        self._etcd_v3_compaction_period = None
        self._health_checks = None
        self._log_severity_screen = None
        self.discriminator = None

        self.controllers = controllers
        if etcd_v3_compaction_period is not None:
            self.etcd_v3_compaction_period = etcd_v3_compaction_period
        if health_checks is not None:
            self.health_checks = health_checks
        if log_severity_screen is not None:
            self.log_severity_screen = log_severity_screen

    @property
    def controllers(self):
        """Gets the controllers of this OrgProjectcalicoCrdV1KubeControllersConfigurationStatusRunningConfig.  # noqa: E501


        :return: The controllers of this OrgProjectcalicoCrdV1KubeControllersConfigurationStatusRunningConfig.  # noqa: E501
        :rtype: OrgProjectcalicoCrdV1KubeControllersConfigurationSpecControllers
        """
        return self._controllers

    @controllers.setter
    def controllers(self, controllers):
        """Sets the controllers of this OrgProjectcalicoCrdV1KubeControllersConfigurationStatusRunningConfig.


        :param controllers: The controllers of this OrgProjectcalicoCrdV1KubeControllersConfigurationStatusRunningConfig.  # noqa: E501
        :type: OrgProjectcalicoCrdV1KubeControllersConfigurationSpecControllers
        """
        if self.local_vars_configuration.client_side_validation and controllers is None:  # noqa: E501
            raise ValueError("Invalid value for `controllers`, must not be `None`")  # noqa: E501

        self._controllers = controllers

    @property
    def etcd_v3_compaction_period(self):
        """Gets the etcd_v3_compaction_period of this OrgProjectcalicoCrdV1KubeControllersConfigurationStatusRunningConfig.  # noqa: E501

        EtcdV3CompactionPeriod is the period between etcdv3 compaction requests. Set to 0 to disable. [Default: 10m]  # noqa: E501

        :return: The etcd_v3_compaction_period of this OrgProjectcalicoCrdV1KubeControllersConfigurationStatusRunningConfig.  # noqa: E501
        :rtype: str
        """
        return self._etcd_v3_compaction_period

    @etcd_v3_compaction_period.setter
    def etcd_v3_compaction_period(self, etcd_v3_compaction_period):
        """Sets the etcd_v3_compaction_period of this OrgProjectcalicoCrdV1KubeControllersConfigurationStatusRunningConfig.

        EtcdV3CompactionPeriod is the period between etcdv3 compaction requests. Set to 0 to disable. [Default: 10m]  # noqa: E501

        :param etcd_v3_compaction_period: The etcd_v3_compaction_period of this OrgProjectcalicoCrdV1KubeControllersConfigurationStatusRunningConfig.  # noqa: E501
        :type: str
        """

        self._etcd_v3_compaction_period = etcd_v3_compaction_period

    @property
    def health_checks(self):
        """Gets the health_checks of this OrgProjectcalicoCrdV1KubeControllersConfigurationStatusRunningConfig.  # noqa: E501

        HealthChecks enables or disables support for health checks [Default: Enabled]  # noqa: E501

        :return: The health_checks of this OrgProjectcalicoCrdV1KubeControllersConfigurationStatusRunningConfig.  # noqa: E501
        :rtype: str
        """
        return self._health_checks

    @health_checks.setter
    def health_checks(self, health_checks):
        """Sets the health_checks of this OrgProjectcalicoCrdV1KubeControllersConfigurationStatusRunningConfig.

        HealthChecks enables or disables support for health checks [Default: Enabled]  # noqa: E501

        :param health_checks: The health_checks of this OrgProjectcalicoCrdV1KubeControllersConfigurationStatusRunningConfig.  # noqa: E501
        :type: str
        """

        self._health_checks = health_checks

    @property
    def log_severity_screen(self):
        """Gets the log_severity_screen of this OrgProjectcalicoCrdV1KubeControllersConfigurationStatusRunningConfig.  # noqa: E501

        LogSeverityScreen is the log severity above which logs are sent to the stdout. [Default: Info]  # noqa: E501

        :return: The log_severity_screen of this OrgProjectcalicoCrdV1KubeControllersConfigurationStatusRunningConfig.  # noqa: E501
        :rtype: str
        """
        return self._log_severity_screen

    @log_severity_screen.setter
    def log_severity_screen(self, log_severity_screen):
        """Sets the log_severity_screen of this OrgProjectcalicoCrdV1KubeControllersConfigurationStatusRunningConfig.

        LogSeverityScreen is the log severity above which logs are sent to the stdout. [Default: Info]  # noqa: E501

        :param log_severity_screen: The log_severity_screen of this OrgProjectcalicoCrdV1KubeControllersConfigurationStatusRunningConfig.  # noqa: E501
        :type: str
        """

        self._log_severity_screen = log_severity_screen

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgProjectcalicoCrdV1KubeControllersConfigurationStatusRunningConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrgProjectcalicoCrdV1KubeControllersConfigurationStatusRunningConfig):
            return True

        return self.to_dict() != other.to_dict()
