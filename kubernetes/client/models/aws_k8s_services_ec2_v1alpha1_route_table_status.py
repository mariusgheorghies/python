# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class AwsK8sServicesEc2V1alpha1RouteTableStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ack_resource_metadata': 'AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata',
        'associations': 'list[AwsK8sServicesEc2V1alpha1RouteTableStatusAssociations]',
        'conditions': 'list[AwsK8sServicesEc2V1alpha1DHCPOptionsStatusConditions]',
        'owner_id': 'str',
        'propagating_vg_ws': 'list[AwsK8sServicesEc2V1alpha1RouteTableStatusPropagatingVGWs]',
        'route_statuses': 'list[AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses]',
        'route_table_id': 'str'
    }

    attribute_map = {
        'ack_resource_metadata': 'ackResourceMetadata',
        'associations': 'associations',
        'conditions': 'conditions',
        'owner_id': 'ownerID',
        'propagating_vg_ws': 'propagatingVGWs',
        'route_statuses': 'routeStatuses',
        'route_table_id': 'routeTableID'
    }

    def __init__(self, ack_resource_metadata=None, associations=None, conditions=None, owner_id=None, propagating_vg_ws=None, route_statuses=None, route_table_id=None, local_vars_configuration=None):  # noqa: E501
        """AwsK8sServicesEc2V1alpha1RouteTableStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ack_resource_metadata = None
        self._associations = None
        self._conditions = None
        self._owner_id = None
        self._propagating_vg_ws = None
        self._route_statuses = None
        self._route_table_id = None
        self.discriminator = None

        if ack_resource_metadata is not None:
            self.ack_resource_metadata = ack_resource_metadata
        if associations is not None:
            self.associations = associations
        if conditions is not None:
            self.conditions = conditions
        if owner_id is not None:
            self.owner_id = owner_id
        if propagating_vg_ws is not None:
            self.propagating_vg_ws = propagating_vg_ws
        if route_statuses is not None:
            self.route_statuses = route_statuses
        if route_table_id is not None:
            self.route_table_id = route_table_id

    @property
    def ack_resource_metadata(self):
        """Gets the ack_resource_metadata of this AwsK8sServicesEc2V1alpha1RouteTableStatus.  # noqa: E501


        :return: The ack_resource_metadata of this AwsK8sServicesEc2V1alpha1RouteTableStatus.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata
        """
        return self._ack_resource_metadata

    @ack_resource_metadata.setter
    def ack_resource_metadata(self, ack_resource_metadata):
        """Sets the ack_resource_metadata of this AwsK8sServicesEc2V1alpha1RouteTableStatus.


        :param ack_resource_metadata: The ack_resource_metadata of this AwsK8sServicesEc2V1alpha1RouteTableStatus.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata
        """

        self._ack_resource_metadata = ack_resource_metadata

    @property
    def associations(self):
        """Gets the associations of this AwsK8sServicesEc2V1alpha1RouteTableStatus.  # noqa: E501

        The associations between the route table and one or more subnets or a gateway.  # noqa: E501

        :return: The associations of this AwsK8sServicesEc2V1alpha1RouteTableStatus.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1RouteTableStatusAssociations]
        """
        return self._associations

    @associations.setter
    def associations(self, associations):
        """Sets the associations of this AwsK8sServicesEc2V1alpha1RouteTableStatus.

        The associations between the route table and one or more subnets or a gateway.  # noqa: E501

        :param associations: The associations of this AwsK8sServicesEc2V1alpha1RouteTableStatus.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1RouteTableStatusAssociations]
        """

        self._associations = associations

    @property
    def conditions(self):
        """Gets the conditions of this AwsK8sServicesEc2V1alpha1RouteTableStatus.  # noqa: E501

        All CRS managed by ACK have a common `Status.Conditions` member that contains a collection of `ackv1alpha1.Condition` objects that describe the various terminal states of the CR and its backend AWS service API resource  # noqa: E501

        :return: The conditions of this AwsK8sServicesEc2V1alpha1RouteTableStatus.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1DHCPOptionsStatusConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this AwsK8sServicesEc2V1alpha1RouteTableStatus.

        All CRS managed by ACK have a common `Status.Conditions` member that contains a collection of `ackv1alpha1.Condition` objects that describe the various terminal states of the CR and its backend AWS service API resource  # noqa: E501

        :param conditions: The conditions of this AwsK8sServicesEc2V1alpha1RouteTableStatus.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1DHCPOptionsStatusConditions]
        """

        self._conditions = conditions

    @property
    def owner_id(self):
        """Gets the owner_id of this AwsK8sServicesEc2V1alpha1RouteTableStatus.  # noqa: E501

        The ID of the Amazon Web Services account that owns the route table.  # noqa: E501

        :return: The owner_id of this AwsK8sServicesEc2V1alpha1RouteTableStatus.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this AwsK8sServicesEc2V1alpha1RouteTableStatus.

        The ID of the Amazon Web Services account that owns the route table.  # noqa: E501

        :param owner_id: The owner_id of this AwsK8sServicesEc2V1alpha1RouteTableStatus.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    @property
    def propagating_vg_ws(self):
        """Gets the propagating_vg_ws of this AwsK8sServicesEc2V1alpha1RouteTableStatus.  # noqa: E501

        Any virtual private gateway (VGW) propagating routes.  # noqa: E501

        :return: The propagating_vg_ws of this AwsK8sServicesEc2V1alpha1RouteTableStatus.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1RouteTableStatusPropagatingVGWs]
        """
        return self._propagating_vg_ws

    @propagating_vg_ws.setter
    def propagating_vg_ws(self, propagating_vg_ws):
        """Sets the propagating_vg_ws of this AwsK8sServicesEc2V1alpha1RouteTableStatus.

        Any virtual private gateway (VGW) propagating routes.  # noqa: E501

        :param propagating_vg_ws: The propagating_vg_ws of this AwsK8sServicesEc2V1alpha1RouteTableStatus.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1RouteTableStatusPropagatingVGWs]
        """

        self._propagating_vg_ws = propagating_vg_ws

    @property
    def route_statuses(self):
        """Gets the route_statuses of this AwsK8sServicesEc2V1alpha1RouteTableStatus.  # noqa: E501

        The routes in the route table.  # noqa: E501

        :return: The route_statuses of this AwsK8sServicesEc2V1alpha1RouteTableStatus.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses]
        """
        return self._route_statuses

    @route_statuses.setter
    def route_statuses(self, route_statuses):
        """Sets the route_statuses of this AwsK8sServicesEc2V1alpha1RouteTableStatus.

        The routes in the route table.  # noqa: E501

        :param route_statuses: The route_statuses of this AwsK8sServicesEc2V1alpha1RouteTableStatus.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1RouteTableStatusRouteStatuses]
        """

        self._route_statuses = route_statuses

    @property
    def route_table_id(self):
        """Gets the route_table_id of this AwsK8sServicesEc2V1alpha1RouteTableStatus.  # noqa: E501

        The ID of the route table.  # noqa: E501

        :return: The route_table_id of this AwsK8sServicesEc2V1alpha1RouteTableStatus.  # noqa: E501
        :rtype: str
        """
        return self._route_table_id

    @route_table_id.setter
    def route_table_id(self, route_table_id):
        """Sets the route_table_id of this AwsK8sServicesEc2V1alpha1RouteTableStatus.

        The ID of the route table.  # noqa: E501

        :param route_table_id: The route_table_id of this AwsK8sServicesEc2V1alpha1RouteTableStatus.  # noqa: E501
        :type: str
        """

        self._route_table_id = route_table_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1RouteTableStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1RouteTableStatus):
            return True

        return self.to_dict() != other.to_dict()
