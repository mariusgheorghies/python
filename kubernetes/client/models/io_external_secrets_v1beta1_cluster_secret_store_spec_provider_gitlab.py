# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auth': 'IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderGitlabAuth',
        'environment': 'str',
        'group_i_ds': 'list[str]',
        'inherit_from_groups': 'bool',
        'project_id': 'str',
        'url': 'str'
    }

    attribute_map = {
        'auth': 'auth',
        'environment': 'environment',
        'group_i_ds': 'groupIDs',
        'inherit_from_groups': 'inheritFromGroups',
        'project_id': 'projectID',
        'url': 'url'
    }

    def __init__(self, auth=None, environment=None, group_i_ds=None, inherit_from_groups=None, project_id=None, url=None, local_vars_configuration=None):  # noqa: E501
        """IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._auth = None
        self._environment = None
        self._group_i_ds = None
        self._inherit_from_groups = None
        self._project_id = None
        self._url = None
        self.discriminator = None

        self.auth = auth
        if environment is not None:
            self.environment = environment
        if group_i_ds is not None:
            self.group_i_ds = group_i_ds
        if inherit_from_groups is not None:
            self.inherit_from_groups = inherit_from_groups
        if project_id is not None:
            self.project_id = project_id
        if url is not None:
            self.url = url

    @property
    def auth(self):
        """Gets the auth of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab.  # noqa: E501


        :return: The auth of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab.  # noqa: E501
        :rtype: IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderGitlabAuth
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab.


        :param auth: The auth of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab.  # noqa: E501
        :type: IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderGitlabAuth
        """
        if self.local_vars_configuration.client_side_validation and auth is None:  # noqa: E501
            raise ValueError("Invalid value for `auth`, must not be `None`")  # noqa: E501

        self._auth = auth

    @property
    def environment(self):
        """Gets the environment of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab.  # noqa: E501

        Environment environment_scope of gitlab CI/CD variables (Please see https://docs.gitlab.com/ee/ci/environments/#create-a-static-environment on how to create environments)  # noqa: E501

        :return: The environment of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab.

        Environment environment_scope of gitlab CI/CD variables (Please see https://docs.gitlab.com/ee/ci/environments/#create-a-static-environment on how to create environments)  # noqa: E501

        :param environment: The environment of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab.  # noqa: E501
        :type: str
        """

        self._environment = environment

    @property
    def group_i_ds(self):
        """Gets the group_i_ds of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab.  # noqa: E501

        GroupIDs specify, which gitlab groups to pull secrets from. Group secrets are read from left to right followed by the project variables.  # noqa: E501

        :return: The group_i_ds of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_i_ds

    @group_i_ds.setter
    def group_i_ds(self, group_i_ds):
        """Sets the group_i_ds of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab.

        GroupIDs specify, which gitlab groups to pull secrets from. Group secrets are read from left to right followed by the project variables.  # noqa: E501

        :param group_i_ds: The group_i_ds of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab.  # noqa: E501
        :type: list[str]
        """

        self._group_i_ds = group_i_ds

    @property
    def inherit_from_groups(self):
        """Gets the inherit_from_groups of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab.  # noqa: E501

        InheritFromGroups specifies whether parent groups should be discovered and checked for secrets.  # noqa: E501

        :return: The inherit_from_groups of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab.  # noqa: E501
        :rtype: bool
        """
        return self._inherit_from_groups

    @inherit_from_groups.setter
    def inherit_from_groups(self, inherit_from_groups):
        """Sets the inherit_from_groups of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab.

        InheritFromGroups specifies whether parent groups should be discovered and checked for secrets.  # noqa: E501

        :param inherit_from_groups: The inherit_from_groups of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab.  # noqa: E501
        :type: bool
        """

        self._inherit_from_groups = inherit_from_groups

    @property
    def project_id(self):
        """Gets the project_id of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab.  # noqa: E501

        ProjectID specifies a project where secrets are located.  # noqa: E501

        :return: The project_id of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab.

        ProjectID specifies a project where secrets are located.  # noqa: E501

        :param project_id: The project_id of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def url(self):
        """Gets the url of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab.  # noqa: E501

        URL configures the GitLab instance URL. Defaults to https://gitlab.com/.  # noqa: E501

        :return: The url of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab.

        URL configures the GitLab instance URL. Defaults to https://gitlab.com/.  # noqa: E501

        :param url: The url of this IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoExternalSecretsV1beta1ClusterSecretStoreSpecProviderGitlab):
            return True

        return self.to_dict() != other.to_dict()
