# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'arn': 'str',
        'created_at': 'datetime',
        'issues': 'list[IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusIssues]',
        'modified_at': 'datetime',
        'name': 'str',
        'service_account_role_arn': 'str',
        'status': 'str',
        'version': 'str'
    }

    attribute_map = {
        'arn': 'arn',
        'created_at': 'createdAt',
        'issues': 'issues',
        'modified_at': 'modifiedAt',
        'name': 'name',
        'service_account_role_arn': 'serviceAccountRoleARN',
        'status': 'status',
        'version': 'version'
    }

    def __init__(self, arn=None, created_at=None, issues=None, modified_at=None, name=None, service_account_role_arn=None, status=None, version=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._arn = None
        self._created_at = None
        self._issues = None
        self._modified_at = None
        self._name = None
        self._service_account_role_arn = None
        self._status = None
        self._version = None
        self.discriminator = None

        self.arn = arn
        if created_at is not None:
            self.created_at = created_at
        if issues is not None:
            self.issues = issues
        if modified_at is not None:
            self.modified_at = modified_at
        self.name = name
        if service_account_role_arn is not None:
            self.service_account_role_arn = service_account_role_arn
        if status is not None:
            self.status = status
        self.version = version

    @property
    def arn(self):
        """Gets the arn of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.  # noqa: E501

        ARN is the AWS ARN of the addon  # noqa: E501

        :return: The arn of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.  # noqa: E501
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.

        ARN is the AWS ARN of the addon  # noqa: E501

        :param arn: The arn of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and arn is None:  # noqa: E501
            raise ValueError("Invalid value for `arn`, must not be `None`")  # noqa: E501

        self._arn = arn

    @property
    def created_at(self):
        """Gets the created_at of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.  # noqa: E501

        CreatedAt is the date and time the addon was created at  # noqa: E501

        :return: The created_at of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.

        CreatedAt is the date and time the addon was created at  # noqa: E501

        :param created_at: The created_at of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def issues(self):
        """Gets the issues of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.  # noqa: E501

        Issues is a list of issue associated with the addon  # noqa: E501

        :return: The issues of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.  # noqa: E501
        :rtype: list[IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusIssues]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.

        Issues is a list of issue associated with the addon  # noqa: E501

        :param issues: The issues of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.  # noqa: E501
        :type: list[IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusIssues]
        """

        self._issues = issues

    @property
    def modified_at(self):
        """Gets the modified_at of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.  # noqa: E501

        ModifiedAt is the date and time the addon was last modified  # noqa: E501

        :return: The modified_at of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.

        ModifiedAt is the date and time the addon was last modified  # noqa: E501

        :param modified_at: The modified_at of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def name(self):
        """Gets the name of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.  # noqa: E501

        Name is the name of the addon  # noqa: E501

        :return: The name of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.

        Name is the name of the addon  # noqa: E501

        :param name: The name of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def service_account_role_arn(self):
        """Gets the service_account_role_arn of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.  # noqa: E501

        ServiceAccountRoleArn is the ARN of the IAM role used for the service account  # noqa: E501

        :return: The service_account_role_arn of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.  # noqa: E501
        :rtype: str
        """
        return self._service_account_role_arn

    @service_account_role_arn.setter
    def service_account_role_arn(self, service_account_role_arn):
        """Sets the service_account_role_arn of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.

        ServiceAccountRoleArn is the ARN of the IAM role used for the service account  # noqa: E501

        :param service_account_role_arn: The service_account_role_arn of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.  # noqa: E501
        :type: str
        """

        self._service_account_role_arn = service_account_role_arn

    @property
    def status(self):
        """Gets the status of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.  # noqa: E501

        Status is the status of the addon  # noqa: E501

        :return: The status of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.

        Status is the status of the addon  # noqa: E501

        :param status: The status of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def version(self):
        """Gets the version of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.  # noqa: E501

        Version is the version of the addon to use  # noqa: E501

        :return: The version of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.

        Version is the version of the addon to use  # noqa: E501

        :param version: The version of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusAddons):
            return True

        return self.to_dict() != other.to_dict()
