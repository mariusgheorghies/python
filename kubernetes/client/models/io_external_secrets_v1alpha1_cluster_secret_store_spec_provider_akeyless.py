# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'akeyless_gw_api_url': 'str',
        'auth_secret_ref': 'IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRef',
        'ca_bundle': 'str',
        'ca_provider': 'IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessCaProvider'
    }

    attribute_map = {
        'akeyless_gw_api_url': 'akeylessGWApiURL',
        'auth_secret_ref': 'authSecretRef',
        'ca_bundle': 'caBundle',
        'ca_provider': 'caProvider'
    }

    def __init__(self, akeyless_gw_api_url=None, auth_secret_ref=None, ca_bundle=None, ca_provider=None, local_vars_configuration=None):  # noqa: E501
        """IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._akeyless_gw_api_url = None
        self._auth_secret_ref = None
        self._ca_bundle = None
        self._ca_provider = None
        self.discriminator = None

        self.akeyless_gw_api_url = akeyless_gw_api_url
        self.auth_secret_ref = auth_secret_ref
        if ca_bundle is not None:
            self.ca_bundle = ca_bundle
        if ca_provider is not None:
            self.ca_provider = ca_provider

    @property
    def akeyless_gw_api_url(self):
        """Gets the akeyless_gw_api_url of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless.  # noqa: E501

        Akeyless GW API Url from which the secrets to be fetched from.  # noqa: E501

        :return: The akeyless_gw_api_url of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless.  # noqa: E501
        :rtype: str
        """
        return self._akeyless_gw_api_url

    @akeyless_gw_api_url.setter
    def akeyless_gw_api_url(self, akeyless_gw_api_url):
        """Sets the akeyless_gw_api_url of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless.

        Akeyless GW API Url from which the secrets to be fetched from.  # noqa: E501

        :param akeyless_gw_api_url: The akeyless_gw_api_url of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and akeyless_gw_api_url is None:  # noqa: E501
            raise ValueError("Invalid value for `akeyless_gw_api_url`, must not be `None`")  # noqa: E501

        self._akeyless_gw_api_url = akeyless_gw_api_url

    @property
    def auth_secret_ref(self):
        """Gets the auth_secret_ref of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless.  # noqa: E501


        :return: The auth_secret_ref of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless.  # noqa: E501
        :rtype: IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRef
        """
        return self._auth_secret_ref

    @auth_secret_ref.setter
    def auth_secret_ref(self, auth_secret_ref):
        """Sets the auth_secret_ref of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless.


        :param auth_secret_ref: The auth_secret_ref of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless.  # noqa: E501
        :type: IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRef
        """
        if self.local_vars_configuration.client_side_validation and auth_secret_ref is None:  # noqa: E501
            raise ValueError("Invalid value for `auth_secret_ref`, must not be `None`")  # noqa: E501

        self._auth_secret_ref = auth_secret_ref

    @property
    def ca_bundle(self):
        """Gets the ca_bundle of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless.  # noqa: E501

        PEM/base64 encoded CA bundle used to validate Akeyless Gateway certificate. Only used if the AkeylessGWApiURL URL is using HTTPS protocol. If not set the system root certificates are used to validate the TLS connection.  # noqa: E501

        :return: The ca_bundle of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless.  # noqa: E501
        :rtype: str
        """
        return self._ca_bundle

    @ca_bundle.setter
    def ca_bundle(self, ca_bundle):
        """Sets the ca_bundle of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless.

        PEM/base64 encoded CA bundle used to validate Akeyless Gateway certificate. Only used if the AkeylessGWApiURL URL is using HTTPS protocol. If not set the system root certificates are used to validate the TLS connection.  # noqa: E501

        :param ca_bundle: The ca_bundle of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                ca_bundle is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', ca_bundle)):  # noqa: E501
            raise ValueError(r"Invalid value for `ca_bundle`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._ca_bundle = ca_bundle

    @property
    def ca_provider(self):
        """Gets the ca_provider of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless.  # noqa: E501


        :return: The ca_provider of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless.  # noqa: E501
        :rtype: IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessCaProvider
        """
        return self._ca_provider

    @ca_provider.setter
    def ca_provider(self, ca_provider):
        """Sets the ca_provider of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless.


        :param ca_provider: The ca_provider of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless.  # noqa: E501
        :type: IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessCaProvider
        """

        self._ca_provider = ca_provider

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeyless):
            return True

        return self.to_dict() != other.to_dict()
