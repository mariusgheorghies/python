# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class AwsK8sServicesEc2V1alpha1VPCEndpointSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dns_options': 'AwsK8sServicesEc2V1alpha1VPCEndpointSpecDnsOptions',
        'ip_address_type': 'str',
        'policy_document': 'str',
        'private_dns_enabled': 'bool',
        'route_table_i_ds': 'list[str]',
        'route_table_refs': 'list[AwsK8sServicesEc2V1alpha1DHCPOptionsSpecVpcRefs]',
        'security_group_i_ds': 'list[str]',
        'security_group_refs': 'list[AwsK8sServicesEc2V1alpha1DHCPOptionsSpecVpcRefs]',
        'service_name': 'str',
        'subnet_i_ds': 'list[str]',
        'subnet_refs': 'list[AwsK8sServicesEc2V1alpha1DHCPOptionsSpecVpcRefs]',
        'tags': 'list[AwsK8sServicesEc2V1alpha1DHCPOptionsSpecTags]',
        'vpc_endpoint_type': 'str',
        'vpc_id': 'str',
        'vpc_ref': 'AwsK8sServicesEc2V1alpha1DHCPOptionsSpecVpcRefs'
    }

    attribute_map = {
        'dns_options': 'dnsOptions',
        'ip_address_type': 'ipAddressType',
        'policy_document': 'policyDocument',
        'private_dns_enabled': 'privateDNSEnabled',
        'route_table_i_ds': 'routeTableIDs',
        'route_table_refs': 'routeTableRefs',
        'security_group_i_ds': 'securityGroupIDs',
        'security_group_refs': 'securityGroupRefs',
        'service_name': 'serviceName',
        'subnet_i_ds': 'subnetIDs',
        'subnet_refs': 'subnetRefs',
        'tags': 'tags',
        'vpc_endpoint_type': 'vpcEndpointType',
        'vpc_id': 'vpcID',
        'vpc_ref': 'vpcRef'
    }

    def __init__(self, dns_options=None, ip_address_type=None, policy_document=None, private_dns_enabled=None, route_table_i_ds=None, route_table_refs=None, security_group_i_ds=None, security_group_refs=None, service_name=None, subnet_i_ds=None, subnet_refs=None, tags=None, vpc_endpoint_type=None, vpc_id=None, vpc_ref=None, local_vars_configuration=None):  # noqa: E501
        """AwsK8sServicesEc2V1alpha1VPCEndpointSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._dns_options = None
        self._ip_address_type = None
        self._policy_document = None
        self._private_dns_enabled = None
        self._route_table_i_ds = None
        self._route_table_refs = None
        self._security_group_i_ds = None
        self._security_group_refs = None
        self._service_name = None
        self._subnet_i_ds = None
        self._subnet_refs = None
        self._tags = None
        self._vpc_endpoint_type = None
        self._vpc_id = None
        self._vpc_ref = None
        self.discriminator = None

        if dns_options is not None:
            self.dns_options = dns_options
        if ip_address_type is not None:
            self.ip_address_type = ip_address_type
        if policy_document is not None:
            self.policy_document = policy_document
        if private_dns_enabled is not None:
            self.private_dns_enabled = private_dns_enabled
        if route_table_i_ds is not None:
            self.route_table_i_ds = route_table_i_ds
        if route_table_refs is not None:
            self.route_table_refs = route_table_refs
        if security_group_i_ds is not None:
            self.security_group_i_ds = security_group_i_ds
        if security_group_refs is not None:
            self.security_group_refs = security_group_refs
        self.service_name = service_name
        if subnet_i_ds is not None:
            self.subnet_i_ds = subnet_i_ds
        if subnet_refs is not None:
            self.subnet_refs = subnet_refs
        if tags is not None:
            self.tags = tags
        if vpc_endpoint_type is not None:
            self.vpc_endpoint_type = vpc_endpoint_type
        if vpc_id is not None:
            self.vpc_id = vpc_id
        if vpc_ref is not None:
            self.vpc_ref = vpc_ref

    @property
    def dns_options(self):
        """Gets the dns_options of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501


        :return: The dns_options of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1VPCEndpointSpecDnsOptions
        """
        return self._dns_options

    @dns_options.setter
    def dns_options(self, dns_options):
        """Sets the dns_options of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.


        :param dns_options: The dns_options of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1VPCEndpointSpecDnsOptions
        """

        self._dns_options = dns_options

    @property
    def ip_address_type(self):
        """Gets the ip_address_type of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501

        The IP address type for the endpoint.  # noqa: E501

        :return: The ip_address_type of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :rtype: str
        """
        return self._ip_address_type

    @ip_address_type.setter
    def ip_address_type(self, ip_address_type):
        """Sets the ip_address_type of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.

        The IP address type for the endpoint.  # noqa: E501

        :param ip_address_type: The ip_address_type of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :type: str
        """

        self._ip_address_type = ip_address_type

    @property
    def policy_document(self):
        """Gets the policy_document of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501

        (Interface and gateway endpoints) A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format. If this parameter is not specified, we attach a default policy that allows full access to the service.  # noqa: E501

        :return: The policy_document of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :rtype: str
        """
        return self._policy_document

    @policy_document.setter
    def policy_document(self, policy_document):
        """Sets the policy_document of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.

        (Interface and gateway endpoints) A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format. If this parameter is not specified, we attach a default policy that allows full access to the service.  # noqa: E501

        :param policy_document: The policy_document of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :type: str
        """

        self._policy_document = policy_document

    @property
    def private_dns_enabled(self):
        """Gets the private_dns_enabled of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501

        (Interface endpoint) Indicates whether to associate a private hosted zone with the specified VPC. The private hosted zone contains a record set for the default public DNS name for the service for the Region (for example, kinesis.us-east-1.amazonaws.com), which resolves to the private IP addresses of the endpoint network interfaces in the VPC. This enables you to make requests to the default public DNS name for the service instead of the public DNS names that are automatically generated by the VPC endpoint service.   To use a private hosted zone, you must set the following VPC attributes to true: enableDnsHostnames and enableDnsSupport. Use ModifyVpcAttribute to set the VPC attributes.   Default: true  # noqa: E501

        :return: The private_dns_enabled of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :rtype: bool
        """
        return self._private_dns_enabled

    @private_dns_enabled.setter
    def private_dns_enabled(self, private_dns_enabled):
        """Sets the private_dns_enabled of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.

        (Interface endpoint) Indicates whether to associate a private hosted zone with the specified VPC. The private hosted zone contains a record set for the default public DNS name for the service for the Region (for example, kinesis.us-east-1.amazonaws.com), which resolves to the private IP addresses of the endpoint network interfaces in the VPC. This enables you to make requests to the default public DNS name for the service instead of the public DNS names that are automatically generated by the VPC endpoint service.   To use a private hosted zone, you must set the following VPC attributes to true: enableDnsHostnames and enableDnsSupport. Use ModifyVpcAttribute to set the VPC attributes.   Default: true  # noqa: E501

        :param private_dns_enabled: The private_dns_enabled of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :type: bool
        """

        self._private_dns_enabled = private_dns_enabled

    @property
    def route_table_i_ds(self):
        """Gets the route_table_i_ds of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501

        (Gateway endpoint) One or more route table IDs.  # noqa: E501

        :return: The route_table_i_ds of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._route_table_i_ds

    @route_table_i_ds.setter
    def route_table_i_ds(self, route_table_i_ds):
        """Sets the route_table_i_ds of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.

        (Gateway endpoint) One or more route table IDs.  # noqa: E501

        :param route_table_i_ds: The route_table_i_ds of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :type: list[str]
        """

        self._route_table_i_ds = route_table_i_ds

    @property
    def route_table_refs(self):
        """Gets the route_table_refs of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501


        :return: The route_table_refs of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1DHCPOptionsSpecVpcRefs]
        """
        return self._route_table_refs

    @route_table_refs.setter
    def route_table_refs(self, route_table_refs):
        """Sets the route_table_refs of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.


        :param route_table_refs: The route_table_refs of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1DHCPOptionsSpecVpcRefs]
        """

        self._route_table_refs = route_table_refs

    @property
    def security_group_i_ds(self):
        """Gets the security_group_i_ds of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501

        (Interface endpoint) The ID of one or more security groups to associate with the endpoint network interface.  # noqa: E501

        :return: The security_group_i_ds of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._security_group_i_ds

    @security_group_i_ds.setter
    def security_group_i_ds(self, security_group_i_ds):
        """Sets the security_group_i_ds of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.

        (Interface endpoint) The ID of one or more security groups to associate with the endpoint network interface.  # noqa: E501

        :param security_group_i_ds: The security_group_i_ds of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :type: list[str]
        """

        self._security_group_i_ds = security_group_i_ds

    @property
    def security_group_refs(self):
        """Gets the security_group_refs of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501


        :return: The security_group_refs of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1DHCPOptionsSpecVpcRefs]
        """
        return self._security_group_refs

    @security_group_refs.setter
    def security_group_refs(self, security_group_refs):
        """Sets the security_group_refs of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.


        :param security_group_refs: The security_group_refs of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1DHCPOptionsSpecVpcRefs]
        """

        self._security_group_refs = security_group_refs

    @property
    def service_name(self):
        """Gets the service_name of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501

        The service name. To get a list of available services, use the DescribeVpcEndpointServices request, or get the name from the service provider.  # noqa: E501

        :return: The service_name of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.

        The service name. To get a list of available services, use the DescribeVpcEndpointServices request, or get the name from the service provider.  # noqa: E501

        :param service_name: The service_name of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and service_name is None:  # noqa: E501
            raise ValueError("Invalid value for `service_name`, must not be `None`")  # noqa: E501

        self._service_name = service_name

    @property
    def subnet_i_ds(self):
        """Gets the subnet_i_ds of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501

        (Interface and Gateway Load Balancer endpoints) The ID of one or more subnets in which to create an endpoint network interface. For a Gateway Load Balancer endpoint, you can specify one subnet only.  # noqa: E501

        :return: The subnet_i_ds of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._subnet_i_ds

    @subnet_i_ds.setter
    def subnet_i_ds(self, subnet_i_ds):
        """Sets the subnet_i_ds of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.

        (Interface and Gateway Load Balancer endpoints) The ID of one or more subnets in which to create an endpoint network interface. For a Gateway Load Balancer endpoint, you can specify one subnet only.  # noqa: E501

        :param subnet_i_ds: The subnet_i_ds of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :type: list[str]
        """

        self._subnet_i_ds = subnet_i_ds

    @property
    def subnet_refs(self):
        """Gets the subnet_refs of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501


        :return: The subnet_refs of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1DHCPOptionsSpecVpcRefs]
        """
        return self._subnet_refs

    @subnet_refs.setter
    def subnet_refs(self, subnet_refs):
        """Sets the subnet_refs of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.


        :param subnet_refs: The subnet_refs of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1DHCPOptionsSpecVpcRefs]
        """

        self._subnet_refs = subnet_refs

    @property
    def tags(self):
        """Gets the tags of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501

        The tags. The value parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string.  # noqa: E501

        :return: The tags of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1DHCPOptionsSpecTags]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.

        The tags. The value parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string.  # noqa: E501

        :param tags: The tags of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1DHCPOptionsSpecTags]
        """

        self._tags = tags

    @property
    def vpc_endpoint_type(self):
        """Gets the vpc_endpoint_type of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501

        The type of endpoint.   Default: Gateway  # noqa: E501

        :return: The vpc_endpoint_type of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :rtype: str
        """
        return self._vpc_endpoint_type

    @vpc_endpoint_type.setter
    def vpc_endpoint_type(self, vpc_endpoint_type):
        """Sets the vpc_endpoint_type of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.

        The type of endpoint.   Default: Gateway  # noqa: E501

        :param vpc_endpoint_type: The vpc_endpoint_type of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :type: str
        """

        self._vpc_endpoint_type = vpc_endpoint_type

    @property
    def vpc_id(self):
        """Gets the vpc_id of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501

        The ID of the VPC in which the endpoint will be used.  # noqa: E501

        :return: The vpc_id of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :rtype: str
        """
        return self._vpc_id

    @vpc_id.setter
    def vpc_id(self, vpc_id):
        """Sets the vpc_id of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.

        The ID of the VPC in which the endpoint will be used.  # noqa: E501

        :param vpc_id: The vpc_id of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :type: str
        """

        self._vpc_id = vpc_id

    @property
    def vpc_ref(self):
        """Gets the vpc_ref of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501


        :return: The vpc_ref of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1DHCPOptionsSpecVpcRefs
        """
        return self._vpc_ref

    @vpc_ref.setter
    def vpc_ref(self, vpc_ref):
        """Sets the vpc_ref of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.


        :param vpc_ref: The vpc_ref of this AwsK8sServicesEc2V1alpha1VPCEndpointSpec.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1DHCPOptionsSpecVpcRefs
        """

        self._vpc_ref = vpc_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1VPCEndpointSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1VPCEndpointSpec):
            return True

        return self.to_dict() != other.to_dict()
