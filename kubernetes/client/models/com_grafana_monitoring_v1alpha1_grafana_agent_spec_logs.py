# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'clients': 'list[ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients]',
        'enforced_namespace_label': 'str',
        'ignore_namespace_selectors': 'bool',
        'instance_namespace_selector': 'ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsInstanceNamespaceSelector',
        'instance_selector': 'ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsInstanceSelector',
        'logs_external_label_name': 'str'
    }

    attribute_map = {
        'clients': 'clients',
        'enforced_namespace_label': 'enforcedNamespaceLabel',
        'ignore_namespace_selectors': 'ignoreNamespaceSelectors',
        'instance_namespace_selector': 'instanceNamespaceSelector',
        'instance_selector': 'instanceSelector',
        'logs_external_label_name': 'logsExternalLabelName'
    }

    def __init__(self, clients=None, enforced_namespace_label=None, ignore_namespace_selectors=None, instance_namespace_selector=None, instance_selector=None, logs_external_label_name=None, local_vars_configuration=None):  # noqa: E501
        """ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._clients = None
        self._enforced_namespace_label = None
        self._ignore_namespace_selectors = None
        self._instance_namespace_selector = None
        self._instance_selector = None
        self._logs_external_label_name = None
        self.discriminator = None

        if clients is not None:
            self.clients = clients
        if enforced_namespace_label is not None:
            self.enforced_namespace_label = enforced_namespace_label
        if ignore_namespace_selectors is not None:
            self.ignore_namespace_selectors = ignore_namespace_selectors
        if instance_namespace_selector is not None:
            self.instance_namespace_selector = instance_namespace_selector
        if instance_selector is not None:
            self.instance_selector = instance_selector
        if logs_external_label_name is not None:
            self.logs_external_label_name = logs_external_label_name

    @property
    def clients(self):
        """Gets the clients of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs.  # noqa: E501

        A global set of clients to use when a discovered LogsInstance does not have any clients defined.  # noqa: E501

        :return: The clients of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs.  # noqa: E501
        :rtype: list[ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs.

        A global set of clients to use when a discovered LogsInstance does not have any clients defined.  # noqa: E501

        :param clients: The clients of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs.  # noqa: E501
        :type: list[ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients]
        """

        self._clients = clients

    @property
    def enforced_namespace_label(self):
        """Gets the enforced_namespace_label of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs.  # noqa: E501

        EnforcedNamespaceLabel enforces adding a namespace label of origin for each metric that is user-created. The label value will always be the namespace of the object that is being created.  # noqa: E501

        :return: The enforced_namespace_label of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs.  # noqa: E501
        :rtype: str
        """
        return self._enforced_namespace_label

    @enforced_namespace_label.setter
    def enforced_namespace_label(self, enforced_namespace_label):
        """Sets the enforced_namespace_label of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs.

        EnforcedNamespaceLabel enforces adding a namespace label of origin for each metric that is user-created. The label value will always be the namespace of the object that is being created.  # noqa: E501

        :param enforced_namespace_label: The enforced_namespace_label of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs.  # noqa: E501
        :type: str
        """

        self._enforced_namespace_label = enforced_namespace_label

    @property
    def ignore_namespace_selectors(self):
        """Gets the ignore_namespace_selectors of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs.  # noqa: E501

        IgnoreNamespaceSelectors, if true, will ignore NamespaceSelector settings from the PodLogs configs, and they will only discover endpoints within their current namespace.  # noqa: E501

        :return: The ignore_namespace_selectors of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_namespace_selectors

    @ignore_namespace_selectors.setter
    def ignore_namespace_selectors(self, ignore_namespace_selectors):
        """Sets the ignore_namespace_selectors of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs.

        IgnoreNamespaceSelectors, if true, will ignore NamespaceSelector settings from the PodLogs configs, and they will only discover endpoints within their current namespace.  # noqa: E501

        :param ignore_namespace_selectors: The ignore_namespace_selectors of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs.  # noqa: E501
        :type: bool
        """

        self._ignore_namespace_selectors = ignore_namespace_selectors

    @property
    def instance_namespace_selector(self):
        """Gets the instance_namespace_selector of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs.  # noqa: E501


        :return: The instance_namespace_selector of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsInstanceNamespaceSelector
        """
        return self._instance_namespace_selector

    @instance_namespace_selector.setter
    def instance_namespace_selector(self, instance_namespace_selector):
        """Sets the instance_namespace_selector of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs.


        :param instance_namespace_selector: The instance_namespace_selector of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsInstanceNamespaceSelector
        """

        self._instance_namespace_selector = instance_namespace_selector

    @property
    def instance_selector(self):
        """Gets the instance_selector of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs.  # noqa: E501


        :return: The instance_selector of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsInstanceSelector
        """
        return self._instance_selector

    @instance_selector.setter
    def instance_selector(self, instance_selector):
        """Sets the instance_selector of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs.


        :param instance_selector: The instance_selector of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsInstanceSelector
        """

        self._instance_selector = instance_selector

    @property
    def logs_external_label_name(self):
        """Gets the logs_external_label_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs.  # noqa: E501

        LogsExternalLabelName is the name of the external label used to denote Grafana Agent cluster. Defaults to \"cluster.\" External label will _not_ be added when value is set to the empty string.  # noqa: E501

        :return: The logs_external_label_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs.  # noqa: E501
        :rtype: str
        """
        return self._logs_external_label_name

    @logs_external_label_name.setter
    def logs_external_label_name(self, logs_external_label_name):
        """Sets the logs_external_label_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs.

        LogsExternalLabelName is the name of the external label used to denote Grafana Agent cluster. Defaults to \"cluster.\" External label will _not_ be added when value is set to the empty string.  # noqa: E501

        :param logs_external_label_name: The logs_external_label_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs.  # noqa: E501
        :type: str
        """

        self._logs_external_label_name = logs_external_label_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs):
            return True

        return self.to_dict() != other.to_dict()
