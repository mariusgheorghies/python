# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class OrgProjectcalicoCrdV1IPPoolSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'block_size': 'int',
        'cidr': 'str',
        'disabled': 'bool',
        'ipip': 'OrgProjectcalicoCrdV1IPPoolSpecIpip',
        'ipip_mode': 'str',
        'nat_outgoing': 'bool',
        'nat_outgoing': 'bool',
        'node_selector': 'str',
        'vxlan_mode': 'str'
    }

    attribute_map = {
        'block_size': 'blockSize',
        'cidr': 'cidr',
        'disabled': 'disabled',
        'ipip': 'ipip',
        'ipip_mode': 'ipipMode',
        'nat_outgoing': 'nat-outgoing',
        'nat_outgoing': 'natOutgoing',
        'node_selector': 'nodeSelector',
        'vxlan_mode': 'vxlanMode'
    }

    def __init__(self, block_size=None, cidr=None, disabled=None, ipip=None, ipip_mode=None, nat_outgoing=None, node_selector=None, vxlan_mode=None, local_vars_configuration=None):  # noqa: E501
        """OrgProjectcalicoCrdV1IPPoolSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._block_size = None
        self._cidr = None
        self._disabled = None
        self._ipip = None
        self._ipip_mode = None
        self._nat_outgoing = None
        self._nat_outgoing = None
        self._node_selector = None
        self._vxlan_mode = None
        self.discriminator = None

        if block_size is not None:
            self.block_size = block_size
        self.cidr = cidr
        if disabled is not None:
            self.disabled = disabled
        if ipip is not None:
            self.ipip = ipip
        if ipip_mode is not None:
            self.ipip_mode = ipip_mode
        if nat_outgoing is not None:
            self.nat_outgoing = nat_outgoing
        if nat_outgoing is not None:
            self.nat_outgoing = nat_outgoing
        if node_selector is not None:
            self.node_selector = node_selector
        if vxlan_mode is not None:
            self.vxlan_mode = vxlan_mode

    @property
    def block_size(self):
        """Gets the block_size of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501

        The block size to use for IP address assignments from this pool. Defaults to 26 for IPv4 and 112 for IPv6.  # noqa: E501

        :return: The block_size of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501
        :rtype: int
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """Sets the block_size of this OrgProjectcalicoCrdV1IPPoolSpec.

        The block size to use for IP address assignments from this pool. Defaults to 26 for IPv4 and 112 for IPv6.  # noqa: E501

        :param block_size: The block_size of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501
        :type: int
        """

        self._block_size = block_size

    @property
    def cidr(self):
        """Gets the cidr of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501

        The pool CIDR.  # noqa: E501

        :return: The cidr of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this OrgProjectcalicoCrdV1IPPoolSpec.

        The pool CIDR.  # noqa: E501

        :param cidr: The cidr of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cidr is None:  # noqa: E501
            raise ValueError("Invalid value for `cidr`, must not be `None`")  # noqa: E501

        self._cidr = cidr

    @property
    def disabled(self):
        """Gets the disabled of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501

        When disabled is true, Calico IPAM will not assign addresses from this pool.  # noqa: E501

        :return: The disabled of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this OrgProjectcalicoCrdV1IPPoolSpec.

        When disabled is true, Calico IPAM will not assign addresses from this pool.  # noqa: E501

        :param disabled: The disabled of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def ipip(self):
        """Gets the ipip of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501


        :return: The ipip of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501
        :rtype: OrgProjectcalicoCrdV1IPPoolSpecIpip
        """
        return self._ipip

    @ipip.setter
    def ipip(self, ipip):
        """Sets the ipip of this OrgProjectcalicoCrdV1IPPoolSpec.


        :param ipip: The ipip of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501
        :type: OrgProjectcalicoCrdV1IPPoolSpecIpip
        """

        self._ipip = ipip

    @property
    def ipip_mode(self):
        """Gets the ipip_mode of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501

        Contains configuration for IPIP tunneling for this pool. If not specified, then this is defaulted to \"Never\" (i.e. IPIP tunneling is disabled).  # noqa: E501

        :return: The ipip_mode of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501
        :rtype: str
        """
        return self._ipip_mode

    @ipip_mode.setter
    def ipip_mode(self, ipip_mode):
        """Sets the ipip_mode of this OrgProjectcalicoCrdV1IPPoolSpec.

        Contains configuration for IPIP tunneling for this pool. If not specified, then this is defaulted to \"Never\" (i.e. IPIP tunneling is disabled).  # noqa: E501

        :param ipip_mode: The ipip_mode of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501
        :type: str
        """

        self._ipip_mode = ipip_mode

    @property
    def nat_outgoing(self):
        """Gets the nat_outgoing of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501

        Deprecated: this field is only used for APIv1 backwards compatibility. Setting this field is not allowed, this field is for internal use only.  # noqa: E501

        :return: The nat_outgoing of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501
        :rtype: bool
        """
        return self._nat_outgoing

    @nat_outgoing.setter
    def nat_outgoing(self, nat_outgoing):
        """Sets the nat_outgoing of this OrgProjectcalicoCrdV1IPPoolSpec.

        Deprecated: this field is only used for APIv1 backwards compatibility. Setting this field is not allowed, this field is for internal use only.  # noqa: E501

        :param nat_outgoing: The nat_outgoing of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501
        :type: bool
        """

        self._nat_outgoing = nat_outgoing

    @property
    def nat_outgoing(self):
        """Gets the nat_outgoing of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501

        When nat-outgoing is true, packets sent from Calico networked containers in this pool to destinations outside of this pool will be masqueraded.  # noqa: E501

        :return: The nat_outgoing of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501
        :rtype: bool
        """
        return self._nat_outgoing

    @nat_outgoing.setter
    def nat_outgoing(self, nat_outgoing):
        """Sets the nat_outgoing of this OrgProjectcalicoCrdV1IPPoolSpec.

        When nat-outgoing is true, packets sent from Calico networked containers in this pool to destinations outside of this pool will be masqueraded.  # noqa: E501

        :param nat_outgoing: The nat_outgoing of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501
        :type: bool
        """

        self._nat_outgoing = nat_outgoing

    @property
    def node_selector(self):
        """Gets the node_selector of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501

        Allows IPPool to allocate for a specific node by label selector.  # noqa: E501

        :return: The node_selector of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501
        :rtype: str
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this OrgProjectcalicoCrdV1IPPoolSpec.

        Allows IPPool to allocate for a specific node by label selector.  # noqa: E501

        :param node_selector: The node_selector of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501
        :type: str
        """

        self._node_selector = node_selector

    @property
    def vxlan_mode(self):
        """Gets the vxlan_mode of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501

        Contains configuration for VXLAN tunneling for this pool. If not specified, then this is defaulted to \"Never\" (i.e. VXLAN tunneling is disabled).  # noqa: E501

        :return: The vxlan_mode of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501
        :rtype: str
        """
        return self._vxlan_mode

    @vxlan_mode.setter
    def vxlan_mode(self, vxlan_mode):
        """Sets the vxlan_mode of this OrgProjectcalicoCrdV1IPPoolSpec.

        Contains configuration for VXLAN tunneling for this pool. If not specified, then this is defaulted to \"Never\" (i.e. VXLAN tunneling is disabled).  # noqa: E501

        :param vxlan_mode: The vxlan_mode of this OrgProjectcalicoCrdV1IPPoolSpec.  # noqa: E501
        :type: str
        """

        self._vxlan_mode = vxlan_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgProjectcalicoCrdV1IPPoolSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrgProjectcalicoCrdV1IPPoolSpec):
            return True

        return self.to_dict() != other.to_dict()
