# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'backoff_config': 'ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsBackoffConfig',
        'basic_auth': 'ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsBasicAuth',
        'batch_size': 'int',
        'batch_wait': 'str',
        'bearer_token': 'str',
        'bearer_token_file': 'str',
        'external_labels': 'dict(str, str)',
        'oauth2': 'ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2',
        'proxy_url': 'str',
        'tenant_id': 'str',
        'timeout': 'str',
        'tls_config': 'ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsTlsConfig',
        'url': 'str'
    }

    attribute_map = {
        'backoff_config': 'backoffConfig',
        'basic_auth': 'basicAuth',
        'batch_size': 'batchSize',
        'batch_wait': 'batchWait',
        'bearer_token': 'bearerToken',
        'bearer_token_file': 'bearerTokenFile',
        'external_labels': 'externalLabels',
        'oauth2': 'oauth2',
        'proxy_url': 'proxyUrl',
        'tenant_id': 'tenantId',
        'timeout': 'timeout',
        'tls_config': 'tlsConfig',
        'url': 'url'
    }

    def __init__(self, backoff_config=None, basic_auth=None, batch_size=None, batch_wait=None, bearer_token=None, bearer_token_file=None, external_labels=None, oauth2=None, proxy_url=None, tenant_id=None, timeout=None, tls_config=None, url=None, local_vars_configuration=None):  # noqa: E501
        """ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._backoff_config = None
        self._basic_auth = None
        self._batch_size = None
        self._batch_wait = None
        self._bearer_token = None
        self._bearer_token_file = None
        self._external_labels = None
        self._oauth2 = None
        self._proxy_url = None
        self._tenant_id = None
        self._timeout = None
        self._tls_config = None
        self._url = None
        self.discriminator = None

        if backoff_config is not None:
            self.backoff_config = backoff_config
        if basic_auth is not None:
            self.basic_auth = basic_auth
        if batch_size is not None:
            self.batch_size = batch_size
        if batch_wait is not None:
            self.batch_wait = batch_wait
        if bearer_token is not None:
            self.bearer_token = bearer_token
        if bearer_token_file is not None:
            self.bearer_token_file = bearer_token_file
        if external_labels is not None:
            self.external_labels = external_labels
        if oauth2 is not None:
            self.oauth2 = oauth2
        if proxy_url is not None:
            self.proxy_url = proxy_url
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if timeout is not None:
            self.timeout = timeout
        if tls_config is not None:
            self.tls_config = tls_config
        self.url = url

    @property
    def backoff_config(self):
        """Gets the backoff_config of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501


        :return: The backoff_config of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsBackoffConfig
        """
        return self._backoff_config

    @backoff_config.setter
    def backoff_config(self, backoff_config):
        """Sets the backoff_config of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.


        :param backoff_config: The backoff_config of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsBackoffConfig
        """

        self._backoff_config = backoff_config

    @property
    def basic_auth(self):
        """Gets the basic_auth of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501


        :return: The basic_auth of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsBasicAuth
        """
        return self._basic_auth

    @basic_auth.setter
    def basic_auth(self, basic_auth):
        """Sets the basic_auth of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.


        :param basic_auth: The basic_auth of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsBasicAuth
        """

        self._basic_auth = basic_auth

    @property
    def batch_size(self):
        """Gets the batch_size of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501

        Maximum batch size (in bytes) of logs to accumulate before sending the batch to Loki.  # noqa: E501

        :return: The batch_size of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :rtype: int
        """
        return self._batch_size

    @batch_size.setter
    def batch_size(self, batch_size):
        """Sets the batch_size of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.

        Maximum batch size (in bytes) of logs to accumulate before sending the batch to Loki.  # noqa: E501

        :param batch_size: The batch_size of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :type: int
        """

        self._batch_size = batch_size

    @property
    def batch_wait(self):
        """Gets the batch_wait of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501

        Maximum amount of time to wait before sending a batch, even if that batch isn't full.  # noqa: E501

        :return: The batch_wait of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :rtype: str
        """
        return self._batch_wait

    @batch_wait.setter
    def batch_wait(self, batch_wait):
        """Sets the batch_wait of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.

        Maximum amount of time to wait before sending a batch, even if that batch isn't full.  # noqa: E501

        :param batch_wait: The batch_wait of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :type: str
        """

        self._batch_wait = batch_wait

    @property
    def bearer_token(self):
        """Gets the bearer_token of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501

        BearerToken used for remote_write.  # noqa: E501

        :return: The bearer_token of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :rtype: str
        """
        return self._bearer_token

    @bearer_token.setter
    def bearer_token(self, bearer_token):
        """Sets the bearer_token of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.

        BearerToken used for remote_write.  # noqa: E501

        :param bearer_token: The bearer_token of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :type: str
        """

        self._bearer_token = bearer_token

    @property
    def bearer_token_file(self):
        """Gets the bearer_token_file of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501

        BearerTokenFile used to read bearer token.  # noqa: E501

        :return: The bearer_token_file of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :rtype: str
        """
        return self._bearer_token_file

    @bearer_token_file.setter
    def bearer_token_file(self, bearer_token_file):
        """Sets the bearer_token_file of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.

        BearerTokenFile used to read bearer token.  # noqa: E501

        :param bearer_token_file: The bearer_token_file of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :type: str
        """

        self._bearer_token_file = bearer_token_file

    @property
    def external_labels(self):
        """Gets the external_labels of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501

        ExternalLabels are labels to add to any time series when sending data to Loki.  # noqa: E501

        :return: The external_labels of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._external_labels

    @external_labels.setter
    def external_labels(self, external_labels):
        """Sets the external_labels of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.

        ExternalLabels are labels to add to any time series when sending data to Loki.  # noqa: E501

        :param external_labels: The external_labels of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :type: dict(str, str)
        """

        self._external_labels = external_labels

    @property
    def oauth2(self):
        """Gets the oauth2 of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501


        :return: The oauth2 of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2
        """
        return self._oauth2

    @oauth2.setter
    def oauth2(self, oauth2):
        """Sets the oauth2 of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.


        :param oauth2: The oauth2 of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2
        """

        self._oauth2 = oauth2

    @property
    def proxy_url(self):
        """Gets the proxy_url of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501

        ProxyURL to proxy requests through. Optional.  # noqa: E501

        :return: The proxy_url of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :rtype: str
        """
        return self._proxy_url

    @proxy_url.setter
    def proxy_url(self, proxy_url):
        """Sets the proxy_url of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.

        ProxyURL to proxy requests through. Optional.  # noqa: E501

        :param proxy_url: The proxy_url of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :type: str
        """

        self._proxy_url = proxy_url

    @property
    def tenant_id(self):
        """Gets the tenant_id of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501

        Tenant ID used by default to push logs to Loki. If omitted assumes remote Loki is running in single-tenant mode or an authentication layer is used to inject an X-Scope-OrgID header.  # noqa: E501

        :return: The tenant_id of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.

        Tenant ID used by default to push logs to Loki. If omitted assumes remote Loki is running in single-tenant mode or an authentication layer is used to inject an X-Scope-OrgID header.  # noqa: E501

        :param tenant_id: The tenant_id of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def timeout(self):
        """Gets the timeout of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501

        Maximum time to wait for a server to respond to a request.  # noqa: E501

        :return: The timeout of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.

        Maximum time to wait for a server to respond to a request.  # noqa: E501

        :param timeout: The timeout of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :type: str
        """

        self._timeout = timeout

    @property
    def tls_config(self):
        """Gets the tls_config of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501


        :return: The tls_config of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsTlsConfig
        """
        return self._tls_config

    @tls_config.setter
    def tls_config(self, tls_config):
        """Sets the tls_config of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.


        :param tls_config: The tls_config of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsTlsConfig
        """

        self._tls_config = tls_config

    @property
    def url(self):
        """Gets the url of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501

        URL is the URL where Loki is listening. Must be a full HTTP URL, including protocol. Required. Example: https://logs-prod-us-central1.grafana.net/loki/api/v1/push.  # noqa: E501

        :return: The url of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.

        URL is the URL where Loki is listening. Must be a full HTTP URL, including protocol. Required. Example: https://logs-prod-us-central1.grafana.net/loki/api/v1/push.  # noqa: E501

        :param url: The url of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsClients):
            return True

        return self.to_dict() != other.to_dict()
