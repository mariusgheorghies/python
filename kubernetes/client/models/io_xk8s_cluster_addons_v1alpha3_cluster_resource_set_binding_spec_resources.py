# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterAddonsV1alpha3ClusterResourceSetBindingSpecResources(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'applied': 'bool',
        'hash': 'str',
        'kind': 'str',
        'last_applied_time': 'datetime',
        'name': 'str'
    }

    attribute_map = {
        'applied': 'applied',
        'hash': 'hash',
        'kind': 'kind',
        'last_applied_time': 'lastAppliedTime',
        'name': 'name'
    }

    def __init__(self, applied=None, hash=None, kind=None, last_applied_time=None, name=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterAddonsV1alpha3ClusterResourceSetBindingSpecResources - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._applied = None
        self._hash = None
        self._kind = None
        self._last_applied_time = None
        self._name = None
        self.discriminator = None

        self.applied = applied
        if hash is not None:
            self.hash = hash
        self.kind = kind
        if last_applied_time is not None:
            self.last_applied_time = last_applied_time
        self.name = name

    @property
    def applied(self):
        """Gets the applied of this IoXK8sClusterAddonsV1alpha3ClusterResourceSetBindingSpecResources.  # noqa: E501

        Applied is to track if a resource is applied to the cluster or not.  # noqa: E501

        :return: The applied of this IoXK8sClusterAddonsV1alpha3ClusterResourceSetBindingSpecResources.  # noqa: E501
        :rtype: bool
        """
        return self._applied

    @applied.setter
    def applied(self, applied):
        """Sets the applied of this IoXK8sClusterAddonsV1alpha3ClusterResourceSetBindingSpecResources.

        Applied is to track if a resource is applied to the cluster or not.  # noqa: E501

        :param applied: The applied of this IoXK8sClusterAddonsV1alpha3ClusterResourceSetBindingSpecResources.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and applied is None:  # noqa: E501
            raise ValueError("Invalid value for `applied`, must not be `None`")  # noqa: E501

        self._applied = applied

    @property
    def hash(self):
        """Gets the hash of this IoXK8sClusterAddonsV1alpha3ClusterResourceSetBindingSpecResources.  # noqa: E501

        Hash is the hash of a resource's data. This can be used to decide if a resource is changed. For \"ApplyOnce\" ClusterResourceSet.spec.strategy, this is no-op as that strategy does not act on change.  # noqa: E501

        :return: The hash of this IoXK8sClusterAddonsV1alpha3ClusterResourceSetBindingSpecResources.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this IoXK8sClusterAddonsV1alpha3ClusterResourceSetBindingSpecResources.

        Hash is the hash of a resource's data. This can be used to decide if a resource is changed. For \"ApplyOnce\" ClusterResourceSet.spec.strategy, this is no-op as that strategy does not act on change.  # noqa: E501

        :param hash: The hash of this IoXK8sClusterAddonsV1alpha3ClusterResourceSetBindingSpecResources.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def kind(self):
        """Gets the kind of this IoXK8sClusterAddonsV1alpha3ClusterResourceSetBindingSpecResources.  # noqa: E501

        Kind of the resource. Supported kinds are: Secrets and ConfigMaps.  # noqa: E501

        :return: The kind of this IoXK8sClusterAddonsV1alpha3ClusterResourceSetBindingSpecResources.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this IoXK8sClusterAddonsV1alpha3ClusterResourceSetBindingSpecResources.

        Kind of the resource. Supported kinds are: Secrets and ConfigMaps.  # noqa: E501

        :param kind: The kind of this IoXK8sClusterAddonsV1alpha3ClusterResourceSetBindingSpecResources.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and kind is None:  # noqa: E501
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501
        allowed_values = ["Secret", "ConfigMap"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and kind not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def last_applied_time(self):
        """Gets the last_applied_time of this IoXK8sClusterAddonsV1alpha3ClusterResourceSetBindingSpecResources.  # noqa: E501

        LastAppliedTime identifies when this resource was last applied to the cluster.  # noqa: E501

        :return: The last_applied_time of this IoXK8sClusterAddonsV1alpha3ClusterResourceSetBindingSpecResources.  # noqa: E501
        :rtype: datetime
        """
        return self._last_applied_time

    @last_applied_time.setter
    def last_applied_time(self, last_applied_time):
        """Sets the last_applied_time of this IoXK8sClusterAddonsV1alpha3ClusterResourceSetBindingSpecResources.

        LastAppliedTime identifies when this resource was last applied to the cluster.  # noqa: E501

        :param last_applied_time: The last_applied_time of this IoXK8sClusterAddonsV1alpha3ClusterResourceSetBindingSpecResources.  # noqa: E501
        :type: datetime
        """

        self._last_applied_time = last_applied_time

    @property
    def name(self):
        """Gets the name of this IoXK8sClusterAddonsV1alpha3ClusterResourceSetBindingSpecResources.  # noqa: E501

        Name of the resource that is in the same namespace with ClusterResourceSet object.  # noqa: E501

        :return: The name of this IoXK8sClusterAddonsV1alpha3ClusterResourceSetBindingSpecResources.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IoXK8sClusterAddonsV1alpha3ClusterResourceSetBindingSpecResources.

        Name of the resource that is in the same namespace with ClusterResourceSet object.  # noqa: E501

        :param name: The name of this IoXK8sClusterAddonsV1alpha3ClusterResourceSetBindingSpecResources.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterAddonsV1alpha3ClusterResourceSetBindingSpecResources):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterAddonsV1alpha3ClusterResourceSetBindingSpecResources):
            return True

        return self.to_dict() != other.to_dict()
