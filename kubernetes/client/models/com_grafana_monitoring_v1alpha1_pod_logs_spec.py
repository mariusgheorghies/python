# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComGrafanaMonitoringV1alpha1PodLogsSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'job_label': 'str',
        'namespace_selector': 'ComGrafanaMonitoringV1alpha1PodLogsSpecNamespaceSelector',
        'pipeline_stages': 'list[ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages]',
        'pod_target_labels': 'list[str]',
        'relabelings': 'list[ComCoreosMonitoringV1PodMonitorSpecMetricRelabelings]',
        'selector': 'ComGrafanaMonitoringV1alpha1PodLogsSpecSelector'
    }

    attribute_map = {
        'job_label': 'jobLabel',
        'namespace_selector': 'namespaceSelector',
        'pipeline_stages': 'pipelineStages',
        'pod_target_labels': 'podTargetLabels',
        'relabelings': 'relabelings',
        'selector': 'selector'
    }

    def __init__(self, job_label=None, namespace_selector=None, pipeline_stages=None, pod_target_labels=None, relabelings=None, selector=None, local_vars_configuration=None):  # noqa: E501
        """ComGrafanaMonitoringV1alpha1PodLogsSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._job_label = None
        self._namespace_selector = None
        self._pipeline_stages = None
        self._pod_target_labels = None
        self._relabelings = None
        self._selector = None
        self.discriminator = None

        if job_label is not None:
            self.job_label = job_label
        if namespace_selector is not None:
            self.namespace_selector = namespace_selector
        if pipeline_stages is not None:
            self.pipeline_stages = pipeline_stages
        if pod_target_labels is not None:
            self.pod_target_labels = pod_target_labels
        if relabelings is not None:
            self.relabelings = relabelings
        self.selector = selector

    @property
    def job_label(self):
        """Gets the job_label of this ComGrafanaMonitoringV1alpha1PodLogsSpec.  # noqa: E501

        The label to use to retrieve the job name from.  # noqa: E501

        :return: The job_label of this ComGrafanaMonitoringV1alpha1PodLogsSpec.  # noqa: E501
        :rtype: str
        """
        return self._job_label

    @job_label.setter
    def job_label(self, job_label):
        """Sets the job_label of this ComGrafanaMonitoringV1alpha1PodLogsSpec.

        The label to use to retrieve the job name from.  # noqa: E501

        :param job_label: The job_label of this ComGrafanaMonitoringV1alpha1PodLogsSpec.  # noqa: E501
        :type: str
        """

        self._job_label = job_label

    @property
    def namespace_selector(self):
        """Gets the namespace_selector of this ComGrafanaMonitoringV1alpha1PodLogsSpec.  # noqa: E501


        :return: The namespace_selector of this ComGrafanaMonitoringV1alpha1PodLogsSpec.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1PodLogsSpecNamespaceSelector
        """
        return self._namespace_selector

    @namespace_selector.setter
    def namespace_selector(self, namespace_selector):
        """Sets the namespace_selector of this ComGrafanaMonitoringV1alpha1PodLogsSpec.


        :param namespace_selector: The namespace_selector of this ComGrafanaMonitoringV1alpha1PodLogsSpec.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1PodLogsSpecNamespaceSelector
        """

        self._namespace_selector = namespace_selector

    @property
    def pipeline_stages(self):
        """Gets the pipeline_stages of this ComGrafanaMonitoringV1alpha1PodLogsSpec.  # noqa: E501

        Pipeline stages for this pod. Pipeline stages support transforming and filtering log lines.  # noqa: E501

        :return: The pipeline_stages of this ComGrafanaMonitoringV1alpha1PodLogsSpec.  # noqa: E501
        :rtype: list[ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages]
        """
        return self._pipeline_stages

    @pipeline_stages.setter
    def pipeline_stages(self, pipeline_stages):
        """Sets the pipeline_stages of this ComGrafanaMonitoringV1alpha1PodLogsSpec.

        Pipeline stages for this pod. Pipeline stages support transforming and filtering log lines.  # noqa: E501

        :param pipeline_stages: The pipeline_stages of this ComGrafanaMonitoringV1alpha1PodLogsSpec.  # noqa: E501
        :type: list[ComGrafanaMonitoringV1alpha1PodLogsSpecPipelineStages]
        """

        self._pipeline_stages = pipeline_stages

    @property
    def pod_target_labels(self):
        """Gets the pod_target_labels of this ComGrafanaMonitoringV1alpha1PodLogsSpec.  # noqa: E501

        PodTargetLabels transfers labels on the Kubernetes Pod onto the target.  # noqa: E501

        :return: The pod_target_labels of this ComGrafanaMonitoringV1alpha1PodLogsSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._pod_target_labels

    @pod_target_labels.setter
    def pod_target_labels(self, pod_target_labels):
        """Sets the pod_target_labels of this ComGrafanaMonitoringV1alpha1PodLogsSpec.

        PodTargetLabels transfers labels on the Kubernetes Pod onto the target.  # noqa: E501

        :param pod_target_labels: The pod_target_labels of this ComGrafanaMonitoringV1alpha1PodLogsSpec.  # noqa: E501
        :type: list[str]
        """

        self._pod_target_labels = pod_target_labels

    @property
    def relabelings(self):
        """Gets the relabelings of this ComGrafanaMonitoringV1alpha1PodLogsSpec.  # noqa: E501

        RelabelConfigs to apply to logs before delivering. Grafana Agent Operator automatically adds relabelings for a few standard Kubernetes fields and replaces original scrape job name with __tmp_logs_job_name.   More info: https://grafana.com/docs/loki/latest/clients/promtail/configuration/#relabel_configs  # noqa: E501

        :return: The relabelings of this ComGrafanaMonitoringV1alpha1PodLogsSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1PodMonitorSpecMetricRelabelings]
        """
        return self._relabelings

    @relabelings.setter
    def relabelings(self, relabelings):
        """Sets the relabelings of this ComGrafanaMonitoringV1alpha1PodLogsSpec.

        RelabelConfigs to apply to logs before delivering. Grafana Agent Operator automatically adds relabelings for a few standard Kubernetes fields and replaces original scrape job name with __tmp_logs_job_name.   More info: https://grafana.com/docs/loki/latest/clients/promtail/configuration/#relabel_configs  # noqa: E501

        :param relabelings: The relabelings of this ComGrafanaMonitoringV1alpha1PodLogsSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1PodMonitorSpecMetricRelabelings]
        """

        self._relabelings = relabelings

    @property
    def selector(self):
        """Gets the selector of this ComGrafanaMonitoringV1alpha1PodLogsSpec.  # noqa: E501


        :return: The selector of this ComGrafanaMonitoringV1alpha1PodLogsSpec.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1PodLogsSpecSelector
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this ComGrafanaMonitoringV1alpha1PodLogsSpec.


        :param selector: The selector of this ComGrafanaMonitoringV1alpha1PodLogsSpec.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1PodLogsSpecSelector
        """
        if self.local_vars_configuration.client_side_validation and selector is None:  # noqa: E501
            raise ValueError("Invalid value for `selector`, must not be `None`")  # noqa: E501

        self._selector = selector

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1PodLogsSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1PodLogsSpec):
            return True

        return self.to_dict() != other.to_dict()
