# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdExternal(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ca_file': 'str',
        'cert_file': 'str',
        'endpoints': 'list[str]',
        'key_file': 'str'
    }

    attribute_map = {
        'ca_file': 'caFile',
        'cert_file': 'certFile',
        'endpoints': 'endpoints',
        'key_file': 'keyFile'
    }

    def __init__(self, ca_file=None, cert_file=None, endpoints=None, key_file=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdExternal - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ca_file = None
        self._cert_file = None
        self._endpoints = None
        self._key_file = None
        self.discriminator = None

        self.ca_file = ca_file
        self.cert_file = cert_file
        self.endpoints = endpoints
        self.key_file = key_file

    @property
    def ca_file(self):
        """Gets the ca_file of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdExternal.  # noqa: E501

        CAFile is an SSL Certificate Authority file used to secure etcd communication. Required if using a TLS connection.  # noqa: E501

        :return: The ca_file of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdExternal.  # noqa: E501
        :rtype: str
        """
        return self._ca_file

    @ca_file.setter
    def ca_file(self, ca_file):
        """Sets the ca_file of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdExternal.

        CAFile is an SSL Certificate Authority file used to secure etcd communication. Required if using a TLS connection.  # noqa: E501

        :param ca_file: The ca_file of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdExternal.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and ca_file is None:  # noqa: E501
            raise ValueError("Invalid value for `ca_file`, must not be `None`")  # noqa: E501

        self._ca_file = ca_file

    @property
    def cert_file(self):
        """Gets the cert_file of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdExternal.  # noqa: E501

        CertFile is an SSL certification file used to secure etcd communication. Required if using a TLS connection.  # noqa: E501

        :return: The cert_file of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdExternal.  # noqa: E501
        :rtype: str
        """
        return self._cert_file

    @cert_file.setter
    def cert_file(self, cert_file):
        """Sets the cert_file of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdExternal.

        CertFile is an SSL certification file used to secure etcd communication. Required if using a TLS connection.  # noqa: E501

        :param cert_file: The cert_file of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdExternal.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cert_file is None:  # noqa: E501
            raise ValueError("Invalid value for `cert_file`, must not be `None`")  # noqa: E501

        self._cert_file = cert_file

    @property
    def endpoints(self):
        """Gets the endpoints of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdExternal.  # noqa: E501

        Endpoints of etcd members. Required for ExternalEtcd.  # noqa: E501

        :return: The endpoints of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdExternal.  # noqa: E501
        :rtype: list[str]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdExternal.

        Endpoints of etcd members. Required for ExternalEtcd.  # noqa: E501

        :param endpoints: The endpoints of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdExternal.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and endpoints is None:  # noqa: E501
            raise ValueError("Invalid value for `endpoints`, must not be `None`")  # noqa: E501

        self._endpoints = endpoints

    @property
    def key_file(self):
        """Gets the key_file of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdExternal.  # noqa: E501

        KeyFile is an SSL key file used to secure etcd communication. Required if using a TLS connection.  # noqa: E501

        :return: The key_file of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdExternal.  # noqa: E501
        :rtype: str
        """
        return self._key_file

    @key_file.setter
    def key_file(self, key_file):
        """Sets the key_file of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdExternal.

        KeyFile is an SSL key file used to secure etcd communication. Required if using a TLS connection.  # noqa: E501

        :param key_file: The key_file of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdExternal.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and key_file is None:  # noqa: E501
            raise ValueError("Invalid value for `key_file`, must not be `None`")  # noqa: E501

        self._key_file = key_file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdExternal):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecClusterConfigurationEtcdExternal):
            return True

        return self.to_dict() != other.to_dict()
