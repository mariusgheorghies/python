# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoCertManagerAcmeV1OrderSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'common_name': 'str',
        'dns_names': 'list[str]',
        'duration': 'str',
        'ip_addresses': 'list[str]',
        'issuer_ref': 'IoCertManagerAcmeV1OrderSpecIssuerRef',
        'request': 'str'
    }

    attribute_map = {
        'common_name': 'commonName',
        'dns_names': 'dnsNames',
        'duration': 'duration',
        'ip_addresses': 'ipAddresses',
        'issuer_ref': 'issuerRef',
        'request': 'request'
    }

    def __init__(self, common_name=None, dns_names=None, duration=None, ip_addresses=None, issuer_ref=None, request=None, local_vars_configuration=None):  # noqa: E501
        """IoCertManagerAcmeV1OrderSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._common_name = None
        self._dns_names = None
        self._duration = None
        self._ip_addresses = None
        self._issuer_ref = None
        self._request = None
        self.discriminator = None

        if common_name is not None:
            self.common_name = common_name
        if dns_names is not None:
            self.dns_names = dns_names
        if duration is not None:
            self.duration = duration
        if ip_addresses is not None:
            self.ip_addresses = ip_addresses
        self.issuer_ref = issuer_ref
        self.request = request

    @property
    def common_name(self):
        """Gets the common_name of this IoCertManagerAcmeV1OrderSpec.  # noqa: E501

        CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.  # noqa: E501

        :return: The common_name of this IoCertManagerAcmeV1OrderSpec.  # noqa: E501
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this IoCertManagerAcmeV1OrderSpec.

        CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.  # noqa: E501

        :param common_name: The common_name of this IoCertManagerAcmeV1OrderSpec.  # noqa: E501
        :type: str
        """

        self._common_name = common_name

    @property
    def dns_names(self):
        """Gets the dns_names of this IoCertManagerAcmeV1OrderSpec.  # noqa: E501

        DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.  # noqa: E501

        :return: The dns_names of this IoCertManagerAcmeV1OrderSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._dns_names

    @dns_names.setter
    def dns_names(self, dns_names):
        """Sets the dns_names of this IoCertManagerAcmeV1OrderSpec.

        DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.  # noqa: E501

        :param dns_names: The dns_names of this IoCertManagerAcmeV1OrderSpec.  # noqa: E501
        :type: list[str]
        """

        self._dns_names = dns_names

    @property
    def duration(self):
        """Gets the duration of this IoCertManagerAcmeV1OrderSpec.  # noqa: E501

        Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.  # noqa: E501

        :return: The duration of this IoCertManagerAcmeV1OrderSpec.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this IoCertManagerAcmeV1OrderSpec.

        Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.  # noqa: E501

        :param duration: The duration of this IoCertManagerAcmeV1OrderSpec.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this IoCertManagerAcmeV1OrderSpec.  # noqa: E501

        IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.  # noqa: E501

        :return: The ip_addresses of this IoCertManagerAcmeV1OrderSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this IoCertManagerAcmeV1OrderSpec.

        IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.  # noqa: E501

        :param ip_addresses: The ip_addresses of this IoCertManagerAcmeV1OrderSpec.  # noqa: E501
        :type: list[str]
        """

        self._ip_addresses = ip_addresses

    @property
    def issuer_ref(self):
        """Gets the issuer_ref of this IoCertManagerAcmeV1OrderSpec.  # noqa: E501


        :return: The issuer_ref of this IoCertManagerAcmeV1OrderSpec.  # noqa: E501
        :rtype: IoCertManagerAcmeV1OrderSpecIssuerRef
        """
        return self._issuer_ref

    @issuer_ref.setter
    def issuer_ref(self, issuer_ref):
        """Sets the issuer_ref of this IoCertManagerAcmeV1OrderSpec.


        :param issuer_ref: The issuer_ref of this IoCertManagerAcmeV1OrderSpec.  # noqa: E501
        :type: IoCertManagerAcmeV1OrderSpecIssuerRef
        """
        if self.local_vars_configuration.client_side_validation and issuer_ref is None:  # noqa: E501
            raise ValueError("Invalid value for `issuer_ref`, must not be `None`")  # noqa: E501

        self._issuer_ref = issuer_ref

    @property
    def request(self):
        """Gets the request of this IoCertManagerAcmeV1OrderSpec.  # noqa: E501

        Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.  # noqa: E501

        :return: The request of this IoCertManagerAcmeV1OrderSpec.  # noqa: E501
        :rtype: str
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this IoCertManagerAcmeV1OrderSpec.

        Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.  # noqa: E501

        :param request: The request of this IoCertManagerAcmeV1OrderSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and request is None:  # noqa: E501
            raise ValueError("Invalid value for `request`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                request is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', request)):  # noqa: E501
            raise ValueError(r"Invalid value for `request`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._request = request

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoCertManagerAcmeV1OrderSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoCertManagerAcmeV1OrderSpec):
            return True

        return self.to_dict() != other.to_dict()
