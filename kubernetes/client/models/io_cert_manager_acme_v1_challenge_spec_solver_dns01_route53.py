# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_key_id': 'str',
        'hosted_zone_id': 'str',
        'region': 'str',
        'role': 'str',
        'secret_access_key_secret_ref': 'IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53SecretAccessKeySecretRef'
    }

    attribute_map = {
        'access_key_id': 'accessKeyID',
        'hosted_zone_id': 'hostedZoneID',
        'region': 'region',
        'role': 'role',
        'secret_access_key_secret_ref': 'secretAccessKeySecretRef'
    }

    def __init__(self, access_key_id=None, hosted_zone_id=None, region=None, role=None, secret_access_key_secret_ref=None, local_vars_configuration=None):  # noqa: E501
        """IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_key_id = None
        self._hosted_zone_id = None
        self._region = None
        self._role = None
        self._secret_access_key_secret_ref = None
        self.discriminator = None

        if access_key_id is not None:
            self.access_key_id = access_key_id
        if hosted_zone_id is not None:
            self.hosted_zone_id = hosted_zone_id
        self.region = region
        if role is not None:
            self.role = role
        if secret_access_key_secret_ref is not None:
            self.secret_access_key_secret_ref = secret_access_key_secret_ref

    @property
    def access_key_id(self):
        """Gets the access_key_id of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53.  # noqa: E501

        The AccessKeyID is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials  # noqa: E501

        :return: The access_key_id of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53.  # noqa: E501
        :rtype: str
        """
        return self._access_key_id

    @access_key_id.setter
    def access_key_id(self, access_key_id):
        """Sets the access_key_id of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53.

        The AccessKeyID is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials  # noqa: E501

        :param access_key_id: The access_key_id of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53.  # noqa: E501
        :type: str
        """

        self._access_key_id = access_key_id

    @property
    def hosted_zone_id(self):
        """Gets the hosted_zone_id of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53.  # noqa: E501

        If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.  # noqa: E501

        :return: The hosted_zone_id of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53.  # noqa: E501
        :rtype: str
        """
        return self._hosted_zone_id

    @hosted_zone_id.setter
    def hosted_zone_id(self, hosted_zone_id):
        """Sets the hosted_zone_id of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53.

        If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.  # noqa: E501

        :param hosted_zone_id: The hosted_zone_id of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53.  # noqa: E501
        :type: str
        """

        self._hosted_zone_id = hosted_zone_id

    @property
    def region(self):
        """Gets the region of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53.  # noqa: E501

        Always set the region when using AccessKeyID and SecretAccessKey  # noqa: E501

        :return: The region of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53.

        Always set the region when using AccessKeyID and SecretAccessKey  # noqa: E501

        :param region: The region of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and region is None:  # noqa: E501
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def role(self):
        """Gets the role of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53.  # noqa: E501

        Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata  # noqa: E501

        :return: The role of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53.

        Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata  # noqa: E501

        :param role: The role of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def secret_access_key_secret_ref(self):
        """Gets the secret_access_key_secret_ref of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53.  # noqa: E501


        :return: The secret_access_key_secret_ref of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53.  # noqa: E501
        :rtype: IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53SecretAccessKeySecretRef
        """
        return self._secret_access_key_secret_ref

    @secret_access_key_secret_ref.setter
    def secret_access_key_secret_ref(self, secret_access_key_secret_ref):
        """Sets the secret_access_key_secret_ref of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53.


        :param secret_access_key_secret_ref: The secret_access_key_secret_ref of this IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53.  # noqa: E501
        :type: IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53SecretAccessKeySecretRef
        """

        self._secret_access_key_secret_ref = secret_access_key_secret_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoCertManagerAcmeV1ChallengeSpecSolverDns01Route53):
            return True

        return self.to_dict() != other.to_dict()
