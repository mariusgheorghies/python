# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRef(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_id': 'IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRefAccessID',
        'access_type': 'IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRefAccessType',
        'access_type_param': 'IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRefAccessType'
    }

    attribute_map = {
        'access_id': 'accessID',
        'access_type': 'accessType',
        'access_type_param': 'accessTypeParam'
    }

    def __init__(self, access_id=None, access_type=None, access_type_param=None, local_vars_configuration=None):  # noqa: E501
        """IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRef - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_id = None
        self._access_type = None
        self._access_type_param = None
        self.discriminator = None

        if access_id is not None:
            self.access_id = access_id
        if access_type is not None:
            self.access_type = access_type
        if access_type_param is not None:
            self.access_type_param = access_type_param

    @property
    def access_id(self):
        """Gets the access_id of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRef.  # noqa: E501


        :return: The access_id of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRef.  # noqa: E501
        :rtype: IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRefAccessID
        """
        return self._access_id

    @access_id.setter
    def access_id(self, access_id):
        """Sets the access_id of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRef.


        :param access_id: The access_id of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRef.  # noqa: E501
        :type: IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRefAccessID
        """

        self._access_id = access_id

    @property
    def access_type(self):
        """Gets the access_type of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRef.  # noqa: E501


        :return: The access_type of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRef.  # noqa: E501
        :rtype: IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRefAccessType
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRef.


        :param access_type: The access_type of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRef.  # noqa: E501
        :type: IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRefAccessType
        """

        self._access_type = access_type

    @property
    def access_type_param(self):
        """Gets the access_type_param of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRef.  # noqa: E501


        :return: The access_type_param of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRef.  # noqa: E501
        :rtype: IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRefAccessType
        """
        return self._access_type_param

    @access_type_param.setter
    def access_type_param(self, access_type_param):
        """Sets the access_type_param of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRef.


        :param access_type_param: The access_type_param of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRef.  # noqa: E501
        :type: IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRefAccessType
        """

        self._access_type_param = access_type_param

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRef):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderAkeylessAuthSecretRefSecretRef):
            return True

        return self.to_dict() != other.to_dict()
