# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComCoreosMonitoringV1PrometheusSpecQuery(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'lookback_delta': 'str',
        'max_concurrency': 'int',
        'max_samples': 'int',
        'timeout': 'str'
    }

    attribute_map = {
        'lookback_delta': 'lookbackDelta',
        'max_concurrency': 'maxConcurrency',
        'max_samples': 'maxSamples',
        'timeout': 'timeout'
    }

    def __init__(self, lookback_delta=None, max_concurrency=None, max_samples=None, timeout=None, local_vars_configuration=None):  # noqa: E501
        """ComCoreosMonitoringV1PrometheusSpecQuery - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._lookback_delta = None
        self._max_concurrency = None
        self._max_samples = None
        self._timeout = None
        self.discriminator = None

        if lookback_delta is not None:
            self.lookback_delta = lookback_delta
        if max_concurrency is not None:
            self.max_concurrency = max_concurrency
        if max_samples is not None:
            self.max_samples = max_samples
        if timeout is not None:
            self.timeout = timeout

    @property
    def lookback_delta(self):
        """Gets the lookback_delta of this ComCoreosMonitoringV1PrometheusSpecQuery.  # noqa: E501

        The delta difference allowed for retrieving metrics during expression evaluations.  # noqa: E501

        :return: The lookback_delta of this ComCoreosMonitoringV1PrometheusSpecQuery.  # noqa: E501
        :rtype: str
        """
        return self._lookback_delta

    @lookback_delta.setter
    def lookback_delta(self, lookback_delta):
        """Sets the lookback_delta of this ComCoreosMonitoringV1PrometheusSpecQuery.

        The delta difference allowed for retrieving metrics during expression evaluations.  # noqa: E501

        :param lookback_delta: The lookback_delta of this ComCoreosMonitoringV1PrometheusSpecQuery.  # noqa: E501
        :type: str
        """

        self._lookback_delta = lookback_delta

    @property
    def max_concurrency(self):
        """Gets the max_concurrency of this ComCoreosMonitoringV1PrometheusSpecQuery.  # noqa: E501

        Number of concurrent queries that can be run at once.  # noqa: E501

        :return: The max_concurrency of this ComCoreosMonitoringV1PrometheusSpecQuery.  # noqa: E501
        :rtype: int
        """
        return self._max_concurrency

    @max_concurrency.setter
    def max_concurrency(self, max_concurrency):
        """Sets the max_concurrency of this ComCoreosMonitoringV1PrometheusSpecQuery.

        Number of concurrent queries that can be run at once.  # noqa: E501

        :param max_concurrency: The max_concurrency of this ComCoreosMonitoringV1PrometheusSpecQuery.  # noqa: E501
        :type: int
        """

        self._max_concurrency = max_concurrency

    @property
    def max_samples(self):
        """Gets the max_samples of this ComCoreosMonitoringV1PrometheusSpecQuery.  # noqa: E501

        Maximum number of samples a single query can load into memory. Note that queries will fail if they would load more samples than this into memory, so this also limits the number of samples a query can return.  # noqa: E501

        :return: The max_samples of this ComCoreosMonitoringV1PrometheusSpecQuery.  # noqa: E501
        :rtype: int
        """
        return self._max_samples

    @max_samples.setter
    def max_samples(self, max_samples):
        """Sets the max_samples of this ComCoreosMonitoringV1PrometheusSpecQuery.

        Maximum number of samples a single query can load into memory. Note that queries will fail if they would load more samples than this into memory, so this also limits the number of samples a query can return.  # noqa: E501

        :param max_samples: The max_samples of this ComCoreosMonitoringV1PrometheusSpecQuery.  # noqa: E501
        :type: int
        """

        self._max_samples = max_samples

    @property
    def timeout(self):
        """Gets the timeout of this ComCoreosMonitoringV1PrometheusSpecQuery.  # noqa: E501

        Maximum time a query may take before being aborted.  # noqa: E501

        :return: The timeout of this ComCoreosMonitoringV1PrometheusSpecQuery.  # noqa: E501
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ComCoreosMonitoringV1PrometheusSpecQuery.

        Maximum time a query may take before being aborted.  # noqa: E501

        :param timeout: The timeout of this ComCoreosMonitoringV1PrometheusSpecQuery.  # noqa: E501
        :type: str
        """

        self._timeout = timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComCoreosMonitoringV1PrometheusSpecQuery):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComCoreosMonitoringV1PrometheusSpecQuery):
            return True

        return self.to_dict() != other.to_dict()
