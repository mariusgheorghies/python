# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class AwsK8sServicesEc2V1alpha1InstanceSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'block_device_mappings': 'list[AwsK8sServicesEc2V1alpha1InstanceSpecBlockDeviceMappings]',
        'capacity_reservation_specification': 'AwsK8sServicesEc2V1alpha1InstanceSpecCapacityReservationSpecification',
        'cpu_options': 'AwsK8sServicesEc2V1alpha1InstanceSpecCpuOptions',
        'credit_specification': 'AwsK8sServicesEc2V1alpha1InstanceSpecCreditSpecification',
        'disable_api_stop': 'bool',
        'disable_api_termination': 'bool',
        'ebs_optimized': 'bool',
        'elastic_gpu_specification': 'list[AwsK8sServicesEc2V1alpha1InstanceSpecElasticGPUSpecification]',
        'elastic_inference_accelerators': 'list[AwsK8sServicesEc2V1alpha1InstanceSpecElasticInferenceAccelerators]',
        'enclave_options': 'AwsK8sServicesEc2V1alpha1InstanceSpecEnclaveOptions',
        'hibernation_options': 'AwsK8sServicesEc2V1alpha1InstanceSpecHibernationOptions',
        'iam_instance_profile': 'AwsK8sServicesEc2V1alpha1InstanceSpecIamInstanceProfile',
        'image_id': 'str',
        'instance_initiated_shutdown_behavior': 'str',
        'instance_market_options': 'AwsK8sServicesEc2V1alpha1InstanceSpecInstanceMarketOptions',
        'instance_type': 'str',
        'ipv6_address_count': 'int',
        'ipv6_addresses': 'list[AwsK8sServicesEc2V1alpha1InstanceSpecIpv6Addresses]',
        'kernel_id': 'str',
        'key_name': 'str',
        'launch_template': 'AwsK8sServicesEc2V1alpha1InstanceSpecLaunchTemplate',
        'license_specifications': 'list[AwsK8sServicesEc2V1alpha1InstanceSpecLicenseSpecifications]',
        'maintenance_options': 'AwsK8sServicesEc2V1alpha1InstanceSpecMaintenanceOptions',
        'max_count': 'int',
        'metadata_options': 'AwsK8sServicesEc2V1alpha1InstanceSpecMetadataOptions',
        'min_count': 'int',
        'monitoring': 'AwsK8sServicesEc2V1alpha1InstanceSpecMonitoring',
        'network_interfaces': 'list[AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces]',
        'placement': 'AwsK8sServicesEc2V1alpha1InstanceSpecPlacement',
        'private_dns_name_options': 'AwsK8sServicesEc2V1alpha1InstanceSpecPrivateDNSNameOptions',
        'private_ip_address': 'str',
        'ram_disk_id': 'str',
        'security_group_i_ds': 'list[str]',
        'security_groups': 'list[str]',
        'subnet_id': 'str',
        'tags': 'list[AwsK8sServicesEc2V1alpha1DHCPOptionsSpecTags]',
        'user_data': 'str'
    }

    attribute_map = {
        'block_device_mappings': 'blockDeviceMappings',
        'capacity_reservation_specification': 'capacityReservationSpecification',
        'cpu_options': 'cpuOptions',
        'credit_specification': 'creditSpecification',
        'disable_api_stop': 'disableAPIStop',
        'disable_api_termination': 'disableAPITermination',
        'ebs_optimized': 'ebsOptimized',
        'elastic_gpu_specification': 'elasticGPUSpecification',
        'elastic_inference_accelerators': 'elasticInferenceAccelerators',
        'enclave_options': 'enclaveOptions',
        'hibernation_options': 'hibernationOptions',
        'iam_instance_profile': 'iamInstanceProfile',
        'image_id': 'imageID',
        'instance_initiated_shutdown_behavior': 'instanceInitiatedShutdownBehavior',
        'instance_market_options': 'instanceMarketOptions',
        'instance_type': 'instanceType',
        'ipv6_address_count': 'ipv6AddressCount',
        'ipv6_addresses': 'ipv6Addresses',
        'kernel_id': 'kernelID',
        'key_name': 'keyName',
        'launch_template': 'launchTemplate',
        'license_specifications': 'licenseSpecifications',
        'maintenance_options': 'maintenanceOptions',
        'max_count': 'maxCount',
        'metadata_options': 'metadataOptions',
        'min_count': 'minCount',
        'monitoring': 'monitoring',
        'network_interfaces': 'networkInterfaces',
        'placement': 'placement',
        'private_dns_name_options': 'privateDNSNameOptions',
        'private_ip_address': 'privateIPAddress',
        'ram_disk_id': 'ramDiskID',
        'security_group_i_ds': 'securityGroupIDs',
        'security_groups': 'securityGroups',
        'subnet_id': 'subnetID',
        'tags': 'tags',
        'user_data': 'userData'
    }

    def __init__(self, block_device_mappings=None, capacity_reservation_specification=None, cpu_options=None, credit_specification=None, disable_api_stop=None, disable_api_termination=None, ebs_optimized=None, elastic_gpu_specification=None, elastic_inference_accelerators=None, enclave_options=None, hibernation_options=None, iam_instance_profile=None, image_id=None, instance_initiated_shutdown_behavior=None, instance_market_options=None, instance_type=None, ipv6_address_count=None, ipv6_addresses=None, kernel_id=None, key_name=None, launch_template=None, license_specifications=None, maintenance_options=None, max_count=None, metadata_options=None, min_count=None, monitoring=None, network_interfaces=None, placement=None, private_dns_name_options=None, private_ip_address=None, ram_disk_id=None, security_group_i_ds=None, security_groups=None, subnet_id=None, tags=None, user_data=None, local_vars_configuration=None):  # noqa: E501
        """AwsK8sServicesEc2V1alpha1InstanceSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._block_device_mappings = None
        self._capacity_reservation_specification = None
        self._cpu_options = None
        self._credit_specification = None
        self._disable_api_stop = None
        self._disable_api_termination = None
        self._ebs_optimized = None
        self._elastic_gpu_specification = None
        self._elastic_inference_accelerators = None
        self._enclave_options = None
        self._hibernation_options = None
        self._iam_instance_profile = None
        self._image_id = None
        self._instance_initiated_shutdown_behavior = None
        self._instance_market_options = None
        self._instance_type = None
        self._ipv6_address_count = None
        self._ipv6_addresses = None
        self._kernel_id = None
        self._key_name = None
        self._launch_template = None
        self._license_specifications = None
        self._maintenance_options = None
        self._max_count = None
        self._metadata_options = None
        self._min_count = None
        self._monitoring = None
        self._network_interfaces = None
        self._placement = None
        self._private_dns_name_options = None
        self._private_ip_address = None
        self._ram_disk_id = None
        self._security_group_i_ds = None
        self._security_groups = None
        self._subnet_id = None
        self._tags = None
        self._user_data = None
        self.discriminator = None

        if block_device_mappings is not None:
            self.block_device_mappings = block_device_mappings
        if capacity_reservation_specification is not None:
            self.capacity_reservation_specification = capacity_reservation_specification
        if cpu_options is not None:
            self.cpu_options = cpu_options
        if credit_specification is not None:
            self.credit_specification = credit_specification
        if disable_api_stop is not None:
            self.disable_api_stop = disable_api_stop
        if disable_api_termination is not None:
            self.disable_api_termination = disable_api_termination
        if ebs_optimized is not None:
            self.ebs_optimized = ebs_optimized
        if elastic_gpu_specification is not None:
            self.elastic_gpu_specification = elastic_gpu_specification
        if elastic_inference_accelerators is not None:
            self.elastic_inference_accelerators = elastic_inference_accelerators
        if enclave_options is not None:
            self.enclave_options = enclave_options
        if hibernation_options is not None:
            self.hibernation_options = hibernation_options
        if iam_instance_profile is not None:
            self.iam_instance_profile = iam_instance_profile
        if image_id is not None:
            self.image_id = image_id
        if instance_initiated_shutdown_behavior is not None:
            self.instance_initiated_shutdown_behavior = instance_initiated_shutdown_behavior
        if instance_market_options is not None:
            self.instance_market_options = instance_market_options
        if instance_type is not None:
            self.instance_type = instance_type
        if ipv6_address_count is not None:
            self.ipv6_address_count = ipv6_address_count
        if ipv6_addresses is not None:
            self.ipv6_addresses = ipv6_addresses
        if kernel_id is not None:
            self.kernel_id = kernel_id
        if key_name is not None:
            self.key_name = key_name
        if launch_template is not None:
            self.launch_template = launch_template
        if license_specifications is not None:
            self.license_specifications = license_specifications
        if maintenance_options is not None:
            self.maintenance_options = maintenance_options
        if max_count is not None:
            self.max_count = max_count
        if metadata_options is not None:
            self.metadata_options = metadata_options
        if min_count is not None:
            self.min_count = min_count
        if monitoring is not None:
            self.monitoring = monitoring
        if network_interfaces is not None:
            self.network_interfaces = network_interfaces
        if placement is not None:
            self.placement = placement
        if private_dns_name_options is not None:
            self.private_dns_name_options = private_dns_name_options
        if private_ip_address is not None:
            self.private_ip_address = private_ip_address
        if ram_disk_id is not None:
            self.ram_disk_id = ram_disk_id
        if security_group_i_ds is not None:
            self.security_group_i_ds = security_group_i_ds
        if security_groups is not None:
            self.security_groups = security_groups
        if subnet_id is not None:
            self.subnet_id = subnet_id
        if tags is not None:
            self.tags = tags
        if user_data is not None:
            self.user_data = user_data

    @property
    def block_device_mappings(self):
        """Gets the block_device_mappings of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501

        The block device mapping, which defines the EBS volumes and instance store volumes to attach to the instance at launch. For more information, see Block device mappings (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html) in the Amazon EC2 User Guide.  # noqa: E501

        :return: The block_device_mappings of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1InstanceSpecBlockDeviceMappings]
        """
        return self._block_device_mappings

    @block_device_mappings.setter
    def block_device_mappings(self, block_device_mappings):
        """Sets the block_device_mappings of this AwsK8sServicesEc2V1alpha1InstanceSpec.

        The block device mapping, which defines the EBS volumes and instance store volumes to attach to the instance at launch. For more information, see Block device mappings (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html) in the Amazon EC2 User Guide.  # noqa: E501

        :param block_device_mappings: The block_device_mappings of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1InstanceSpecBlockDeviceMappings]
        """

        self._block_device_mappings = block_device_mappings

    @property
    def capacity_reservation_specification(self):
        """Gets the capacity_reservation_specification of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501


        :return: The capacity_reservation_specification of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1InstanceSpecCapacityReservationSpecification
        """
        return self._capacity_reservation_specification

    @capacity_reservation_specification.setter
    def capacity_reservation_specification(self, capacity_reservation_specification):
        """Sets the capacity_reservation_specification of this AwsK8sServicesEc2V1alpha1InstanceSpec.


        :param capacity_reservation_specification: The capacity_reservation_specification of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1InstanceSpecCapacityReservationSpecification
        """

        self._capacity_reservation_specification = capacity_reservation_specification

    @property
    def cpu_options(self):
        """Gets the cpu_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501


        :return: The cpu_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1InstanceSpecCpuOptions
        """
        return self._cpu_options

    @cpu_options.setter
    def cpu_options(self, cpu_options):
        """Sets the cpu_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.


        :param cpu_options: The cpu_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1InstanceSpecCpuOptions
        """

        self._cpu_options = cpu_options

    @property
    def credit_specification(self):
        """Gets the credit_specification of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501


        :return: The credit_specification of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1InstanceSpecCreditSpecification
        """
        return self._credit_specification

    @credit_specification.setter
    def credit_specification(self, credit_specification):
        """Sets the credit_specification of this AwsK8sServicesEc2V1alpha1InstanceSpec.


        :param credit_specification: The credit_specification of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1InstanceSpecCreditSpecification
        """

        self._credit_specification = credit_specification

    @property
    def disable_api_stop(self):
        """Gets the disable_api_stop of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501

        Indicates whether an instance is enabled for stop protection. For more information, see Stop protection (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection).  # noqa: E501

        :return: The disable_api_stop of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: bool
        """
        return self._disable_api_stop

    @disable_api_stop.setter
    def disable_api_stop(self, disable_api_stop):
        """Sets the disable_api_stop of this AwsK8sServicesEc2V1alpha1InstanceSpec.

        Indicates whether an instance is enabled for stop protection. For more information, see Stop protection (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection).  # noqa: E501

        :param disable_api_stop: The disable_api_stop of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: bool
        """

        self._disable_api_stop = disable_api_stop

    @property
    def disable_api_termination(self):
        """Gets the disable_api_termination of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501

        If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use ModifyInstanceAttribute (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html). Alternatively, if you set InstanceInitiatedShutdownBehavior to terminate, you can terminate the instance by running the shutdown command from the instance.   Default: false  # noqa: E501

        :return: The disable_api_termination of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: bool
        """
        return self._disable_api_termination

    @disable_api_termination.setter
    def disable_api_termination(self, disable_api_termination):
        """Sets the disable_api_termination of this AwsK8sServicesEc2V1alpha1InstanceSpec.

        If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use ModifyInstanceAttribute (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html). Alternatively, if you set InstanceInitiatedShutdownBehavior to terminate, you can terminate the instance by running the shutdown command from the instance.   Default: false  # noqa: E501

        :param disable_api_termination: The disable_api_termination of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: bool
        """

        self._disable_api_termination = disable_api_termination

    @property
    def ebs_optimized(self):
        """Gets the ebs_optimized of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501

        Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.   Default: false  # noqa: E501

        :return: The ebs_optimized of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: bool
        """
        return self._ebs_optimized

    @ebs_optimized.setter
    def ebs_optimized(self, ebs_optimized):
        """Sets the ebs_optimized of this AwsK8sServicesEc2V1alpha1InstanceSpec.

        Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.   Default: false  # noqa: E501

        :param ebs_optimized: The ebs_optimized of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: bool
        """

        self._ebs_optimized = ebs_optimized

    @property
    def elastic_gpu_specification(self):
        """Gets the elastic_gpu_specification of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501

        An elastic GPU to associate with the instance. An Elastic GPU is a GPU resource that you can attach to your Windows instance to accelerate the graphics performance of your applications. For more information, see Amazon EC2 Elastic GPUs (https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html) in the Amazon EC2 User Guide.  # noqa: E501

        :return: The elastic_gpu_specification of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1InstanceSpecElasticGPUSpecification]
        """
        return self._elastic_gpu_specification

    @elastic_gpu_specification.setter
    def elastic_gpu_specification(self, elastic_gpu_specification):
        """Sets the elastic_gpu_specification of this AwsK8sServicesEc2V1alpha1InstanceSpec.

        An elastic GPU to associate with the instance. An Elastic GPU is a GPU resource that you can attach to your Windows instance to accelerate the graphics performance of your applications. For more information, see Amazon EC2 Elastic GPUs (https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html) in the Amazon EC2 User Guide.  # noqa: E501

        :param elastic_gpu_specification: The elastic_gpu_specification of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1InstanceSpecElasticGPUSpecification]
        """

        self._elastic_gpu_specification = elastic_gpu_specification

    @property
    def elastic_inference_accelerators(self):
        """Gets the elastic_inference_accelerators of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501

        An elastic inference accelerator to associate with the instance. Elastic inference accelerators are a resource you can attach to your Amazon EC2 instances to accelerate your Deep Learning (DL) inference workloads.   You cannot specify accelerators from different generations in the same request.  # noqa: E501

        :return: The elastic_inference_accelerators of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1InstanceSpecElasticInferenceAccelerators]
        """
        return self._elastic_inference_accelerators

    @elastic_inference_accelerators.setter
    def elastic_inference_accelerators(self, elastic_inference_accelerators):
        """Sets the elastic_inference_accelerators of this AwsK8sServicesEc2V1alpha1InstanceSpec.

        An elastic inference accelerator to associate with the instance. Elastic inference accelerators are a resource you can attach to your Amazon EC2 instances to accelerate your Deep Learning (DL) inference workloads.   You cannot specify accelerators from different generations in the same request.  # noqa: E501

        :param elastic_inference_accelerators: The elastic_inference_accelerators of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1InstanceSpecElasticInferenceAccelerators]
        """

        self._elastic_inference_accelerators = elastic_inference_accelerators

    @property
    def enclave_options(self):
        """Gets the enclave_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501


        :return: The enclave_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1InstanceSpecEnclaveOptions
        """
        return self._enclave_options

    @enclave_options.setter
    def enclave_options(self, enclave_options):
        """Sets the enclave_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.


        :param enclave_options: The enclave_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1InstanceSpecEnclaveOptions
        """

        self._enclave_options = enclave_options

    @property
    def hibernation_options(self):
        """Gets the hibernation_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501


        :return: The hibernation_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1InstanceSpecHibernationOptions
        """
        return self._hibernation_options

    @hibernation_options.setter
    def hibernation_options(self, hibernation_options):
        """Sets the hibernation_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.


        :param hibernation_options: The hibernation_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1InstanceSpecHibernationOptions
        """

        self._hibernation_options = hibernation_options

    @property
    def iam_instance_profile(self):
        """Gets the iam_instance_profile of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501


        :return: The iam_instance_profile of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1InstanceSpecIamInstanceProfile
        """
        return self._iam_instance_profile

    @iam_instance_profile.setter
    def iam_instance_profile(self, iam_instance_profile):
        """Sets the iam_instance_profile of this AwsK8sServicesEc2V1alpha1InstanceSpec.


        :param iam_instance_profile: The iam_instance_profile of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1InstanceSpecIamInstanceProfile
        """

        self._iam_instance_profile = iam_instance_profile

    @property
    def image_id(self):
        """Gets the image_id of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501

        The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.  # noqa: E501

        :return: The image_id of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this AwsK8sServicesEc2V1alpha1InstanceSpec.

        The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.  # noqa: E501

        :param image_id: The image_id of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: str
        """

        self._image_id = image_id

    @property
    def instance_initiated_shutdown_behavior(self):
        """Gets the instance_initiated_shutdown_behavior of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501

        Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).   Default: stop  # noqa: E501

        :return: The instance_initiated_shutdown_behavior of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._instance_initiated_shutdown_behavior

    @instance_initiated_shutdown_behavior.setter
    def instance_initiated_shutdown_behavior(self, instance_initiated_shutdown_behavior):
        """Sets the instance_initiated_shutdown_behavior of this AwsK8sServicesEc2V1alpha1InstanceSpec.

        Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).   Default: stop  # noqa: E501

        :param instance_initiated_shutdown_behavior: The instance_initiated_shutdown_behavior of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: str
        """

        self._instance_initiated_shutdown_behavior = instance_initiated_shutdown_behavior

    @property
    def instance_market_options(self):
        """Gets the instance_market_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501


        :return: The instance_market_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1InstanceSpecInstanceMarketOptions
        """
        return self._instance_market_options

    @instance_market_options.setter
    def instance_market_options(self, instance_market_options):
        """Sets the instance_market_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.


        :param instance_market_options: The instance_market_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1InstanceSpecInstanceMarketOptions
        """

        self._instance_market_options = instance_market_options

    @property
    def instance_type(self):
        """Gets the instance_type of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501

        The instance type. For more information, see Instance types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the Amazon EC2 User Guide.   Default: m1.small  # noqa: E501

        :return: The instance_type of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this AwsK8sServicesEc2V1alpha1InstanceSpec.

        The instance type. For more information, see Instance types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the Amazon EC2 User Guide.   Default: m1.small  # noqa: E501

        :param instance_type: The instance_type of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: str
        """

        self._instance_type = instance_type

    @property
    def ipv6_address_count(self):
        """Gets the ipv6_address_count of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501

        [EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.   You cannot specify this option and the network interfaces option in the same request.  # noqa: E501

        :return: The ipv6_address_count of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: int
        """
        return self._ipv6_address_count

    @ipv6_address_count.setter
    def ipv6_address_count(self, ipv6_address_count):
        """Sets the ipv6_address_count of this AwsK8sServicesEc2V1alpha1InstanceSpec.

        [EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.   You cannot specify this option and the network interfaces option in the same request.  # noqa: E501

        :param ipv6_address_count: The ipv6_address_count of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: int
        """

        self._ipv6_address_count = ipv6_address_count

    @property
    def ipv6_addresses(self):
        """Gets the ipv6_addresses of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501

        [EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.   You cannot specify this option and the network interfaces option in the same request.  # noqa: E501

        :return: The ipv6_addresses of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1InstanceSpecIpv6Addresses]
        """
        return self._ipv6_addresses

    @ipv6_addresses.setter
    def ipv6_addresses(self, ipv6_addresses):
        """Sets the ipv6_addresses of this AwsK8sServicesEc2V1alpha1InstanceSpec.

        [EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.   You cannot specify this option and the network interfaces option in the same request.  # noqa: E501

        :param ipv6_addresses: The ipv6_addresses of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1InstanceSpecIpv6Addresses]
        """

        self._ipv6_addresses = ipv6_addresses

    @property
    def kernel_id(self):
        """Gets the kernel_id of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501

        The ID of the kernel.   We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html) in the Amazon EC2 User Guide.  # noqa: E501

        :return: The kernel_id of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._kernel_id

    @kernel_id.setter
    def kernel_id(self, kernel_id):
        """Sets the kernel_id of this AwsK8sServicesEc2V1alpha1InstanceSpec.

        The ID of the kernel.   We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html) in the Amazon EC2 User Guide.  # noqa: E501

        :param kernel_id: The kernel_id of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: str
        """

        self._kernel_id = kernel_id

    @property
    def key_name(self):
        """Gets the key_name of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501

        The name of the key pair. You can create a key pair using CreateKeyPair (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html) or ImportKeyPair (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html).   If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.  # noqa: E501

        :return: The key_name of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this AwsK8sServicesEc2V1alpha1InstanceSpec.

        The name of the key pair. You can create a key pair using CreateKeyPair (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html) or ImportKeyPair (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html).   If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.  # noqa: E501

        :param key_name: The key_name of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: str
        """

        self._key_name = key_name

    @property
    def launch_template(self):
        """Gets the launch_template of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501


        :return: The launch_template of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1InstanceSpecLaunchTemplate
        """
        return self._launch_template

    @launch_template.setter
    def launch_template(self, launch_template):
        """Sets the launch_template of this AwsK8sServicesEc2V1alpha1InstanceSpec.


        :param launch_template: The launch_template of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1InstanceSpecLaunchTemplate
        """

        self._launch_template = launch_template

    @property
    def license_specifications(self):
        """Gets the license_specifications of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501

        The license configurations.  # noqa: E501

        :return: The license_specifications of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1InstanceSpecLicenseSpecifications]
        """
        return self._license_specifications

    @license_specifications.setter
    def license_specifications(self, license_specifications):
        """Sets the license_specifications of this AwsK8sServicesEc2V1alpha1InstanceSpec.

        The license configurations.  # noqa: E501

        :param license_specifications: The license_specifications of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1InstanceSpecLicenseSpecifications]
        """

        self._license_specifications = license_specifications

    @property
    def maintenance_options(self):
        """Gets the maintenance_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501


        :return: The maintenance_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1InstanceSpecMaintenanceOptions
        """
        return self._maintenance_options

    @maintenance_options.setter
    def maintenance_options(self, maintenance_options):
        """Sets the maintenance_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.


        :param maintenance_options: The maintenance_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1InstanceSpecMaintenanceOptions
        """

        self._maintenance_options = maintenance_options

    @property
    def max_count(self):
        """Gets the max_count of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501

        The maximum number of instances to launch. If you specify more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible number of instances above MinCount.   Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see How many instances can I run in Amazon EC2 (http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2) in the Amazon EC2 FAQ.  # noqa: E501

        :return: The max_count of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: int
        """
        return self._max_count

    @max_count.setter
    def max_count(self, max_count):
        """Sets the max_count of this AwsK8sServicesEc2V1alpha1InstanceSpec.

        The maximum number of instances to launch. If you specify more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible number of instances above MinCount.   Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see How many instances can I run in Amazon EC2 (http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2) in the Amazon EC2 FAQ.  # noqa: E501

        :param max_count: The max_count of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: int
        """

        self._max_count = max_count

    @property
    def metadata_options(self):
        """Gets the metadata_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501


        :return: The metadata_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1InstanceSpecMetadataOptions
        """
        return self._metadata_options

    @metadata_options.setter
    def metadata_options(self, metadata_options):
        """Sets the metadata_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.


        :param metadata_options: The metadata_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1InstanceSpecMetadataOptions
        """

        self._metadata_options = metadata_options

    @property
    def min_count(self):
        """Gets the min_count of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501

        The minimum number of instances to launch. If you specify a minimum that is more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches no instances.   Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see How many instances can I run in Amazon EC2 (http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2) in the Amazon EC2 General FAQ.  # noqa: E501

        :return: The min_count of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: int
        """
        return self._min_count

    @min_count.setter
    def min_count(self, min_count):
        """Sets the min_count of this AwsK8sServicesEc2V1alpha1InstanceSpec.

        The minimum number of instances to launch. If you specify a minimum that is more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches no instances.   Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see How many instances can I run in Amazon EC2 (http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2) in the Amazon EC2 General FAQ.  # noqa: E501

        :param min_count: The min_count of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: int
        """

        self._min_count = min_count

    @property
    def monitoring(self):
        """Gets the monitoring of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501


        :return: The monitoring of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1InstanceSpecMonitoring
        """
        return self._monitoring

    @monitoring.setter
    def monitoring(self, monitoring):
        """Sets the monitoring of this AwsK8sServicesEc2V1alpha1InstanceSpec.


        :param monitoring: The monitoring of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1InstanceSpecMonitoring
        """

        self._monitoring = monitoring

    @property
    def network_interfaces(self):
        """Gets the network_interfaces of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501

        The network interfaces to associate with the instance. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.  # noqa: E501

        :return: The network_interfaces of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces]
        """
        return self._network_interfaces

    @network_interfaces.setter
    def network_interfaces(self, network_interfaces):
        """Sets the network_interfaces of this AwsK8sServicesEc2V1alpha1InstanceSpec.

        The network interfaces to associate with the instance. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.  # noqa: E501

        :param network_interfaces: The network_interfaces of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1InstanceSpecNetworkInterfaces]
        """

        self._network_interfaces = network_interfaces

    @property
    def placement(self):
        """Gets the placement of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501


        :return: The placement of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1InstanceSpecPlacement
        """
        return self._placement

    @placement.setter
    def placement(self, placement):
        """Sets the placement of this AwsK8sServicesEc2V1alpha1InstanceSpec.


        :param placement: The placement of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1InstanceSpecPlacement
        """

        self._placement = placement

    @property
    def private_dns_name_options(self):
        """Gets the private_dns_name_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501


        :return: The private_dns_name_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1InstanceSpecPrivateDNSNameOptions
        """
        return self._private_dns_name_options

    @private_dns_name_options.setter
    def private_dns_name_options(self, private_dns_name_options):
        """Sets the private_dns_name_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.


        :param private_dns_name_options: The private_dns_name_options of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1InstanceSpecPrivateDNSNameOptions
        """

        self._private_dns_name_options = private_dns_name_options

    @property
    def private_ip_address(self):
        """Gets the private_ip_address of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501

        [EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet.   Only one private IP address can be designated as primary. You can't specify this option if you've specified the option to designate a private IP address as the primary IP address in a network interface specification. You cannot specify this option if you're launching more than one instance in the request.   You cannot specify this option and the network interfaces option in the same request.  # noqa: E501

        :return: The private_ip_address of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._private_ip_address

    @private_ip_address.setter
    def private_ip_address(self, private_ip_address):
        """Sets the private_ip_address of this AwsK8sServicesEc2V1alpha1InstanceSpec.

        [EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet.   Only one private IP address can be designated as primary. You can't specify this option if you've specified the option to designate a private IP address as the primary IP address in a network interface specification. You cannot specify this option if you're launching more than one instance in the request.   You cannot specify this option and the network interfaces option in the same request.  # noqa: E501

        :param private_ip_address: The private_ip_address of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: str
        """

        self._private_ip_address = private_ip_address

    @property
    def ram_disk_id(self):
        """Gets the ram_disk_id of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501

        The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, go to the Amazon Web Services Resource Center and search for the kernel ID.   We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html) in the Amazon EC2 User Guide.  # noqa: E501

        :return: The ram_disk_id of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._ram_disk_id

    @ram_disk_id.setter
    def ram_disk_id(self, ram_disk_id):
        """Sets the ram_disk_id of this AwsK8sServicesEc2V1alpha1InstanceSpec.

        The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, go to the Amazon Web Services Resource Center and search for the kernel ID.   We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html) in the Amazon EC2 User Guide.  # noqa: E501

        :param ram_disk_id: The ram_disk_id of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: str
        """

        self._ram_disk_id = ram_disk_id

    @property
    def security_group_i_ds(self):
        """Gets the security_group_i_ds of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501

        The IDs of the security groups. You can create a security group using CreateSecurityGroup (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html).   If you specify a network interface, you must specify any security groups as part of the network interface.  # noqa: E501

        :return: The security_group_i_ds of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._security_group_i_ds

    @security_group_i_ds.setter
    def security_group_i_ds(self, security_group_i_ds):
        """Sets the security_group_i_ds of this AwsK8sServicesEc2V1alpha1InstanceSpec.

        The IDs of the security groups. You can create a security group using CreateSecurityGroup (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html).   If you specify a network interface, you must specify any security groups as part of the network interface.  # noqa: E501

        :param security_group_i_ds: The security_group_i_ds of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: list[str]
        """

        self._security_group_i_ds = security_group_i_ds

    @property
    def security_groups(self):
        """Gets the security_groups of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501

        [EC2-Classic, default VPC] The names of the security groups. For a nondefault VPC, you must use security group IDs instead.   If you specify a network interface, you must specify any security groups as part of the network interface.   Default: Amazon EC2 uses the default security group.  # noqa: E501

        :return: The security_groups of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._security_groups

    @security_groups.setter
    def security_groups(self, security_groups):
        """Sets the security_groups of this AwsK8sServicesEc2V1alpha1InstanceSpec.

        [EC2-Classic, default VPC] The names of the security groups. For a nondefault VPC, you must use security group IDs instead.   If you specify a network interface, you must specify any security groups as part of the network interface.   Default: Amazon EC2 uses the default security group.  # noqa: E501

        :param security_groups: The security_groups of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: list[str]
        """

        self._security_groups = security_groups

    @property
    def subnet_id(self):
        """Gets the subnet_id of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501

        [EC2-VPC] The ID of the subnet to launch the instance into.   If you specify a network interface, you must specify any subnets as part of the network interface.  # noqa: E501

        :return: The subnet_id of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this AwsK8sServicesEc2V1alpha1InstanceSpec.

        [EC2-VPC] The ID of the subnet to launch the instance into.   If you specify a network interface, you must specify any subnets as part of the network interface.  # noqa: E501

        :param subnet_id: The subnet_id of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: str
        """

        self._subnet_id = subnet_id

    @property
    def tags(self):
        """Gets the tags of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501

        The tags. The value parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string.  # noqa: E501

        :return: The tags of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1DHCPOptionsSpecTags]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AwsK8sServicesEc2V1alpha1InstanceSpec.

        The tags. The value parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string.  # noqa: E501

        :param tags: The tags of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1DHCPOptionsSpecTags]
        """

        self._tags = tags

    @property
    def user_data(self):
        """Gets the user_data of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501

        The user data script to make available to the instance. For more information, see Run commands on your Linux instance at launch (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html) and Run commands on your Windows instance at launch (https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-windows-user-data.html). If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB.  # noqa: E501

        :return: The user_data of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this AwsK8sServicesEc2V1alpha1InstanceSpec.

        The user data script to make available to the instance. For more information, see Run commands on your Linux instance at launch (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html) and Run commands on your Windows instance at launch (https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-windows-user-data.html). If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB.  # noqa: E501

        :param user_data: The user_data of this AwsK8sServicesEc2V1alpha1InstanceSpec.  # noqa: E501
        :type: str
        """

        self._user_data = user_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1InstanceSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1InstanceSpec):
            return True

        return self.to_dict() != other.to_dict()
