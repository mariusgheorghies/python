# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bootstrap': 'IoXK8sClusterV1alpha4MachineSpecBootstrap',
        'cluster_name': 'str',
        'failure_domain': 'str',
        'infrastructure_ref': 'IoXK8sClusterControlplaneV1alpha4KubeadmControlPlaneSpecMachineTemplateInfrastructureRef',
        'node_drain_timeout': 'str',
        'provider_id': 'str',
        'version': 'str'
    }

    attribute_map = {
        'bootstrap': 'bootstrap',
        'cluster_name': 'clusterName',
        'failure_domain': 'failureDomain',
        'infrastructure_ref': 'infrastructureRef',
        'node_drain_timeout': 'nodeDrainTimeout',
        'provider_id': 'providerID',
        'version': 'version'
    }

    def __init__(self, bootstrap=None, cluster_name=None, failure_domain=None, infrastructure_ref=None, node_drain_timeout=None, provider_id=None, version=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bootstrap = None
        self._cluster_name = None
        self._failure_domain = None
        self._infrastructure_ref = None
        self._node_drain_timeout = None
        self._provider_id = None
        self._version = None
        self.discriminator = None

        self.bootstrap = bootstrap
        self.cluster_name = cluster_name
        if failure_domain is not None:
            self.failure_domain = failure_domain
        self.infrastructure_ref = infrastructure_ref
        if node_drain_timeout is not None:
            self.node_drain_timeout = node_drain_timeout
        if provider_id is not None:
            self.provider_id = provider_id
        if version is not None:
            self.version = version

    @property
    def bootstrap(self):
        """Gets the bootstrap of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.  # noqa: E501


        :return: The bootstrap of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.  # noqa: E501
        :rtype: IoXK8sClusterV1alpha4MachineSpecBootstrap
        """
        return self._bootstrap

    @bootstrap.setter
    def bootstrap(self, bootstrap):
        """Sets the bootstrap of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.


        :param bootstrap: The bootstrap of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.  # noqa: E501
        :type: IoXK8sClusterV1alpha4MachineSpecBootstrap
        """
        if self.local_vars_configuration.client_side_validation and bootstrap is None:  # noqa: E501
            raise ValueError("Invalid value for `bootstrap`, must not be `None`")  # noqa: E501

        self._bootstrap = bootstrap

    @property
    def cluster_name(self):
        """Gets the cluster_name of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.  # noqa: E501

        ClusterName is the name of the Cluster this object belongs to.  # noqa: E501

        :return: The cluster_name of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.

        ClusterName is the name of the Cluster this object belongs to.  # noqa: E501

        :param cluster_name: The cluster_name of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cluster_name is None:  # noqa: E501
            raise ValueError("Invalid value for `cluster_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cluster_name is not None and len(cluster_name) < 1):
            raise ValueError("Invalid value for `cluster_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._cluster_name = cluster_name

    @property
    def failure_domain(self):
        """Gets the failure_domain of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.  # noqa: E501

        FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.  # noqa: E501

        :return: The failure_domain of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.  # noqa: E501
        :rtype: str
        """
        return self._failure_domain

    @failure_domain.setter
    def failure_domain(self, failure_domain):
        """Sets the failure_domain of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.

        FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.  # noqa: E501

        :param failure_domain: The failure_domain of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.  # noqa: E501
        :type: str
        """

        self._failure_domain = failure_domain

    @property
    def infrastructure_ref(self):
        """Gets the infrastructure_ref of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.  # noqa: E501


        :return: The infrastructure_ref of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.  # noqa: E501
        :rtype: IoXK8sClusterControlplaneV1alpha4KubeadmControlPlaneSpecMachineTemplateInfrastructureRef
        """
        return self._infrastructure_ref

    @infrastructure_ref.setter
    def infrastructure_ref(self, infrastructure_ref):
        """Sets the infrastructure_ref of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.


        :param infrastructure_ref: The infrastructure_ref of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.  # noqa: E501
        :type: IoXK8sClusterControlplaneV1alpha4KubeadmControlPlaneSpecMachineTemplateInfrastructureRef
        """
        if self.local_vars_configuration.client_side_validation and infrastructure_ref is None:  # noqa: E501
            raise ValueError("Invalid value for `infrastructure_ref`, must not be `None`")  # noqa: E501

        self._infrastructure_ref = infrastructure_ref

    @property
    def node_drain_timeout(self):
        """Gets the node_drain_timeout of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.  # noqa: E501

        NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`  # noqa: E501

        :return: The node_drain_timeout of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.  # noqa: E501
        :rtype: str
        """
        return self._node_drain_timeout

    @node_drain_timeout.setter
    def node_drain_timeout(self, node_drain_timeout):
        """Sets the node_drain_timeout of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.

        NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`  # noqa: E501

        :param node_drain_timeout: The node_drain_timeout of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.  # noqa: E501
        :type: str
        """

        self._node_drain_timeout = node_drain_timeout

    @property
    def provider_id(self):
        """Gets the provider_id of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.  # noqa: E501

        ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.  # noqa: E501

        :return: The provider_id of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.  # noqa: E501
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.

        ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.  # noqa: E501

        :param provider_id: The provider_id of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.  # noqa: E501
        :type: str
        """

        self._provider_id = provider_id

    @property
    def version(self):
        """Gets the version of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.  # noqa: E501

        Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.  # noqa: E501

        :return: The version of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.

        Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.  # noqa: E501

        :param version: The version of this IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterV1alpha4MachineDeploymentSpecTemplateSpec):
            return True

        return self.to_dict() != other.to_dict()
