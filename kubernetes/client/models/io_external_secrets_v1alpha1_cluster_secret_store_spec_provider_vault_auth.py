# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_role': 'IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuthAppRole',
        'cert': 'IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuthCert',
        'jwt': 'IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuthJwt',
        'kubernetes': 'IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuthKubernetes',
        'ldap': 'IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuthLdap',
        'token_secret_ref': 'IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuthTokenSecretRef'
    }

    attribute_map = {
        'app_role': 'appRole',
        'cert': 'cert',
        'jwt': 'jwt',
        'kubernetes': 'kubernetes',
        'ldap': 'ldap',
        'token_secret_ref': 'tokenSecretRef'
    }

    def __init__(self, app_role=None, cert=None, jwt=None, kubernetes=None, ldap=None, token_secret_ref=None, local_vars_configuration=None):  # noqa: E501
        """IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._app_role = None
        self._cert = None
        self._jwt = None
        self._kubernetes = None
        self._ldap = None
        self._token_secret_ref = None
        self.discriminator = None

        if app_role is not None:
            self.app_role = app_role
        if cert is not None:
            self.cert = cert
        if jwt is not None:
            self.jwt = jwt
        if kubernetes is not None:
            self.kubernetes = kubernetes
        if ldap is not None:
            self.ldap = ldap
        if token_secret_ref is not None:
            self.token_secret_ref = token_secret_ref

    @property
    def app_role(self):
        """Gets the app_role of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth.  # noqa: E501


        :return: The app_role of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth.  # noqa: E501
        :rtype: IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuthAppRole
        """
        return self._app_role

    @app_role.setter
    def app_role(self, app_role):
        """Sets the app_role of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth.


        :param app_role: The app_role of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth.  # noqa: E501
        :type: IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuthAppRole
        """

        self._app_role = app_role

    @property
    def cert(self):
        """Gets the cert of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth.  # noqa: E501


        :return: The cert of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth.  # noqa: E501
        :rtype: IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuthCert
        """
        return self._cert

    @cert.setter
    def cert(self, cert):
        """Sets the cert of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth.


        :param cert: The cert of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth.  # noqa: E501
        :type: IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuthCert
        """

        self._cert = cert

    @property
    def jwt(self):
        """Gets the jwt of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth.  # noqa: E501


        :return: The jwt of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth.  # noqa: E501
        :rtype: IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuthJwt
        """
        return self._jwt

    @jwt.setter
    def jwt(self, jwt):
        """Sets the jwt of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth.


        :param jwt: The jwt of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth.  # noqa: E501
        :type: IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuthJwt
        """

        self._jwt = jwt

    @property
    def kubernetes(self):
        """Gets the kubernetes of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth.  # noqa: E501


        :return: The kubernetes of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth.  # noqa: E501
        :rtype: IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuthKubernetes
        """
        return self._kubernetes

    @kubernetes.setter
    def kubernetes(self, kubernetes):
        """Sets the kubernetes of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth.


        :param kubernetes: The kubernetes of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth.  # noqa: E501
        :type: IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuthKubernetes
        """

        self._kubernetes = kubernetes

    @property
    def ldap(self):
        """Gets the ldap of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth.  # noqa: E501


        :return: The ldap of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth.  # noqa: E501
        :rtype: IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuthLdap
        """
        return self._ldap

    @ldap.setter
    def ldap(self, ldap):
        """Sets the ldap of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth.


        :param ldap: The ldap of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth.  # noqa: E501
        :type: IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuthLdap
        """

        self._ldap = ldap

    @property
    def token_secret_ref(self):
        """Gets the token_secret_ref of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth.  # noqa: E501


        :return: The token_secret_ref of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth.  # noqa: E501
        :rtype: IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuthTokenSecretRef
        """
        return self._token_secret_ref

    @token_secret_ref.setter
    def token_secret_ref(self, token_secret_ref):
        """Sets the token_secret_ref of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth.


        :param token_secret_ref: The token_secret_ref of this IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth.  # noqa: E501
        :type: IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuthTokenSecretRef
        """

        self._token_secret_ref = token_secret_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoExternalSecretsV1alpha1ClusterSecretStoreSpecProviderVaultAuth):
            return True

        return self.to_dict() != other.to_dict()
