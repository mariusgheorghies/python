# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'instance_id': 'str',
        'node_cordoned': 'bool',
        'node_ip': 'str',
        'node_name': 'str',
        'node_ready': 'bool',
        'taken_by': 'str'
    }

    attribute_map = {
        'instance_id': 'instanceId',
        'node_cordoned': 'nodeCordoned',
        'node_ip': 'nodeIp',
        'node_name': 'nodeName',
        'node_ready': 'nodeReady',
        'taken_by': 'takenBy'
    }

    def __init__(self, instance_id=None, node_cordoned=None, node_ip=None, node_name=None, node_ready=None, taken_by=None, local_vars_configuration=None):  # noqa: E501
        """IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._instance_id = None
        self._node_cordoned = None
        self._node_ip = None
        self._node_name = None
        self._node_ready = None
        self._taken_by = None
        self.discriminator = None

        if instance_id is not None:
            self.instance_id = instance_id
        if node_cordoned is not None:
            self.node_cordoned = node_cordoned
        if node_ip is not None:
            self.node_ip = node_ip
        if node_name is not None:
            self.node_name = node_name
        if node_ready is not None:
            self.node_ready = node_ready
        if taken_by is not None:
            self.taken_by = taken_by

    @property
    def instance_id(self):
        """Gets the instance_id of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances.  # noqa: E501


        :return: The instance_id of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances.


        :param instance_id: The instance_id of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def node_cordoned(self):
        """Gets the node_cordoned of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances.  # noqa: E501


        :return: The node_cordoned of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances.  # noqa: E501
        :rtype: bool
        """
        return self._node_cordoned

    @node_cordoned.setter
    def node_cordoned(self, node_cordoned):
        """Sets the node_cordoned of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances.


        :param node_cordoned: The node_cordoned of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances.  # noqa: E501
        :type: bool
        """

        self._node_cordoned = node_cordoned

    @property
    def node_ip(self):
        """Gets the node_ip of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances.  # noqa: E501


        :return: The node_ip of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances.  # noqa: E501
        :rtype: str
        """
        return self._node_ip

    @node_ip.setter
    def node_ip(self, node_ip):
        """Sets the node_ip of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances.


        :param node_ip: The node_ip of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances.  # noqa: E501
        :type: str
        """

        self._node_ip = node_ip

    @property
    def node_name(self):
        """Gets the node_name of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances.  # noqa: E501


        :return: The node_name of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances.  # noqa: E501
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances.


        :param node_name: The node_name of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances.  # noqa: E501
        :type: str
        """

        self._node_name = node_name

    @property
    def node_ready(self):
        """Gets the node_ready of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances.  # noqa: E501


        :return: The node_ready of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances.  # noqa: E501
        :rtype: bool
        """
        return self._node_ready

    @node_ready.setter
    def node_ready(self, node_ready):
        """Sets the node_ready of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances.


        :param node_ready: The node_ready of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances.  # noqa: E501
        :type: bool
        """

        self._node_ready = node_ready

    @property
    def taken_by(self):
        """Gets the taken_by of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances.  # noqa: E501


        :return: The taken_by of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances.  # noqa: E501
        :rtype: str
        """
        return self._taken_by

    @taken_by.setter
    def taken_by(self, taken_by):
        """Sets the taken_by of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances.


        :param taken_by: The taken_by of this IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances.  # noqa: E501
        :type: str
        """

        self._taken_by = taken_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoQuestdbCrdV1alpha1QuestDBStandbyNodeStatusAwsInstances):
            return True

        return self.to_dict() != other.to_dict()
