# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'device': 'str',
        'extra_opts': 'list[str]',
        'filesystem': 'str',
        'label': 'str',
        'overwrite': 'bool',
        'partition': 'str',
        'replace_fs': 'str'
    }

    attribute_map = {
        'device': 'device',
        'extra_opts': 'extraOpts',
        'filesystem': 'filesystem',
        'label': 'label',
        'overwrite': 'overwrite',
        'partition': 'partition',
        'replace_fs': 'replaceFS'
    }

    def __init__(self, device=None, extra_opts=None, filesystem=None, label=None, overwrite=None, partition=None, replace_fs=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._device = None
        self._extra_opts = None
        self._filesystem = None
        self._label = None
        self._overwrite = None
        self._partition = None
        self._replace_fs = None
        self.discriminator = None

        self.device = device
        if extra_opts is not None:
            self.extra_opts = extra_opts
        self.filesystem = filesystem
        self.label = label
        if overwrite is not None:
            self.overwrite = overwrite
        if partition is not None:
            self.partition = partition
        if replace_fs is not None:
            self.replace_fs = replace_fs

    @property
    def device(self):
        """Gets the device of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.  # noqa: E501

        Device specifies the device name  # noqa: E501

        :return: The device of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.  # noqa: E501
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.

        Device specifies the device name  # noqa: E501

        :param device: The device of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and device is None:  # noqa: E501
            raise ValueError("Invalid value for `device`, must not be `None`")  # noqa: E501

        self._device = device

    @property
    def extra_opts(self):
        """Gets the extra_opts of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.  # noqa: E501

        ExtraOpts defined extra options to add to the command for creating the file system.  # noqa: E501

        :return: The extra_opts of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.  # noqa: E501
        :rtype: list[str]
        """
        return self._extra_opts

    @extra_opts.setter
    def extra_opts(self, extra_opts):
        """Sets the extra_opts of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.

        ExtraOpts defined extra options to add to the command for creating the file system.  # noqa: E501

        :param extra_opts: The extra_opts of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.  # noqa: E501
        :type: list[str]
        """

        self._extra_opts = extra_opts

    @property
    def filesystem(self):
        """Gets the filesystem of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.  # noqa: E501

        Filesystem specifies the file system type.  # noqa: E501

        :return: The filesystem of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.  # noqa: E501
        :rtype: str
        """
        return self._filesystem

    @filesystem.setter
    def filesystem(self, filesystem):
        """Sets the filesystem of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.

        Filesystem specifies the file system type.  # noqa: E501

        :param filesystem: The filesystem of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and filesystem is None:  # noqa: E501
            raise ValueError("Invalid value for `filesystem`, must not be `None`")  # noqa: E501

        self._filesystem = filesystem

    @property
    def label(self):
        """Gets the label of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.  # noqa: E501

        Label specifies the file system label to be used. If set to None, no label is used.  # noqa: E501

        :return: The label of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.

        Label specifies the file system label to be used. If set to None, no label is used.  # noqa: E501

        :param label: The label of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and label is None:  # noqa: E501
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def overwrite(self):
        """Gets the overwrite of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.  # noqa: E501

        Overwrite defines whether or not to overwrite any existing filesystem. If true, any pre-existing file system will be destroyed. Use with Caution.  # noqa: E501

        :return: The overwrite of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.  # noqa: E501
        :rtype: bool
        """
        return self._overwrite

    @overwrite.setter
    def overwrite(self, overwrite):
        """Sets the overwrite of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.

        Overwrite defines whether or not to overwrite any existing filesystem. If true, any pre-existing file system will be destroyed. Use with Caution.  # noqa: E501

        :param overwrite: The overwrite of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.  # noqa: E501
        :type: bool
        """

        self._overwrite = overwrite

    @property
    def partition(self):
        """Gets the partition of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.  # noqa: E501

        Partition specifies the partition to use. The valid options are: \"auto|any\", \"auto\", \"any\", \"none\", and <NUM>, where NUM is the actual partition number.  # noqa: E501

        :return: The partition of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.  # noqa: E501
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.

        Partition specifies the partition to use. The valid options are: \"auto|any\", \"auto\", \"any\", \"none\", and <NUM>, where NUM is the actual partition number.  # noqa: E501

        :param partition: The partition of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.  # noqa: E501
        :type: str
        """

        self._partition = partition

    @property
    def replace_fs(self):
        """Gets the replace_fs of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.  # noqa: E501

        ReplaceFS is a special directive, used for Microsoft Azure that instructs cloud-init to replace a file system of <FS_TYPE>. NOTE: unless you define a label, this requires the use of the 'any' partition directive.  # noqa: E501

        :return: The replace_fs of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.  # noqa: E501
        :rtype: str
        """
        return self._replace_fs

    @replace_fs.setter
    def replace_fs(self, replace_fs):
        """Sets the replace_fs of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.

        ReplaceFS is a special directive, used for Microsoft Azure that instructs cloud-init to replace a file system of <FS_TYPE>. NOTE: unless you define a label, this requires the use of the 'any' partition directive.  # noqa: E501

        :param replace_fs: The replace_fs of this IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems.  # noqa: E501
        :type: str
        """

        self._replace_fs = replace_fs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterBootstrapV1alpha3KubeadmConfigSpecDiskSetupFilesystems):
            return True

        return self.to_dict() != other.to_dict()
