# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'attributes': 'IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbAttributes',
        'availability_zones': 'list[str]',
        'dns_name': 'str',
        'health_checks': 'IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks',
        'listeners': 'list[IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbListeners]',
        'name': 'str',
        'scheme': 'str',
        'security_group_ids': 'list[str]',
        'subnet_ids': 'list[str]',
        'tags': 'dict(str, str)'
    }

    attribute_map = {
        'attributes': 'attributes',
        'availability_zones': 'availabilityZones',
        'dns_name': 'dnsName',
        'health_checks': 'healthChecks',
        'listeners': 'listeners',
        'name': 'name',
        'scheme': 'scheme',
        'security_group_ids': 'securityGroupIds',
        'subnet_ids': 'subnetIds',
        'tags': 'tags'
    }

    def __init__(self, attributes=None, availability_zones=None, dns_name=None, health_checks=None, listeners=None, name=None, scheme=None, security_group_ids=None, subnet_ids=None, tags=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._attributes = None
        self._availability_zones = None
        self._dns_name = None
        self._health_checks = None
        self._listeners = None
        self._name = None
        self._scheme = None
        self._security_group_ids = None
        self._subnet_ids = None
        self._tags = None
        self.discriminator = None

        if attributes is not None:
            self.attributes = attributes
        if availability_zones is not None:
            self.availability_zones = availability_zones
        if dns_name is not None:
            self.dns_name = dns_name
        if health_checks is not None:
            self.health_checks = health_checks
        if listeners is not None:
            self.listeners = listeners
        if name is not None:
            self.name = name
        if scheme is not None:
            self.scheme = scheme
        if security_group_ids is not None:
            self.security_group_ids = security_group_ids
        if subnet_ids is not None:
            self.subnet_ids = subnet_ids
        if tags is not None:
            self.tags = tags

    @property
    def attributes(self):
        """Gets the attributes of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501


        :return: The attributes of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501
        :rtype: IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.


        :param attributes: The attributes of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501
        :type: IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbAttributes
        """

        self._attributes = attributes

    @property
    def availability_zones(self):
        """Gets the availability_zones of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501

        AvailabilityZones is an array of availability zones in the VPC attached to the load balancer.  # noqa: E501

        :return: The availability_zones of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501
        :rtype: list[str]
        """
        return self._availability_zones

    @availability_zones.setter
    def availability_zones(self, availability_zones):
        """Sets the availability_zones of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.

        AvailabilityZones is an array of availability zones in the VPC attached to the load balancer.  # noqa: E501

        :param availability_zones: The availability_zones of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501
        :type: list[str]
        """

        self._availability_zones = availability_zones

    @property
    def dns_name(self):
        """Gets the dns_name of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501

        DNSName is the dns name of the load balancer.  # noqa: E501

        :return: The dns_name of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501
        :rtype: str
        """
        return self._dns_name

    @dns_name.setter
    def dns_name(self, dns_name):
        """Sets the dns_name of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.

        DNSName is the dns name of the load balancer.  # noqa: E501

        :param dns_name: The dns_name of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501
        :type: str
        """

        self._dns_name = dns_name

    @property
    def health_checks(self):
        """Gets the health_checks of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501


        :return: The health_checks of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501
        :rtype: IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks
        """
        return self._health_checks

    @health_checks.setter
    def health_checks(self, health_checks):
        """Sets the health_checks of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.


        :param health_checks: The health_checks of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501
        :type: IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbHealthChecks
        """

        self._health_checks = health_checks

    @property
    def listeners(self):
        """Gets the listeners of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501

        Listeners is an array of classic elb listeners associated with the load balancer. There must be at least one.  # noqa: E501

        :return: The listeners of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501
        :rtype: list[IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbListeners]
        """
        return self._listeners

    @listeners.setter
    def listeners(self, listeners):
        """Sets the listeners of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.

        Listeners is an array of classic elb listeners associated with the load balancer. There must be at least one.  # noqa: E501

        :param listeners: The listeners of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501
        :type: list[IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElbListeners]
        """

        self._listeners = listeners

    @property
    def name(self):
        """Gets the name of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501

        The name of the load balancer. It must be unique within the set of load balancers defined in the region. It also serves as identifier.  # noqa: E501

        :return: The name of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.

        The name of the load balancer. It must be unique within the set of load balancers defined in the region. It also serves as identifier.  # noqa: E501

        :param name: The name of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def scheme(self):
        """Gets the scheme of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501

        Scheme is the load balancer scheme, either internet-facing or private.  # noqa: E501

        :return: The scheme of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.

        Scheme is the load balancer scheme, either internet-facing or private.  # noqa: E501

        :param scheme: The scheme of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501
        :type: str
        """

        self._scheme = scheme

    @property
    def security_group_ids(self):
        """Gets the security_group_ids of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501

        SecurityGroupIDs is an array of security groups assigned to the load balancer.  # noqa: E501

        :return: The security_group_ids of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501
        :rtype: list[str]
        """
        return self._security_group_ids

    @security_group_ids.setter
    def security_group_ids(self, security_group_ids):
        """Sets the security_group_ids of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.

        SecurityGroupIDs is an array of security groups assigned to the load balancer.  # noqa: E501

        :param security_group_ids: The security_group_ids of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501
        :type: list[str]
        """

        self._security_group_ids = security_group_ids

    @property
    def subnet_ids(self):
        """Gets the subnet_ids of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501

        SubnetIDs is an array of subnets in the VPC attached to the load balancer.  # noqa: E501

        :return: The subnet_ids of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501
        :rtype: list[str]
        """
        return self._subnet_ids

    @subnet_ids.setter
    def subnet_ids(self, subnet_ids):
        """Sets the subnet_ids of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.

        SubnetIDs is an array of subnets in the VPC attached to the load balancer.  # noqa: E501

        :param subnet_ids: The subnet_ids of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501
        :type: list[str]
        """

        self._subnet_ids = subnet_ids

    @property
    def tags(self):
        """Gets the tags of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501

        Tags is a map of tags associated with the load balancer.  # noqa: E501

        :return: The tags of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.

        Tags is a map of tags associated with the load balancer.  # noqa: E501

        :param tags: The tags of this IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb.  # noqa: E501
        :type: dict(str, str)
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterControlplaneV1alpha3AWSManagedControlPlaneStatusNetworkApiServerElb):
            return True

        return self.to_dict() != other.to_dict()
