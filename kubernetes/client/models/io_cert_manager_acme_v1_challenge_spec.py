# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoCertManagerAcmeV1ChallengeSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'authorization_url': 'str',
        'dns_name': 'str',
        'issuer_ref': 'IoCertManagerAcmeV1ChallengeSpecIssuerRef',
        'key': 'str',
        'solver': 'IoCertManagerAcmeV1ChallengeSpecSolver',
        'token': 'str',
        'type': 'str',
        'url': 'str',
        'wildcard': 'bool'
    }

    attribute_map = {
        'authorization_url': 'authorizationURL',
        'dns_name': 'dnsName',
        'issuer_ref': 'issuerRef',
        'key': 'key',
        'solver': 'solver',
        'token': 'token',
        'type': 'type',
        'url': 'url',
        'wildcard': 'wildcard'
    }

    def __init__(self, authorization_url=None, dns_name=None, issuer_ref=None, key=None, solver=None, token=None, type=None, url=None, wildcard=None, local_vars_configuration=None):  # noqa: E501
        """IoCertManagerAcmeV1ChallengeSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._authorization_url = None
        self._dns_name = None
        self._issuer_ref = None
        self._key = None
        self._solver = None
        self._token = None
        self._type = None
        self._url = None
        self._wildcard = None
        self.discriminator = None

        self.authorization_url = authorization_url
        self.dns_name = dns_name
        self.issuer_ref = issuer_ref
        self.key = key
        self.solver = solver
        self.token = token
        self.type = type
        self.url = url
        if wildcard is not None:
            self.wildcard = wildcard

    @property
    def authorization_url(self):
        """Gets the authorization_url of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501

        The URL to the ACME Authorization resource that this challenge is a part of.  # noqa: E501

        :return: The authorization_url of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501
        :rtype: str
        """
        return self._authorization_url

    @authorization_url.setter
    def authorization_url(self, authorization_url):
        """Sets the authorization_url of this IoCertManagerAcmeV1ChallengeSpec.

        The URL to the ACME Authorization resource that this challenge is a part of.  # noqa: E501

        :param authorization_url: The authorization_url of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and authorization_url is None:  # noqa: E501
            raise ValueError("Invalid value for `authorization_url`, must not be `None`")  # noqa: E501

        self._authorization_url = authorization_url

    @property
    def dns_name(self):
        """Gets the dns_name of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501

        dnsName is the identifier that this challenge is for, e.g. example.com. If the requested DNSName is a 'wildcard', this field MUST be set to the non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.  # noqa: E501

        :return: The dns_name of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501
        :rtype: str
        """
        return self._dns_name

    @dns_name.setter
    def dns_name(self, dns_name):
        """Sets the dns_name of this IoCertManagerAcmeV1ChallengeSpec.

        dnsName is the identifier that this challenge is for, e.g. example.com. If the requested DNSName is a 'wildcard', this field MUST be set to the non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.  # noqa: E501

        :param dns_name: The dns_name of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and dns_name is None:  # noqa: E501
            raise ValueError("Invalid value for `dns_name`, must not be `None`")  # noqa: E501

        self._dns_name = dns_name

    @property
    def issuer_ref(self):
        """Gets the issuer_ref of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501


        :return: The issuer_ref of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501
        :rtype: IoCertManagerAcmeV1ChallengeSpecIssuerRef
        """
        return self._issuer_ref

    @issuer_ref.setter
    def issuer_ref(self, issuer_ref):
        """Sets the issuer_ref of this IoCertManagerAcmeV1ChallengeSpec.


        :param issuer_ref: The issuer_ref of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501
        :type: IoCertManagerAcmeV1ChallengeSpecIssuerRef
        """
        if self.local_vars_configuration.client_side_validation and issuer_ref is None:  # noqa: E501
            raise ValueError("Invalid value for `issuer_ref`, must not be `None`")  # noqa: E501

        self._issuer_ref = issuer_ref

    @property
    def key(self):
        """Gets the key of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501

        The ACME challenge key for this challenge For HTTP01 challenges, this is the value that must be responded with to complete the HTTP01 challenge in the format: `<private key JWK thumbprint>.<key from acme server for challenge>`. For DNS01 challenges, this is the base64 encoded SHA256 sum of the `<private key JWK thumbprint>.<key from acme server for challenge>` text that must be set as the TXT record content.  # noqa: E501

        :return: The key of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this IoCertManagerAcmeV1ChallengeSpec.

        The ACME challenge key for this challenge For HTTP01 challenges, this is the value that must be responded with to complete the HTTP01 challenge in the format: `<private key JWK thumbprint>.<key from acme server for challenge>`. For DNS01 challenges, this is the base64 encoded SHA256 sum of the `<private key JWK thumbprint>.<key from acme server for challenge>` text that must be set as the TXT record content.  # noqa: E501

        :param key: The key of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and key is None:  # noqa: E501
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def solver(self):
        """Gets the solver of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501


        :return: The solver of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501
        :rtype: IoCertManagerAcmeV1ChallengeSpecSolver
        """
        return self._solver

    @solver.setter
    def solver(self, solver):
        """Sets the solver of this IoCertManagerAcmeV1ChallengeSpec.


        :param solver: The solver of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501
        :type: IoCertManagerAcmeV1ChallengeSpecSolver
        """
        if self.local_vars_configuration.client_side_validation and solver is None:  # noqa: E501
            raise ValueError("Invalid value for `solver`, must not be `None`")  # noqa: E501

        self._solver = solver

    @property
    def token(self):
        """Gets the token of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501

        The ACME challenge token for this challenge. This is the raw value returned from the ACME server.  # noqa: E501

        :return: The token of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this IoCertManagerAcmeV1ChallengeSpec.

        The ACME challenge token for this challenge. This is the raw value returned from the ACME server.  # noqa: E501

        :param token: The token of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and token is None:  # noqa: E501
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def type(self):
        """Gets the type of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501

        The type of ACME challenge this resource represents. One of \"HTTP-01\" or \"DNS-01\".  # noqa: E501

        :return: The type of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IoCertManagerAcmeV1ChallengeSpec.

        The type of ACME challenge this resource represents. One of \"HTTP-01\" or \"DNS-01\".  # noqa: E501

        :param type: The type of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["HTTP-01", "DNS-01"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501

        The URL of the ACME Challenge resource for this challenge. This can be used to lookup details about the status of this challenge.  # noqa: E501

        :return: The url of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IoCertManagerAcmeV1ChallengeSpec.

        The URL of the ACME Challenge resource for this challenge. This can be used to lookup details about the status of this challenge.  # noqa: E501

        :param url: The url of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def wildcard(self):
        """Gets the wildcard of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501

        wildcard will be true if this challenge is for a wildcard identifier, for example '*.example.com'.  # noqa: E501

        :return: The wildcard of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501
        :rtype: bool
        """
        return self._wildcard

    @wildcard.setter
    def wildcard(self, wildcard):
        """Sets the wildcard of this IoCertManagerAcmeV1ChallengeSpec.

        wildcard will be true if this challenge is for a wildcard identifier, for example '*.example.com'.  # noqa: E501

        :param wildcard: The wildcard of this IoCertManagerAcmeV1ChallengeSpec.  # noqa: E501
        :type: bool
        """

        self._wildcard = wildcard

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoCertManagerAcmeV1ChallengeSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoCertManagerAcmeV1ChallengeSpec):
            return True

        return self.to_dict() != other.to_dict()
