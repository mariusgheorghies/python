# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoCertManagerV1CertificateSpecPrivateKey(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'algorithm': 'str',
        'encoding': 'str',
        'rotation_policy': 'str',
        'size': 'int'
    }

    attribute_map = {
        'algorithm': 'algorithm',
        'encoding': 'encoding',
        'rotation_policy': 'rotationPolicy',
        'size': 'size'
    }

    def __init__(self, algorithm=None, encoding=None, rotation_policy=None, size=None, local_vars_configuration=None):  # noqa: E501
        """IoCertManagerV1CertificateSpecPrivateKey - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._algorithm = None
        self._encoding = None
        self._rotation_policy = None
        self._size = None
        self.discriminator = None

        if algorithm is not None:
            self.algorithm = algorithm
        if encoding is not None:
            self.encoding = encoding
        if rotation_policy is not None:
            self.rotation_policy = rotation_policy
        if size is not None:
            self.size = size

    @property
    def algorithm(self):
        """Gets the algorithm of this IoCertManagerV1CertificateSpecPrivateKey.  # noqa: E501

        Algorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either `RSA`,`Ed25519` or `ECDSA` If `algorithm` is specified and `size` is not provided, key size of 256 will be used for `ECDSA` key algorithm and key size of 2048 will be used for `RSA` key algorithm. key size is ignored when using the `Ed25519` key algorithm.  # noqa: E501

        :return: The algorithm of this IoCertManagerV1CertificateSpecPrivateKey.  # noqa: E501
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this IoCertManagerV1CertificateSpecPrivateKey.

        Algorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either `RSA`,`Ed25519` or `ECDSA` If `algorithm` is specified and `size` is not provided, key size of 256 will be used for `ECDSA` key algorithm and key size of 2048 will be used for `RSA` key algorithm. key size is ignored when using the `Ed25519` key algorithm.  # noqa: E501

        :param algorithm: The algorithm of this IoCertManagerV1CertificateSpecPrivateKey.  # noqa: E501
        :type: str
        """
        allowed_values = ["RSA", "ECDSA", "Ed25519"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and algorithm not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(algorithm, allowed_values)
            )

        self._algorithm = algorithm

    @property
    def encoding(self):
        """Gets the encoding of this IoCertManagerV1CertificateSpecPrivateKey.  # noqa: E501

        The private key cryptography standards (PKCS) encoding for this certificate's private key to be encoded in. If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1 and PKCS#8, respectively. Defaults to `PKCS1` if not specified.  # noqa: E501

        :return: The encoding of this IoCertManagerV1CertificateSpecPrivateKey.  # noqa: E501
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this IoCertManagerV1CertificateSpecPrivateKey.

        The private key cryptography standards (PKCS) encoding for this certificate's private key to be encoded in. If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1 and PKCS#8, respectively. Defaults to `PKCS1` if not specified.  # noqa: E501

        :param encoding: The encoding of this IoCertManagerV1CertificateSpecPrivateKey.  # noqa: E501
        :type: str
        """
        allowed_values = ["PKCS1", "PKCS8"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and encoding not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `encoding` ({0}), must be one of {1}"  # noqa: E501
                .format(encoding, allowed_values)
            )

        self._encoding = encoding

    @property
    def rotation_policy(self):
        """Gets the rotation_policy of this IoCertManagerV1CertificateSpecPrivateKey.  # noqa: E501

        RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. If set to Never, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to Always, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is 'Never' for backward compatibility.  # noqa: E501

        :return: The rotation_policy of this IoCertManagerV1CertificateSpecPrivateKey.  # noqa: E501
        :rtype: str
        """
        return self._rotation_policy

    @rotation_policy.setter
    def rotation_policy(self, rotation_policy):
        """Sets the rotation_policy of this IoCertManagerV1CertificateSpecPrivateKey.

        RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. If set to Never, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to Always, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is 'Never' for backward compatibility.  # noqa: E501

        :param rotation_policy: The rotation_policy of this IoCertManagerV1CertificateSpecPrivateKey.  # noqa: E501
        :type: str
        """

        self._rotation_policy = rotation_policy

    @property
    def size(self):
        """Gets the size of this IoCertManagerV1CertificateSpecPrivateKey.  # noqa: E501

        Size is the key bit size of the corresponding private key for this certificate. If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. If `algorithm` is set to `Ed25519`, Size is ignored. No other values are allowed.  # noqa: E501

        :return: The size of this IoCertManagerV1CertificateSpecPrivateKey.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this IoCertManagerV1CertificateSpecPrivateKey.

        Size is the key bit size of the corresponding private key for this certificate. If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. If `algorithm` is set to `Ed25519`, Size is ignored. No other values are allowed.  # noqa: E501

        :param size: The size of this IoCertManagerV1CertificateSpecPrivateKey.  # noqa: E501
        :type: int
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoCertManagerV1CertificateSpecPrivateKey):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoCertManagerV1CertificateSpecPrivateKey):
            return True

        return self.to_dict() != other.to_dict()
