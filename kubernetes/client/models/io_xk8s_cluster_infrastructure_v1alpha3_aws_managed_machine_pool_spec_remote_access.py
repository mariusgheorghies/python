# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterInfrastructureV1alpha3AWSManagedMachinePoolSpecRemoteAccess(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'public': 'bool',
        'source_security_groups': 'list[str]',
        'ssh_key_name': 'str'
    }

    attribute_map = {
        'public': 'public',
        'source_security_groups': 'sourceSecurityGroups',
        'ssh_key_name': 'sshKeyName'
    }

    def __init__(self, public=None, source_security_groups=None, ssh_key_name=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterInfrastructureV1alpha3AWSManagedMachinePoolSpecRemoteAccess - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._public = None
        self._source_security_groups = None
        self._ssh_key_name = None
        self.discriminator = None

        if public is not None:
            self.public = public
        if source_security_groups is not None:
            self.source_security_groups = source_security_groups
        if ssh_key_name is not None:
            self.ssh_key_name = ssh_key_name

    @property
    def public(self):
        """Gets the public of this IoXK8sClusterInfrastructureV1alpha3AWSManagedMachinePoolSpecRemoteAccess.  # noqa: E501

        Public specifies whether to open port 22 to the public internet  # noqa: E501

        :return: The public of this IoXK8sClusterInfrastructureV1alpha3AWSManagedMachinePoolSpecRemoteAccess.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this IoXK8sClusterInfrastructureV1alpha3AWSManagedMachinePoolSpecRemoteAccess.

        Public specifies whether to open port 22 to the public internet  # noqa: E501

        :param public: The public of this IoXK8sClusterInfrastructureV1alpha3AWSManagedMachinePoolSpecRemoteAccess.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def source_security_groups(self):
        """Gets the source_security_groups of this IoXK8sClusterInfrastructureV1alpha3AWSManagedMachinePoolSpecRemoteAccess.  # noqa: E501

        SourceSecurityGroups specifies which security groups are allowed access  # noqa: E501

        :return: The source_security_groups of this IoXK8sClusterInfrastructureV1alpha3AWSManagedMachinePoolSpecRemoteAccess.  # noqa: E501
        :rtype: list[str]
        """
        return self._source_security_groups

    @source_security_groups.setter
    def source_security_groups(self, source_security_groups):
        """Sets the source_security_groups of this IoXK8sClusterInfrastructureV1alpha3AWSManagedMachinePoolSpecRemoteAccess.

        SourceSecurityGroups specifies which security groups are allowed access  # noqa: E501

        :param source_security_groups: The source_security_groups of this IoXK8sClusterInfrastructureV1alpha3AWSManagedMachinePoolSpecRemoteAccess.  # noqa: E501
        :type: list[str]
        """

        self._source_security_groups = source_security_groups

    @property
    def ssh_key_name(self):
        """Gets the ssh_key_name of this IoXK8sClusterInfrastructureV1alpha3AWSManagedMachinePoolSpecRemoteAccess.  # noqa: E501

        SSHKeyName specifies which EC2 SSH key can be used to access machines. If left empty, the key from the control plane is used.  # noqa: E501

        :return: The ssh_key_name of this IoXK8sClusterInfrastructureV1alpha3AWSManagedMachinePoolSpecRemoteAccess.  # noqa: E501
        :rtype: str
        """
        return self._ssh_key_name

    @ssh_key_name.setter
    def ssh_key_name(self, ssh_key_name):
        """Sets the ssh_key_name of this IoXK8sClusterInfrastructureV1alpha3AWSManagedMachinePoolSpecRemoteAccess.

        SSHKeyName specifies which EC2 SSH key can be used to access machines. If left empty, the key from the control plane is used.  # noqa: E501

        :param ssh_key_name: The ssh_key_name of this IoXK8sClusterInfrastructureV1alpha3AWSManagedMachinePoolSpecRemoteAccess.  # noqa: E501
        :type: str
        """

        self._ssh_key_name = ssh_key_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1alpha3AWSManagedMachinePoolSpecRemoteAccess):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1alpha3AWSManagedMachinePoolSpecRemoteAccess):
            return True

        return self.to_dict() != other.to_dict()
