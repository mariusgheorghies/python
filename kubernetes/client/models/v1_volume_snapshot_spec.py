# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class V1VolumeSnapshotSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'source': 'V1VolumeSnapshotSpecSource',
        'volume_snapshot_class_name': 'str'
    }

    attribute_map = {
        'source': 'source',
        'volume_snapshot_class_name': 'volumeSnapshotClassName'
    }

    def __init__(self, source=None, volume_snapshot_class_name=None, local_vars_configuration=None):  # noqa: E501
        """V1VolumeSnapshotSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._source = None
        self._volume_snapshot_class_name = None
        self.discriminator = None

        self.source = source
        if volume_snapshot_class_name is not None:
            self.volume_snapshot_class_name = volume_snapshot_class_name

    @property
    def source(self):
        """Gets the source of this V1VolumeSnapshotSpec.  # noqa: E501


        :return: The source of this V1VolumeSnapshotSpec.  # noqa: E501
        :rtype: V1VolumeSnapshotSpecSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this V1VolumeSnapshotSpec.


        :param source: The source of this V1VolumeSnapshotSpec.  # noqa: E501
        :type: V1VolumeSnapshotSpecSource
        """
        if self.local_vars_configuration.client_side_validation and source is None:  # noqa: E501
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def volume_snapshot_class_name(self):
        """Gets the volume_snapshot_class_name of this V1VolumeSnapshotSpec.  # noqa: E501

        VolumeSnapshotClassName is the name of the VolumeSnapshotClass requested by the VolumeSnapshot. VolumeSnapshotClassName may be left nil to indicate that the default SnapshotClass should be used. A given cluster may have multiple default Volume SnapshotClasses: one default per CSI Driver. If a VolumeSnapshot does not specify a SnapshotClass, VolumeSnapshotSource will be checked to figure out what the associated CSI Driver is, and the default VolumeSnapshotClass associated with that CSI Driver will be used. If more than one VolumeSnapshotClass exist for a given CSI Driver and more than one have been marked as default, CreateSnapshot will fail and generate an event. Empty string is not allowed for this field.  # noqa: E501

        :return: The volume_snapshot_class_name of this V1VolumeSnapshotSpec.  # noqa: E501
        :rtype: str
        """
        return self._volume_snapshot_class_name

    @volume_snapshot_class_name.setter
    def volume_snapshot_class_name(self, volume_snapshot_class_name):
        """Sets the volume_snapshot_class_name of this V1VolumeSnapshotSpec.

        VolumeSnapshotClassName is the name of the VolumeSnapshotClass requested by the VolumeSnapshot. VolumeSnapshotClassName may be left nil to indicate that the default SnapshotClass should be used. A given cluster may have multiple default Volume SnapshotClasses: one default per CSI Driver. If a VolumeSnapshot does not specify a SnapshotClass, VolumeSnapshotSource will be checked to figure out what the associated CSI Driver is, and the default VolumeSnapshotClass associated with that CSI Driver will be used. If more than one VolumeSnapshotClass exist for a given CSI Driver and more than one have been marked as default, CreateSnapshot will fail and generate an event. Empty string is not allowed for this field.  # noqa: E501

        :param volume_snapshot_class_name: The volume_snapshot_class_name of this V1VolumeSnapshotSpec.  # noqa: E501
        :type: str
        """

        self._volume_snapshot_class_name = volume_snapshot_class_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1VolumeSnapshotSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1VolumeSnapshotSpec):
            return True

        return self.to_dict() != other.to_dict()
