# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class OrgProjectcalicoCrdV1FelixConfigurationSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allow_ipip_packets_from_workloads': 'bool',
        'allow_vxlan_packets_from_workloads': 'bool',
        'aws_src_dst_check': 'str',
        'bpf_connect_time_load_balancing_enabled': 'bool',
        'bpf_data_iface_pattern': 'str',
        'bpf_disable_unprivileged': 'bool',
        'bpf_enabled': 'bool',
        'bpf_external_service_mode': 'str',
        'bpf_kube_proxy_endpoint_slices_enabled': 'bool',
        'bpf_kube_proxy_iptables_cleanup_enabled': 'bool',
        'bpf_kube_proxy_min_sync_period': 'str',
        'bpf_log_level': 'str',
        'chain_insert_mode': 'str',
        'dataplane_driver': 'str',
        'debug_disable_log_dropping': 'bool',
        'debug_memory_profile_path': 'str',
        'debug_simulate_calc_graph_hang_after': 'str',
        'debug_simulate_dataplane_hang_after': 'str',
        'default_endpoint_to_host_action': 'str',
        'device_route_protocol': 'int',
        'device_route_source_address': 'str',
        'disable_conntrack_invalid_check': 'bool',
        'endpoint_reporting_delay': 'str',
        'endpoint_reporting_enabled': 'bool',
        'external_nodes_list': 'list[str]',
        'failsafe_inbound_host_ports': 'list[OrgProjectcalicoCrdV1FelixConfigurationSpecFailsafeInboundHostPorts]',
        'failsafe_outbound_host_ports': 'list[OrgProjectcalicoCrdV1FelixConfigurationSpecFailsafeInboundHostPorts]',
        'feature_detect_override': 'str',
        'generic_xdp_enabled': 'bool',
        'health_enabled': 'bool',
        'health_host': 'str',
        'health_port': 'int',
        'interface_exclude': 'str',
        'interface_prefix': 'str',
        'interface_refresh_interval': 'str',
        'ipip_enabled': 'bool',
        'ipip_mtu': 'int',
        'ipsets_refresh_interval': 'str',
        'iptables_backend': 'str',
        'iptables_filter_allow_action': 'str',
        'iptables_lock_file_path': 'str',
        'iptables_lock_probe_interval': 'str',
        'iptables_lock_timeout': 'str',
        'iptables_mangle_allow_action': 'str',
        'iptables_mark_mask': 'int',
        'iptables_nat_outgoing_interface_filter': 'str',
        'iptables_post_write_check_interval': 'str',
        'iptables_refresh_interval': 'str',
        'ipv6_support': 'bool',
        'kube_node_port_ranges': 'list[object]',
        'log_file_path': 'str',
        'log_prefix': 'str',
        'log_severity_file': 'str',
        'log_severity_screen': 'str',
        'log_severity_sys': 'str',
        'max_ipset_size': 'int',
        'metadata_addr': 'str',
        'metadata_port': 'int',
        'mtu_iface_pattern': 'str',
        'nat_outgoing_address': 'str',
        'nat_port_range': 'object',
        'netlink_timeout': 'str',
        'openstack_region': 'str',
        'policy_sync_path_prefix': 'str',
        'prometheus_go_metrics_enabled': 'bool',
        'prometheus_metrics_enabled': 'bool',
        'prometheus_metrics_host': 'str',
        'prometheus_metrics_port': 'int',
        'prometheus_process_metrics_enabled': 'bool',
        'remove_external_routes': 'bool',
        'reporting_interval': 'str',
        'reporting_ttl': 'str',
        'route_refresh_interval': 'str',
        'route_source': 'str',
        'route_table_range': 'OrgProjectcalicoCrdV1FelixConfigurationSpecRouteTableRange',
        'service_loop_prevention': 'str',
        'sidecar_acceleration_enabled': 'bool',
        'usage_reporting_enabled': 'bool',
        'usage_reporting_initial_delay': 'str',
        'usage_reporting_interval': 'str',
        'use_internal_dataplane_driver': 'bool',
        'vxlan_enabled': 'bool',
        'vxlan_mtu': 'int',
        'vxlan_port': 'int',
        'vxlan_vni': 'int',
        'wireguard_enabled': 'bool',
        'wireguard_interface_name': 'str',
        'wireguard_listening_port': 'int',
        'wireguard_mtu': 'int',
        'wireguard_routing_rule_priority': 'int',
        'xdp_enabled': 'bool',
        'xdp_refresh_interval': 'str'
    }

    attribute_map = {
        'allow_ipip_packets_from_workloads': 'allowIPIPPacketsFromWorkloads',
        'allow_vxlan_packets_from_workloads': 'allowVXLANPacketsFromWorkloads',
        'aws_src_dst_check': 'awsSrcDstCheck',
        'bpf_connect_time_load_balancing_enabled': 'bpfConnectTimeLoadBalancingEnabled',
        'bpf_data_iface_pattern': 'bpfDataIfacePattern',
        'bpf_disable_unprivileged': 'bpfDisableUnprivileged',
        'bpf_enabled': 'bpfEnabled',
        'bpf_external_service_mode': 'bpfExternalServiceMode',
        'bpf_kube_proxy_endpoint_slices_enabled': 'bpfKubeProxyEndpointSlicesEnabled',
        'bpf_kube_proxy_iptables_cleanup_enabled': 'bpfKubeProxyIptablesCleanupEnabled',
        'bpf_kube_proxy_min_sync_period': 'bpfKubeProxyMinSyncPeriod',
        'bpf_log_level': 'bpfLogLevel',
        'chain_insert_mode': 'chainInsertMode',
        'dataplane_driver': 'dataplaneDriver',
        'debug_disable_log_dropping': 'debugDisableLogDropping',
        'debug_memory_profile_path': 'debugMemoryProfilePath',
        'debug_simulate_calc_graph_hang_after': 'debugSimulateCalcGraphHangAfter',
        'debug_simulate_dataplane_hang_after': 'debugSimulateDataplaneHangAfter',
        'default_endpoint_to_host_action': 'defaultEndpointToHostAction',
        'device_route_protocol': 'deviceRouteProtocol',
        'device_route_source_address': 'deviceRouteSourceAddress',
        'disable_conntrack_invalid_check': 'disableConntrackInvalidCheck',
        'endpoint_reporting_delay': 'endpointReportingDelay',
        'endpoint_reporting_enabled': 'endpointReportingEnabled',
        'external_nodes_list': 'externalNodesList',
        'failsafe_inbound_host_ports': 'failsafeInboundHostPorts',
        'failsafe_outbound_host_ports': 'failsafeOutboundHostPorts',
        'feature_detect_override': 'featureDetectOverride',
        'generic_xdp_enabled': 'genericXDPEnabled',
        'health_enabled': 'healthEnabled',
        'health_host': 'healthHost',
        'health_port': 'healthPort',
        'interface_exclude': 'interfaceExclude',
        'interface_prefix': 'interfacePrefix',
        'interface_refresh_interval': 'interfaceRefreshInterval',
        'ipip_enabled': 'ipipEnabled',
        'ipip_mtu': 'ipipMTU',
        'ipsets_refresh_interval': 'ipsetsRefreshInterval',
        'iptables_backend': 'iptablesBackend',
        'iptables_filter_allow_action': 'iptablesFilterAllowAction',
        'iptables_lock_file_path': 'iptablesLockFilePath',
        'iptables_lock_probe_interval': 'iptablesLockProbeInterval',
        'iptables_lock_timeout': 'iptablesLockTimeout',
        'iptables_mangle_allow_action': 'iptablesMangleAllowAction',
        'iptables_mark_mask': 'iptablesMarkMask',
        'iptables_nat_outgoing_interface_filter': 'iptablesNATOutgoingInterfaceFilter',
        'iptables_post_write_check_interval': 'iptablesPostWriteCheckInterval',
        'iptables_refresh_interval': 'iptablesRefreshInterval',
        'ipv6_support': 'ipv6Support',
        'kube_node_port_ranges': 'kubeNodePortRanges',
        'log_file_path': 'logFilePath',
        'log_prefix': 'logPrefix',
        'log_severity_file': 'logSeverityFile',
        'log_severity_screen': 'logSeverityScreen',
        'log_severity_sys': 'logSeveritySys',
        'max_ipset_size': 'maxIpsetSize',
        'metadata_addr': 'metadataAddr',
        'metadata_port': 'metadataPort',
        'mtu_iface_pattern': 'mtuIfacePattern',
        'nat_outgoing_address': 'natOutgoingAddress',
        'nat_port_range': 'natPortRange',
        'netlink_timeout': 'netlinkTimeout',
        'openstack_region': 'openstackRegion',
        'policy_sync_path_prefix': 'policySyncPathPrefix',
        'prometheus_go_metrics_enabled': 'prometheusGoMetricsEnabled',
        'prometheus_metrics_enabled': 'prometheusMetricsEnabled',
        'prometheus_metrics_host': 'prometheusMetricsHost',
        'prometheus_metrics_port': 'prometheusMetricsPort',
        'prometheus_process_metrics_enabled': 'prometheusProcessMetricsEnabled',
        'remove_external_routes': 'removeExternalRoutes',
        'reporting_interval': 'reportingInterval',
        'reporting_ttl': 'reportingTTL',
        'route_refresh_interval': 'routeRefreshInterval',
        'route_source': 'routeSource',
        'route_table_range': 'routeTableRange',
        'service_loop_prevention': 'serviceLoopPrevention',
        'sidecar_acceleration_enabled': 'sidecarAccelerationEnabled',
        'usage_reporting_enabled': 'usageReportingEnabled',
        'usage_reporting_initial_delay': 'usageReportingInitialDelay',
        'usage_reporting_interval': 'usageReportingInterval',
        'use_internal_dataplane_driver': 'useInternalDataplaneDriver',
        'vxlan_enabled': 'vxlanEnabled',
        'vxlan_mtu': 'vxlanMTU',
        'vxlan_port': 'vxlanPort',
        'vxlan_vni': 'vxlanVNI',
        'wireguard_enabled': 'wireguardEnabled',
        'wireguard_interface_name': 'wireguardInterfaceName',
        'wireguard_listening_port': 'wireguardListeningPort',
        'wireguard_mtu': 'wireguardMTU',
        'wireguard_routing_rule_priority': 'wireguardRoutingRulePriority',
        'xdp_enabled': 'xdpEnabled',
        'xdp_refresh_interval': 'xdpRefreshInterval'
    }

    def __init__(self, allow_ipip_packets_from_workloads=None, allow_vxlan_packets_from_workloads=None, aws_src_dst_check=None, bpf_connect_time_load_balancing_enabled=None, bpf_data_iface_pattern=None, bpf_disable_unprivileged=None, bpf_enabled=None, bpf_external_service_mode=None, bpf_kube_proxy_endpoint_slices_enabled=None, bpf_kube_proxy_iptables_cleanup_enabled=None, bpf_kube_proxy_min_sync_period=None, bpf_log_level=None, chain_insert_mode=None, dataplane_driver=None, debug_disable_log_dropping=None, debug_memory_profile_path=None, debug_simulate_calc_graph_hang_after=None, debug_simulate_dataplane_hang_after=None, default_endpoint_to_host_action=None, device_route_protocol=None, device_route_source_address=None, disable_conntrack_invalid_check=None, endpoint_reporting_delay=None, endpoint_reporting_enabled=None, external_nodes_list=None, failsafe_inbound_host_ports=None, failsafe_outbound_host_ports=None, feature_detect_override=None, generic_xdp_enabled=None, health_enabled=None, health_host=None, health_port=None, interface_exclude=None, interface_prefix=None, interface_refresh_interval=None, ipip_enabled=None, ipip_mtu=None, ipsets_refresh_interval=None, iptables_backend=None, iptables_filter_allow_action=None, iptables_lock_file_path=None, iptables_lock_probe_interval=None, iptables_lock_timeout=None, iptables_mangle_allow_action=None, iptables_mark_mask=None, iptables_nat_outgoing_interface_filter=None, iptables_post_write_check_interval=None, iptables_refresh_interval=None, ipv6_support=None, kube_node_port_ranges=None, log_file_path=None, log_prefix=None, log_severity_file=None, log_severity_screen=None, log_severity_sys=None, max_ipset_size=None, metadata_addr=None, metadata_port=None, mtu_iface_pattern=None, nat_outgoing_address=None, nat_port_range=None, netlink_timeout=None, openstack_region=None, policy_sync_path_prefix=None, prometheus_go_metrics_enabled=None, prometheus_metrics_enabled=None, prometheus_metrics_host=None, prometheus_metrics_port=None, prometheus_process_metrics_enabled=None, remove_external_routes=None, reporting_interval=None, reporting_ttl=None, route_refresh_interval=None, route_source=None, route_table_range=None, service_loop_prevention=None, sidecar_acceleration_enabled=None, usage_reporting_enabled=None, usage_reporting_initial_delay=None, usage_reporting_interval=None, use_internal_dataplane_driver=None, vxlan_enabled=None, vxlan_mtu=None, vxlan_port=None, vxlan_vni=None, wireguard_enabled=None, wireguard_interface_name=None, wireguard_listening_port=None, wireguard_mtu=None, wireguard_routing_rule_priority=None, xdp_enabled=None, xdp_refresh_interval=None, local_vars_configuration=None):  # noqa: E501
        """OrgProjectcalicoCrdV1FelixConfigurationSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._allow_ipip_packets_from_workloads = None
        self._allow_vxlan_packets_from_workloads = None
        self._aws_src_dst_check = None
        self._bpf_connect_time_load_balancing_enabled = None
        self._bpf_data_iface_pattern = None
        self._bpf_disable_unprivileged = None
        self._bpf_enabled = None
        self._bpf_external_service_mode = None
        self._bpf_kube_proxy_endpoint_slices_enabled = None
        self._bpf_kube_proxy_iptables_cleanup_enabled = None
        self._bpf_kube_proxy_min_sync_period = None
        self._bpf_log_level = None
        self._chain_insert_mode = None
        self._dataplane_driver = None
        self._debug_disable_log_dropping = None
        self._debug_memory_profile_path = None
        self._debug_simulate_calc_graph_hang_after = None
        self._debug_simulate_dataplane_hang_after = None
        self._default_endpoint_to_host_action = None
        self._device_route_protocol = None
        self._device_route_source_address = None
        self._disable_conntrack_invalid_check = None
        self._endpoint_reporting_delay = None
        self._endpoint_reporting_enabled = None
        self._external_nodes_list = None
        self._failsafe_inbound_host_ports = None
        self._failsafe_outbound_host_ports = None
        self._feature_detect_override = None
        self._generic_xdp_enabled = None
        self._health_enabled = None
        self._health_host = None
        self._health_port = None
        self._interface_exclude = None
        self._interface_prefix = None
        self._interface_refresh_interval = None
        self._ipip_enabled = None
        self._ipip_mtu = None
        self._ipsets_refresh_interval = None
        self._iptables_backend = None
        self._iptables_filter_allow_action = None
        self._iptables_lock_file_path = None
        self._iptables_lock_probe_interval = None
        self._iptables_lock_timeout = None
        self._iptables_mangle_allow_action = None
        self._iptables_mark_mask = None
        self._iptables_nat_outgoing_interface_filter = None
        self._iptables_post_write_check_interval = None
        self._iptables_refresh_interval = None
        self._ipv6_support = None
        self._kube_node_port_ranges = None
        self._log_file_path = None
        self._log_prefix = None
        self._log_severity_file = None
        self._log_severity_screen = None
        self._log_severity_sys = None
        self._max_ipset_size = None
        self._metadata_addr = None
        self._metadata_port = None
        self._mtu_iface_pattern = None
        self._nat_outgoing_address = None
        self._nat_port_range = None
        self._netlink_timeout = None
        self._openstack_region = None
        self._policy_sync_path_prefix = None
        self._prometheus_go_metrics_enabled = None
        self._prometheus_metrics_enabled = None
        self._prometheus_metrics_host = None
        self._prometheus_metrics_port = None
        self._prometheus_process_metrics_enabled = None
        self._remove_external_routes = None
        self._reporting_interval = None
        self._reporting_ttl = None
        self._route_refresh_interval = None
        self._route_source = None
        self._route_table_range = None
        self._service_loop_prevention = None
        self._sidecar_acceleration_enabled = None
        self._usage_reporting_enabled = None
        self._usage_reporting_initial_delay = None
        self._usage_reporting_interval = None
        self._use_internal_dataplane_driver = None
        self._vxlan_enabled = None
        self._vxlan_mtu = None
        self._vxlan_port = None
        self._vxlan_vni = None
        self._wireguard_enabled = None
        self._wireguard_interface_name = None
        self._wireguard_listening_port = None
        self._wireguard_mtu = None
        self._wireguard_routing_rule_priority = None
        self._xdp_enabled = None
        self._xdp_refresh_interval = None
        self.discriminator = None

        if allow_ipip_packets_from_workloads is not None:
            self.allow_ipip_packets_from_workloads = allow_ipip_packets_from_workloads
        if allow_vxlan_packets_from_workloads is not None:
            self.allow_vxlan_packets_from_workloads = allow_vxlan_packets_from_workloads
        if aws_src_dst_check is not None:
            self.aws_src_dst_check = aws_src_dst_check
        if bpf_connect_time_load_balancing_enabled is not None:
            self.bpf_connect_time_load_balancing_enabled = bpf_connect_time_load_balancing_enabled
        if bpf_data_iface_pattern is not None:
            self.bpf_data_iface_pattern = bpf_data_iface_pattern
        if bpf_disable_unprivileged is not None:
            self.bpf_disable_unprivileged = bpf_disable_unprivileged
        if bpf_enabled is not None:
            self.bpf_enabled = bpf_enabled
        if bpf_external_service_mode is not None:
            self.bpf_external_service_mode = bpf_external_service_mode
        if bpf_kube_proxy_endpoint_slices_enabled is not None:
            self.bpf_kube_proxy_endpoint_slices_enabled = bpf_kube_proxy_endpoint_slices_enabled
        if bpf_kube_proxy_iptables_cleanup_enabled is not None:
            self.bpf_kube_proxy_iptables_cleanup_enabled = bpf_kube_proxy_iptables_cleanup_enabled
        if bpf_kube_proxy_min_sync_period is not None:
            self.bpf_kube_proxy_min_sync_period = bpf_kube_proxy_min_sync_period
        if bpf_log_level is not None:
            self.bpf_log_level = bpf_log_level
        if chain_insert_mode is not None:
            self.chain_insert_mode = chain_insert_mode
        if dataplane_driver is not None:
            self.dataplane_driver = dataplane_driver
        if debug_disable_log_dropping is not None:
            self.debug_disable_log_dropping = debug_disable_log_dropping
        if debug_memory_profile_path is not None:
            self.debug_memory_profile_path = debug_memory_profile_path
        if debug_simulate_calc_graph_hang_after is not None:
            self.debug_simulate_calc_graph_hang_after = debug_simulate_calc_graph_hang_after
        if debug_simulate_dataplane_hang_after is not None:
            self.debug_simulate_dataplane_hang_after = debug_simulate_dataplane_hang_after
        if default_endpoint_to_host_action is not None:
            self.default_endpoint_to_host_action = default_endpoint_to_host_action
        if device_route_protocol is not None:
            self.device_route_protocol = device_route_protocol
        if device_route_source_address is not None:
            self.device_route_source_address = device_route_source_address
        if disable_conntrack_invalid_check is not None:
            self.disable_conntrack_invalid_check = disable_conntrack_invalid_check
        if endpoint_reporting_delay is not None:
            self.endpoint_reporting_delay = endpoint_reporting_delay
        if endpoint_reporting_enabled is not None:
            self.endpoint_reporting_enabled = endpoint_reporting_enabled
        if external_nodes_list is not None:
            self.external_nodes_list = external_nodes_list
        if failsafe_inbound_host_ports is not None:
            self.failsafe_inbound_host_ports = failsafe_inbound_host_ports
        if failsafe_outbound_host_ports is not None:
            self.failsafe_outbound_host_ports = failsafe_outbound_host_ports
        if feature_detect_override is not None:
            self.feature_detect_override = feature_detect_override
        if generic_xdp_enabled is not None:
            self.generic_xdp_enabled = generic_xdp_enabled
        if health_enabled is not None:
            self.health_enabled = health_enabled
        if health_host is not None:
            self.health_host = health_host
        if health_port is not None:
            self.health_port = health_port
        if interface_exclude is not None:
            self.interface_exclude = interface_exclude
        if interface_prefix is not None:
            self.interface_prefix = interface_prefix
        if interface_refresh_interval is not None:
            self.interface_refresh_interval = interface_refresh_interval
        if ipip_enabled is not None:
            self.ipip_enabled = ipip_enabled
        if ipip_mtu is not None:
            self.ipip_mtu = ipip_mtu
        if ipsets_refresh_interval is not None:
            self.ipsets_refresh_interval = ipsets_refresh_interval
        if iptables_backend is not None:
            self.iptables_backend = iptables_backend
        if iptables_filter_allow_action is not None:
            self.iptables_filter_allow_action = iptables_filter_allow_action
        if iptables_lock_file_path is not None:
            self.iptables_lock_file_path = iptables_lock_file_path
        if iptables_lock_probe_interval is not None:
            self.iptables_lock_probe_interval = iptables_lock_probe_interval
        if iptables_lock_timeout is not None:
            self.iptables_lock_timeout = iptables_lock_timeout
        if iptables_mangle_allow_action is not None:
            self.iptables_mangle_allow_action = iptables_mangle_allow_action
        if iptables_mark_mask is not None:
            self.iptables_mark_mask = iptables_mark_mask
        if iptables_nat_outgoing_interface_filter is not None:
            self.iptables_nat_outgoing_interface_filter = iptables_nat_outgoing_interface_filter
        if iptables_post_write_check_interval is not None:
            self.iptables_post_write_check_interval = iptables_post_write_check_interval
        if iptables_refresh_interval is not None:
            self.iptables_refresh_interval = iptables_refresh_interval
        if ipv6_support is not None:
            self.ipv6_support = ipv6_support
        if kube_node_port_ranges is not None:
            self.kube_node_port_ranges = kube_node_port_ranges
        if log_file_path is not None:
            self.log_file_path = log_file_path
        if log_prefix is not None:
            self.log_prefix = log_prefix
        if log_severity_file is not None:
            self.log_severity_file = log_severity_file
        if log_severity_screen is not None:
            self.log_severity_screen = log_severity_screen
        if log_severity_sys is not None:
            self.log_severity_sys = log_severity_sys
        if max_ipset_size is not None:
            self.max_ipset_size = max_ipset_size
        if metadata_addr is not None:
            self.metadata_addr = metadata_addr
        if metadata_port is not None:
            self.metadata_port = metadata_port
        if mtu_iface_pattern is not None:
            self.mtu_iface_pattern = mtu_iface_pattern
        if nat_outgoing_address is not None:
            self.nat_outgoing_address = nat_outgoing_address
        if nat_port_range is not None:
            self.nat_port_range = nat_port_range
        if netlink_timeout is not None:
            self.netlink_timeout = netlink_timeout
        if openstack_region is not None:
            self.openstack_region = openstack_region
        if policy_sync_path_prefix is not None:
            self.policy_sync_path_prefix = policy_sync_path_prefix
        if prometheus_go_metrics_enabled is not None:
            self.prometheus_go_metrics_enabled = prometheus_go_metrics_enabled
        if prometheus_metrics_enabled is not None:
            self.prometheus_metrics_enabled = prometheus_metrics_enabled
        if prometheus_metrics_host is not None:
            self.prometheus_metrics_host = prometheus_metrics_host
        if prometheus_metrics_port is not None:
            self.prometheus_metrics_port = prometheus_metrics_port
        if prometheus_process_metrics_enabled is not None:
            self.prometheus_process_metrics_enabled = prometheus_process_metrics_enabled
        if remove_external_routes is not None:
            self.remove_external_routes = remove_external_routes
        if reporting_interval is not None:
            self.reporting_interval = reporting_interval
        if reporting_ttl is not None:
            self.reporting_ttl = reporting_ttl
        if route_refresh_interval is not None:
            self.route_refresh_interval = route_refresh_interval
        if route_source is not None:
            self.route_source = route_source
        if route_table_range is not None:
            self.route_table_range = route_table_range
        if service_loop_prevention is not None:
            self.service_loop_prevention = service_loop_prevention
        if sidecar_acceleration_enabled is not None:
            self.sidecar_acceleration_enabled = sidecar_acceleration_enabled
        if usage_reporting_enabled is not None:
            self.usage_reporting_enabled = usage_reporting_enabled
        if usage_reporting_initial_delay is not None:
            self.usage_reporting_initial_delay = usage_reporting_initial_delay
        if usage_reporting_interval is not None:
            self.usage_reporting_interval = usage_reporting_interval
        if use_internal_dataplane_driver is not None:
            self.use_internal_dataplane_driver = use_internal_dataplane_driver
        if vxlan_enabled is not None:
            self.vxlan_enabled = vxlan_enabled
        if vxlan_mtu is not None:
            self.vxlan_mtu = vxlan_mtu
        if vxlan_port is not None:
            self.vxlan_port = vxlan_port
        if vxlan_vni is not None:
            self.vxlan_vni = vxlan_vni
        if wireguard_enabled is not None:
            self.wireguard_enabled = wireguard_enabled
        if wireguard_interface_name is not None:
            self.wireguard_interface_name = wireguard_interface_name
        if wireguard_listening_port is not None:
            self.wireguard_listening_port = wireguard_listening_port
        if wireguard_mtu is not None:
            self.wireguard_mtu = wireguard_mtu
        if wireguard_routing_rule_priority is not None:
            self.wireguard_routing_rule_priority = wireguard_routing_rule_priority
        if xdp_enabled is not None:
            self.xdp_enabled = xdp_enabled
        if xdp_refresh_interval is not None:
            self.xdp_refresh_interval = xdp_refresh_interval

    @property
    def allow_ipip_packets_from_workloads(self):
        """Gets the allow_ipip_packets_from_workloads of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        AllowIPIPPacketsFromWorkloads controls whether Felix will add a rule to drop IPIP encapsulated traffic from workloads [Default: false]  # noqa: E501

        :return: The allow_ipip_packets_from_workloads of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._allow_ipip_packets_from_workloads

    @allow_ipip_packets_from_workloads.setter
    def allow_ipip_packets_from_workloads(self, allow_ipip_packets_from_workloads):
        """Sets the allow_ipip_packets_from_workloads of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        AllowIPIPPacketsFromWorkloads controls whether Felix will add a rule to drop IPIP encapsulated traffic from workloads [Default: false]  # noqa: E501

        :param allow_ipip_packets_from_workloads: The allow_ipip_packets_from_workloads of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._allow_ipip_packets_from_workloads = allow_ipip_packets_from_workloads

    @property
    def allow_vxlan_packets_from_workloads(self):
        """Gets the allow_vxlan_packets_from_workloads of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        AllowVXLANPacketsFromWorkloads controls whether Felix will add a rule to drop VXLAN encapsulated traffic from workloads [Default: false]  # noqa: E501

        :return: The allow_vxlan_packets_from_workloads of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._allow_vxlan_packets_from_workloads

    @allow_vxlan_packets_from_workloads.setter
    def allow_vxlan_packets_from_workloads(self, allow_vxlan_packets_from_workloads):
        """Sets the allow_vxlan_packets_from_workloads of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        AllowVXLANPacketsFromWorkloads controls whether Felix will add a rule to drop VXLAN encapsulated traffic from workloads [Default: false]  # noqa: E501

        :param allow_vxlan_packets_from_workloads: The allow_vxlan_packets_from_workloads of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._allow_vxlan_packets_from_workloads = allow_vxlan_packets_from_workloads

    @property
    def aws_src_dst_check(self):
        """Gets the aws_src_dst_check of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        Set source-destination-check on AWS EC2 instances. Accepted value must be one of \"DoNothing\", \"Enabled\" or \"Disabled\". [Default: DoNothing]  # noqa: E501

        :return: The aws_src_dst_check of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._aws_src_dst_check

    @aws_src_dst_check.setter
    def aws_src_dst_check(self, aws_src_dst_check):
        """Sets the aws_src_dst_check of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        Set source-destination-check on AWS EC2 instances. Accepted value must be one of \"DoNothing\", \"Enabled\" or \"Disabled\". [Default: DoNothing]  # noqa: E501

        :param aws_src_dst_check: The aws_src_dst_check of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """
        allowed_values = ["DoNothing", "Enable", "Disable"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and aws_src_dst_check not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `aws_src_dst_check` ({0}), must be one of {1}"  # noqa: E501
                .format(aws_src_dst_check, allowed_values)
            )

        self._aws_src_dst_check = aws_src_dst_check

    @property
    def bpf_connect_time_load_balancing_enabled(self):
        """Gets the bpf_connect_time_load_balancing_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        BPFConnectTimeLoadBalancingEnabled when in BPF mode, controls whether Felix installs the connection-time load balancer.  The connect-time load balancer is required for the host to be able to reach Kubernetes services and it improves the performance of pod-to-service connections.  The only reason to disable it is for debugging purposes.  [Default: true]  # noqa: E501

        :return: The bpf_connect_time_load_balancing_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._bpf_connect_time_load_balancing_enabled

    @bpf_connect_time_load_balancing_enabled.setter
    def bpf_connect_time_load_balancing_enabled(self, bpf_connect_time_load_balancing_enabled):
        """Sets the bpf_connect_time_load_balancing_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        BPFConnectTimeLoadBalancingEnabled when in BPF mode, controls whether Felix installs the connection-time load balancer.  The connect-time load balancer is required for the host to be able to reach Kubernetes services and it improves the performance of pod-to-service connections.  The only reason to disable it is for debugging purposes.  [Default: true]  # noqa: E501

        :param bpf_connect_time_load_balancing_enabled: The bpf_connect_time_load_balancing_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._bpf_connect_time_load_balancing_enabled = bpf_connect_time_load_balancing_enabled

    @property
    def bpf_data_iface_pattern(self):
        """Gets the bpf_data_iface_pattern of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        BPFDataIfacePattern is a regular expression that controls which interfaces Felix should attach BPF programs to in order to catch traffic to/from the network.  This needs to match the interfaces that Calico workload traffic flows over as well as any interfaces that handle incoming traffic to nodeports and services from outside the cluster.  It should not match the workload interfaces (usually named cali...).  # noqa: E501

        :return: The bpf_data_iface_pattern of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._bpf_data_iface_pattern

    @bpf_data_iface_pattern.setter
    def bpf_data_iface_pattern(self, bpf_data_iface_pattern):
        """Sets the bpf_data_iface_pattern of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        BPFDataIfacePattern is a regular expression that controls which interfaces Felix should attach BPF programs to in order to catch traffic to/from the network.  This needs to match the interfaces that Calico workload traffic flows over as well as any interfaces that handle incoming traffic to nodeports and services from outside the cluster.  It should not match the workload interfaces (usually named cali...).  # noqa: E501

        :param bpf_data_iface_pattern: The bpf_data_iface_pattern of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._bpf_data_iface_pattern = bpf_data_iface_pattern

    @property
    def bpf_disable_unprivileged(self):
        """Gets the bpf_disable_unprivileged of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        BPFDisableUnprivileged, if enabled, Felix sets the kernel.unprivileged_bpf_disabled sysctl to disable unprivileged use of BPF.  This ensures that unprivileged users cannot access Calico's BPF maps and cannot insert their own BPF programs to interfere with Calico's. [Default: true]  # noqa: E501

        :return: The bpf_disable_unprivileged of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._bpf_disable_unprivileged

    @bpf_disable_unprivileged.setter
    def bpf_disable_unprivileged(self, bpf_disable_unprivileged):
        """Sets the bpf_disable_unprivileged of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        BPFDisableUnprivileged, if enabled, Felix sets the kernel.unprivileged_bpf_disabled sysctl to disable unprivileged use of BPF.  This ensures that unprivileged users cannot access Calico's BPF maps and cannot insert their own BPF programs to interfere with Calico's. [Default: true]  # noqa: E501

        :param bpf_disable_unprivileged: The bpf_disable_unprivileged of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._bpf_disable_unprivileged = bpf_disable_unprivileged

    @property
    def bpf_enabled(self):
        """Gets the bpf_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        BPFEnabled, if enabled Felix will use the BPF dataplane. [Default: false]  # noqa: E501

        :return: The bpf_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._bpf_enabled

    @bpf_enabled.setter
    def bpf_enabled(self, bpf_enabled):
        """Sets the bpf_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        BPFEnabled, if enabled Felix will use the BPF dataplane. [Default: false]  # noqa: E501

        :param bpf_enabled: The bpf_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._bpf_enabled = bpf_enabled

    @property
    def bpf_external_service_mode(self):
        """Gets the bpf_external_service_mode of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        BPFExternalServiceMode in BPF mode, controls how connections from outside the cluster to services (node ports and cluster IPs) are forwarded to remote workloads.  If set to \"Tunnel\" then both request and response traffic is tunneled to the remote node.  If set to \"DSR\", the request traffic is tunneled but the response traffic is sent directly from the remote node.  In \"DSR\" mode, the remote node appears to use the IP of the ingress node; this requires a permissive L2 network.  [Default: Tunnel]  # noqa: E501

        :return: The bpf_external_service_mode of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._bpf_external_service_mode

    @bpf_external_service_mode.setter
    def bpf_external_service_mode(self, bpf_external_service_mode):
        """Sets the bpf_external_service_mode of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        BPFExternalServiceMode in BPF mode, controls how connections from outside the cluster to services (node ports and cluster IPs) are forwarded to remote workloads.  If set to \"Tunnel\" then both request and response traffic is tunneled to the remote node.  If set to \"DSR\", the request traffic is tunneled but the response traffic is sent directly from the remote node.  In \"DSR\" mode, the remote node appears to use the IP of the ingress node; this requires a permissive L2 network.  [Default: Tunnel]  # noqa: E501

        :param bpf_external_service_mode: The bpf_external_service_mode of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._bpf_external_service_mode = bpf_external_service_mode

    @property
    def bpf_kube_proxy_endpoint_slices_enabled(self):
        """Gets the bpf_kube_proxy_endpoint_slices_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        BPFKubeProxyEndpointSlicesEnabled in BPF mode, controls whether Felix's embedded kube-proxy accepts EndpointSlices or not.  # noqa: E501

        :return: The bpf_kube_proxy_endpoint_slices_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._bpf_kube_proxy_endpoint_slices_enabled

    @bpf_kube_proxy_endpoint_slices_enabled.setter
    def bpf_kube_proxy_endpoint_slices_enabled(self, bpf_kube_proxy_endpoint_slices_enabled):
        """Sets the bpf_kube_proxy_endpoint_slices_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        BPFKubeProxyEndpointSlicesEnabled in BPF mode, controls whether Felix's embedded kube-proxy accepts EndpointSlices or not.  # noqa: E501

        :param bpf_kube_proxy_endpoint_slices_enabled: The bpf_kube_proxy_endpoint_slices_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._bpf_kube_proxy_endpoint_slices_enabled = bpf_kube_proxy_endpoint_slices_enabled

    @property
    def bpf_kube_proxy_iptables_cleanup_enabled(self):
        """Gets the bpf_kube_proxy_iptables_cleanup_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        BPFKubeProxyIptablesCleanupEnabled, if enabled in BPF mode, Felix will proactively clean up the upstream Kubernetes kube-proxy's iptables chains.  Should only be enabled if kube-proxy is not running.  [Default: true]  # noqa: E501

        :return: The bpf_kube_proxy_iptables_cleanup_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._bpf_kube_proxy_iptables_cleanup_enabled

    @bpf_kube_proxy_iptables_cleanup_enabled.setter
    def bpf_kube_proxy_iptables_cleanup_enabled(self, bpf_kube_proxy_iptables_cleanup_enabled):
        """Sets the bpf_kube_proxy_iptables_cleanup_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        BPFKubeProxyIptablesCleanupEnabled, if enabled in BPF mode, Felix will proactively clean up the upstream Kubernetes kube-proxy's iptables chains.  Should only be enabled if kube-proxy is not running.  [Default: true]  # noqa: E501

        :param bpf_kube_proxy_iptables_cleanup_enabled: The bpf_kube_proxy_iptables_cleanup_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._bpf_kube_proxy_iptables_cleanup_enabled = bpf_kube_proxy_iptables_cleanup_enabled

    @property
    def bpf_kube_proxy_min_sync_period(self):
        """Gets the bpf_kube_proxy_min_sync_period of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        BPFKubeProxyMinSyncPeriod, in BPF mode, controls the minimum time between updates to the dataplane for Felix's embedded kube-proxy.  Lower values give reduced set-up latency.  Higher values reduce Felix CPU usage by batching up more work.  [Default: 1s]  # noqa: E501

        :return: The bpf_kube_proxy_min_sync_period of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._bpf_kube_proxy_min_sync_period

    @bpf_kube_proxy_min_sync_period.setter
    def bpf_kube_proxy_min_sync_period(self, bpf_kube_proxy_min_sync_period):
        """Sets the bpf_kube_proxy_min_sync_period of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        BPFKubeProxyMinSyncPeriod, in BPF mode, controls the minimum time between updates to the dataplane for Felix's embedded kube-proxy.  Lower values give reduced set-up latency.  Higher values reduce Felix CPU usage by batching up more work.  [Default: 1s]  # noqa: E501

        :param bpf_kube_proxy_min_sync_period: The bpf_kube_proxy_min_sync_period of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._bpf_kube_proxy_min_sync_period = bpf_kube_proxy_min_sync_period

    @property
    def bpf_log_level(self):
        """Gets the bpf_log_level of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        BPFLogLevel controls the log level of the BPF programs when in BPF dataplane mode.  One of \"Off\", \"Info\", or \"Debug\".  The logs are emitted to the BPF trace pipe, accessible with the command `tc exec bpf debug`. [Default: Off].  # noqa: E501

        :return: The bpf_log_level of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._bpf_log_level

    @bpf_log_level.setter
    def bpf_log_level(self, bpf_log_level):
        """Sets the bpf_log_level of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        BPFLogLevel controls the log level of the BPF programs when in BPF dataplane mode.  One of \"Off\", \"Info\", or \"Debug\".  The logs are emitted to the BPF trace pipe, accessible with the command `tc exec bpf debug`. [Default: Off].  # noqa: E501

        :param bpf_log_level: The bpf_log_level of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._bpf_log_level = bpf_log_level

    @property
    def chain_insert_mode(self):
        """Gets the chain_insert_mode of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        ChainInsertMode controls whether Felix hooks the kernel's top-level iptables chains by inserting a rule at the top of the chain or by appending a rule at the bottom. insert is the safe default since it prevents Calico's rules from being bypassed. If you switch to append mode, be sure that the other rules in the chains signal acceptance by falling through to the Calico rules, otherwise the Calico policy will be bypassed. [Default: insert]  # noqa: E501

        :return: The chain_insert_mode of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._chain_insert_mode

    @chain_insert_mode.setter
    def chain_insert_mode(self, chain_insert_mode):
        """Sets the chain_insert_mode of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        ChainInsertMode controls whether Felix hooks the kernel's top-level iptables chains by inserting a rule at the top of the chain or by appending a rule at the bottom. insert is the safe default since it prevents Calico's rules from being bypassed. If you switch to append mode, be sure that the other rules in the chains signal acceptance by falling through to the Calico rules, otherwise the Calico policy will be bypassed. [Default: insert]  # noqa: E501

        :param chain_insert_mode: The chain_insert_mode of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._chain_insert_mode = chain_insert_mode

    @property
    def dataplane_driver(self):
        """Gets the dataplane_driver of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501


        :return: The dataplane_driver of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._dataplane_driver

    @dataplane_driver.setter
    def dataplane_driver(self, dataplane_driver):
        """Sets the dataplane_driver of this OrgProjectcalicoCrdV1FelixConfigurationSpec.


        :param dataplane_driver: The dataplane_driver of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._dataplane_driver = dataplane_driver

    @property
    def debug_disable_log_dropping(self):
        """Gets the debug_disable_log_dropping of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501


        :return: The debug_disable_log_dropping of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._debug_disable_log_dropping

    @debug_disable_log_dropping.setter
    def debug_disable_log_dropping(self, debug_disable_log_dropping):
        """Sets the debug_disable_log_dropping of this OrgProjectcalicoCrdV1FelixConfigurationSpec.


        :param debug_disable_log_dropping: The debug_disable_log_dropping of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._debug_disable_log_dropping = debug_disable_log_dropping

    @property
    def debug_memory_profile_path(self):
        """Gets the debug_memory_profile_path of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501


        :return: The debug_memory_profile_path of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._debug_memory_profile_path

    @debug_memory_profile_path.setter
    def debug_memory_profile_path(self, debug_memory_profile_path):
        """Sets the debug_memory_profile_path of this OrgProjectcalicoCrdV1FelixConfigurationSpec.


        :param debug_memory_profile_path: The debug_memory_profile_path of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._debug_memory_profile_path = debug_memory_profile_path

    @property
    def debug_simulate_calc_graph_hang_after(self):
        """Gets the debug_simulate_calc_graph_hang_after of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501


        :return: The debug_simulate_calc_graph_hang_after of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._debug_simulate_calc_graph_hang_after

    @debug_simulate_calc_graph_hang_after.setter
    def debug_simulate_calc_graph_hang_after(self, debug_simulate_calc_graph_hang_after):
        """Sets the debug_simulate_calc_graph_hang_after of this OrgProjectcalicoCrdV1FelixConfigurationSpec.


        :param debug_simulate_calc_graph_hang_after: The debug_simulate_calc_graph_hang_after of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._debug_simulate_calc_graph_hang_after = debug_simulate_calc_graph_hang_after

    @property
    def debug_simulate_dataplane_hang_after(self):
        """Gets the debug_simulate_dataplane_hang_after of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501


        :return: The debug_simulate_dataplane_hang_after of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._debug_simulate_dataplane_hang_after

    @debug_simulate_dataplane_hang_after.setter
    def debug_simulate_dataplane_hang_after(self, debug_simulate_dataplane_hang_after):
        """Sets the debug_simulate_dataplane_hang_after of this OrgProjectcalicoCrdV1FelixConfigurationSpec.


        :param debug_simulate_dataplane_hang_after: The debug_simulate_dataplane_hang_after of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._debug_simulate_dataplane_hang_after = debug_simulate_dataplane_hang_after

    @property
    def default_endpoint_to_host_action(self):
        """Gets the default_endpoint_to_host_action of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        DefaultEndpointToHostAction controls what happens to traffic that goes from a workload endpoint to the host itself (after the traffic hits the endpoint egress policy). By default Calico blocks traffic from workload endpoints to the host itself with an iptables “DROP” action. If you want to allow some or all traffic from endpoint to host, set this parameter to RETURN or ACCEPT. Use RETURN if you have your own rules in the iptables “INPUT” chain; Calico will insert its rules at the top of that chain, then “RETURN” packets to the “INPUT” chain once it has completed processing workload endpoint egress policy. Use ACCEPT to unconditionally accept packets from workloads after processing workload endpoint egress policy. [Default: Drop]  # noqa: E501

        :return: The default_endpoint_to_host_action of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._default_endpoint_to_host_action

    @default_endpoint_to_host_action.setter
    def default_endpoint_to_host_action(self, default_endpoint_to_host_action):
        """Sets the default_endpoint_to_host_action of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        DefaultEndpointToHostAction controls what happens to traffic that goes from a workload endpoint to the host itself (after the traffic hits the endpoint egress policy). By default Calico blocks traffic from workload endpoints to the host itself with an iptables “DROP” action. If you want to allow some or all traffic from endpoint to host, set this parameter to RETURN or ACCEPT. Use RETURN if you have your own rules in the iptables “INPUT” chain; Calico will insert its rules at the top of that chain, then “RETURN” packets to the “INPUT” chain once it has completed processing workload endpoint egress policy. Use ACCEPT to unconditionally accept packets from workloads after processing workload endpoint egress policy. [Default: Drop]  # noqa: E501

        :param default_endpoint_to_host_action: The default_endpoint_to_host_action of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._default_endpoint_to_host_action = default_endpoint_to_host_action

    @property
    def device_route_protocol(self):
        """Gets the device_route_protocol of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        This defines the route protocol added to programmed device routes, by default this will be RTPROT_BOOT when left blank.  # noqa: E501

        :return: The device_route_protocol of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: int
        """
        return self._device_route_protocol

    @device_route_protocol.setter
    def device_route_protocol(self, device_route_protocol):
        """Sets the device_route_protocol of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        This defines the route protocol added to programmed device routes, by default this will be RTPROT_BOOT when left blank.  # noqa: E501

        :param device_route_protocol: The device_route_protocol of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: int
        """

        self._device_route_protocol = device_route_protocol

    @property
    def device_route_source_address(self):
        """Gets the device_route_source_address of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        This is the source address to use on programmed device routes. By default the source address is left blank, leaving the kernel to choose the source address used.  # noqa: E501

        :return: The device_route_source_address of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._device_route_source_address

    @device_route_source_address.setter
    def device_route_source_address(self, device_route_source_address):
        """Sets the device_route_source_address of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        This is the source address to use on programmed device routes. By default the source address is left blank, leaving the kernel to choose the source address used.  # noqa: E501

        :param device_route_source_address: The device_route_source_address of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._device_route_source_address = device_route_source_address

    @property
    def disable_conntrack_invalid_check(self):
        """Gets the disable_conntrack_invalid_check of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501


        :return: The disable_conntrack_invalid_check of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._disable_conntrack_invalid_check

    @disable_conntrack_invalid_check.setter
    def disable_conntrack_invalid_check(self, disable_conntrack_invalid_check):
        """Sets the disable_conntrack_invalid_check of this OrgProjectcalicoCrdV1FelixConfigurationSpec.


        :param disable_conntrack_invalid_check: The disable_conntrack_invalid_check of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._disable_conntrack_invalid_check = disable_conntrack_invalid_check

    @property
    def endpoint_reporting_delay(self):
        """Gets the endpoint_reporting_delay of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501


        :return: The endpoint_reporting_delay of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_reporting_delay

    @endpoint_reporting_delay.setter
    def endpoint_reporting_delay(self, endpoint_reporting_delay):
        """Sets the endpoint_reporting_delay of this OrgProjectcalicoCrdV1FelixConfigurationSpec.


        :param endpoint_reporting_delay: The endpoint_reporting_delay of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._endpoint_reporting_delay = endpoint_reporting_delay

    @property
    def endpoint_reporting_enabled(self):
        """Gets the endpoint_reporting_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501


        :return: The endpoint_reporting_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._endpoint_reporting_enabled

    @endpoint_reporting_enabled.setter
    def endpoint_reporting_enabled(self, endpoint_reporting_enabled):
        """Sets the endpoint_reporting_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.


        :param endpoint_reporting_enabled: The endpoint_reporting_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._endpoint_reporting_enabled = endpoint_reporting_enabled

    @property
    def external_nodes_list(self):
        """Gets the external_nodes_list of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        ExternalNodesCIDRList is a list of CIDR's of external-non-calico-nodes which may source tunnel traffic and have the tunneled traffic be accepted at calico nodes.  # noqa: E501

        :return: The external_nodes_list of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._external_nodes_list

    @external_nodes_list.setter
    def external_nodes_list(self, external_nodes_list):
        """Sets the external_nodes_list of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        ExternalNodesCIDRList is a list of CIDR's of external-non-calico-nodes which may source tunnel traffic and have the tunneled traffic be accepted at calico nodes.  # noqa: E501

        :param external_nodes_list: The external_nodes_list of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: list[str]
        """

        self._external_nodes_list = external_nodes_list

    @property
    def failsafe_inbound_host_ports(self):
        """Gets the failsafe_inbound_host_ports of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        FailsafeInboundHostPorts is a comma-delimited list of UDP/TCP ports that Felix will allow incoming traffic to host endpoints on irrespective of the security policy. This is useful to avoid accidentally cutting off a host with incorrect configuration. Each port should be specified as tcp:<port-number> or udp:<port-number>. For back-compatibility, if the protocol is not specified, it defaults to “tcp”. To disable all inbound host ports, use the value none. The default value allows ssh access and DHCP. [Default: tcp:22, udp:68, tcp:179, tcp:2379, tcp:2380, tcp:6443, tcp:6666, tcp:6667]  # noqa: E501

        :return: The failsafe_inbound_host_ports of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: list[OrgProjectcalicoCrdV1FelixConfigurationSpecFailsafeInboundHostPorts]
        """
        return self._failsafe_inbound_host_ports

    @failsafe_inbound_host_ports.setter
    def failsafe_inbound_host_ports(self, failsafe_inbound_host_ports):
        """Sets the failsafe_inbound_host_ports of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        FailsafeInboundHostPorts is a comma-delimited list of UDP/TCP ports that Felix will allow incoming traffic to host endpoints on irrespective of the security policy. This is useful to avoid accidentally cutting off a host with incorrect configuration. Each port should be specified as tcp:<port-number> or udp:<port-number>. For back-compatibility, if the protocol is not specified, it defaults to “tcp”. To disable all inbound host ports, use the value none. The default value allows ssh access and DHCP. [Default: tcp:22, udp:68, tcp:179, tcp:2379, tcp:2380, tcp:6443, tcp:6666, tcp:6667]  # noqa: E501

        :param failsafe_inbound_host_ports: The failsafe_inbound_host_ports of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: list[OrgProjectcalicoCrdV1FelixConfigurationSpecFailsafeInboundHostPorts]
        """

        self._failsafe_inbound_host_ports = failsafe_inbound_host_ports

    @property
    def failsafe_outbound_host_ports(self):
        """Gets the failsafe_outbound_host_ports of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        FailsafeOutboundHostPorts is a comma-delimited list of UDP/TCP ports that Felix will allow outgoing traffic from host endpoints to irrespective of the security policy. This is useful to avoid accidentally cutting off a host with incorrect configuration. Each port should be specified as tcp:<port-number> or udp:<port-number>. For back-compatibility, if the protocol is not specified, it defaults to “tcp”. To disable all outbound host ports, use the value none. The default value opens etcd's standard ports to ensure that Felix does not get cut off from etcd as well as allowing DHCP and DNS. [Default: tcp:179, tcp:2379, tcp:2380, tcp:6443, tcp:6666, tcp:6667, udp:53, udp:67]  # noqa: E501

        :return: The failsafe_outbound_host_ports of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: list[OrgProjectcalicoCrdV1FelixConfigurationSpecFailsafeInboundHostPorts]
        """
        return self._failsafe_outbound_host_ports

    @failsafe_outbound_host_ports.setter
    def failsafe_outbound_host_ports(self, failsafe_outbound_host_ports):
        """Sets the failsafe_outbound_host_ports of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        FailsafeOutboundHostPorts is a comma-delimited list of UDP/TCP ports that Felix will allow outgoing traffic from host endpoints to irrespective of the security policy. This is useful to avoid accidentally cutting off a host with incorrect configuration. Each port should be specified as tcp:<port-number> or udp:<port-number>. For back-compatibility, if the protocol is not specified, it defaults to “tcp”. To disable all outbound host ports, use the value none. The default value opens etcd's standard ports to ensure that Felix does not get cut off from etcd as well as allowing DHCP and DNS. [Default: tcp:179, tcp:2379, tcp:2380, tcp:6443, tcp:6666, tcp:6667, udp:53, udp:67]  # noqa: E501

        :param failsafe_outbound_host_ports: The failsafe_outbound_host_ports of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: list[OrgProjectcalicoCrdV1FelixConfigurationSpecFailsafeInboundHostPorts]
        """

        self._failsafe_outbound_host_ports = failsafe_outbound_host_ports

    @property
    def feature_detect_override(self):
        """Gets the feature_detect_override of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        FeatureDetectOverride is used to override the feature detection. Values are specified in a comma separated list with no spaces, example; \"SNATFullyRandom=true,MASQFullyRandom=false,RestoreSupportsLock=\". \"true\" or \"false\" will force the feature, empty or omitted values are auto-detected.  # noqa: E501

        :return: The feature_detect_override of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._feature_detect_override

    @feature_detect_override.setter
    def feature_detect_override(self, feature_detect_override):
        """Sets the feature_detect_override of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        FeatureDetectOverride is used to override the feature detection. Values are specified in a comma separated list with no spaces, example; \"SNATFullyRandom=true,MASQFullyRandom=false,RestoreSupportsLock=\". \"true\" or \"false\" will force the feature, empty or omitted values are auto-detected.  # noqa: E501

        :param feature_detect_override: The feature_detect_override of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._feature_detect_override = feature_detect_override

    @property
    def generic_xdp_enabled(self):
        """Gets the generic_xdp_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        GenericXDPEnabled enables Generic XDP so network cards that don't support XDP offload or driver modes can use XDP. This is not recommended since it doesn't provide better performance than iptables. [Default: false]  # noqa: E501

        :return: The generic_xdp_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._generic_xdp_enabled

    @generic_xdp_enabled.setter
    def generic_xdp_enabled(self, generic_xdp_enabled):
        """Sets the generic_xdp_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        GenericXDPEnabled enables Generic XDP so network cards that don't support XDP offload or driver modes can use XDP. This is not recommended since it doesn't provide better performance than iptables. [Default: false]  # noqa: E501

        :param generic_xdp_enabled: The generic_xdp_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._generic_xdp_enabled = generic_xdp_enabled

    @property
    def health_enabled(self):
        """Gets the health_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501


        :return: The health_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._health_enabled

    @health_enabled.setter
    def health_enabled(self, health_enabled):
        """Sets the health_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.


        :param health_enabled: The health_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._health_enabled = health_enabled

    @property
    def health_host(self):
        """Gets the health_host of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501


        :return: The health_host of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._health_host

    @health_host.setter
    def health_host(self, health_host):
        """Sets the health_host of this OrgProjectcalicoCrdV1FelixConfigurationSpec.


        :param health_host: The health_host of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._health_host = health_host

    @property
    def health_port(self):
        """Gets the health_port of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501


        :return: The health_port of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: int
        """
        return self._health_port

    @health_port.setter
    def health_port(self, health_port):
        """Sets the health_port of this OrgProjectcalicoCrdV1FelixConfigurationSpec.


        :param health_port: The health_port of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: int
        """

        self._health_port = health_port

    @property
    def interface_exclude(self):
        """Gets the interface_exclude of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        InterfaceExclude is a comma-separated list of interfaces that Felix should exclude when monitoring for host endpoints. The default value ensures that Felix ignores Kubernetes' IPVS dummy interface, which is used internally by kube-proxy. If you want to exclude multiple interface names using a single value, the list supports regular expressions. For regular expressions you must wrap the value with '/'. For example having values '/^kube/,veth1' will exclude all interfaces that begin with 'kube' and also the interface 'veth1'. [Default: kube-ipvs0]  # noqa: E501

        :return: The interface_exclude of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._interface_exclude

    @interface_exclude.setter
    def interface_exclude(self, interface_exclude):
        """Sets the interface_exclude of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        InterfaceExclude is a comma-separated list of interfaces that Felix should exclude when monitoring for host endpoints. The default value ensures that Felix ignores Kubernetes' IPVS dummy interface, which is used internally by kube-proxy. If you want to exclude multiple interface names using a single value, the list supports regular expressions. For regular expressions you must wrap the value with '/'. For example having values '/^kube/,veth1' will exclude all interfaces that begin with 'kube' and also the interface 'veth1'. [Default: kube-ipvs0]  # noqa: E501

        :param interface_exclude: The interface_exclude of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._interface_exclude = interface_exclude

    @property
    def interface_prefix(self):
        """Gets the interface_prefix of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        InterfacePrefix is the interface name prefix that identifies workload endpoints and so distinguishes them from host endpoint interfaces. Note: in environments other than bare metal, the orchestrators configure this appropriately. For example our Kubernetes and Docker integrations set the 'cali' value, and our OpenStack integration sets the 'tap' value. [Default: cali]  # noqa: E501

        :return: The interface_prefix of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._interface_prefix

    @interface_prefix.setter
    def interface_prefix(self, interface_prefix):
        """Sets the interface_prefix of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        InterfacePrefix is the interface name prefix that identifies workload endpoints and so distinguishes them from host endpoint interfaces. Note: in environments other than bare metal, the orchestrators configure this appropriately. For example our Kubernetes and Docker integrations set the 'cali' value, and our OpenStack integration sets the 'tap' value. [Default: cali]  # noqa: E501

        :param interface_prefix: The interface_prefix of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._interface_prefix = interface_prefix

    @property
    def interface_refresh_interval(self):
        """Gets the interface_refresh_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        InterfaceRefreshInterval is the period at which Felix rescans local interfaces to verify their state. The rescan can be disabled by setting the interval to 0.  # noqa: E501

        :return: The interface_refresh_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._interface_refresh_interval

    @interface_refresh_interval.setter
    def interface_refresh_interval(self, interface_refresh_interval):
        """Sets the interface_refresh_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        InterfaceRefreshInterval is the period at which Felix rescans local interfaces to verify their state. The rescan can be disabled by setting the interval to 0.  # noqa: E501

        :param interface_refresh_interval: The interface_refresh_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._interface_refresh_interval = interface_refresh_interval

    @property
    def ipip_enabled(self):
        """Gets the ipip_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501


        :return: The ipip_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._ipip_enabled

    @ipip_enabled.setter
    def ipip_enabled(self, ipip_enabled):
        """Sets the ipip_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.


        :param ipip_enabled: The ipip_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._ipip_enabled = ipip_enabled

    @property
    def ipip_mtu(self):
        """Gets the ipip_mtu of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        IPIPMTU is the MTU to set on the tunnel device. See Configuring MTU [Default: 1440]  # noqa: E501

        :return: The ipip_mtu of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: int
        """
        return self._ipip_mtu

    @ipip_mtu.setter
    def ipip_mtu(self, ipip_mtu):
        """Sets the ipip_mtu of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        IPIPMTU is the MTU to set on the tunnel device. See Configuring MTU [Default: 1440]  # noqa: E501

        :param ipip_mtu: The ipip_mtu of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: int
        """

        self._ipip_mtu = ipip_mtu

    @property
    def ipsets_refresh_interval(self):
        """Gets the ipsets_refresh_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        IpsetsRefreshInterval is the period at which Felix re-checks all iptables state to ensure that no other process has accidentally broken Calico's rules. Set to 0 to disable iptables refresh. [Default: 90s]  # noqa: E501

        :return: The ipsets_refresh_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._ipsets_refresh_interval

    @ipsets_refresh_interval.setter
    def ipsets_refresh_interval(self, ipsets_refresh_interval):
        """Sets the ipsets_refresh_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        IpsetsRefreshInterval is the period at which Felix re-checks all iptables state to ensure that no other process has accidentally broken Calico's rules. Set to 0 to disable iptables refresh. [Default: 90s]  # noqa: E501

        :param ipsets_refresh_interval: The ipsets_refresh_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._ipsets_refresh_interval = ipsets_refresh_interval

    @property
    def iptables_backend(self):
        """Gets the iptables_backend of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        IptablesBackend specifies which backend of iptables will be used. The default is legacy.  # noqa: E501

        :return: The iptables_backend of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._iptables_backend

    @iptables_backend.setter
    def iptables_backend(self, iptables_backend):
        """Sets the iptables_backend of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        IptablesBackend specifies which backend of iptables will be used. The default is legacy.  # noqa: E501

        :param iptables_backend: The iptables_backend of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._iptables_backend = iptables_backend

    @property
    def iptables_filter_allow_action(self):
        """Gets the iptables_filter_allow_action of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501


        :return: The iptables_filter_allow_action of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._iptables_filter_allow_action

    @iptables_filter_allow_action.setter
    def iptables_filter_allow_action(self, iptables_filter_allow_action):
        """Sets the iptables_filter_allow_action of this OrgProjectcalicoCrdV1FelixConfigurationSpec.


        :param iptables_filter_allow_action: The iptables_filter_allow_action of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._iptables_filter_allow_action = iptables_filter_allow_action

    @property
    def iptables_lock_file_path(self):
        """Gets the iptables_lock_file_path of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        IptablesLockFilePath is the location of the iptables lock file. You may need to change this if the lock file is not in its standard location (for example if you have mapped it into Felix's container at a different path). [Default: /run/xtables.lock]  # noqa: E501

        :return: The iptables_lock_file_path of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._iptables_lock_file_path

    @iptables_lock_file_path.setter
    def iptables_lock_file_path(self, iptables_lock_file_path):
        """Sets the iptables_lock_file_path of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        IptablesLockFilePath is the location of the iptables lock file. You may need to change this if the lock file is not in its standard location (for example if you have mapped it into Felix's container at a different path). [Default: /run/xtables.lock]  # noqa: E501

        :param iptables_lock_file_path: The iptables_lock_file_path of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._iptables_lock_file_path = iptables_lock_file_path

    @property
    def iptables_lock_probe_interval(self):
        """Gets the iptables_lock_probe_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        IptablesLockProbeInterval is the time that Felix will wait between attempts to acquire the iptables lock if it is not available. Lower values make Felix more responsive when the lock is contended, but use more CPU. [Default: 50ms]  # noqa: E501

        :return: The iptables_lock_probe_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._iptables_lock_probe_interval

    @iptables_lock_probe_interval.setter
    def iptables_lock_probe_interval(self, iptables_lock_probe_interval):
        """Sets the iptables_lock_probe_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        IptablesLockProbeInterval is the time that Felix will wait between attempts to acquire the iptables lock if it is not available. Lower values make Felix more responsive when the lock is contended, but use more CPU. [Default: 50ms]  # noqa: E501

        :param iptables_lock_probe_interval: The iptables_lock_probe_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._iptables_lock_probe_interval = iptables_lock_probe_interval

    @property
    def iptables_lock_timeout(self):
        """Gets the iptables_lock_timeout of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        IptablesLockTimeout is the time that Felix will wait for the iptables lock, or 0, to disable. To use this feature, Felix must share the iptables lock file with all other processes that also take the lock. When running Felix inside a container, this requires the /run directory of the host to be mounted into the calico/node or calico/felix container. [Default: 0s disabled]  # noqa: E501

        :return: The iptables_lock_timeout of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._iptables_lock_timeout

    @iptables_lock_timeout.setter
    def iptables_lock_timeout(self, iptables_lock_timeout):
        """Sets the iptables_lock_timeout of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        IptablesLockTimeout is the time that Felix will wait for the iptables lock, or 0, to disable. To use this feature, Felix must share the iptables lock file with all other processes that also take the lock. When running Felix inside a container, this requires the /run directory of the host to be mounted into the calico/node or calico/felix container. [Default: 0s disabled]  # noqa: E501

        :param iptables_lock_timeout: The iptables_lock_timeout of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._iptables_lock_timeout = iptables_lock_timeout

    @property
    def iptables_mangle_allow_action(self):
        """Gets the iptables_mangle_allow_action of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501


        :return: The iptables_mangle_allow_action of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._iptables_mangle_allow_action

    @iptables_mangle_allow_action.setter
    def iptables_mangle_allow_action(self, iptables_mangle_allow_action):
        """Sets the iptables_mangle_allow_action of this OrgProjectcalicoCrdV1FelixConfigurationSpec.


        :param iptables_mangle_allow_action: The iptables_mangle_allow_action of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._iptables_mangle_allow_action = iptables_mangle_allow_action

    @property
    def iptables_mark_mask(self):
        """Gets the iptables_mark_mask of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        IptablesMarkMask is the mask that Felix selects its IPTables Mark bits from. Should be a 32 bit hexadecimal number with at least 8 bits set, none of which clash with any other mark bits in use on the system. [Default: 0xff000000]  # noqa: E501

        :return: The iptables_mark_mask of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: int
        """
        return self._iptables_mark_mask

    @iptables_mark_mask.setter
    def iptables_mark_mask(self, iptables_mark_mask):
        """Sets the iptables_mark_mask of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        IptablesMarkMask is the mask that Felix selects its IPTables Mark bits from. Should be a 32 bit hexadecimal number with at least 8 bits set, none of which clash with any other mark bits in use on the system. [Default: 0xff000000]  # noqa: E501

        :param iptables_mark_mask: The iptables_mark_mask of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: int
        """

        self._iptables_mark_mask = iptables_mark_mask

    @property
    def iptables_nat_outgoing_interface_filter(self):
        """Gets the iptables_nat_outgoing_interface_filter of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501


        :return: The iptables_nat_outgoing_interface_filter of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._iptables_nat_outgoing_interface_filter

    @iptables_nat_outgoing_interface_filter.setter
    def iptables_nat_outgoing_interface_filter(self, iptables_nat_outgoing_interface_filter):
        """Sets the iptables_nat_outgoing_interface_filter of this OrgProjectcalicoCrdV1FelixConfigurationSpec.


        :param iptables_nat_outgoing_interface_filter: The iptables_nat_outgoing_interface_filter of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._iptables_nat_outgoing_interface_filter = iptables_nat_outgoing_interface_filter

    @property
    def iptables_post_write_check_interval(self):
        """Gets the iptables_post_write_check_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        IptablesPostWriteCheckInterval is the period after Felix has done a write to the dataplane that it schedules an extra read back in order to check the write was not clobbered by another process. This should only occur if another application on the system doesn't respect the iptables lock. [Default: 1s]  # noqa: E501

        :return: The iptables_post_write_check_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._iptables_post_write_check_interval

    @iptables_post_write_check_interval.setter
    def iptables_post_write_check_interval(self, iptables_post_write_check_interval):
        """Sets the iptables_post_write_check_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        IptablesPostWriteCheckInterval is the period after Felix has done a write to the dataplane that it schedules an extra read back in order to check the write was not clobbered by another process. This should only occur if another application on the system doesn't respect the iptables lock. [Default: 1s]  # noqa: E501

        :param iptables_post_write_check_interval: The iptables_post_write_check_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._iptables_post_write_check_interval = iptables_post_write_check_interval

    @property
    def iptables_refresh_interval(self):
        """Gets the iptables_refresh_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        IptablesRefreshInterval is the period at which Felix re-checks the IP sets in the dataplane to ensure that no other process has accidentally broken Calico's rules. Set to 0 to disable IP sets refresh. Note: the default for this value is lower than the other refresh intervals as a workaround for a Linux kernel bug that was fixed in kernel version 4.11. If you are using v4.11 or greater you may want to set this to, a higher value to reduce Felix CPU usage. [Default: 10s]  # noqa: E501

        :return: The iptables_refresh_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._iptables_refresh_interval

    @iptables_refresh_interval.setter
    def iptables_refresh_interval(self, iptables_refresh_interval):
        """Sets the iptables_refresh_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        IptablesRefreshInterval is the period at which Felix re-checks the IP sets in the dataplane to ensure that no other process has accidentally broken Calico's rules. Set to 0 to disable IP sets refresh. Note: the default for this value is lower than the other refresh intervals as a workaround for a Linux kernel bug that was fixed in kernel version 4.11. If you are using v4.11 or greater you may want to set this to, a higher value to reduce Felix CPU usage. [Default: 10s]  # noqa: E501

        :param iptables_refresh_interval: The iptables_refresh_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._iptables_refresh_interval = iptables_refresh_interval

    @property
    def ipv6_support(self):
        """Gets the ipv6_support of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501


        :return: The ipv6_support of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._ipv6_support

    @ipv6_support.setter
    def ipv6_support(self, ipv6_support):
        """Sets the ipv6_support of this OrgProjectcalicoCrdV1FelixConfigurationSpec.


        :param ipv6_support: The ipv6_support of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._ipv6_support = ipv6_support

    @property
    def kube_node_port_ranges(self):
        """Gets the kube_node_port_ranges of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        KubeNodePortRanges holds list of port ranges used for service node ports. Only used if felix detects kube-proxy running in ipvs mode. Felix uses these ranges to separate host and workload traffic. [Default: 30000:32767].  # noqa: E501

        :return: The kube_node_port_ranges of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: list[object]
        """
        return self._kube_node_port_ranges

    @kube_node_port_ranges.setter
    def kube_node_port_ranges(self, kube_node_port_ranges):
        """Sets the kube_node_port_ranges of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        KubeNodePortRanges holds list of port ranges used for service node ports. Only used if felix detects kube-proxy running in ipvs mode. Felix uses these ranges to separate host and workload traffic. [Default: 30000:32767].  # noqa: E501

        :param kube_node_port_ranges: The kube_node_port_ranges of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: list[object]
        """

        self._kube_node_port_ranges = kube_node_port_ranges

    @property
    def log_file_path(self):
        """Gets the log_file_path of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        LogFilePath is the full path to the Felix log. Set to none to disable file logging. [Default: /var/log/calico/felix.log]  # noqa: E501

        :return: The log_file_path of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._log_file_path

    @log_file_path.setter
    def log_file_path(self, log_file_path):
        """Sets the log_file_path of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        LogFilePath is the full path to the Felix log. Set to none to disable file logging. [Default: /var/log/calico/felix.log]  # noqa: E501

        :param log_file_path: The log_file_path of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._log_file_path = log_file_path

    @property
    def log_prefix(self):
        """Gets the log_prefix of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        LogPrefix is the log prefix that Felix uses when rendering LOG rules. [Default: calico-packet]  # noqa: E501

        :return: The log_prefix of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._log_prefix

    @log_prefix.setter
    def log_prefix(self, log_prefix):
        """Sets the log_prefix of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        LogPrefix is the log prefix that Felix uses when rendering LOG rules. [Default: calico-packet]  # noqa: E501

        :param log_prefix: The log_prefix of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._log_prefix = log_prefix

    @property
    def log_severity_file(self):
        """Gets the log_severity_file of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        LogSeverityFile is the log severity above which logs are sent to the log file. [Default: Info]  # noqa: E501

        :return: The log_severity_file of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._log_severity_file

    @log_severity_file.setter
    def log_severity_file(self, log_severity_file):
        """Sets the log_severity_file of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        LogSeverityFile is the log severity above which logs are sent to the log file. [Default: Info]  # noqa: E501

        :param log_severity_file: The log_severity_file of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._log_severity_file = log_severity_file

    @property
    def log_severity_screen(self):
        """Gets the log_severity_screen of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        LogSeverityScreen is the log severity above which logs are sent to the stdout. [Default: Info]  # noqa: E501

        :return: The log_severity_screen of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._log_severity_screen

    @log_severity_screen.setter
    def log_severity_screen(self, log_severity_screen):
        """Sets the log_severity_screen of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        LogSeverityScreen is the log severity above which logs are sent to the stdout. [Default: Info]  # noqa: E501

        :param log_severity_screen: The log_severity_screen of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._log_severity_screen = log_severity_screen

    @property
    def log_severity_sys(self):
        """Gets the log_severity_sys of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        LogSeveritySys is the log severity above which logs are sent to the syslog. Set to None for no logging to syslog. [Default: Info]  # noqa: E501

        :return: The log_severity_sys of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._log_severity_sys

    @log_severity_sys.setter
    def log_severity_sys(self, log_severity_sys):
        """Sets the log_severity_sys of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        LogSeveritySys is the log severity above which logs are sent to the syslog. Set to None for no logging to syslog. [Default: Info]  # noqa: E501

        :param log_severity_sys: The log_severity_sys of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._log_severity_sys = log_severity_sys

    @property
    def max_ipset_size(self):
        """Gets the max_ipset_size of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501


        :return: The max_ipset_size of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: int
        """
        return self._max_ipset_size

    @max_ipset_size.setter
    def max_ipset_size(self, max_ipset_size):
        """Sets the max_ipset_size of this OrgProjectcalicoCrdV1FelixConfigurationSpec.


        :param max_ipset_size: The max_ipset_size of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: int
        """

        self._max_ipset_size = max_ipset_size

    @property
    def metadata_addr(self):
        """Gets the metadata_addr of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        MetadataAddr is the IP address or domain name of the server that can answer VM queries for cloud-init metadata. In OpenStack, this corresponds to the machine running nova-api (or in Ubuntu, nova-api-metadata). A value of none (case insensitive) means that Felix should not set up any NAT rule for the metadata path. [Default: 127.0.0.1]  # noqa: E501

        :return: The metadata_addr of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._metadata_addr

    @metadata_addr.setter
    def metadata_addr(self, metadata_addr):
        """Sets the metadata_addr of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        MetadataAddr is the IP address or domain name of the server that can answer VM queries for cloud-init metadata. In OpenStack, this corresponds to the machine running nova-api (or in Ubuntu, nova-api-metadata). A value of none (case insensitive) means that Felix should not set up any NAT rule for the metadata path. [Default: 127.0.0.1]  # noqa: E501

        :param metadata_addr: The metadata_addr of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._metadata_addr = metadata_addr

    @property
    def metadata_port(self):
        """Gets the metadata_port of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        MetadataPort is the port of the metadata server. This, combined with global.MetadataAddr (if not 'None'), is used to set up a NAT rule, from 169.254.169.254:80 to MetadataAddr:MetadataPort. In most cases this should not need to be changed [Default: 8775].  # noqa: E501

        :return: The metadata_port of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: int
        """
        return self._metadata_port

    @metadata_port.setter
    def metadata_port(self, metadata_port):
        """Sets the metadata_port of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        MetadataPort is the port of the metadata server. This, combined with global.MetadataAddr (if not 'None'), is used to set up a NAT rule, from 169.254.169.254:80 to MetadataAddr:MetadataPort. In most cases this should not need to be changed [Default: 8775].  # noqa: E501

        :param metadata_port: The metadata_port of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: int
        """

        self._metadata_port = metadata_port

    @property
    def mtu_iface_pattern(self):
        """Gets the mtu_iface_pattern of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        MTUIfacePattern is a regular expression that controls which interfaces Felix should scan in order to calculate the host's MTU. This should not match workload interfaces (usually named cali...).  # noqa: E501

        :return: The mtu_iface_pattern of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._mtu_iface_pattern

    @mtu_iface_pattern.setter
    def mtu_iface_pattern(self, mtu_iface_pattern):
        """Sets the mtu_iface_pattern of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        MTUIfacePattern is a regular expression that controls which interfaces Felix should scan in order to calculate the host's MTU. This should not match workload interfaces (usually named cali...).  # noqa: E501

        :param mtu_iface_pattern: The mtu_iface_pattern of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._mtu_iface_pattern = mtu_iface_pattern

    @property
    def nat_outgoing_address(self):
        """Gets the nat_outgoing_address of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        NATOutgoingAddress specifies an address to use when performing source NAT for traffic in a natOutgoing pool that is leaving the network. By default the address used is an address on the interface the traffic is leaving on (ie it uses the iptables MASQUERADE target)  # noqa: E501

        :return: The nat_outgoing_address of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._nat_outgoing_address

    @nat_outgoing_address.setter
    def nat_outgoing_address(self, nat_outgoing_address):
        """Sets the nat_outgoing_address of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        NATOutgoingAddress specifies an address to use when performing source NAT for traffic in a natOutgoing pool that is leaving the network. By default the address used is an address on the interface the traffic is leaving on (ie it uses the iptables MASQUERADE target)  # noqa: E501

        :param nat_outgoing_address: The nat_outgoing_address of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._nat_outgoing_address = nat_outgoing_address

    @property
    def nat_port_range(self):
        """Gets the nat_port_range of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        NATPortRange specifies the range of ports that is used for port mapping when doing outgoing NAT. When unset the default behavior of the network stack is used.  # noqa: E501

        :return: The nat_port_range of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: object
        """
        return self._nat_port_range

    @nat_port_range.setter
    def nat_port_range(self, nat_port_range):
        """Sets the nat_port_range of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        NATPortRange specifies the range of ports that is used for port mapping when doing outgoing NAT. When unset the default behavior of the network stack is used.  # noqa: E501

        :param nat_port_range: The nat_port_range of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: object
        """

        self._nat_port_range = nat_port_range

    @property
    def netlink_timeout(self):
        """Gets the netlink_timeout of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501


        :return: The netlink_timeout of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._netlink_timeout

    @netlink_timeout.setter
    def netlink_timeout(self, netlink_timeout):
        """Sets the netlink_timeout of this OrgProjectcalicoCrdV1FelixConfigurationSpec.


        :param netlink_timeout: The netlink_timeout of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._netlink_timeout = netlink_timeout

    @property
    def openstack_region(self):
        """Gets the openstack_region of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        OpenstackRegion is the name of the region that a particular Felix belongs to. In a multi-region Calico/OpenStack deployment, this must be configured somehow for each Felix (here in the datamodel, or in felix.cfg or the environment on each compute node), and must match the [calico] openstack_region value configured in neutron.conf on each node. [Default: Empty]  # noqa: E501

        :return: The openstack_region of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._openstack_region

    @openstack_region.setter
    def openstack_region(self, openstack_region):
        """Sets the openstack_region of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        OpenstackRegion is the name of the region that a particular Felix belongs to. In a multi-region Calico/OpenStack deployment, this must be configured somehow for each Felix (here in the datamodel, or in felix.cfg or the environment on each compute node), and must match the [calico] openstack_region value configured in neutron.conf on each node. [Default: Empty]  # noqa: E501

        :param openstack_region: The openstack_region of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._openstack_region = openstack_region

    @property
    def policy_sync_path_prefix(self):
        """Gets the policy_sync_path_prefix of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        PolicySyncPathPrefix is used to by Felix to communicate policy changes to external services, like Application layer policy. [Default: Empty]  # noqa: E501

        :return: The policy_sync_path_prefix of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._policy_sync_path_prefix

    @policy_sync_path_prefix.setter
    def policy_sync_path_prefix(self, policy_sync_path_prefix):
        """Sets the policy_sync_path_prefix of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        PolicySyncPathPrefix is used to by Felix to communicate policy changes to external services, like Application layer policy. [Default: Empty]  # noqa: E501

        :param policy_sync_path_prefix: The policy_sync_path_prefix of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._policy_sync_path_prefix = policy_sync_path_prefix

    @property
    def prometheus_go_metrics_enabled(self):
        """Gets the prometheus_go_metrics_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        PrometheusGoMetricsEnabled disables Go runtime metrics collection, which the Prometheus client does by default, when set to false. This reduces the number of metrics reported, reducing Prometheus load. [Default: true]  # noqa: E501

        :return: The prometheus_go_metrics_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._prometheus_go_metrics_enabled

    @prometheus_go_metrics_enabled.setter
    def prometheus_go_metrics_enabled(self, prometheus_go_metrics_enabled):
        """Sets the prometheus_go_metrics_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        PrometheusGoMetricsEnabled disables Go runtime metrics collection, which the Prometheus client does by default, when set to false. This reduces the number of metrics reported, reducing Prometheus load. [Default: true]  # noqa: E501

        :param prometheus_go_metrics_enabled: The prometheus_go_metrics_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._prometheus_go_metrics_enabled = prometheus_go_metrics_enabled

    @property
    def prometheus_metrics_enabled(self):
        """Gets the prometheus_metrics_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        PrometheusMetricsEnabled enables the Prometheus metrics server in Felix if set to true. [Default: false]  # noqa: E501

        :return: The prometheus_metrics_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._prometheus_metrics_enabled

    @prometheus_metrics_enabled.setter
    def prometheus_metrics_enabled(self, prometheus_metrics_enabled):
        """Sets the prometheus_metrics_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        PrometheusMetricsEnabled enables the Prometheus metrics server in Felix if set to true. [Default: false]  # noqa: E501

        :param prometheus_metrics_enabled: The prometheus_metrics_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._prometheus_metrics_enabled = prometheus_metrics_enabled

    @property
    def prometheus_metrics_host(self):
        """Gets the prometheus_metrics_host of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        PrometheusMetricsHost is the host that the Prometheus metrics server should bind to. [Default: empty]  # noqa: E501

        :return: The prometheus_metrics_host of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._prometheus_metrics_host

    @prometheus_metrics_host.setter
    def prometheus_metrics_host(self, prometheus_metrics_host):
        """Sets the prometheus_metrics_host of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        PrometheusMetricsHost is the host that the Prometheus metrics server should bind to. [Default: empty]  # noqa: E501

        :param prometheus_metrics_host: The prometheus_metrics_host of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._prometheus_metrics_host = prometheus_metrics_host

    @property
    def prometheus_metrics_port(self):
        """Gets the prometheus_metrics_port of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        PrometheusMetricsPort is the TCP port that the Prometheus metrics server should bind to. [Default: 9091]  # noqa: E501

        :return: The prometheus_metrics_port of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: int
        """
        return self._prometheus_metrics_port

    @prometheus_metrics_port.setter
    def prometheus_metrics_port(self, prometheus_metrics_port):
        """Sets the prometheus_metrics_port of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        PrometheusMetricsPort is the TCP port that the Prometheus metrics server should bind to. [Default: 9091]  # noqa: E501

        :param prometheus_metrics_port: The prometheus_metrics_port of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: int
        """

        self._prometheus_metrics_port = prometheus_metrics_port

    @property
    def prometheus_process_metrics_enabled(self):
        """Gets the prometheus_process_metrics_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        PrometheusProcessMetricsEnabled disables process metrics collection, which the Prometheus client does by default, when set to false. This reduces the number of metrics reported, reducing Prometheus load. [Default: true]  # noqa: E501

        :return: The prometheus_process_metrics_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._prometheus_process_metrics_enabled

    @prometheus_process_metrics_enabled.setter
    def prometheus_process_metrics_enabled(self, prometheus_process_metrics_enabled):
        """Sets the prometheus_process_metrics_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        PrometheusProcessMetricsEnabled disables process metrics collection, which the Prometheus client does by default, when set to false. This reduces the number of metrics reported, reducing Prometheus load. [Default: true]  # noqa: E501

        :param prometheus_process_metrics_enabled: The prometheus_process_metrics_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._prometheus_process_metrics_enabled = prometheus_process_metrics_enabled

    @property
    def remove_external_routes(self):
        """Gets the remove_external_routes of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        Whether or not to remove device routes that have not been programmed by Felix. Disabling this will allow external applications to also add device routes. This is enabled by default which means we will remove externally added routes.  # noqa: E501

        :return: The remove_external_routes of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._remove_external_routes

    @remove_external_routes.setter
    def remove_external_routes(self, remove_external_routes):
        """Sets the remove_external_routes of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        Whether or not to remove device routes that have not been programmed by Felix. Disabling this will allow external applications to also add device routes. This is enabled by default which means we will remove externally added routes.  # noqa: E501

        :param remove_external_routes: The remove_external_routes of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._remove_external_routes = remove_external_routes

    @property
    def reporting_interval(self):
        """Gets the reporting_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        ReportingInterval is the interval at which Felix reports its status into the datastore or 0 to disable. Must be non-zero in OpenStack deployments. [Default: 30s]  # noqa: E501

        :return: The reporting_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._reporting_interval

    @reporting_interval.setter
    def reporting_interval(self, reporting_interval):
        """Sets the reporting_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        ReportingInterval is the interval at which Felix reports its status into the datastore or 0 to disable. Must be non-zero in OpenStack deployments. [Default: 30s]  # noqa: E501

        :param reporting_interval: The reporting_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._reporting_interval = reporting_interval

    @property
    def reporting_ttl(self):
        """Gets the reporting_ttl of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        ReportingTTL is the time-to-live setting for process-wide status reports. [Default: 90s]  # noqa: E501

        :return: The reporting_ttl of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._reporting_ttl

    @reporting_ttl.setter
    def reporting_ttl(self, reporting_ttl):
        """Sets the reporting_ttl of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        ReportingTTL is the time-to-live setting for process-wide status reports. [Default: 90s]  # noqa: E501

        :param reporting_ttl: The reporting_ttl of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._reporting_ttl = reporting_ttl

    @property
    def route_refresh_interval(self):
        """Gets the route_refresh_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        RouteRefreshInterval is the period at which Felix re-checks the routes in the dataplane to ensure that no other process has accidentally broken Calico's rules. Set to 0 to disable route refresh. [Default: 90s]  # noqa: E501

        :return: The route_refresh_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._route_refresh_interval

    @route_refresh_interval.setter
    def route_refresh_interval(self, route_refresh_interval):
        """Sets the route_refresh_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        RouteRefreshInterval is the period at which Felix re-checks the routes in the dataplane to ensure that no other process has accidentally broken Calico's rules. Set to 0 to disable route refresh. [Default: 90s]  # noqa: E501

        :param route_refresh_interval: The route_refresh_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._route_refresh_interval = route_refresh_interval

    @property
    def route_source(self):
        """Gets the route_source of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        RouteSource configures where Felix gets its routing information. - WorkloadIPs: use workload endpoints to construct routes. - CalicoIPAM: the default - use IPAM data to construct routes.  # noqa: E501

        :return: The route_source of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._route_source

    @route_source.setter
    def route_source(self, route_source):
        """Sets the route_source of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        RouteSource configures where Felix gets its routing information. - WorkloadIPs: use workload endpoints to construct routes. - CalicoIPAM: the default - use IPAM data to construct routes.  # noqa: E501

        :param route_source: The route_source of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._route_source = route_source

    @property
    def route_table_range(self):
        """Gets the route_table_range of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501


        :return: The route_table_range of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: OrgProjectcalicoCrdV1FelixConfigurationSpecRouteTableRange
        """
        return self._route_table_range

    @route_table_range.setter
    def route_table_range(self, route_table_range):
        """Sets the route_table_range of this OrgProjectcalicoCrdV1FelixConfigurationSpec.


        :param route_table_range: The route_table_range of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: OrgProjectcalicoCrdV1FelixConfigurationSpecRouteTableRange
        """

        self._route_table_range = route_table_range

    @property
    def service_loop_prevention(self):
        """Gets the service_loop_prevention of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        When service IP advertisement is enabled, prevent routing loops to service IPs that are not in use, by dropping or rejecting packets that do not get DNAT'd by kube-proxy. Unless set to \"Disabled\", in which case such routing loops continue to be allowed. [Default: Drop]  # noqa: E501

        :return: The service_loop_prevention of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._service_loop_prevention

    @service_loop_prevention.setter
    def service_loop_prevention(self, service_loop_prevention):
        """Sets the service_loop_prevention of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        When service IP advertisement is enabled, prevent routing loops to service IPs that are not in use, by dropping or rejecting packets that do not get DNAT'd by kube-proxy. Unless set to \"Disabled\", in which case such routing loops continue to be allowed. [Default: Drop]  # noqa: E501

        :param service_loop_prevention: The service_loop_prevention of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._service_loop_prevention = service_loop_prevention

    @property
    def sidecar_acceleration_enabled(self):
        """Gets the sidecar_acceleration_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        SidecarAccelerationEnabled enables experimental sidecar acceleration [Default: false]  # noqa: E501

        :return: The sidecar_acceleration_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._sidecar_acceleration_enabled

    @sidecar_acceleration_enabled.setter
    def sidecar_acceleration_enabled(self, sidecar_acceleration_enabled):
        """Sets the sidecar_acceleration_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        SidecarAccelerationEnabled enables experimental sidecar acceleration [Default: false]  # noqa: E501

        :param sidecar_acceleration_enabled: The sidecar_acceleration_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._sidecar_acceleration_enabled = sidecar_acceleration_enabled

    @property
    def usage_reporting_enabled(self):
        """Gets the usage_reporting_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        UsageReportingEnabled reports anonymous Calico version number and cluster size to projectcalico.org. Logs warnings returned by the usage server. For example, if a significant security vulnerability has been discovered in the version of Calico being used. [Default: true]  # noqa: E501

        :return: The usage_reporting_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._usage_reporting_enabled

    @usage_reporting_enabled.setter
    def usage_reporting_enabled(self, usage_reporting_enabled):
        """Sets the usage_reporting_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        UsageReportingEnabled reports anonymous Calico version number and cluster size to projectcalico.org. Logs warnings returned by the usage server. For example, if a significant security vulnerability has been discovered in the version of Calico being used. [Default: true]  # noqa: E501

        :param usage_reporting_enabled: The usage_reporting_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._usage_reporting_enabled = usage_reporting_enabled

    @property
    def usage_reporting_initial_delay(self):
        """Gets the usage_reporting_initial_delay of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        UsageReportingInitialDelay controls the minimum delay before Felix makes a report. [Default: 300s]  # noqa: E501

        :return: The usage_reporting_initial_delay of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._usage_reporting_initial_delay

    @usage_reporting_initial_delay.setter
    def usage_reporting_initial_delay(self, usage_reporting_initial_delay):
        """Sets the usage_reporting_initial_delay of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        UsageReportingInitialDelay controls the minimum delay before Felix makes a report. [Default: 300s]  # noqa: E501

        :param usage_reporting_initial_delay: The usage_reporting_initial_delay of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._usage_reporting_initial_delay = usage_reporting_initial_delay

    @property
    def usage_reporting_interval(self):
        """Gets the usage_reporting_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        UsageReportingInterval controls the interval at which Felix makes reports. [Default: 86400s]  # noqa: E501

        :return: The usage_reporting_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._usage_reporting_interval

    @usage_reporting_interval.setter
    def usage_reporting_interval(self, usage_reporting_interval):
        """Sets the usage_reporting_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        UsageReportingInterval controls the interval at which Felix makes reports. [Default: 86400s]  # noqa: E501

        :param usage_reporting_interval: The usage_reporting_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._usage_reporting_interval = usage_reporting_interval

    @property
    def use_internal_dataplane_driver(self):
        """Gets the use_internal_dataplane_driver of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501


        :return: The use_internal_dataplane_driver of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._use_internal_dataplane_driver

    @use_internal_dataplane_driver.setter
    def use_internal_dataplane_driver(self, use_internal_dataplane_driver):
        """Sets the use_internal_dataplane_driver of this OrgProjectcalicoCrdV1FelixConfigurationSpec.


        :param use_internal_dataplane_driver: The use_internal_dataplane_driver of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._use_internal_dataplane_driver = use_internal_dataplane_driver

    @property
    def vxlan_enabled(self):
        """Gets the vxlan_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501


        :return: The vxlan_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._vxlan_enabled

    @vxlan_enabled.setter
    def vxlan_enabled(self, vxlan_enabled):
        """Sets the vxlan_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.


        :param vxlan_enabled: The vxlan_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._vxlan_enabled = vxlan_enabled

    @property
    def vxlan_mtu(self):
        """Gets the vxlan_mtu of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        VXLANMTU is the MTU to set on the tunnel device. See Configuring MTU [Default: 1440]  # noqa: E501

        :return: The vxlan_mtu of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: int
        """
        return self._vxlan_mtu

    @vxlan_mtu.setter
    def vxlan_mtu(self, vxlan_mtu):
        """Sets the vxlan_mtu of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        VXLANMTU is the MTU to set on the tunnel device. See Configuring MTU [Default: 1440]  # noqa: E501

        :param vxlan_mtu: The vxlan_mtu of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: int
        """

        self._vxlan_mtu = vxlan_mtu

    @property
    def vxlan_port(self):
        """Gets the vxlan_port of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501


        :return: The vxlan_port of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: int
        """
        return self._vxlan_port

    @vxlan_port.setter
    def vxlan_port(self, vxlan_port):
        """Sets the vxlan_port of this OrgProjectcalicoCrdV1FelixConfigurationSpec.


        :param vxlan_port: The vxlan_port of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: int
        """

        self._vxlan_port = vxlan_port

    @property
    def vxlan_vni(self):
        """Gets the vxlan_vni of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501


        :return: The vxlan_vni of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: int
        """
        return self._vxlan_vni

    @vxlan_vni.setter
    def vxlan_vni(self, vxlan_vni):
        """Sets the vxlan_vni of this OrgProjectcalicoCrdV1FelixConfigurationSpec.


        :param vxlan_vni: The vxlan_vni of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: int
        """

        self._vxlan_vni = vxlan_vni

    @property
    def wireguard_enabled(self):
        """Gets the wireguard_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        WireguardEnabled controls whether Wireguard is enabled. [Default: false]  # noqa: E501

        :return: The wireguard_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._wireguard_enabled

    @wireguard_enabled.setter
    def wireguard_enabled(self, wireguard_enabled):
        """Sets the wireguard_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        WireguardEnabled controls whether Wireguard is enabled. [Default: false]  # noqa: E501

        :param wireguard_enabled: The wireguard_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._wireguard_enabled = wireguard_enabled

    @property
    def wireguard_interface_name(self):
        """Gets the wireguard_interface_name of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        WireguardInterfaceName specifies the name to use for the Wireguard interface. [Default: wg.calico]  # noqa: E501

        :return: The wireguard_interface_name of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._wireguard_interface_name

    @wireguard_interface_name.setter
    def wireguard_interface_name(self, wireguard_interface_name):
        """Sets the wireguard_interface_name of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        WireguardInterfaceName specifies the name to use for the Wireguard interface. [Default: wg.calico]  # noqa: E501

        :param wireguard_interface_name: The wireguard_interface_name of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._wireguard_interface_name = wireguard_interface_name

    @property
    def wireguard_listening_port(self):
        """Gets the wireguard_listening_port of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        WireguardListeningPort controls the listening port used by Wireguard. [Default: 51820]  # noqa: E501

        :return: The wireguard_listening_port of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: int
        """
        return self._wireguard_listening_port

    @wireguard_listening_port.setter
    def wireguard_listening_port(self, wireguard_listening_port):
        """Sets the wireguard_listening_port of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        WireguardListeningPort controls the listening port used by Wireguard. [Default: 51820]  # noqa: E501

        :param wireguard_listening_port: The wireguard_listening_port of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: int
        """

        self._wireguard_listening_port = wireguard_listening_port

    @property
    def wireguard_mtu(self):
        """Gets the wireguard_mtu of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        WireguardMTU controls the MTU on the Wireguard interface. See Configuring MTU [Default: 1420]  # noqa: E501

        :return: The wireguard_mtu of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: int
        """
        return self._wireguard_mtu

    @wireguard_mtu.setter
    def wireguard_mtu(self, wireguard_mtu):
        """Sets the wireguard_mtu of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        WireguardMTU controls the MTU on the Wireguard interface. See Configuring MTU [Default: 1420]  # noqa: E501

        :param wireguard_mtu: The wireguard_mtu of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: int
        """

        self._wireguard_mtu = wireguard_mtu

    @property
    def wireguard_routing_rule_priority(self):
        """Gets the wireguard_routing_rule_priority of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        WireguardRoutingRulePriority controls the priority value to use for the Wireguard routing rule. [Default: 99]  # noqa: E501

        :return: The wireguard_routing_rule_priority of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: int
        """
        return self._wireguard_routing_rule_priority

    @wireguard_routing_rule_priority.setter
    def wireguard_routing_rule_priority(self, wireguard_routing_rule_priority):
        """Sets the wireguard_routing_rule_priority of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        WireguardRoutingRulePriority controls the priority value to use for the Wireguard routing rule. [Default: 99]  # noqa: E501

        :param wireguard_routing_rule_priority: The wireguard_routing_rule_priority of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: int
        """

        self._wireguard_routing_rule_priority = wireguard_routing_rule_priority

    @property
    def xdp_enabled(self):
        """Gets the xdp_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        XDPEnabled enables XDP acceleration for suitable untracked incoming deny rules. [Default: true]  # noqa: E501

        :return: The xdp_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._xdp_enabled

    @xdp_enabled.setter
    def xdp_enabled(self, xdp_enabled):
        """Sets the xdp_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        XDPEnabled enables XDP acceleration for suitable untracked incoming deny rules. [Default: true]  # noqa: E501

        :param xdp_enabled: The xdp_enabled of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: bool
        """

        self._xdp_enabled = xdp_enabled

    @property
    def xdp_refresh_interval(self):
        """Gets the xdp_refresh_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501

        XDPRefreshInterval is the period at which Felix re-checks all XDP state to ensure that no other process has accidentally broken Calico's BPF maps or attached programs. Set to 0 to disable XDP refresh. [Default: 90s]  # noqa: E501

        :return: The xdp_refresh_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :rtype: str
        """
        return self._xdp_refresh_interval

    @xdp_refresh_interval.setter
    def xdp_refresh_interval(self, xdp_refresh_interval):
        """Sets the xdp_refresh_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.

        XDPRefreshInterval is the period at which Felix re-checks all XDP state to ensure that no other process has accidentally broken Calico's BPF maps or attached programs. Set to 0 to disable XDP refresh. [Default: 90s]  # noqa: E501

        :param xdp_refresh_interval: The xdp_refresh_interval of this OrgProjectcalicoCrdV1FelixConfigurationSpec.  # noqa: E501
        :type: str
        """

        self._xdp_refresh_interval = xdp_refresh_interval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgProjectcalicoCrdV1FelixConfigurationSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrgProjectcalicoCrdV1FelixConfigurationSpec):
            return True

        return self.to_dict() != other.to_dict()
