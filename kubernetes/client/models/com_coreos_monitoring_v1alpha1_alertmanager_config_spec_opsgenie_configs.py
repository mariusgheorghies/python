# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_key': 'ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecApiKey',
        'api_url': 'str',
        'description': 'str',
        'details': 'list[ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecHeaders]',
        'http_config': 'ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecHttpConfig',
        'message': 'str',
        'note': 'str',
        'priority': 'str',
        'responders': 'list[ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecResponders]',
        'send_resolved': 'bool',
        'source': 'str',
        'tags': 'str'
    }

    attribute_map = {
        'api_key': 'apiKey',
        'api_url': 'apiURL',
        'description': 'description',
        'details': 'details',
        'http_config': 'httpConfig',
        'message': 'message',
        'note': 'note',
        'priority': 'priority',
        'responders': 'responders',
        'send_resolved': 'sendResolved',
        'source': 'source',
        'tags': 'tags'
    }

    def __init__(self, api_key=None, api_url=None, description=None, details=None, http_config=None, message=None, note=None, priority=None, responders=None, send_resolved=None, source=None, tags=None, local_vars_configuration=None):  # noqa: E501
        """ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_key = None
        self._api_url = None
        self._description = None
        self._details = None
        self._http_config = None
        self._message = None
        self._note = None
        self._priority = None
        self._responders = None
        self._send_resolved = None
        self._source = None
        self._tags = None
        self.discriminator = None

        if api_key is not None:
            self.api_key = api_key
        if api_url is not None:
            self.api_url = api_url
        if description is not None:
            self.description = description
        if details is not None:
            self.details = details
        if http_config is not None:
            self.http_config = http_config
        if message is not None:
            self.message = message
        if note is not None:
            self.note = note
        if priority is not None:
            self.priority = priority
        if responders is not None:
            self.responders = responders
        if send_resolved is not None:
            self.send_resolved = send_resolved
        if source is not None:
            self.source = source
        if tags is not None:
            self.tags = tags

    @property
    def api_key(self):
        """Gets the api_key of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501


        :return: The api_key of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501
        :rtype: ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecApiKey
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.


        :param api_key: The api_key of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501
        :type: ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecApiKey
        """

        self._api_key = api_key

    @property
    def api_url(self):
        """Gets the api_url of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501

        The URL to send OpsGenie API requests to.  # noqa: E501

        :return: The api_url of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501
        :rtype: str
        """
        return self._api_url

    @api_url.setter
    def api_url(self, api_url):
        """Sets the api_url of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.

        The URL to send OpsGenie API requests to.  # noqa: E501

        :param api_url: The api_url of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501
        :type: str
        """

        self._api_url = api_url

    @property
    def description(self):
        """Gets the description of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501

        Description of the incident.  # noqa: E501

        :return: The description of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.

        Description of the incident.  # noqa: E501

        :param description: The description of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def details(self):
        """Gets the details of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501

        A set of arbitrary key/value pairs that provide further detail about the incident.  # noqa: E501

        :return: The details of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecHeaders]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.

        A set of arbitrary key/value pairs that provide further detail about the incident.  # noqa: E501

        :param details: The details of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501
        :type: list[ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecHeaders]
        """

        self._details = details

    @property
    def http_config(self):
        """Gets the http_config of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501


        :return: The http_config of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501
        :rtype: ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecHttpConfig
        """
        return self._http_config

    @http_config.setter
    def http_config(self, http_config):
        """Sets the http_config of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.


        :param http_config: The http_config of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501
        :type: ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecHttpConfig
        """

        self._http_config = http_config

    @property
    def message(self):
        """Gets the message of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501

        Alert text limited to 130 characters.  # noqa: E501

        :return: The message of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.

        Alert text limited to 130 characters.  # noqa: E501

        :param message: The message of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def note(self):
        """Gets the note of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501

        Additional alert note.  # noqa: E501

        :return: The note of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.

        Additional alert note.  # noqa: E501

        :param note: The note of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def priority(self):
        """Gets the priority of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501

        Priority level of alert. Possible values are P1, P2, P3, P4, and P5.  # noqa: E501

        :return: The priority of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.

        Priority level of alert. Possible values are P1, P2, P3, P4, and P5.  # noqa: E501

        :param priority: The priority of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501
        :type: str
        """

        self._priority = priority

    @property
    def responders(self):
        """Gets the responders of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501

        List of responders responsible for notifications.  # noqa: E501

        :return: The responders of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecResponders]
        """
        return self._responders

    @responders.setter
    def responders(self, responders):
        """Sets the responders of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.

        List of responders responsible for notifications.  # noqa: E501

        :param responders: The responders of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501
        :type: list[ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecResponders]
        """

        self._responders = responders

    @property
    def send_resolved(self):
        """Gets the send_resolved of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501

        Whether or not to notify about resolved alerts.  # noqa: E501

        :return: The send_resolved of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501
        :rtype: bool
        """
        return self._send_resolved

    @send_resolved.setter
    def send_resolved(self, send_resolved):
        """Sets the send_resolved of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.

        Whether or not to notify about resolved alerts.  # noqa: E501

        :param send_resolved: The send_resolved of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501
        :type: bool
        """

        self._send_resolved = send_resolved

    @property
    def source(self):
        """Gets the source of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501

        Backlink to the sender of the notification.  # noqa: E501

        :return: The source of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.

        Backlink to the sender of the notification.  # noqa: E501

        :param source: The source of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def tags(self):
        """Gets the tags of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501

        Comma separated list of tags attached to the notifications.  # noqa: E501

        :return: The tags of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.

        Comma separated list of tags attached to the notifications.  # noqa: E501

        :param tags: The tags of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs.  # noqa: E501
        :type: str
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecOpsgenieConfigs):
            return True

        return self.to_dict() != other.to_dict()
