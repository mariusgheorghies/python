# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'authorization': 'ComCoreosMonitoringV1PrometheusSpecApiserverConfigAuthorization',
        'basic_auth': 'ComCoreosMonitoringV1PrometheusSpecApiserverConfigBasicAuth',
        'bearer_token': 'str',
        'bearer_token_file': 'str',
        'host': 'str',
        'tls_config': 'ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServerTlsConfig'
    }

    attribute_map = {
        'authorization': 'authorization',
        'basic_auth': 'basicAuth',
        'bearer_token': 'bearerToken',
        'bearer_token_file': 'bearerTokenFile',
        'host': 'host',
        'tls_config': 'tlsConfig'
    }

    def __init__(self, authorization=None, basic_auth=None, bearer_token=None, bearer_token_file=None, host=None, tls_config=None, local_vars_configuration=None):  # noqa: E501
        """ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._authorization = None
        self._basic_auth = None
        self._bearer_token = None
        self._bearer_token_file = None
        self._host = None
        self._tls_config = None
        self.discriminator = None

        if authorization is not None:
            self.authorization = authorization
        if basic_auth is not None:
            self.basic_auth = basic_auth
        if bearer_token is not None:
            self.bearer_token = bearer_token
        if bearer_token_file is not None:
            self.bearer_token_file = bearer_token_file
        self.host = host
        if tls_config is not None:
            self.tls_config = tls_config

    @property
    def authorization(self):
        """Gets the authorization of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer.  # noqa: E501


        :return: The authorization of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecApiserverConfigAuthorization
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """Sets the authorization of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer.


        :param authorization: The authorization of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecApiserverConfigAuthorization
        """

        self._authorization = authorization

    @property
    def basic_auth(self):
        """Gets the basic_auth of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer.  # noqa: E501


        :return: The basic_auth of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PrometheusSpecApiserverConfigBasicAuth
        """
        return self._basic_auth

    @basic_auth.setter
    def basic_auth(self, basic_auth):
        """Sets the basic_auth of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer.


        :param basic_auth: The basic_auth of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer.  # noqa: E501
        :type: ComCoreosMonitoringV1PrometheusSpecApiserverConfigBasicAuth
        """

        self._basic_auth = basic_auth

    @property
    def bearer_token(self):
        """Gets the bearer_token of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer.  # noqa: E501

        Bearer token for accessing apiserver.  # noqa: E501

        :return: The bearer_token of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer.  # noqa: E501
        :rtype: str
        """
        return self._bearer_token

    @bearer_token.setter
    def bearer_token(self, bearer_token):
        """Sets the bearer_token of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer.

        Bearer token for accessing apiserver.  # noqa: E501

        :param bearer_token: The bearer_token of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer.  # noqa: E501
        :type: str
        """

        self._bearer_token = bearer_token

    @property
    def bearer_token_file(self):
        """Gets the bearer_token_file of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer.  # noqa: E501

        File to read bearer token for accessing apiserver.  # noqa: E501

        :return: The bearer_token_file of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer.  # noqa: E501
        :rtype: str
        """
        return self._bearer_token_file

    @bearer_token_file.setter
    def bearer_token_file(self, bearer_token_file):
        """Sets the bearer_token_file of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer.

        File to read bearer token for accessing apiserver.  # noqa: E501

        :param bearer_token_file: The bearer_token_file of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer.  # noqa: E501
        :type: str
        """

        self._bearer_token_file = bearer_token_file

    @property
    def host(self):
        """Gets the host of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer.  # noqa: E501

        Host of apiserver. A valid string consisting of a hostname or IP followed by an optional port number  # noqa: E501

        :return: The host of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer.

        Host of apiserver. A valid string consisting of a hostname or IP followed by an optional port number  # noqa: E501

        :param host: The host of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and host is None:  # noqa: E501
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def tls_config(self):
        """Gets the tls_config of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer.  # noqa: E501


        :return: The tls_config of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServerTlsConfig
        """
        return self._tls_config

    @tls_config.setter
    def tls_config(self, tls_config):
        """Sets the tls_config of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer.


        :param tls_config: The tls_config of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServerTlsConfig
        """

        self._tls_config = tls_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer):
            return True

        return self.to_dict() != other.to_dict()
