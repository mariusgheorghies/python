# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'client_id': 'ComCoreosMonitoringV1PodMonitorSpecOauth2ClientId',
        'client_secret': 'ComCoreosMonitoringV1PodMonitorSpecOauth2ClientSecret',
        'endpoint_params': 'dict(str, str)',
        'scopes': 'list[str]',
        'token_url': 'str'
    }

    attribute_map = {
        'client_id': 'clientId',
        'client_secret': 'clientSecret',
        'endpoint_params': 'endpointParams',
        'scopes': 'scopes',
        'token_url': 'tokenUrl'
    }

    def __init__(self, client_id=None, client_secret=None, endpoint_params=None, scopes=None, token_url=None, local_vars_configuration=None):  # noqa: E501
        """ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._client_id = None
        self._client_secret = None
        self._endpoint_params = None
        self._scopes = None
        self._token_url = None
        self.discriminator = None

        self.client_id = client_id
        self.client_secret = client_secret
        if endpoint_params is not None:
            self.endpoint_params = endpoint_params
        if scopes is not None:
            self.scopes = scopes
        self.token_url = token_url

    @property
    def client_id(self):
        """Gets the client_id of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2.  # noqa: E501


        :return: The client_id of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PodMonitorSpecOauth2ClientId
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2.


        :param client_id: The client_id of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2.  # noqa: E501
        :type: ComCoreosMonitoringV1PodMonitorSpecOauth2ClientId
        """
        if self.local_vars_configuration.client_side_validation and client_id is None:  # noqa: E501
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2.  # noqa: E501


        :return: The client_secret of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2.  # noqa: E501
        :rtype: ComCoreosMonitoringV1PodMonitorSpecOauth2ClientSecret
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2.


        :param client_secret: The client_secret of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2.  # noqa: E501
        :type: ComCoreosMonitoringV1PodMonitorSpecOauth2ClientSecret
        """
        if self.local_vars_configuration.client_side_validation and client_secret is None:  # noqa: E501
            raise ValueError("Invalid value for `client_secret`, must not be `None`")  # noqa: E501

        self._client_secret = client_secret

    @property
    def endpoint_params(self):
        """Gets the endpoint_params of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2.  # noqa: E501

        Parameters to append to the token URL  # noqa: E501

        :return: The endpoint_params of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._endpoint_params

    @endpoint_params.setter
    def endpoint_params(self, endpoint_params):
        """Sets the endpoint_params of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2.

        Parameters to append to the token URL  # noqa: E501

        :param endpoint_params: The endpoint_params of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2.  # noqa: E501
        :type: dict(str, str)
        """

        self._endpoint_params = endpoint_params

    @property
    def scopes(self):
        """Gets the scopes of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2.  # noqa: E501

        OAuth2 scopes used for the token request  # noqa: E501

        :return: The scopes of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2.

        OAuth2 scopes used for the token request  # noqa: E501

        :param scopes: The scopes of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2.  # noqa: E501
        :type: list[str]
        """

        self._scopes = scopes

    @property
    def token_url(self):
        """Gets the token_url of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2.  # noqa: E501

        The URL to fetch the token from  # noqa: E501

        :return: The token_url of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2.  # noqa: E501
        :rtype: str
        """
        return self._token_url

    @token_url.setter
    def token_url(self, token_url):
        """Sets the token_url of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2.

        The URL to fetch the token from  # noqa: E501

        :param token_url: The token_url of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and token_url is None:  # noqa: E501
            raise ValueError("Invalid value for `token_url`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                token_url is not None and len(token_url) < 1):
            raise ValueError("Invalid value for `token_url`, length must be greater than or equal to `1`")  # noqa: E501

        self._token_url = token_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogsOauth2):
            return True

        return self.to_dict() != other.to_dict()
