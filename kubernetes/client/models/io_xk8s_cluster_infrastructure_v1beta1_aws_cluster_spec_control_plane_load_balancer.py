# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterInfrastructureV1beta1AWSClusterSpecControlPlaneLoadBalancer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'additional_security_groups': 'list[str]',
        'cross_zone_load_balancing': 'bool',
        'scheme': 'str',
        'subnets': 'list[str]'
    }

    attribute_map = {
        'additional_security_groups': 'additionalSecurityGroups',
        'cross_zone_load_balancing': 'crossZoneLoadBalancing',
        'scheme': 'scheme',
        'subnets': 'subnets'
    }

    def __init__(self, additional_security_groups=None, cross_zone_load_balancing=None, scheme=None, subnets=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterInfrastructureV1beta1AWSClusterSpecControlPlaneLoadBalancer - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._additional_security_groups = None
        self._cross_zone_load_balancing = None
        self._scheme = None
        self._subnets = None
        self.discriminator = None

        if additional_security_groups is not None:
            self.additional_security_groups = additional_security_groups
        if cross_zone_load_balancing is not None:
            self.cross_zone_load_balancing = cross_zone_load_balancing
        if scheme is not None:
            self.scheme = scheme
        if subnets is not None:
            self.subnets = subnets

    @property
    def additional_security_groups(self):
        """Gets the additional_security_groups of this IoXK8sClusterInfrastructureV1beta1AWSClusterSpecControlPlaneLoadBalancer.  # noqa: E501

        AdditionalSecurityGroups sets the security groups used by the load balancer. Expected to be security group IDs This is optional - if not provided new security groups will be created for the load balancer  # noqa: E501

        :return: The additional_security_groups of this IoXK8sClusterInfrastructureV1beta1AWSClusterSpecControlPlaneLoadBalancer.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_security_groups

    @additional_security_groups.setter
    def additional_security_groups(self, additional_security_groups):
        """Sets the additional_security_groups of this IoXK8sClusterInfrastructureV1beta1AWSClusterSpecControlPlaneLoadBalancer.

        AdditionalSecurityGroups sets the security groups used by the load balancer. Expected to be security group IDs This is optional - if not provided new security groups will be created for the load balancer  # noqa: E501

        :param additional_security_groups: The additional_security_groups of this IoXK8sClusterInfrastructureV1beta1AWSClusterSpecControlPlaneLoadBalancer.  # noqa: E501
        :type: list[str]
        """

        self._additional_security_groups = additional_security_groups

    @property
    def cross_zone_load_balancing(self):
        """Gets the cross_zone_load_balancing of this IoXK8sClusterInfrastructureV1beta1AWSClusterSpecControlPlaneLoadBalancer.  # noqa: E501

        CrossZoneLoadBalancing enables the classic ELB cross availability zone balancing.   With cross-zone load balancing, each load balancer node for your Classic Load Balancer distributes requests evenly across the registered instances in all enabled Availability Zones. If cross-zone load balancing is disabled, each load balancer node distributes requests evenly across the registered instances in its Availability Zone only.   Defaults to false.  # noqa: E501

        :return: The cross_zone_load_balancing of this IoXK8sClusterInfrastructureV1beta1AWSClusterSpecControlPlaneLoadBalancer.  # noqa: E501
        :rtype: bool
        """
        return self._cross_zone_load_balancing

    @cross_zone_load_balancing.setter
    def cross_zone_load_balancing(self, cross_zone_load_balancing):
        """Sets the cross_zone_load_balancing of this IoXK8sClusterInfrastructureV1beta1AWSClusterSpecControlPlaneLoadBalancer.

        CrossZoneLoadBalancing enables the classic ELB cross availability zone balancing.   With cross-zone load balancing, each load balancer node for your Classic Load Balancer distributes requests evenly across the registered instances in all enabled Availability Zones. If cross-zone load balancing is disabled, each load balancer node distributes requests evenly across the registered instances in its Availability Zone only.   Defaults to false.  # noqa: E501

        :param cross_zone_load_balancing: The cross_zone_load_balancing of this IoXK8sClusterInfrastructureV1beta1AWSClusterSpecControlPlaneLoadBalancer.  # noqa: E501
        :type: bool
        """

        self._cross_zone_load_balancing = cross_zone_load_balancing

    @property
    def scheme(self):
        """Gets the scheme of this IoXK8sClusterInfrastructureV1beta1AWSClusterSpecControlPlaneLoadBalancer.  # noqa: E501

        Scheme sets the scheme of the load balancer (defaults to internet-facing)  # noqa: E501

        :return: The scheme of this IoXK8sClusterInfrastructureV1beta1AWSClusterSpecControlPlaneLoadBalancer.  # noqa: E501
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this IoXK8sClusterInfrastructureV1beta1AWSClusterSpecControlPlaneLoadBalancer.

        Scheme sets the scheme of the load balancer (defaults to internet-facing)  # noqa: E501

        :param scheme: The scheme of this IoXK8sClusterInfrastructureV1beta1AWSClusterSpecControlPlaneLoadBalancer.  # noqa: E501
        :type: str
        """
        allowed_values = ["internet-facing", "internal"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and scheme not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `scheme` ({0}), must be one of {1}"  # noqa: E501
                .format(scheme, allowed_values)
            )

        self._scheme = scheme

    @property
    def subnets(self):
        """Gets the subnets of this IoXK8sClusterInfrastructureV1beta1AWSClusterSpecControlPlaneLoadBalancer.  # noqa: E501

        Subnets sets the subnets that should be applied to the control plane load balancer (defaults to discovered subnets for managed VPCs or an empty set for unmanaged VPCs)  # noqa: E501

        :return: The subnets of this IoXK8sClusterInfrastructureV1beta1AWSClusterSpecControlPlaneLoadBalancer.  # noqa: E501
        :rtype: list[str]
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this IoXK8sClusterInfrastructureV1beta1AWSClusterSpecControlPlaneLoadBalancer.

        Subnets sets the subnets that should be applied to the control plane load balancer (defaults to discovered subnets for managed VPCs or an empty set for unmanaged VPCs)  # noqa: E501

        :param subnets: The subnets of this IoXK8sClusterInfrastructureV1beta1AWSClusterSpecControlPlaneLoadBalancer.  # noqa: E501
        :type: list[str]
        """

        self._subnets = subnets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1beta1AWSClusterSpecControlPlaneLoadBalancer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1beta1AWSClusterSpecControlPlaneLoadBalancer):
            return True

        return self.to_dict() != other.to_dict()
