# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoCertManagerV1CertificateRequestStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ca': 'str',
        'certificate': 'str',
        'conditions': 'list[IoCertManagerV1CertificateRequestStatusConditions]',
        'failure_time': 'datetime'
    }

    attribute_map = {
        'ca': 'ca',
        'certificate': 'certificate',
        'conditions': 'conditions',
        'failure_time': 'failureTime'
    }

    def __init__(self, ca=None, certificate=None, conditions=None, failure_time=None, local_vars_configuration=None):  # noqa: E501
        """IoCertManagerV1CertificateRequestStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ca = None
        self._certificate = None
        self._conditions = None
        self._failure_time = None
        self.discriminator = None

        if ca is not None:
            self.ca = ca
        if certificate is not None:
            self.certificate = certificate
        if conditions is not None:
            self.conditions = conditions
        if failure_time is not None:
            self.failure_time = failure_time

    @property
    def ca(self):
        """Gets the ca of this IoCertManagerV1CertificateRequestStatus.  # noqa: E501

        The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.  # noqa: E501

        :return: The ca of this IoCertManagerV1CertificateRequestStatus.  # noqa: E501
        :rtype: str
        """
        return self._ca

    @ca.setter
    def ca(self, ca):
        """Sets the ca of this IoCertManagerV1CertificateRequestStatus.

        The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.  # noqa: E501

        :param ca: The ca of this IoCertManagerV1CertificateRequestStatus.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                ca is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', ca)):  # noqa: E501
            raise ValueError(r"Invalid value for `ca`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._ca = ca

    @property
    def certificate(self):
        """Gets the certificate of this IoCertManagerV1CertificateRequestStatus.  # noqa: E501

        The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.  # noqa: E501

        :return: The certificate of this IoCertManagerV1CertificateRequestStatus.  # noqa: E501
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this IoCertManagerV1CertificateRequestStatus.

        The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.  # noqa: E501

        :param certificate: The certificate of this IoCertManagerV1CertificateRequestStatus.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                certificate is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', certificate)):  # noqa: E501
            raise ValueError(r"Invalid value for `certificate`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._certificate = certificate

    @property
    def conditions(self):
        """Gets the conditions of this IoCertManagerV1CertificateRequestStatus.  # noqa: E501

        List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.  # noqa: E501

        :return: The conditions of this IoCertManagerV1CertificateRequestStatus.  # noqa: E501
        :rtype: list[IoCertManagerV1CertificateRequestStatusConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this IoCertManagerV1CertificateRequestStatus.

        List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.  # noqa: E501

        :param conditions: The conditions of this IoCertManagerV1CertificateRequestStatus.  # noqa: E501
        :type: list[IoCertManagerV1CertificateRequestStatusConditions]
        """

        self._conditions = conditions

    @property
    def failure_time(self):
        """Gets the failure_time of this IoCertManagerV1CertificateRequestStatus.  # noqa: E501

        FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.  # noqa: E501

        :return: The failure_time of this IoCertManagerV1CertificateRequestStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._failure_time

    @failure_time.setter
    def failure_time(self, failure_time):
        """Sets the failure_time of this IoCertManagerV1CertificateRequestStatus.

        FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.  # noqa: E501

        :param failure_time: The failure_time of this IoCertManagerV1CertificateRequestStatus.  # noqa: E501
        :type: datetime
        """

        self._failure_time = failure_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoCertManagerV1CertificateRequestStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoCertManagerV1CertificateRequestStatus):
            return True

        return self.to_dict() != other.to_dict()
