# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class OrgProjectcalicoCrdV1BGPPeerSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'as_number': 'int',
        'keep_original_next_hop': 'bool',
        'node': 'str',
        'node_selector': 'str',
        'password': 'OrgProjectcalicoCrdV1BGPPeerSpecPassword',
        'peer_ip': 'str',
        'peer_selector': 'str'
    }

    attribute_map = {
        'as_number': 'asNumber',
        'keep_original_next_hop': 'keepOriginalNextHop',
        'node': 'node',
        'node_selector': 'nodeSelector',
        'password': 'password',
        'peer_ip': 'peerIP',
        'peer_selector': 'peerSelector'
    }

    def __init__(self, as_number=None, keep_original_next_hop=None, node=None, node_selector=None, password=None, peer_ip=None, peer_selector=None, local_vars_configuration=None):  # noqa: E501
        """OrgProjectcalicoCrdV1BGPPeerSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._as_number = None
        self._keep_original_next_hop = None
        self._node = None
        self._node_selector = None
        self._password = None
        self._peer_ip = None
        self._peer_selector = None
        self.discriminator = None

        if as_number is not None:
            self.as_number = as_number
        if keep_original_next_hop is not None:
            self.keep_original_next_hop = keep_original_next_hop
        if node is not None:
            self.node = node
        if node_selector is not None:
            self.node_selector = node_selector
        if password is not None:
            self.password = password
        if peer_ip is not None:
            self.peer_ip = peer_ip
        if peer_selector is not None:
            self.peer_selector = peer_selector

    @property
    def as_number(self):
        """Gets the as_number of this OrgProjectcalicoCrdV1BGPPeerSpec.  # noqa: E501

        The AS Number of the peer.  # noqa: E501

        :return: The as_number of this OrgProjectcalicoCrdV1BGPPeerSpec.  # noqa: E501
        :rtype: int
        """
        return self._as_number

    @as_number.setter
    def as_number(self, as_number):
        """Sets the as_number of this OrgProjectcalicoCrdV1BGPPeerSpec.

        The AS Number of the peer.  # noqa: E501

        :param as_number: The as_number of this OrgProjectcalicoCrdV1BGPPeerSpec.  # noqa: E501
        :type: int
        """

        self._as_number = as_number

    @property
    def keep_original_next_hop(self):
        """Gets the keep_original_next_hop of this OrgProjectcalicoCrdV1BGPPeerSpec.  # noqa: E501

        Option to keep the original nexthop field when routes are sent to a BGP Peer. Setting \"true\" configures the selected BGP Peers node to use the \"next hop keep;\" instead of \"next hop self;\"(default) in the specific branch of the Node on \"bird.cfg\".  # noqa: E501

        :return: The keep_original_next_hop of this OrgProjectcalicoCrdV1BGPPeerSpec.  # noqa: E501
        :rtype: bool
        """
        return self._keep_original_next_hop

    @keep_original_next_hop.setter
    def keep_original_next_hop(self, keep_original_next_hop):
        """Sets the keep_original_next_hop of this OrgProjectcalicoCrdV1BGPPeerSpec.

        Option to keep the original nexthop field when routes are sent to a BGP Peer. Setting \"true\" configures the selected BGP Peers node to use the \"next hop keep;\" instead of \"next hop self;\"(default) in the specific branch of the Node on \"bird.cfg\".  # noqa: E501

        :param keep_original_next_hop: The keep_original_next_hop of this OrgProjectcalicoCrdV1BGPPeerSpec.  # noqa: E501
        :type: bool
        """

        self._keep_original_next_hop = keep_original_next_hop

    @property
    def node(self):
        """Gets the node of this OrgProjectcalicoCrdV1BGPPeerSpec.  # noqa: E501

        The node name identifying the Calico node instance that is targeted by this peer. If this is not set, and no nodeSelector is specified, then this BGP peer selects all nodes in the cluster.  # noqa: E501

        :return: The node of this OrgProjectcalicoCrdV1BGPPeerSpec.  # noqa: E501
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this OrgProjectcalicoCrdV1BGPPeerSpec.

        The node name identifying the Calico node instance that is targeted by this peer. If this is not set, and no nodeSelector is specified, then this BGP peer selects all nodes in the cluster.  # noqa: E501

        :param node: The node of this OrgProjectcalicoCrdV1BGPPeerSpec.  # noqa: E501
        :type: str
        """

        self._node = node

    @property
    def node_selector(self):
        """Gets the node_selector of this OrgProjectcalicoCrdV1BGPPeerSpec.  # noqa: E501

        Selector for the nodes that should have this peering.  When this is set, the Node field must be empty.  # noqa: E501

        :return: The node_selector of this OrgProjectcalicoCrdV1BGPPeerSpec.  # noqa: E501
        :rtype: str
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this OrgProjectcalicoCrdV1BGPPeerSpec.

        Selector for the nodes that should have this peering.  When this is set, the Node field must be empty.  # noqa: E501

        :param node_selector: The node_selector of this OrgProjectcalicoCrdV1BGPPeerSpec.  # noqa: E501
        :type: str
        """

        self._node_selector = node_selector

    @property
    def password(self):
        """Gets the password of this OrgProjectcalicoCrdV1BGPPeerSpec.  # noqa: E501


        :return: The password of this OrgProjectcalicoCrdV1BGPPeerSpec.  # noqa: E501
        :rtype: OrgProjectcalicoCrdV1BGPPeerSpecPassword
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this OrgProjectcalicoCrdV1BGPPeerSpec.


        :param password: The password of this OrgProjectcalicoCrdV1BGPPeerSpec.  # noqa: E501
        :type: OrgProjectcalicoCrdV1BGPPeerSpecPassword
        """

        self._password = password

    @property
    def peer_ip(self):
        """Gets the peer_ip of this OrgProjectcalicoCrdV1BGPPeerSpec.  # noqa: E501

        The IP address of the peer followed by an optional port number to peer with. If port number is given, format should be `[<IPv6>]:port` or `<IPv4>:<port>` for IPv4. If optional port number is not set, and this peer IP and ASNumber belongs to a calico/node with ListenPort set in BGPConfiguration, then we use that port to peer.  # noqa: E501

        :return: The peer_ip of this OrgProjectcalicoCrdV1BGPPeerSpec.  # noqa: E501
        :rtype: str
        """
        return self._peer_ip

    @peer_ip.setter
    def peer_ip(self, peer_ip):
        """Sets the peer_ip of this OrgProjectcalicoCrdV1BGPPeerSpec.

        The IP address of the peer followed by an optional port number to peer with. If port number is given, format should be `[<IPv6>]:port` or `<IPv4>:<port>` for IPv4. If optional port number is not set, and this peer IP and ASNumber belongs to a calico/node with ListenPort set in BGPConfiguration, then we use that port to peer.  # noqa: E501

        :param peer_ip: The peer_ip of this OrgProjectcalicoCrdV1BGPPeerSpec.  # noqa: E501
        :type: str
        """

        self._peer_ip = peer_ip

    @property
    def peer_selector(self):
        """Gets the peer_selector of this OrgProjectcalicoCrdV1BGPPeerSpec.  # noqa: E501

        Selector for the remote nodes to peer with.  When this is set, the PeerIP and ASNumber fields must be empty.  For each peering between the local node and selected remote nodes, we configure an IPv4 peering if both ends have NodeBGPSpec.IPv4Address specified, and an IPv6 peering if both ends have NodeBGPSpec.IPv6Address specified.  The remote AS number comes from the remote node's NodeBGPSpec.ASNumber, or the global default if that is not set.  # noqa: E501

        :return: The peer_selector of this OrgProjectcalicoCrdV1BGPPeerSpec.  # noqa: E501
        :rtype: str
        """
        return self._peer_selector

    @peer_selector.setter
    def peer_selector(self, peer_selector):
        """Sets the peer_selector of this OrgProjectcalicoCrdV1BGPPeerSpec.

        Selector for the remote nodes to peer with.  When this is set, the PeerIP and ASNumber fields must be empty.  For each peering between the local node and selected remote nodes, we configure an IPv4 peering if both ends have NodeBGPSpec.IPv4Address specified, and an IPv6 peering if both ends have NodeBGPSpec.IPv6Address specified.  The remote AS number comes from the remote node's NodeBGPSpec.ASNumber, or the global default if that is not set.  # noqa: E501

        :param peer_selector: The peer_selector of this OrgProjectcalicoCrdV1BGPPeerSpec.  # noqa: E501
        :type: str
        """

        self._peer_selector = peer_selector

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgProjectcalicoCrdV1BGPPeerSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrgProjectcalicoCrdV1BGPPeerSpec):
            return True

        return self.to_dict() != other.to_dict()
