# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComCoreosMonitoringV1PrometheusSpecQueueConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'batch_send_deadline': 'str',
        'capacity': 'int',
        'max_backoff': 'str',
        'max_retries': 'int',
        'max_samples_per_send': 'int',
        'max_shards': 'int',
        'min_backoff': 'str',
        'min_shards': 'int'
    }

    attribute_map = {
        'batch_send_deadline': 'batchSendDeadline',
        'capacity': 'capacity',
        'max_backoff': 'maxBackoff',
        'max_retries': 'maxRetries',
        'max_samples_per_send': 'maxSamplesPerSend',
        'max_shards': 'maxShards',
        'min_backoff': 'minBackoff',
        'min_shards': 'minShards'
    }

    def __init__(self, batch_send_deadline=None, capacity=None, max_backoff=None, max_retries=None, max_samples_per_send=None, max_shards=None, min_backoff=None, min_shards=None, local_vars_configuration=None):  # noqa: E501
        """ComCoreosMonitoringV1PrometheusSpecQueueConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._batch_send_deadline = None
        self._capacity = None
        self._max_backoff = None
        self._max_retries = None
        self._max_samples_per_send = None
        self._max_shards = None
        self._min_backoff = None
        self._min_shards = None
        self.discriminator = None

        if batch_send_deadline is not None:
            self.batch_send_deadline = batch_send_deadline
        if capacity is not None:
            self.capacity = capacity
        if max_backoff is not None:
            self.max_backoff = max_backoff
        if max_retries is not None:
            self.max_retries = max_retries
        if max_samples_per_send is not None:
            self.max_samples_per_send = max_samples_per_send
        if max_shards is not None:
            self.max_shards = max_shards
        if min_backoff is not None:
            self.min_backoff = min_backoff
        if min_shards is not None:
            self.min_shards = min_shards

    @property
    def batch_send_deadline(self):
        """Gets the batch_send_deadline of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.  # noqa: E501

        BatchSendDeadline is the maximum time a sample will wait in buffer.  # noqa: E501

        :return: The batch_send_deadline of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.  # noqa: E501
        :rtype: str
        """
        return self._batch_send_deadline

    @batch_send_deadline.setter
    def batch_send_deadline(self, batch_send_deadline):
        """Sets the batch_send_deadline of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.

        BatchSendDeadline is the maximum time a sample will wait in buffer.  # noqa: E501

        :param batch_send_deadline: The batch_send_deadline of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.  # noqa: E501
        :type: str
        """

        self._batch_send_deadline = batch_send_deadline

    @property
    def capacity(self):
        """Gets the capacity of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.  # noqa: E501

        Capacity is the number of samples to buffer per shard before we start dropping them.  # noqa: E501

        :return: The capacity of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.

        Capacity is the number of samples to buffer per shard before we start dropping them.  # noqa: E501

        :param capacity: The capacity of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.  # noqa: E501
        :type: int
        """

        self._capacity = capacity

    @property
    def max_backoff(self):
        """Gets the max_backoff of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.  # noqa: E501

        MaxBackoff is the maximum retry delay.  # noqa: E501

        :return: The max_backoff of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.  # noqa: E501
        :rtype: str
        """
        return self._max_backoff

    @max_backoff.setter
    def max_backoff(self, max_backoff):
        """Sets the max_backoff of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.

        MaxBackoff is the maximum retry delay.  # noqa: E501

        :param max_backoff: The max_backoff of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.  # noqa: E501
        :type: str
        """

        self._max_backoff = max_backoff

    @property
    def max_retries(self):
        """Gets the max_retries of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.  # noqa: E501

        MaxRetries is the maximum number of times to retry a batch on recoverable errors.  # noqa: E501

        :return: The max_retries of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.  # noqa: E501
        :rtype: int
        """
        return self._max_retries

    @max_retries.setter
    def max_retries(self, max_retries):
        """Sets the max_retries of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.

        MaxRetries is the maximum number of times to retry a batch on recoverable errors.  # noqa: E501

        :param max_retries: The max_retries of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.  # noqa: E501
        :type: int
        """

        self._max_retries = max_retries

    @property
    def max_samples_per_send(self):
        """Gets the max_samples_per_send of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.  # noqa: E501

        MaxSamplesPerSend is the maximum number of samples per send.  # noqa: E501

        :return: The max_samples_per_send of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.  # noqa: E501
        :rtype: int
        """
        return self._max_samples_per_send

    @max_samples_per_send.setter
    def max_samples_per_send(self, max_samples_per_send):
        """Sets the max_samples_per_send of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.

        MaxSamplesPerSend is the maximum number of samples per send.  # noqa: E501

        :param max_samples_per_send: The max_samples_per_send of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.  # noqa: E501
        :type: int
        """

        self._max_samples_per_send = max_samples_per_send

    @property
    def max_shards(self):
        """Gets the max_shards of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.  # noqa: E501

        MaxShards is the maximum number of shards, i.e. amount of concurrency.  # noqa: E501

        :return: The max_shards of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.  # noqa: E501
        :rtype: int
        """
        return self._max_shards

    @max_shards.setter
    def max_shards(self, max_shards):
        """Sets the max_shards of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.

        MaxShards is the maximum number of shards, i.e. amount of concurrency.  # noqa: E501

        :param max_shards: The max_shards of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.  # noqa: E501
        :type: int
        """

        self._max_shards = max_shards

    @property
    def min_backoff(self):
        """Gets the min_backoff of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.  # noqa: E501

        MinBackoff is the initial retry delay. Gets doubled for every retry.  # noqa: E501

        :return: The min_backoff of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.  # noqa: E501
        :rtype: str
        """
        return self._min_backoff

    @min_backoff.setter
    def min_backoff(self, min_backoff):
        """Sets the min_backoff of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.

        MinBackoff is the initial retry delay. Gets doubled for every retry.  # noqa: E501

        :param min_backoff: The min_backoff of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.  # noqa: E501
        :type: str
        """

        self._min_backoff = min_backoff

    @property
    def min_shards(self):
        """Gets the min_shards of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.  # noqa: E501

        MinShards is the minimum number of shards, i.e. amount of concurrency.  # noqa: E501

        :return: The min_shards of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.  # noqa: E501
        :rtype: int
        """
        return self._min_shards

    @min_shards.setter
    def min_shards(self, min_shards):
        """Sets the min_shards of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.

        MinShards is the minimum number of shards, i.e. amount of concurrency.  # noqa: E501

        :param min_shards: The min_shards of this ComCoreosMonitoringV1PrometheusSpecQueueConfig.  # noqa: E501
        :type: int
        """

        self._min_shards = min_shards

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComCoreosMonitoringV1PrometheusSpecQueueConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComCoreosMonitoringV1PrometheusSpecQueueConfig):
            return True

        return self.to_dict() != other.to_dict()
