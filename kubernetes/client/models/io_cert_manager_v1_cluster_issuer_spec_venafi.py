# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoCertManagerV1ClusterIssuerSpecVenafi(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cloud': 'IoCertManagerV1ClusterIssuerSpecVenafiCloud',
        'tpp': 'IoCertManagerV1ClusterIssuerSpecVenafiTpp',
        'zone': 'str'
    }

    attribute_map = {
        'cloud': 'cloud',
        'tpp': 'tpp',
        'zone': 'zone'
    }

    def __init__(self, cloud=None, tpp=None, zone=None, local_vars_configuration=None):  # noqa: E501
        """IoCertManagerV1ClusterIssuerSpecVenafi - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cloud = None
        self._tpp = None
        self._zone = None
        self.discriminator = None

        if cloud is not None:
            self.cloud = cloud
        if tpp is not None:
            self.tpp = tpp
        self.zone = zone

    @property
    def cloud(self):
        """Gets the cloud of this IoCertManagerV1ClusterIssuerSpecVenafi.  # noqa: E501


        :return: The cloud of this IoCertManagerV1ClusterIssuerSpecVenafi.  # noqa: E501
        :rtype: IoCertManagerV1ClusterIssuerSpecVenafiCloud
        """
        return self._cloud

    @cloud.setter
    def cloud(self, cloud):
        """Sets the cloud of this IoCertManagerV1ClusterIssuerSpecVenafi.


        :param cloud: The cloud of this IoCertManagerV1ClusterIssuerSpecVenafi.  # noqa: E501
        :type: IoCertManagerV1ClusterIssuerSpecVenafiCloud
        """

        self._cloud = cloud

    @property
    def tpp(self):
        """Gets the tpp of this IoCertManagerV1ClusterIssuerSpecVenafi.  # noqa: E501


        :return: The tpp of this IoCertManagerV1ClusterIssuerSpecVenafi.  # noqa: E501
        :rtype: IoCertManagerV1ClusterIssuerSpecVenafiTpp
        """
        return self._tpp

    @tpp.setter
    def tpp(self, tpp):
        """Sets the tpp of this IoCertManagerV1ClusterIssuerSpecVenafi.


        :param tpp: The tpp of this IoCertManagerV1ClusterIssuerSpecVenafi.  # noqa: E501
        :type: IoCertManagerV1ClusterIssuerSpecVenafiTpp
        """

        self._tpp = tpp

    @property
    def zone(self):
        """Gets the zone of this IoCertManagerV1ClusterIssuerSpecVenafi.  # noqa: E501

        Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.  # noqa: E501

        :return: The zone of this IoCertManagerV1ClusterIssuerSpecVenafi.  # noqa: E501
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this IoCertManagerV1ClusterIssuerSpecVenafi.

        Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.  # noqa: E501

        :param zone: The zone of this IoCertManagerV1ClusterIssuerSpecVenafi.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and zone is None:  # noqa: E501
            raise ValueError("Invalid value for `zone`, must not be `None`")  # noqa: E501

        self._zone = zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoCertManagerV1ClusterIssuerSpecVenafi):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoCertManagerV1ClusterIssuerSpecVenafi):
            return True

        return self.to_dict() != other.to_dict()
