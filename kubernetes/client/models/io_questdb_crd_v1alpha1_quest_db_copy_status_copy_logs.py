# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'errors': 'int',
        'file': 'str',
        'id': 'str',
        'message': 'str',
        'phase': 'str',
        'rows_handled': 'int',
        'rows_imported': 'int',
        'status': 'str',
        'table': 'str',
        'ts': 'datetime'
    }

    attribute_map = {
        'errors': 'errors',
        'file': 'file',
        'id': 'id',
        'message': 'message',
        'phase': 'phase',
        'rows_handled': 'rowsHandled',
        'rows_imported': 'rowsImported',
        'status': 'status',
        'table': 'table',
        'ts': 'ts'
    }

    def __init__(self, errors=None, file=None, id=None, message=None, phase=None, rows_handled=None, rows_imported=None, status=None, table=None, ts=None, local_vars_configuration=None):  # noqa: E501
        """IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._errors = None
        self._file = None
        self._id = None
        self._message = None
        self._phase = None
        self._rows_handled = None
        self._rows_imported = None
        self._status = None
        self._table = None
        self._ts = None
        self.discriminator = None

        self.errors = errors
        self.file = file
        self.id = id
        if message is not None:
            self.message = message
        if phase is not None:
            self.phase = phase
        if rows_handled is not None:
            self.rows_handled = rows_handled
        if rows_imported is not None:
            self.rows_imported = rows_imported
        self.status = status
        self.table = table
        self.ts = ts

    @property
    def errors(self):
        """Gets the errors of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501


        :return: The errors of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501
        :rtype: int
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.


        :param errors: The errors of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and errors is None:  # noqa: E501
            raise ValueError("Invalid value for `errors`, must not be `None`")  # noqa: E501

        self._errors = errors

    @property
    def file(self):
        """Gets the file of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501


        :return: The file of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.


        :param file: The file of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file is None:  # noqa: E501
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    @property
    def id(self):
        """Gets the id of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501


        :return: The id of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.


        :param id: The id of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def message(self):
        """Gets the message of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501


        :return: The message of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.


        :param message: The message of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def phase(self):
        """Gets the phase of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501


        :return: The phase of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.


        :param phase: The phase of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501
        :type: str
        """

        self._phase = phase

    @property
    def rows_handled(self):
        """Gets the rows_handled of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501


        :return: The rows_handled of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501
        :rtype: int
        """
        return self._rows_handled

    @rows_handled.setter
    def rows_handled(self, rows_handled):
        """Sets the rows_handled of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.


        :param rows_handled: The rows_handled of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501
        :type: int
        """

        self._rows_handled = rows_handled

    @property
    def rows_imported(self):
        """Gets the rows_imported of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501


        :return: The rows_imported of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501
        :rtype: int
        """
        return self._rows_imported

    @rows_imported.setter
    def rows_imported(self, rows_imported):
        """Sets the rows_imported of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.


        :param rows_imported: The rows_imported of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501
        :type: int
        """

        self._rows_imported = rows_imported

    @property
    def status(self):
        """Gets the status of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501


        :return: The status of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.


        :param status: The status of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def table(self):
        """Gets the table of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501


        :return: The table of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.


        :param table: The table of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and table is None:  # noqa: E501
            raise ValueError("Invalid value for `table`, must not be `None`")  # noqa: E501

        self._table = table

    @property
    def ts(self):
        """Gets the ts of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501


        :return: The ts of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501
        :rtype: datetime
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.


        :param ts: The ts of this IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and ts is None:  # noqa: E501
            raise ValueError("Invalid value for `ts`, must not be `None`")  # noqa: E501

        self._ts = ts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoQuestdbCrdV1alpha1QuestDBCopyStatusCopyLogs):
            return True

        return self.to_dict() != other.to_dict()
