# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoArgoprojV1alpha1ApplicationSetSpecGit(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'directories': 'list[IoArgoprojV1alpha1ApplicationSetSpecGitDirectories]',
        'files': 'list[IoArgoprojV1alpha1ApplicationSetSpecGitFiles]',
        'path_param_prefix': 'str',
        'repo_url': 'str',
        'requeue_after_seconds': 'int',
        'revision': 'str',
        'template': 'IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResourceTemplate'
    }

    attribute_map = {
        'directories': 'directories',
        'files': 'files',
        'path_param_prefix': 'pathParamPrefix',
        'repo_url': 'repoURL',
        'requeue_after_seconds': 'requeueAfterSeconds',
        'revision': 'revision',
        'template': 'template'
    }

    def __init__(self, directories=None, files=None, path_param_prefix=None, repo_url=None, requeue_after_seconds=None, revision=None, template=None, local_vars_configuration=None):  # noqa: E501
        """IoArgoprojV1alpha1ApplicationSetSpecGit - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._directories = None
        self._files = None
        self._path_param_prefix = None
        self._repo_url = None
        self._requeue_after_seconds = None
        self._revision = None
        self._template = None
        self.discriminator = None

        if directories is not None:
            self.directories = directories
        if files is not None:
            self.files = files
        if path_param_prefix is not None:
            self.path_param_prefix = path_param_prefix
        self.repo_url = repo_url
        if requeue_after_seconds is not None:
            self.requeue_after_seconds = requeue_after_seconds
        self.revision = revision
        if template is not None:
            self.template = template

    @property
    def directories(self):
        """Gets the directories of this IoArgoprojV1alpha1ApplicationSetSpecGit.  # noqa: E501


        :return: The directories of this IoArgoprojV1alpha1ApplicationSetSpecGit.  # noqa: E501
        :rtype: list[IoArgoprojV1alpha1ApplicationSetSpecGitDirectories]
        """
        return self._directories

    @directories.setter
    def directories(self, directories):
        """Sets the directories of this IoArgoprojV1alpha1ApplicationSetSpecGit.


        :param directories: The directories of this IoArgoprojV1alpha1ApplicationSetSpecGit.  # noqa: E501
        :type: list[IoArgoprojV1alpha1ApplicationSetSpecGitDirectories]
        """

        self._directories = directories

    @property
    def files(self):
        """Gets the files of this IoArgoprojV1alpha1ApplicationSetSpecGit.  # noqa: E501


        :return: The files of this IoArgoprojV1alpha1ApplicationSetSpecGit.  # noqa: E501
        :rtype: list[IoArgoprojV1alpha1ApplicationSetSpecGitFiles]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this IoArgoprojV1alpha1ApplicationSetSpecGit.


        :param files: The files of this IoArgoprojV1alpha1ApplicationSetSpecGit.  # noqa: E501
        :type: list[IoArgoprojV1alpha1ApplicationSetSpecGitFiles]
        """

        self._files = files

    @property
    def path_param_prefix(self):
        """Gets the path_param_prefix of this IoArgoprojV1alpha1ApplicationSetSpecGit.  # noqa: E501


        :return: The path_param_prefix of this IoArgoprojV1alpha1ApplicationSetSpecGit.  # noqa: E501
        :rtype: str
        """
        return self._path_param_prefix

    @path_param_prefix.setter
    def path_param_prefix(self, path_param_prefix):
        """Sets the path_param_prefix of this IoArgoprojV1alpha1ApplicationSetSpecGit.


        :param path_param_prefix: The path_param_prefix of this IoArgoprojV1alpha1ApplicationSetSpecGit.  # noqa: E501
        :type: str
        """

        self._path_param_prefix = path_param_prefix

    @property
    def repo_url(self):
        """Gets the repo_url of this IoArgoprojV1alpha1ApplicationSetSpecGit.  # noqa: E501


        :return: The repo_url of this IoArgoprojV1alpha1ApplicationSetSpecGit.  # noqa: E501
        :rtype: str
        """
        return self._repo_url

    @repo_url.setter
    def repo_url(self, repo_url):
        """Sets the repo_url of this IoArgoprojV1alpha1ApplicationSetSpecGit.


        :param repo_url: The repo_url of this IoArgoprojV1alpha1ApplicationSetSpecGit.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and repo_url is None:  # noqa: E501
            raise ValueError("Invalid value for `repo_url`, must not be `None`")  # noqa: E501

        self._repo_url = repo_url

    @property
    def requeue_after_seconds(self):
        """Gets the requeue_after_seconds of this IoArgoprojV1alpha1ApplicationSetSpecGit.  # noqa: E501


        :return: The requeue_after_seconds of this IoArgoprojV1alpha1ApplicationSetSpecGit.  # noqa: E501
        :rtype: int
        """
        return self._requeue_after_seconds

    @requeue_after_seconds.setter
    def requeue_after_seconds(self, requeue_after_seconds):
        """Sets the requeue_after_seconds of this IoArgoprojV1alpha1ApplicationSetSpecGit.


        :param requeue_after_seconds: The requeue_after_seconds of this IoArgoprojV1alpha1ApplicationSetSpecGit.  # noqa: E501
        :type: int
        """

        self._requeue_after_seconds = requeue_after_seconds

    @property
    def revision(self):
        """Gets the revision of this IoArgoprojV1alpha1ApplicationSetSpecGit.  # noqa: E501


        :return: The revision of this IoArgoprojV1alpha1ApplicationSetSpecGit.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this IoArgoprojV1alpha1ApplicationSetSpecGit.


        :param revision: The revision of this IoArgoprojV1alpha1ApplicationSetSpecGit.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and revision is None:  # noqa: E501
            raise ValueError("Invalid value for `revision`, must not be `None`")  # noqa: E501

        self._revision = revision

    @property
    def template(self):
        """Gets the template of this IoArgoprojV1alpha1ApplicationSetSpecGit.  # noqa: E501


        :return: The template of this IoArgoprojV1alpha1ApplicationSetSpecGit.  # noqa: E501
        :rtype: IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResourceTemplate
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this IoArgoprojV1alpha1ApplicationSetSpecGit.


        :param template: The template of this IoArgoprojV1alpha1ApplicationSetSpecGit.  # noqa: E501
        :type: IoArgoprojV1alpha1ApplicationSetSpecClusterDecisionResourceTemplate
        """

        self._template = template

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojV1alpha1ApplicationSetSpecGit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojV1alpha1ApplicationSetSpecGit):
            return True

        return self.to_dict() != other.to_dict()
