# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecInhibitRules(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'equal': 'list[str]',
        'source_match': 'list[ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecSourceMatch]',
        'target_match': 'list[ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecSourceMatch]'
    }

    attribute_map = {
        'equal': 'equal',
        'source_match': 'sourceMatch',
        'target_match': 'targetMatch'
    }

    def __init__(self, equal=None, source_match=None, target_match=None, local_vars_configuration=None):  # noqa: E501
        """ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecInhibitRules - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._equal = None
        self._source_match = None
        self._target_match = None
        self.discriminator = None

        if equal is not None:
            self.equal = equal
        if source_match is not None:
            self.source_match = source_match
        if target_match is not None:
            self.target_match = target_match

    @property
    def equal(self):
        """Gets the equal of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecInhibitRules.  # noqa: E501

        Labels that must have an equal value in the source and target alert for the inhibition to take effect.  # noqa: E501

        :return: The equal of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecInhibitRules.  # noqa: E501
        :rtype: list[str]
        """
        return self._equal

    @equal.setter
    def equal(self, equal):
        """Sets the equal of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecInhibitRules.

        Labels that must have an equal value in the source and target alert for the inhibition to take effect.  # noqa: E501

        :param equal: The equal of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecInhibitRules.  # noqa: E501
        :type: list[str]
        """

        self._equal = equal

    @property
    def source_match(self):
        """Gets the source_match of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecInhibitRules.  # noqa: E501

        Matchers for which one or more alerts have to exist for the inhibition to take effect. The operator enforces that the alert matches the resource’s namespace.  # noqa: E501

        :return: The source_match of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecInhibitRules.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecSourceMatch]
        """
        return self._source_match

    @source_match.setter
    def source_match(self, source_match):
        """Sets the source_match of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecInhibitRules.

        Matchers for which one or more alerts have to exist for the inhibition to take effect. The operator enforces that the alert matches the resource’s namespace.  # noqa: E501

        :param source_match: The source_match of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecInhibitRules.  # noqa: E501
        :type: list[ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecSourceMatch]
        """

        self._source_match = source_match

    @property
    def target_match(self):
        """Gets the target_match of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecInhibitRules.  # noqa: E501

        Matchers that have to be fulfilled in the alerts to be muted. The operator enforces that the alert matches the resource’s namespace.  # noqa: E501

        :return: The target_match of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecInhibitRules.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecSourceMatch]
        """
        return self._target_match

    @target_match.setter
    def target_match(self, target_match):
        """Sets the target_match of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecInhibitRules.

        Matchers that have to be fulfilled in the alerts to be muted. The operator enforces that the alert matches the resource’s namespace.  # noqa: E501

        :param target_match: The target_match of this ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecInhibitRules.  # noqa: E501
        :type: list[ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecSourceMatch]
        """

        self._target_match = target_match

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecInhibitRules):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComCoreosMonitoringV1alpha1AlertmanagerConfigSpecInhibitRules):
            return True

        return self.to_dict() != other.to_dict()
