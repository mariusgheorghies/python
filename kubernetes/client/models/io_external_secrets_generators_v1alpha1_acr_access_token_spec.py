# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auth': 'IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpecAuth',
        'environment_type': 'str',
        'registry': 'str',
        'scope': 'str',
        'tenant_id': 'str'
    }

    attribute_map = {
        'auth': 'auth',
        'environment_type': 'environmentType',
        'registry': 'registry',
        'scope': 'scope',
        'tenant_id': 'tenantId'
    }

    def __init__(self, auth=None, environment_type=None, registry=None, scope=None, tenant_id=None, local_vars_configuration=None):  # noqa: E501
        """IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._auth = None
        self._environment_type = None
        self._registry = None
        self._scope = None
        self._tenant_id = None
        self.discriminator = None

        self.auth = auth
        if environment_type is not None:
            self.environment_type = environment_type
        self.registry = registry
        if scope is not None:
            self.scope = scope
        if tenant_id is not None:
            self.tenant_id = tenant_id

    @property
    def auth(self):
        """Gets the auth of this IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpec.  # noqa: E501


        :return: The auth of this IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpec.  # noqa: E501
        :rtype: IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpecAuth
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpec.


        :param auth: The auth of this IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpec.  # noqa: E501
        :type: IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpecAuth
        """
        if self.local_vars_configuration.client_side_validation and auth is None:  # noqa: E501
            raise ValueError("Invalid value for `auth`, must not be `None`")  # noqa: E501

        self._auth = auth

    @property
    def environment_type(self):
        """Gets the environment_type of this IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpec.  # noqa: E501

        EnvironmentType specifies the Azure cloud environment endpoints to use for connecting and authenticating with Azure. By default it points to the public cloud AAD endpoint. The following endpoints are available, also see here: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152 PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud  # noqa: E501

        :return: The environment_type of this IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpec.  # noqa: E501
        :rtype: str
        """
        return self._environment_type

    @environment_type.setter
    def environment_type(self, environment_type):
        """Sets the environment_type of this IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpec.

        EnvironmentType specifies the Azure cloud environment endpoints to use for connecting and authenticating with Azure. By default it points to the public cloud AAD endpoint. The following endpoints are available, also see here: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152 PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud  # noqa: E501

        :param environment_type: The environment_type of this IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpec.  # noqa: E501
        :type: str
        """
        allowed_values = ["PublicCloud", "USGovernmentCloud", "ChinaCloud", "GermanCloud"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and environment_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `environment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(environment_type, allowed_values)
            )

        self._environment_type = environment_type

    @property
    def registry(self):
        """Gets the registry of this IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpec.  # noqa: E501

        the domain name of the ACR registry e.g. foobarexample.azurecr.io  # noqa: E501

        :return: The registry of this IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpec.  # noqa: E501
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpec.

        the domain name of the ACR registry e.g. foobarexample.azurecr.io  # noqa: E501

        :param registry: The registry of this IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and registry is None:  # noqa: E501
            raise ValueError("Invalid value for `registry`, must not be `None`")  # noqa: E501

        self._registry = registry

    @property
    def scope(self):
        """Gets the scope of this IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpec.  # noqa: E501

        Define the scope for the access token, e.g. pull/push access for a repository. if not provided it will return a refresh token that has full scope. Note: you need to pin it down to the repository level, there is no wildcard available.   examples: repository:my-repository:pull,push repository:my-repository:pull   see docs for details: https://docs.docker.com/registry/spec/auth/scope/  # noqa: E501

        :return: The scope of this IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpec.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpec.

        Define the scope for the access token, e.g. pull/push access for a repository. if not provided it will return a refresh token that has full scope. Note: you need to pin it down to the repository level, there is no wildcard available.   examples: repository:my-repository:pull,push repository:my-repository:pull   see docs for details: https://docs.docker.com/registry/spec/auth/scope/  # noqa: E501

        :param scope: The scope of this IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpec.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def tenant_id(self):
        """Gets the tenant_id of this IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpec.  # noqa: E501

        TenantID configures the Azure Tenant to send requests to. Required for ServicePrincipal auth type.  # noqa: E501

        :return: The tenant_id of this IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpec.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpec.

        TenantID configures the Azure Tenant to send requests to. Required for ServicePrincipal auth type.  # noqa: E501

        :param tenant_id: The tenant_id of this IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpec.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpec):
            return True

        return self.to_dict() != other.to_dict()
