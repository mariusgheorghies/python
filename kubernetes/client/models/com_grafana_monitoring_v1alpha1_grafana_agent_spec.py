# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class ComGrafanaMonitoringV1alpha1GrafanaAgentSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'affinity': 'ComGrafanaMonitoringV1alpha1GrafanaAgentSpecAffinity',
        'api_server': 'ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer',
        'config_maps': 'list[str]',
        'containers': 'list[ComGrafanaMonitoringV1alpha1GrafanaAgentSpecContainers]',
        'disable_reporting': 'bool',
        'disable_support_bundle': 'bool',
        'enable_config_read_api': 'bool',
        'image': 'str',
        'image_pull_secrets': 'list[ComCoreosMonitoringV1AlertmanagerSpecImagePullSecrets]',
        'init_containers': 'list[ComGrafanaMonitoringV1alpha1GrafanaAgentSpecContainers]',
        'integrations': 'ComGrafanaMonitoringV1alpha1GrafanaAgentSpecIntegrations',
        'log_format': 'str',
        'log_level': 'str',
        'logs': 'ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs',
        'metrics': 'ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics',
        'node_selector': 'dict(str, str)',
        'paused': 'bool',
        'pod_metadata': 'ComGrafanaMonitoringV1alpha1GrafanaAgentSpecPodMetadata',
        'port_name': 'str',
        'priority_class_name': 'str',
        'resources': 'ComGrafanaMonitoringV1alpha1GrafanaAgentSpecResources1',
        'runtime_class_name': 'str',
        'secrets': 'list[str]',
        'security_context': 'ComGrafanaMonitoringV1alpha1GrafanaAgentSpecSecurityContext',
        'service_account_name': 'str',
        'storage': 'ComGrafanaMonitoringV1alpha1GrafanaAgentSpecStorage',
        'tolerations': 'list[ComCoreosMonitoringV1AlertmanagerSpecTolerations]',
        'topology_spread_constraints': 'list[ComGrafanaMonitoringV1alpha1GrafanaAgentSpecTopologySpreadConstraints]',
        'version': 'str',
        'volume_mounts': 'list[ComCoreosMonitoringV1AlertmanagerSpecVolumeMounts]',
        'volumes': 'list[ComGrafanaMonitoringV1alpha1GrafanaAgentSpecVolumes]'
    }

    attribute_map = {
        'affinity': 'affinity',
        'api_server': 'apiServer',
        'config_maps': 'configMaps',
        'containers': 'containers',
        'disable_reporting': 'disableReporting',
        'disable_support_bundle': 'disableSupportBundle',
        'enable_config_read_api': 'enableConfigReadAPI',
        'image': 'image',
        'image_pull_secrets': 'imagePullSecrets',
        'init_containers': 'initContainers',
        'integrations': 'integrations',
        'log_format': 'logFormat',
        'log_level': 'logLevel',
        'logs': 'logs',
        'metrics': 'metrics',
        'node_selector': 'nodeSelector',
        'paused': 'paused',
        'pod_metadata': 'podMetadata',
        'port_name': 'portName',
        'priority_class_name': 'priorityClassName',
        'resources': 'resources',
        'runtime_class_name': 'runtimeClassName',
        'secrets': 'secrets',
        'security_context': 'securityContext',
        'service_account_name': 'serviceAccountName',
        'storage': 'storage',
        'tolerations': 'tolerations',
        'topology_spread_constraints': 'topologySpreadConstraints',
        'version': 'version',
        'volume_mounts': 'volumeMounts',
        'volumes': 'volumes'
    }

    def __init__(self, affinity=None, api_server=None, config_maps=None, containers=None, disable_reporting=None, disable_support_bundle=None, enable_config_read_api=None, image=None, image_pull_secrets=None, init_containers=None, integrations=None, log_format=None, log_level=None, logs=None, metrics=None, node_selector=None, paused=None, pod_metadata=None, port_name=None, priority_class_name=None, resources=None, runtime_class_name=None, secrets=None, security_context=None, service_account_name=None, storage=None, tolerations=None, topology_spread_constraints=None, version=None, volume_mounts=None, volumes=None, local_vars_configuration=None):  # noqa: E501
        """ComGrafanaMonitoringV1alpha1GrafanaAgentSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._affinity = None
        self._api_server = None
        self._config_maps = None
        self._containers = None
        self._disable_reporting = None
        self._disable_support_bundle = None
        self._enable_config_read_api = None
        self._image = None
        self._image_pull_secrets = None
        self._init_containers = None
        self._integrations = None
        self._log_format = None
        self._log_level = None
        self._logs = None
        self._metrics = None
        self._node_selector = None
        self._paused = None
        self._pod_metadata = None
        self._port_name = None
        self._priority_class_name = None
        self._resources = None
        self._runtime_class_name = None
        self._secrets = None
        self._security_context = None
        self._service_account_name = None
        self._storage = None
        self._tolerations = None
        self._topology_spread_constraints = None
        self._version = None
        self._volume_mounts = None
        self._volumes = None
        self.discriminator = None

        if affinity is not None:
            self.affinity = affinity
        if api_server is not None:
            self.api_server = api_server
        if config_maps is not None:
            self.config_maps = config_maps
        if containers is not None:
            self.containers = containers
        if disable_reporting is not None:
            self.disable_reporting = disable_reporting
        if disable_support_bundle is not None:
            self.disable_support_bundle = disable_support_bundle
        if enable_config_read_api is not None:
            self.enable_config_read_api = enable_config_read_api
        if image is not None:
            self.image = image
        if image_pull_secrets is not None:
            self.image_pull_secrets = image_pull_secrets
        if init_containers is not None:
            self.init_containers = init_containers
        if integrations is not None:
            self.integrations = integrations
        if log_format is not None:
            self.log_format = log_format
        if log_level is not None:
            self.log_level = log_level
        if logs is not None:
            self.logs = logs
        if metrics is not None:
            self.metrics = metrics
        if node_selector is not None:
            self.node_selector = node_selector
        if paused is not None:
            self.paused = paused
        if pod_metadata is not None:
            self.pod_metadata = pod_metadata
        if port_name is not None:
            self.port_name = port_name
        if priority_class_name is not None:
            self.priority_class_name = priority_class_name
        if resources is not None:
            self.resources = resources
        if runtime_class_name is not None:
            self.runtime_class_name = runtime_class_name
        if secrets is not None:
            self.secrets = secrets
        if security_context is not None:
            self.security_context = security_context
        if service_account_name is not None:
            self.service_account_name = service_account_name
        if storage is not None:
            self.storage = storage
        if tolerations is not None:
            self.tolerations = tolerations
        if topology_spread_constraints is not None:
            self.topology_spread_constraints = topology_spread_constraints
        if version is not None:
            self.version = version
        if volume_mounts is not None:
            self.volume_mounts = volume_mounts
        if volumes is not None:
            self.volumes = volumes

    @property
    def affinity(self):
        """Gets the affinity of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501


        :return: The affinity of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecAffinity
        """
        return self._affinity

    @affinity.setter
    def affinity(self, affinity):
        """Sets the affinity of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.


        :param affinity: The affinity of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecAffinity
        """

        self._affinity = affinity

    @property
    def api_server(self):
        """Gets the api_server of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501


        :return: The api_server of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer
        """
        return self._api_server

    @api_server.setter
    def api_server(self, api_server):
        """Sets the api_server of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.


        :param api_server: The api_server of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecApiServer
        """

        self._api_server = api_server

    @property
    def config_maps(self):
        """Gets the config_maps of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501

        ConfigMaps is a list of config maps in the same namespace as the GrafanaAgent object which will be mounted into each running Grafana Agent pod. The ConfigMaps are mounted into /etc/grafana-agent/extra-configmaps/<configmap-name>.  # noqa: E501

        :return: The config_maps of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._config_maps

    @config_maps.setter
    def config_maps(self, config_maps):
        """Sets the config_maps of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.

        ConfigMaps is a list of config maps in the same namespace as the GrafanaAgent object which will be mounted into each running Grafana Agent pod. The ConfigMaps are mounted into /etc/grafana-agent/extra-configmaps/<configmap-name>.  # noqa: E501

        :param config_maps: The config_maps of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: list[str]
        """

        self._config_maps = config_maps

    @property
    def containers(self):
        """Gets the containers of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501

        Containers lets you inject additional containers or modify operator-generated containers. This can be used to add an authentication proxy to a Grafana Agent pod or to change the behavior of an operator-generated container. Containers described here modify an operator-generated container if they share the same name and if modifications are done via a strategic merge patch. The current container names are: `grafana-agent` and `config-reloader`. Overriding containers is entirely outside the scope of what the Grafana Agent team supports and by doing so, you accept that this behavior may break at any time without notice.  # noqa: E501

        :return: The containers of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: list[ComGrafanaMonitoringV1alpha1GrafanaAgentSpecContainers]
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.

        Containers lets you inject additional containers or modify operator-generated containers. This can be used to add an authentication proxy to a Grafana Agent pod or to change the behavior of an operator-generated container. Containers described here modify an operator-generated container if they share the same name and if modifications are done via a strategic merge patch. The current container names are: `grafana-agent` and `config-reloader`. Overriding containers is entirely outside the scope of what the Grafana Agent team supports and by doing so, you accept that this behavior may break at any time without notice.  # noqa: E501

        :param containers: The containers of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: list[ComGrafanaMonitoringV1alpha1GrafanaAgentSpecContainers]
        """

        self._containers = containers

    @property
    def disable_reporting(self):
        """Gets the disable_reporting of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501

        disableReporting disables reporting of enabled feature flags to Grafana.  # noqa: E501

        :return: The disable_reporting of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: bool
        """
        return self._disable_reporting

    @disable_reporting.setter
    def disable_reporting(self, disable_reporting):
        """Sets the disable_reporting of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.

        disableReporting disables reporting of enabled feature flags to Grafana.  # noqa: E501

        :param disable_reporting: The disable_reporting of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: bool
        """

        self._disable_reporting = disable_reporting

    @property
    def disable_support_bundle(self):
        """Gets the disable_support_bundle of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501

        disableSupportBundle disables the generation of support bundles.  # noqa: E501

        :return: The disable_support_bundle of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: bool
        """
        return self._disable_support_bundle

    @disable_support_bundle.setter
    def disable_support_bundle(self, disable_support_bundle):
        """Sets the disable_support_bundle of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.

        disableSupportBundle disables the generation of support bundles.  # noqa: E501

        :param disable_support_bundle: The disable_support_bundle of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: bool
        """

        self._disable_support_bundle = disable_support_bundle

    @property
    def enable_config_read_api(self):
        """Gets the enable_config_read_api of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501

        enableConfigReadAPI enables the read API for viewing the currently running config port 8080 on the agent.  # noqa: E501

        :return: The enable_config_read_api of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: bool
        """
        return self._enable_config_read_api

    @enable_config_read_api.setter
    def enable_config_read_api(self, enable_config_read_api):
        """Sets the enable_config_read_api of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.

        enableConfigReadAPI enables the read API for viewing the currently running config port 8080 on the agent.  # noqa: E501

        :param enable_config_read_api: The enable_config_read_api of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: bool
        """

        self._enable_config_read_api = enable_config_read_api

    @property
    def image(self):
        """Gets the image of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501

        Image, when specified, overrides the image used to run Agent. Specify the image along with a tag. You still need to set the version to ensure Grafana Agent Operator knows which version of Grafana Agent is being configured.  # noqa: E501

        :return: The image of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.

        Image, when specified, overrides the image used to run Agent. Specify the image along with a tag. You still need to set the version to ensure Grafana Agent Operator knows which version of Grafana Agent is being configured.  # noqa: E501

        :param image: The image of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def image_pull_secrets(self):
        """Gets the image_pull_secrets of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501

        ImagePullSecrets holds an optional list of references to Secrets within the same namespace used for pulling the Grafana Agent image from registries. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod  # noqa: E501

        :return: The image_pull_secrets of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecImagePullSecrets]
        """
        return self._image_pull_secrets

    @image_pull_secrets.setter
    def image_pull_secrets(self, image_pull_secrets):
        """Sets the image_pull_secrets of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.

        ImagePullSecrets holds an optional list of references to Secrets within the same namespace used for pulling the Grafana Agent image from registries. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod  # noqa: E501

        :param image_pull_secrets: The image_pull_secrets of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecImagePullSecrets]
        """

        self._image_pull_secrets = image_pull_secrets

    @property
    def init_containers(self):
        """Gets the init_containers of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501

        InitContainers let you add initContainers to the pod definition. These can be used to, for example, fetch secrets for injection into the Grafana Agent configuration from external sources. Errors during the execution of an initContainer cause the pod to restart. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other than secret fetching is entirely outside the scope of what the Grafana Agent maintainers support and by doing so, you accept that this behavior may break at any time without notice.  # noqa: E501

        :return: The init_containers of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: list[ComGrafanaMonitoringV1alpha1GrafanaAgentSpecContainers]
        """
        return self._init_containers

    @init_containers.setter
    def init_containers(self, init_containers):
        """Sets the init_containers of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.

        InitContainers let you add initContainers to the pod definition. These can be used to, for example, fetch secrets for injection into the Grafana Agent configuration from external sources. Errors during the execution of an initContainer cause the pod to restart. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other than secret fetching is entirely outside the scope of what the Grafana Agent maintainers support and by doing so, you accept that this behavior may break at any time without notice.  # noqa: E501

        :param init_containers: The init_containers of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: list[ComGrafanaMonitoringV1alpha1GrafanaAgentSpecContainers]
        """

        self._init_containers = init_containers

    @property
    def integrations(self):
        """Gets the integrations of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501


        :return: The integrations of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecIntegrations
        """
        return self._integrations

    @integrations.setter
    def integrations(self, integrations):
        """Sets the integrations of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.


        :param integrations: The integrations of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecIntegrations
        """

        self._integrations = integrations

    @property
    def log_format(self):
        """Gets the log_format of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501

        LogFormat controls the logging format of the generated pods. Defaults to \"logfmt\" if not set.  # noqa: E501

        :return: The log_format of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: str
        """
        return self._log_format

    @log_format.setter
    def log_format(self, log_format):
        """Sets the log_format of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.

        LogFormat controls the logging format of the generated pods. Defaults to \"logfmt\" if not set.  # noqa: E501

        :param log_format: The log_format of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: str
        """

        self._log_format = log_format

    @property
    def log_level(self):
        """Gets the log_level of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501

        LogLevel controls the log level of the generated pods. Defaults to \"info\" if not set.  # noqa: E501

        :return: The log_level of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: str
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.

        LogLevel controls the log level of the generated pods. Defaults to \"info\" if not set.  # noqa: E501

        :param log_level: The log_level of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: str
        """

        self._log_level = log_level

    @property
    def logs(self):
        """Gets the logs of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501


        :return: The logs of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.


        :param logs: The logs of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecLogs
        """

        self._logs = logs

    @property
    def metrics(self):
        """Gets the metrics of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501


        :return: The metrics of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.


        :param metrics: The metrics of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecMetrics
        """

        self._metrics = metrics

    @property
    def node_selector(self):
        """Gets the node_selector of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501

        NodeSelector defines which nodes pods should be scheduling on.  # noqa: E501

        :return: The node_selector of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.

        NodeSelector defines which nodes pods should be scheduling on.  # noqa: E501

        :param node_selector: The node_selector of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._node_selector = node_selector

    @property
    def paused(self):
        """Gets the paused of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501

        Paused prevents actions except for deletion to be performed on the underlying managed objects.  # noqa: E501

        :return: The paused of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: bool
        """
        return self._paused

    @paused.setter
    def paused(self, paused):
        """Sets the paused of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.

        Paused prevents actions except for deletion to be performed on the underlying managed objects.  # noqa: E501

        :param paused: The paused of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: bool
        """

        self._paused = paused

    @property
    def pod_metadata(self):
        """Gets the pod_metadata of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501


        :return: The pod_metadata of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecPodMetadata
        """
        return self._pod_metadata

    @pod_metadata.setter
    def pod_metadata(self, pod_metadata):
        """Sets the pod_metadata of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.


        :param pod_metadata: The pod_metadata of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecPodMetadata
        """

        self._pod_metadata = pod_metadata

    @property
    def port_name(self):
        """Gets the port_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501

        Port name used for the pods and governing service. This defaults to agent-metrics.  # noqa: E501

        :return: The port_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: str
        """
        return self._port_name

    @port_name.setter
    def port_name(self, port_name):
        """Sets the port_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.

        Port name used for the pods and governing service. This defaults to agent-metrics.  # noqa: E501

        :param port_name: The port_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: str
        """

        self._port_name = port_name

    @property
    def priority_class_name(self):
        """Gets the priority_class_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501

        PriorityClassName is the priority class assigned to pods.  # noqa: E501

        :return: The priority_class_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: str
        """
        return self._priority_class_name

    @priority_class_name.setter
    def priority_class_name(self, priority_class_name):
        """Sets the priority_class_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.

        PriorityClassName is the priority class assigned to pods.  # noqa: E501

        :param priority_class_name: The priority_class_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: str
        """

        self._priority_class_name = priority_class_name

    @property
    def resources(self):
        """Gets the resources of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501


        :return: The resources of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecResources1
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.


        :param resources: The resources of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecResources1
        """

        self._resources = resources

    @property
    def runtime_class_name(self):
        """Gets the runtime_class_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501

        RuntimeClassName is the runtime class assigned to pods.  # noqa: E501

        :return: The runtime_class_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: str
        """
        return self._runtime_class_name

    @runtime_class_name.setter
    def runtime_class_name(self, runtime_class_name):
        """Sets the runtime_class_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.

        RuntimeClassName is the runtime class assigned to pods.  # noqa: E501

        :param runtime_class_name: The runtime_class_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: str
        """

        self._runtime_class_name = runtime_class_name

    @property
    def secrets(self):
        """Gets the secrets of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501

        Secrets is a list of secrets in the same namespace as the GrafanaAgent object which will be mounted into each running Grafana Agent pod. The secrets are mounted into /etc/grafana-agent/extra-secrets/<secret-name>.  # noqa: E501

        :return: The secrets of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.

        Secrets is a list of secrets in the same namespace as the GrafanaAgent object which will be mounted into each running Grafana Agent pod. The secrets are mounted into /etc/grafana-agent/extra-secrets/<secret-name>.  # noqa: E501

        :param secrets: The secrets of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: list[str]
        """

        self._secrets = secrets

    @property
    def security_context(self):
        """Gets the security_context of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501


        :return: The security_context of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecSecurityContext
        """
        return self._security_context

    @security_context.setter
    def security_context(self, security_context):
        """Sets the security_context of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.


        :param security_context: The security_context of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecSecurityContext
        """

        self._security_context = security_context

    @property
    def service_account_name(self):
        """Gets the service_account_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501

        ServiceAccountName is the name of the ServiceAccount to use for running Grafana Agent pods.  # noqa: E501

        :return: The service_account_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: str
        """
        return self._service_account_name

    @service_account_name.setter
    def service_account_name(self, service_account_name):
        """Sets the service_account_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.

        ServiceAccountName is the name of the ServiceAccount to use for running Grafana Agent pods.  # noqa: E501

        :param service_account_name: The service_account_name of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: str
        """

        self._service_account_name = service_account_name

    @property
    def storage(self):
        """Gets the storage of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501


        :return: The storage of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecStorage
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.


        :param storage: The storage of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: ComGrafanaMonitoringV1alpha1GrafanaAgentSpecStorage
        """

        self._storage = storage

    @property
    def tolerations(self):
        """Gets the tolerations of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501

        Tolerations, if specified, controls the pod's tolerations.  # noqa: E501

        :return: The tolerations of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecTolerations]
        """
        return self._tolerations

    @tolerations.setter
    def tolerations(self, tolerations):
        """Sets the tolerations of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.

        Tolerations, if specified, controls the pod's tolerations.  # noqa: E501

        :param tolerations: The tolerations of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecTolerations]
        """

        self._tolerations = tolerations

    @property
    def topology_spread_constraints(self):
        """Gets the topology_spread_constraints of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501

        TopologySpreadConstraints, if specified, controls the pod's topology spread constraints.  # noqa: E501

        :return: The topology_spread_constraints of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: list[ComGrafanaMonitoringV1alpha1GrafanaAgentSpecTopologySpreadConstraints]
        """
        return self._topology_spread_constraints

    @topology_spread_constraints.setter
    def topology_spread_constraints(self, topology_spread_constraints):
        """Sets the topology_spread_constraints of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.

        TopologySpreadConstraints, if specified, controls the pod's topology spread constraints.  # noqa: E501

        :param topology_spread_constraints: The topology_spread_constraints of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: list[ComGrafanaMonitoringV1alpha1GrafanaAgentSpecTopologySpreadConstraints]
        """

        self._topology_spread_constraints = topology_spread_constraints

    @property
    def version(self):
        """Gets the version of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501

        Version of Grafana Agent to be deployed.  # noqa: E501

        :return: The version of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.

        Version of Grafana Agent to be deployed.  # noqa: E501

        :param version: The version of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def volume_mounts(self):
        """Gets the volume_mounts of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501

        VolumeMounts lets you configure additional VolumeMounts on the output StatefulSet definition. Specified VolumeMounts are appended to other VolumeMounts generated as a result of StorageSpec objects in the Grafana Agent container.  # noqa: E501

        :return: The volume_mounts of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: list[ComCoreosMonitoringV1AlertmanagerSpecVolumeMounts]
        """
        return self._volume_mounts

    @volume_mounts.setter
    def volume_mounts(self, volume_mounts):
        """Sets the volume_mounts of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.

        VolumeMounts lets you configure additional VolumeMounts on the output StatefulSet definition. Specified VolumeMounts are appended to other VolumeMounts generated as a result of StorageSpec objects in the Grafana Agent container.  # noqa: E501

        :param volume_mounts: The volume_mounts of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: list[ComCoreosMonitoringV1AlertmanagerSpecVolumeMounts]
        """

        self._volume_mounts = volume_mounts

    @property
    def volumes(self):
        """Gets the volumes of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501

        Volumes allows configuration of additional volumes on the output StatefulSet definition. The volumes specified are appended to other volumes that are generated as a result of StorageSpec objects.  # noqa: E501

        :return: The volumes of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :rtype: list[ComGrafanaMonitoringV1alpha1GrafanaAgentSpecVolumes]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.

        Volumes allows configuration of additional volumes on the output StatefulSet definition. The volumes specified are appended to other volumes that are generated as a result of StorageSpec objects.  # noqa: E501

        :param volumes: The volumes of this ComGrafanaMonitoringV1alpha1GrafanaAgentSpec.  # noqa: E501
        :type: list[ComGrafanaMonitoringV1alpha1GrafanaAgentSpecVolumes]
        """

        self._volumes = volumes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1GrafanaAgentSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComGrafanaMonitoringV1alpha1GrafanaAgentSpec):
            return True

        return self.to_dict() != other.to_dict()
