# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterV1alpha4MachineHealthCheckSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cluster_name': 'str',
        'max_unhealthy': 'object',
        'node_startup_timeout': 'str',
        'remediation_template': 'IoXK8sClusterV1alpha3MachineHealthCheckSpecRemediationTemplate',
        'selector': 'IoXK8sClusterV1alpha3MachineHealthCheckSpecSelector',
        'unhealthy_conditions': 'list[IoXK8sClusterV1alpha3MachineHealthCheckSpecUnhealthyConditions]',
        'unhealthy_range': 'str'
    }

    attribute_map = {
        'cluster_name': 'clusterName',
        'max_unhealthy': 'maxUnhealthy',
        'node_startup_timeout': 'nodeStartupTimeout',
        'remediation_template': 'remediationTemplate',
        'selector': 'selector',
        'unhealthy_conditions': 'unhealthyConditions',
        'unhealthy_range': 'unhealthyRange'
    }

    def __init__(self, cluster_name=None, max_unhealthy=None, node_startup_timeout=None, remediation_template=None, selector=None, unhealthy_conditions=None, unhealthy_range=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterV1alpha4MachineHealthCheckSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cluster_name = None
        self._max_unhealthy = None
        self._node_startup_timeout = None
        self._remediation_template = None
        self._selector = None
        self._unhealthy_conditions = None
        self._unhealthy_range = None
        self.discriminator = None

        self.cluster_name = cluster_name
        if max_unhealthy is not None:
            self.max_unhealthy = max_unhealthy
        if node_startup_timeout is not None:
            self.node_startup_timeout = node_startup_timeout
        if remediation_template is not None:
            self.remediation_template = remediation_template
        self.selector = selector
        self.unhealthy_conditions = unhealthy_conditions
        if unhealthy_range is not None:
            self.unhealthy_range = unhealthy_range

    @property
    def cluster_name(self):
        """Gets the cluster_name of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.  # noqa: E501

        ClusterName is the name of the Cluster this object belongs to.  # noqa: E501

        :return: The cluster_name of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.

        ClusterName is the name of the Cluster this object belongs to.  # noqa: E501

        :param cluster_name: The cluster_name of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cluster_name is None:  # noqa: E501
            raise ValueError("Invalid value for `cluster_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cluster_name is not None and len(cluster_name) < 1):
            raise ValueError("Invalid value for `cluster_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._cluster_name = cluster_name

    @property
    def max_unhealthy(self):
        """Gets the max_unhealthy of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.  # noqa: E501

        Any further remediation is only allowed if at most \"MaxUnhealthy\" machines selected by \"selector\" are not healthy.  # noqa: E501

        :return: The max_unhealthy of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.  # noqa: E501
        :rtype: object
        """
        return self._max_unhealthy

    @max_unhealthy.setter
    def max_unhealthy(self, max_unhealthy):
        """Sets the max_unhealthy of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.

        Any further remediation is only allowed if at most \"MaxUnhealthy\" machines selected by \"selector\" are not healthy.  # noqa: E501

        :param max_unhealthy: The max_unhealthy of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.  # noqa: E501
        :type: object
        """

        self._max_unhealthy = max_unhealthy

    @property
    def node_startup_timeout(self):
        """Gets the node_startup_timeout of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.  # noqa: E501

        Machines older than this duration without a node will be considered to have failed and will be remediated. If not set, this value is defaulted to 10 minutes. If you wish to disable this feature, set the value explicitly to 0.  # noqa: E501

        :return: The node_startup_timeout of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.  # noqa: E501
        :rtype: str
        """
        return self._node_startup_timeout

    @node_startup_timeout.setter
    def node_startup_timeout(self, node_startup_timeout):
        """Sets the node_startup_timeout of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.

        Machines older than this duration without a node will be considered to have failed and will be remediated. If not set, this value is defaulted to 10 minutes. If you wish to disable this feature, set the value explicitly to 0.  # noqa: E501

        :param node_startup_timeout: The node_startup_timeout of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.  # noqa: E501
        :type: str
        """

        self._node_startup_timeout = node_startup_timeout

    @property
    def remediation_template(self):
        """Gets the remediation_template of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.  # noqa: E501


        :return: The remediation_template of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.  # noqa: E501
        :rtype: IoXK8sClusterV1alpha3MachineHealthCheckSpecRemediationTemplate
        """
        return self._remediation_template

    @remediation_template.setter
    def remediation_template(self, remediation_template):
        """Sets the remediation_template of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.


        :param remediation_template: The remediation_template of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.  # noqa: E501
        :type: IoXK8sClusterV1alpha3MachineHealthCheckSpecRemediationTemplate
        """

        self._remediation_template = remediation_template

    @property
    def selector(self):
        """Gets the selector of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.  # noqa: E501


        :return: The selector of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.  # noqa: E501
        :rtype: IoXK8sClusterV1alpha3MachineHealthCheckSpecSelector
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.


        :param selector: The selector of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.  # noqa: E501
        :type: IoXK8sClusterV1alpha3MachineHealthCheckSpecSelector
        """
        if self.local_vars_configuration.client_side_validation and selector is None:  # noqa: E501
            raise ValueError("Invalid value for `selector`, must not be `None`")  # noqa: E501

        self._selector = selector

    @property
    def unhealthy_conditions(self):
        """Gets the unhealthy_conditions of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.  # noqa: E501

        UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy.  The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy.  # noqa: E501

        :return: The unhealthy_conditions of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.  # noqa: E501
        :rtype: list[IoXK8sClusterV1alpha3MachineHealthCheckSpecUnhealthyConditions]
        """
        return self._unhealthy_conditions

    @unhealthy_conditions.setter
    def unhealthy_conditions(self, unhealthy_conditions):
        """Sets the unhealthy_conditions of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.

        UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy.  The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy.  # noqa: E501

        :param unhealthy_conditions: The unhealthy_conditions of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.  # noqa: E501
        :type: list[IoXK8sClusterV1alpha3MachineHealthCheckSpecUnhealthyConditions]
        """
        if self.local_vars_configuration.client_side_validation and unhealthy_conditions is None:  # noqa: E501
            raise ValueError("Invalid value for `unhealthy_conditions`, must not be `None`")  # noqa: E501

        self._unhealthy_conditions = unhealthy_conditions

    @property
    def unhealthy_range(self):
        """Gets the unhealthy_range of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.  # noqa: E501

        Any further remediation is only allowed if the number of machines selected by \"selector\" as not healthy is within the range of \"UnhealthyRange\". Takes precedence over MaxUnhealthy. Eg. \"[3-5]\" - This means that remediation will be allowed only when: (a) there are at least 3 unhealthy machines (and) (b) there are at most 5 unhealthy machines  # noqa: E501

        :return: The unhealthy_range of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.  # noqa: E501
        :rtype: str
        """
        return self._unhealthy_range

    @unhealthy_range.setter
    def unhealthy_range(self, unhealthy_range):
        """Sets the unhealthy_range of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.

        Any further remediation is only allowed if the number of machines selected by \"selector\" as not healthy is within the range of \"UnhealthyRange\". Takes precedence over MaxUnhealthy. Eg. \"[3-5]\" - This means that remediation will be allowed only when: (a) there are at least 3 unhealthy machines (and) (b) there are at most 5 unhealthy machines  # noqa: E501

        :param unhealthy_range: The unhealthy_range of this IoXK8sClusterV1alpha4MachineHealthCheckSpec.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                unhealthy_range is not None and not re.search(r'^\[[0-9]+-[0-9]+\]$', unhealthy_range)):  # noqa: E501
            raise ValueError(r"Invalid value for `unhealthy_range`, must be a follow pattern or equal to `/^\[[0-9]+-[0-9]+\]$/`")  # noqa: E501

        self._unhealthy_range = unhealthy_range

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterV1alpha4MachineHealthCheckSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterV1alpha4MachineHealthCheckSpec):
            return True

        return self.to_dict() != other.to_dict()
