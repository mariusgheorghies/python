# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class AwsK8sServicesEc2V1alpha1InstanceStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ack_resource_metadata': 'AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata',
        'ami_launch_index': 'int',
        'architecture': 'str',
        'boot_mode': 'str',
        'capacity_reservation_id': 'str',
        'conditions': 'list[AwsK8sServicesEc2V1alpha1DHCPOptionsStatusConditions]',
        'elastic_gpu_associations': 'list[AwsK8sServicesEc2V1alpha1InstanceStatusElasticGPUAssociations]',
        'elastic_inference_accelerator_associations': 'list[AwsK8sServicesEc2V1alpha1InstanceStatusElasticInferenceAcceleratorAssociations]',
        'ena_support': 'bool',
        'hypervisor': 'str',
        'instance_id': 'str',
        'instance_lifecycle': 'str',
        'ipv6_address': 'str',
        'launch_time': 'datetime',
        'licenses': 'list[AwsK8sServicesEc2V1alpha1InstanceSpecLicenseSpecifications]',
        'outpost_arn': 'str',
        'platform': 'str',
        'platform_details': 'str',
        'private_dns_name': 'str',
        'product_codes': 'list[AwsK8sServicesEc2V1alpha1InstanceStatusProductCodes]',
        'public_dns_name': 'str',
        'public_ip_address': 'str',
        'root_device_name': 'str',
        'root_device_type': 'str',
        'source_dest_check': 'bool',
        'spot_instance_request_id': 'str',
        'sriov_net_support': 'str',
        'state': 'AwsK8sServicesEc2V1alpha1InstanceStatusState',
        'state_reason': 'AwsK8sServicesEc2V1alpha1InstanceStatusStateReason',
        'state_transition_reason': 'str',
        'tpm_support': 'str',
        'usage_operation': 'str',
        'usage_operation_update_time': 'datetime',
        'virtualization_type': 'str',
        'vpc_id': 'str'
    }

    attribute_map = {
        'ack_resource_metadata': 'ackResourceMetadata',
        'ami_launch_index': 'amiLaunchIndex',
        'architecture': 'architecture',
        'boot_mode': 'bootMode',
        'capacity_reservation_id': 'capacityReservationID',
        'conditions': 'conditions',
        'elastic_gpu_associations': 'elasticGPUAssociations',
        'elastic_inference_accelerator_associations': 'elasticInferenceAcceleratorAssociations',
        'ena_support': 'enaSupport',
        'hypervisor': 'hypervisor',
        'instance_id': 'instanceID',
        'instance_lifecycle': 'instanceLifecycle',
        'ipv6_address': 'ipv6Address',
        'launch_time': 'launchTime',
        'licenses': 'licenses',
        'outpost_arn': 'outpostARN',
        'platform': 'platform',
        'platform_details': 'platformDetails',
        'private_dns_name': 'privateDNSName',
        'product_codes': 'productCodes',
        'public_dns_name': 'publicDNSName',
        'public_ip_address': 'publicIPAddress',
        'root_device_name': 'rootDeviceName',
        'root_device_type': 'rootDeviceType',
        'source_dest_check': 'sourceDestCheck',
        'spot_instance_request_id': 'spotInstanceRequestID',
        'sriov_net_support': 'sriovNetSupport',
        'state': 'state',
        'state_reason': 'stateReason',
        'state_transition_reason': 'stateTransitionReason',
        'tpm_support': 'tpmSupport',
        'usage_operation': 'usageOperation',
        'usage_operation_update_time': 'usageOperationUpdateTime',
        'virtualization_type': 'virtualizationType',
        'vpc_id': 'vpcID'
    }

    def __init__(self, ack_resource_metadata=None, ami_launch_index=None, architecture=None, boot_mode=None, capacity_reservation_id=None, conditions=None, elastic_gpu_associations=None, elastic_inference_accelerator_associations=None, ena_support=None, hypervisor=None, instance_id=None, instance_lifecycle=None, ipv6_address=None, launch_time=None, licenses=None, outpost_arn=None, platform=None, platform_details=None, private_dns_name=None, product_codes=None, public_dns_name=None, public_ip_address=None, root_device_name=None, root_device_type=None, source_dest_check=None, spot_instance_request_id=None, sriov_net_support=None, state=None, state_reason=None, state_transition_reason=None, tpm_support=None, usage_operation=None, usage_operation_update_time=None, virtualization_type=None, vpc_id=None, local_vars_configuration=None):  # noqa: E501
        """AwsK8sServicesEc2V1alpha1InstanceStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ack_resource_metadata = None
        self._ami_launch_index = None
        self._architecture = None
        self._boot_mode = None
        self._capacity_reservation_id = None
        self._conditions = None
        self._elastic_gpu_associations = None
        self._elastic_inference_accelerator_associations = None
        self._ena_support = None
        self._hypervisor = None
        self._instance_id = None
        self._instance_lifecycle = None
        self._ipv6_address = None
        self._launch_time = None
        self._licenses = None
        self._outpost_arn = None
        self._platform = None
        self._platform_details = None
        self._private_dns_name = None
        self._product_codes = None
        self._public_dns_name = None
        self._public_ip_address = None
        self._root_device_name = None
        self._root_device_type = None
        self._source_dest_check = None
        self._spot_instance_request_id = None
        self._sriov_net_support = None
        self._state = None
        self._state_reason = None
        self._state_transition_reason = None
        self._tpm_support = None
        self._usage_operation = None
        self._usage_operation_update_time = None
        self._virtualization_type = None
        self._vpc_id = None
        self.discriminator = None

        if ack_resource_metadata is not None:
            self.ack_resource_metadata = ack_resource_metadata
        if ami_launch_index is not None:
            self.ami_launch_index = ami_launch_index
        if architecture is not None:
            self.architecture = architecture
        if boot_mode is not None:
            self.boot_mode = boot_mode
        if capacity_reservation_id is not None:
            self.capacity_reservation_id = capacity_reservation_id
        if conditions is not None:
            self.conditions = conditions
        if elastic_gpu_associations is not None:
            self.elastic_gpu_associations = elastic_gpu_associations
        if elastic_inference_accelerator_associations is not None:
            self.elastic_inference_accelerator_associations = elastic_inference_accelerator_associations
        if ena_support is not None:
            self.ena_support = ena_support
        if hypervisor is not None:
            self.hypervisor = hypervisor
        if instance_id is not None:
            self.instance_id = instance_id
        if instance_lifecycle is not None:
            self.instance_lifecycle = instance_lifecycle
        if ipv6_address is not None:
            self.ipv6_address = ipv6_address
        if launch_time is not None:
            self.launch_time = launch_time
        if licenses is not None:
            self.licenses = licenses
        if outpost_arn is not None:
            self.outpost_arn = outpost_arn
        if platform is not None:
            self.platform = platform
        if platform_details is not None:
            self.platform_details = platform_details
        if private_dns_name is not None:
            self.private_dns_name = private_dns_name
        if product_codes is not None:
            self.product_codes = product_codes
        if public_dns_name is not None:
            self.public_dns_name = public_dns_name
        if public_ip_address is not None:
            self.public_ip_address = public_ip_address
        if root_device_name is not None:
            self.root_device_name = root_device_name
        if root_device_type is not None:
            self.root_device_type = root_device_type
        if source_dest_check is not None:
            self.source_dest_check = source_dest_check
        if spot_instance_request_id is not None:
            self.spot_instance_request_id = spot_instance_request_id
        if sriov_net_support is not None:
            self.sriov_net_support = sriov_net_support
        if state is not None:
            self.state = state
        if state_reason is not None:
            self.state_reason = state_reason
        if state_transition_reason is not None:
            self.state_transition_reason = state_transition_reason
        if tpm_support is not None:
            self.tpm_support = tpm_support
        if usage_operation is not None:
            self.usage_operation = usage_operation
        if usage_operation_update_time is not None:
            self.usage_operation_update_time = usage_operation_update_time
        if virtualization_type is not None:
            self.virtualization_type = virtualization_type
        if vpc_id is not None:
            self.vpc_id = vpc_id

    @property
    def ack_resource_metadata(self):
        """Gets the ack_resource_metadata of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501


        :return: The ack_resource_metadata of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata
        """
        return self._ack_resource_metadata

    @ack_resource_metadata.setter
    def ack_resource_metadata(self, ack_resource_metadata):
        """Sets the ack_resource_metadata of this AwsK8sServicesEc2V1alpha1InstanceStatus.


        :param ack_resource_metadata: The ack_resource_metadata of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1DHCPOptionsStatusAckResourceMetadata
        """

        self._ack_resource_metadata = ack_resource_metadata

    @property
    def ami_launch_index(self):
        """Gets the ami_launch_index of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        The AMI launch index, which can be used to find this instance in the launch group.  # noqa: E501

        :return: The ami_launch_index of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: int
        """
        return self._ami_launch_index

    @ami_launch_index.setter
    def ami_launch_index(self, ami_launch_index):
        """Sets the ami_launch_index of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        The AMI launch index, which can be used to find this instance in the launch group.  # noqa: E501

        :param ami_launch_index: The ami_launch_index of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: int
        """

        self._ami_launch_index = ami_launch_index

    @property
    def architecture(self):
        """Gets the architecture of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        The architecture of the image.  # noqa: E501

        :return: The architecture of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        The architecture of the image.  # noqa: E501

        :param architecture: The architecture of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: str
        """

        self._architecture = architecture

    @property
    def boot_mode(self):
        """Gets the boot_mode of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        The boot mode of the instance. For more information, see Boot modes (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html) in the Amazon EC2 User Guide.  # noqa: E501

        :return: The boot_mode of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._boot_mode

    @boot_mode.setter
    def boot_mode(self, boot_mode):
        """Sets the boot_mode of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        The boot mode of the instance. For more information, see Boot modes (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html) in the Amazon EC2 User Guide.  # noqa: E501

        :param boot_mode: The boot_mode of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: str
        """

        self._boot_mode = boot_mode

    @property
    def capacity_reservation_id(self):
        """Gets the capacity_reservation_id of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        The ID of the Capacity Reservation.  # noqa: E501

        :return: The capacity_reservation_id of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._capacity_reservation_id

    @capacity_reservation_id.setter
    def capacity_reservation_id(self, capacity_reservation_id):
        """Sets the capacity_reservation_id of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        The ID of the Capacity Reservation.  # noqa: E501

        :param capacity_reservation_id: The capacity_reservation_id of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: str
        """

        self._capacity_reservation_id = capacity_reservation_id

    @property
    def conditions(self):
        """Gets the conditions of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        All CRS managed by ACK have a common `Status.Conditions` member that contains a collection of `ackv1alpha1.Condition` objects that describe the various terminal states of the CR and its backend AWS service API resource  # noqa: E501

        :return: The conditions of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1DHCPOptionsStatusConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        All CRS managed by ACK have a common `Status.Conditions` member that contains a collection of `ackv1alpha1.Condition` objects that describe the various terminal states of the CR and its backend AWS service API resource  # noqa: E501

        :param conditions: The conditions of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1DHCPOptionsStatusConditions]
        """

        self._conditions = conditions

    @property
    def elastic_gpu_associations(self):
        """Gets the elastic_gpu_associations of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        The Elastic GPU associated with the instance.  # noqa: E501

        :return: The elastic_gpu_associations of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1InstanceStatusElasticGPUAssociations]
        """
        return self._elastic_gpu_associations

    @elastic_gpu_associations.setter
    def elastic_gpu_associations(self, elastic_gpu_associations):
        """Sets the elastic_gpu_associations of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        The Elastic GPU associated with the instance.  # noqa: E501

        :param elastic_gpu_associations: The elastic_gpu_associations of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1InstanceStatusElasticGPUAssociations]
        """

        self._elastic_gpu_associations = elastic_gpu_associations

    @property
    def elastic_inference_accelerator_associations(self):
        """Gets the elastic_inference_accelerator_associations of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        The elastic inference accelerator associated with the instance.  # noqa: E501

        :return: The elastic_inference_accelerator_associations of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1InstanceStatusElasticInferenceAcceleratorAssociations]
        """
        return self._elastic_inference_accelerator_associations

    @elastic_inference_accelerator_associations.setter
    def elastic_inference_accelerator_associations(self, elastic_inference_accelerator_associations):
        """Sets the elastic_inference_accelerator_associations of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        The elastic inference accelerator associated with the instance.  # noqa: E501

        :param elastic_inference_accelerator_associations: The elastic_inference_accelerator_associations of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1InstanceStatusElasticInferenceAcceleratorAssociations]
        """

        self._elastic_inference_accelerator_associations = elastic_inference_accelerator_associations

    @property
    def ena_support(self):
        """Gets the ena_support of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        Specifies whether enhanced networking with ENA is enabled.  # noqa: E501

        :return: The ena_support of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: bool
        """
        return self._ena_support

    @ena_support.setter
    def ena_support(self, ena_support):
        """Sets the ena_support of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        Specifies whether enhanced networking with ENA is enabled.  # noqa: E501

        :param ena_support: The ena_support of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: bool
        """

        self._ena_support = ena_support

    @property
    def hypervisor(self):
        """Gets the hypervisor of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        The hypervisor type of the instance. The value xen is used for both Xen and Nitro hypervisors.  # noqa: E501

        :return: The hypervisor of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._hypervisor

    @hypervisor.setter
    def hypervisor(self, hypervisor):
        """Sets the hypervisor of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        The hypervisor type of the instance. The value xen is used for both Xen and Nitro hypervisors.  # noqa: E501

        :param hypervisor: The hypervisor of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: str
        """

        self._hypervisor = hypervisor

    @property
    def instance_id(self):
        """Gets the instance_id of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        The ID of the instance.  # noqa: E501

        :return: The instance_id of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        The ID of the instance.  # noqa: E501

        :param instance_id: The instance_id of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def instance_lifecycle(self):
        """Gets the instance_lifecycle of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        Indicates whether this is a Spot Instance or a Scheduled Instance.  # noqa: E501

        :return: The instance_lifecycle of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._instance_lifecycle

    @instance_lifecycle.setter
    def instance_lifecycle(self, instance_lifecycle):
        """Sets the instance_lifecycle of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        Indicates whether this is a Spot Instance or a Scheduled Instance.  # noqa: E501

        :param instance_lifecycle: The instance_lifecycle of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: str
        """

        self._instance_lifecycle = instance_lifecycle

    @property
    def ipv6_address(self):
        """Gets the ipv6_address of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        The IPv6 address assigned to the instance.  # noqa: E501

        :return: The ipv6_address of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_address

    @ipv6_address.setter
    def ipv6_address(self, ipv6_address):
        """Sets the ipv6_address of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        The IPv6 address assigned to the instance.  # noqa: E501

        :param ipv6_address: The ipv6_address of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: str
        """

        self._ipv6_address = ipv6_address

    @property
    def launch_time(self):
        """Gets the launch_time of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        The time the instance was launched.  # noqa: E501

        :return: The launch_time of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._launch_time

    @launch_time.setter
    def launch_time(self, launch_time):
        """Sets the launch_time of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        The time the instance was launched.  # noqa: E501

        :param launch_time: The launch_time of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: datetime
        """

        self._launch_time = launch_time

    @property
    def licenses(self):
        """Gets the licenses of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        The license configurations for the instance.  # noqa: E501

        :return: The licenses of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1InstanceSpecLicenseSpecifications]
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses):
        """Sets the licenses of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        The license configurations for the instance.  # noqa: E501

        :param licenses: The licenses of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1InstanceSpecLicenseSpecifications]
        """

        self._licenses = licenses

    @property
    def outpost_arn(self):
        """Gets the outpost_arn of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        The Amazon Resource Name (ARN) of the Outpost.  # noqa: E501

        :return: The outpost_arn of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._outpost_arn

    @outpost_arn.setter
    def outpost_arn(self, outpost_arn):
        """Sets the outpost_arn of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        The Amazon Resource Name (ARN) of the Outpost.  # noqa: E501

        :param outpost_arn: The outpost_arn of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: str
        """

        self._outpost_arn = outpost_arn

    @property
    def platform(self):
        """Gets the platform of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        The value is Windows for Windows instances; otherwise blank.  # noqa: E501

        :return: The platform of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        The value is Windows for Windows instances; otherwise blank.  # noqa: E501

        :param platform: The platform of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def platform_details(self):
        """Gets the platform_details of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        The platform details value for the instance. For more information, see AMI billing information fields (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/billing-info-fields.html) in the Amazon EC2 User Guide.  # noqa: E501

        :return: The platform_details of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._platform_details

    @platform_details.setter
    def platform_details(self, platform_details):
        """Sets the platform_details of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        The platform details value for the instance. For more information, see AMI billing information fields (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/billing-info-fields.html) in the Amazon EC2 User Guide.  # noqa: E501

        :param platform_details: The platform_details of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: str
        """

        self._platform_details = platform_details

    @property
    def private_dns_name(self):
        """Gets the private_dns_name of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        (IPv4 only) The private DNS hostname name assigned to the instance. This DNS hostname can only be used inside the Amazon EC2 network. This name is not available until the instance enters the running state.   [EC2-VPC] The Amazon-provided DNS server resolves Amazon-provided private DNS hostnames if you've enabled DNS resolution and DNS hostnames in your VPC. If you are not using the Amazon-provided DNS server in your VPC, your custom domain name servers must resolve the hostname as appropriate.  # noqa: E501

        :return: The private_dns_name of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._private_dns_name

    @private_dns_name.setter
    def private_dns_name(self, private_dns_name):
        """Sets the private_dns_name of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        (IPv4 only) The private DNS hostname name assigned to the instance. This DNS hostname can only be used inside the Amazon EC2 network. This name is not available until the instance enters the running state.   [EC2-VPC] The Amazon-provided DNS server resolves Amazon-provided private DNS hostnames if you've enabled DNS resolution and DNS hostnames in your VPC. If you are not using the Amazon-provided DNS server in your VPC, your custom domain name servers must resolve the hostname as appropriate.  # noqa: E501

        :param private_dns_name: The private_dns_name of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: str
        """

        self._private_dns_name = private_dns_name

    @property
    def product_codes(self):
        """Gets the product_codes of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        The product codes attached to this instance, if applicable.  # noqa: E501

        :return: The product_codes of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: list[AwsK8sServicesEc2V1alpha1InstanceStatusProductCodes]
        """
        return self._product_codes

    @product_codes.setter
    def product_codes(self, product_codes):
        """Sets the product_codes of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        The product codes attached to this instance, if applicable.  # noqa: E501

        :param product_codes: The product_codes of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: list[AwsK8sServicesEc2V1alpha1InstanceStatusProductCodes]
        """

        self._product_codes = product_codes

    @property
    def public_dns_name(self):
        """Gets the public_dns_name of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        (IPv4 only) The public DNS name assigned to the instance. This name is not available until the instance enters the running state. For EC2-VPC, this name is only available if you've enabled DNS hostnames for your VPC.  # noqa: E501

        :return: The public_dns_name of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._public_dns_name

    @public_dns_name.setter
    def public_dns_name(self, public_dns_name):
        """Sets the public_dns_name of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        (IPv4 only) The public DNS name assigned to the instance. This name is not available until the instance enters the running state. For EC2-VPC, this name is only available if you've enabled DNS hostnames for your VPC.  # noqa: E501

        :param public_dns_name: The public_dns_name of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: str
        """

        self._public_dns_name = public_dns_name

    @property
    def public_ip_address(self):
        """Gets the public_ip_address of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        The public IPv4 address, or the Carrier IP address assigned to the instance, if applicable.   A Carrier IP address only applies to an instance launched in a subnet associated with a Wavelength Zone.  # noqa: E501

        :return: The public_ip_address of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._public_ip_address

    @public_ip_address.setter
    def public_ip_address(self, public_ip_address):
        """Sets the public_ip_address of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        The public IPv4 address, or the Carrier IP address assigned to the instance, if applicable.   A Carrier IP address only applies to an instance launched in a subnet associated with a Wavelength Zone.  # noqa: E501

        :param public_ip_address: The public_ip_address of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: str
        """

        self._public_ip_address = public_ip_address

    @property
    def root_device_name(self):
        """Gets the root_device_name of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        The device name of the root device volume (for example, /dev/sda1).  # noqa: E501

        :return: The root_device_name of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._root_device_name

    @root_device_name.setter
    def root_device_name(self, root_device_name):
        """Sets the root_device_name of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        The device name of the root device volume (for example, /dev/sda1).  # noqa: E501

        :param root_device_name: The root_device_name of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: str
        """

        self._root_device_name = root_device_name

    @property
    def root_device_type(self):
        """Gets the root_device_type of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        The root device type used by the AMI. The AMI can use an EBS volume or an instance store volume.  # noqa: E501

        :return: The root_device_type of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._root_device_type

    @root_device_type.setter
    def root_device_type(self, root_device_type):
        """Sets the root_device_type of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        The root device type used by the AMI. The AMI can use an EBS volume or an instance store volume.  # noqa: E501

        :param root_device_type: The root_device_type of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: str
        """

        self._root_device_type = root_device_type

    @property
    def source_dest_check(self):
        """Gets the source_dest_check of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        Indicates whether source/destination checking is enabled.  # noqa: E501

        :return: The source_dest_check of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: bool
        """
        return self._source_dest_check

    @source_dest_check.setter
    def source_dest_check(self, source_dest_check):
        """Sets the source_dest_check of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        Indicates whether source/destination checking is enabled.  # noqa: E501

        :param source_dest_check: The source_dest_check of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: bool
        """

        self._source_dest_check = source_dest_check

    @property
    def spot_instance_request_id(self):
        """Gets the spot_instance_request_id of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        If the request is a Spot Instance request, the ID of the request.  # noqa: E501

        :return: The spot_instance_request_id of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._spot_instance_request_id

    @spot_instance_request_id.setter
    def spot_instance_request_id(self, spot_instance_request_id):
        """Sets the spot_instance_request_id of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        If the request is a Spot Instance request, the ID of the request.  # noqa: E501

        :param spot_instance_request_id: The spot_instance_request_id of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: str
        """

        self._spot_instance_request_id = spot_instance_request_id

    @property
    def sriov_net_support(self):
        """Gets the sriov_net_support of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.  # noqa: E501

        :return: The sriov_net_support of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._sriov_net_support

    @sriov_net_support.setter
    def sriov_net_support(self, sriov_net_support):
        """Sets the sriov_net_support of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.  # noqa: E501

        :param sriov_net_support: The sriov_net_support of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: str
        """

        self._sriov_net_support = sriov_net_support

    @property
    def state(self):
        """Gets the state of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501


        :return: The state of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1InstanceStatusState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AwsK8sServicesEc2V1alpha1InstanceStatus.


        :param state: The state of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1InstanceStatusState
        """

        self._state = state

    @property
    def state_reason(self):
        """Gets the state_reason of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501


        :return: The state_reason of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: AwsK8sServicesEc2V1alpha1InstanceStatusStateReason
        """
        return self._state_reason

    @state_reason.setter
    def state_reason(self, state_reason):
        """Sets the state_reason of this AwsK8sServicesEc2V1alpha1InstanceStatus.


        :param state_reason: The state_reason of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: AwsK8sServicesEc2V1alpha1InstanceStatusStateReason
        """

        self._state_reason = state_reason

    @property
    def state_transition_reason(self):
        """Gets the state_transition_reason of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        The reason for the most recent state transition. This might be an empty string.  # noqa: E501

        :return: The state_transition_reason of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._state_transition_reason

    @state_transition_reason.setter
    def state_transition_reason(self, state_transition_reason):
        """Sets the state_transition_reason of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        The reason for the most recent state transition. This might be an empty string.  # noqa: E501

        :param state_transition_reason: The state_transition_reason of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: str
        """

        self._state_transition_reason = state_transition_reason

    @property
    def tpm_support(self):
        """Gets the tpm_support of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        If the instance is configured for NitroTPM support, the value is v2.0. For more information, see NitroTPM (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitrotpm.html) in the Amazon EC2 User Guide.  # noqa: E501

        :return: The tpm_support of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._tpm_support

    @tpm_support.setter
    def tpm_support(self, tpm_support):
        """Sets the tpm_support of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        If the instance is configured for NitroTPM support, the value is v2.0. For more information, see NitroTPM (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitrotpm.html) in the Amazon EC2 User Guide.  # noqa: E501

        :param tpm_support: The tpm_support of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: str
        """

        self._tpm_support = tpm_support

    @property
    def usage_operation(self):
        """Gets the usage_operation of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        The usage operation value for the instance. For more information, see AMI billing information fields (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/billing-info-fields.html) in the Amazon EC2 User Guide.  # noqa: E501

        :return: The usage_operation of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._usage_operation

    @usage_operation.setter
    def usage_operation(self, usage_operation):
        """Sets the usage_operation of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        The usage operation value for the instance. For more information, see AMI billing information fields (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/billing-info-fields.html) in the Amazon EC2 User Guide.  # noqa: E501

        :param usage_operation: The usage_operation of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: str
        """

        self._usage_operation = usage_operation

    @property
    def usage_operation_update_time(self):
        """Gets the usage_operation_update_time of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        The time that the usage operation was last updated.  # noqa: E501

        :return: The usage_operation_update_time of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._usage_operation_update_time

    @usage_operation_update_time.setter
    def usage_operation_update_time(self, usage_operation_update_time):
        """Sets the usage_operation_update_time of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        The time that the usage operation was last updated.  # noqa: E501

        :param usage_operation_update_time: The usage_operation_update_time of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: datetime
        """

        self._usage_operation_update_time = usage_operation_update_time

    @property
    def virtualization_type(self):
        """Gets the virtualization_type of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        The virtualization type of the instance.  # noqa: E501

        :return: The virtualization_type of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._virtualization_type

    @virtualization_type.setter
    def virtualization_type(self, virtualization_type):
        """Sets the virtualization_type of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        The virtualization type of the instance.  # noqa: E501

        :param virtualization_type: The virtualization_type of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: str
        """

        self._virtualization_type = virtualization_type

    @property
    def vpc_id(self):
        """Gets the vpc_id of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501

        [EC2-VPC] The ID of the VPC in which the instance is running.  # noqa: E501

        :return: The vpc_id of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._vpc_id

    @vpc_id.setter
    def vpc_id(self, vpc_id):
        """Sets the vpc_id of this AwsK8sServicesEc2V1alpha1InstanceStatus.

        [EC2-VPC] The ID of the VPC in which the instance is running.  # noqa: E501

        :param vpc_id: The vpc_id of this AwsK8sServicesEc2V1alpha1InstanceStatus.  # noqa: E501
        :type: str
        """

        self._vpc_id = vpc_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1InstanceStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwsK8sServicesEc2V1alpha1InstanceStatus):
            return True

        return self.to_dict() != other.to_dict()
