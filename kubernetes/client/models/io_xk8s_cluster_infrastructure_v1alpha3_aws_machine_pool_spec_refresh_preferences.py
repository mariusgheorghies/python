# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.20.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecRefreshPreferences(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'instance_warmup': 'int',
        'min_healthy_percentage': 'int',
        'strategy': 'str'
    }

    attribute_map = {
        'instance_warmup': 'instanceWarmup',
        'min_healthy_percentage': 'minHealthyPercentage',
        'strategy': 'strategy'
    }

    def __init__(self, instance_warmup=None, min_healthy_percentage=None, strategy=None, local_vars_configuration=None):  # noqa: E501
        """IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecRefreshPreferences - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._instance_warmup = None
        self._min_healthy_percentage = None
        self._strategy = None
        self.discriminator = None

        if instance_warmup is not None:
            self.instance_warmup = instance_warmup
        if min_healthy_percentage is not None:
            self.min_healthy_percentage = min_healthy_percentage
        if strategy is not None:
            self.strategy = strategy

    @property
    def instance_warmup(self):
        """Gets the instance_warmup of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecRefreshPreferences.  # noqa: E501

        The number of seconds until a newly launched instance is configured and ready to use. During this time, the next replacement will not be initiated. The default is to use the value for the health check grace period defined for the group.  # noqa: E501

        :return: The instance_warmup of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecRefreshPreferences.  # noqa: E501
        :rtype: int
        """
        return self._instance_warmup

    @instance_warmup.setter
    def instance_warmup(self, instance_warmup):
        """Sets the instance_warmup of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecRefreshPreferences.

        The number of seconds until a newly launched instance is configured and ready to use. During this time, the next replacement will not be initiated. The default is to use the value for the health check grace period defined for the group.  # noqa: E501

        :param instance_warmup: The instance_warmup of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecRefreshPreferences.  # noqa: E501
        :type: int
        """

        self._instance_warmup = instance_warmup

    @property
    def min_healthy_percentage(self):
        """Gets the min_healthy_percentage of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecRefreshPreferences.  # noqa: E501

        The amount of capacity as a percentage in ASG that must remain healthy during an instance refresh. The default is 90.  # noqa: E501

        :return: The min_healthy_percentage of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecRefreshPreferences.  # noqa: E501
        :rtype: int
        """
        return self._min_healthy_percentage

    @min_healthy_percentage.setter
    def min_healthy_percentage(self, min_healthy_percentage):
        """Sets the min_healthy_percentage of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecRefreshPreferences.

        The amount of capacity as a percentage in ASG that must remain healthy during an instance refresh. The default is 90.  # noqa: E501

        :param min_healthy_percentage: The min_healthy_percentage of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecRefreshPreferences.  # noqa: E501
        :type: int
        """

        self._min_healthy_percentage = min_healthy_percentage

    @property
    def strategy(self):
        """Gets the strategy of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecRefreshPreferences.  # noqa: E501

        The strategy to use for the instance refresh. The only valid value is Rolling. A rolling update is an update that is applied to all instances in an Auto Scaling group until all instances have been updated.  # noqa: E501

        :return: The strategy of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecRefreshPreferences.  # noqa: E501
        :rtype: str
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecRefreshPreferences.

        The strategy to use for the instance refresh. The only valid value is Rolling. A rolling update is an update that is applied to all instances in an Auto Scaling group until all instances have been updated.  # noqa: E501

        :param strategy: The strategy of this IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecRefreshPreferences.  # noqa: E501
        :type: str
        """

        self._strategy = strategy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecRefreshPreferences):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoXK8sClusterInfrastructureV1alpha3AWSMachinePoolSpecRefreshPreferences):
            return True

        return self.to_dict() != other.to_dict()
