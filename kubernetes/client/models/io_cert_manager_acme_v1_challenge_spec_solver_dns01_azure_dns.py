# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'client_id': 'str',
        'client_secret_secret_ref': 'IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNSClientSecretSecretRef',
        'environment': 'str',
        'hosted_zone_name': 'str',
        'managed_identity': 'IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNSManagedIdentity',
        'resource_group_name': 'str',
        'subscription_id': 'str',
        'tenant_id': 'str'
    }

    attribute_map = {
        'client_id': 'clientID',
        'client_secret_secret_ref': 'clientSecretSecretRef',
        'environment': 'environment',
        'hosted_zone_name': 'hostedZoneName',
        'managed_identity': 'managedIdentity',
        'resource_group_name': 'resourceGroupName',
        'subscription_id': 'subscriptionID',
        'tenant_id': 'tenantID'
    }

    def __init__(self, client_id=None, client_secret_secret_ref=None, environment=None, hosted_zone_name=None, managed_identity=None, resource_group_name=None, subscription_id=None, tenant_id=None, local_vars_configuration=None):  # noqa: E501
        """IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._client_id = None
        self._client_secret_secret_ref = None
        self._environment = None
        self._hosted_zone_name = None
        self._managed_identity = None
        self._resource_group_name = None
        self._subscription_id = None
        self._tenant_id = None
        self.discriminator = None

        if client_id is not None:
            self.client_id = client_id
        if client_secret_secret_ref is not None:
            self.client_secret_secret_ref = client_secret_secret_ref
        if environment is not None:
            self.environment = environment
        if hosted_zone_name is not None:
            self.hosted_zone_name = hosted_zone_name
        if managed_identity is not None:
            self.managed_identity = managed_identity
        self.resource_group_name = resource_group_name
        self.subscription_id = subscription_id
        if tenant_id is not None:
            self.tenant_id = tenant_id

    @property
    def client_id(self):
        """Gets the client_id of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.  # noqa: E501

        if both this and ClientSecret are left unset MSI will be used  # noqa: E501

        :return: The client_id of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.

        if both this and ClientSecret are left unset MSI will be used  # noqa: E501

        :param client_id: The client_id of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_secret_secret_ref(self):
        """Gets the client_secret_secret_ref of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.  # noqa: E501


        :return: The client_secret_secret_ref of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.  # noqa: E501
        :rtype: IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNSClientSecretSecretRef
        """
        return self._client_secret_secret_ref

    @client_secret_secret_ref.setter
    def client_secret_secret_ref(self, client_secret_secret_ref):
        """Sets the client_secret_secret_ref of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.


        :param client_secret_secret_ref: The client_secret_secret_ref of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.  # noqa: E501
        :type: IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNSClientSecretSecretRef
        """

        self._client_secret_secret_ref = client_secret_secret_ref

    @property
    def environment(self):
        """Gets the environment of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.  # noqa: E501

        name of the Azure environment (default AzurePublicCloud)  # noqa: E501

        :return: The environment of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.

        name of the Azure environment (default AzurePublicCloud)  # noqa: E501

        :param environment: The environment of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.  # noqa: E501
        :type: str
        """
        allowed_values = ["AzurePublicCloud", "AzureChinaCloud", "AzureGermanCloud", "AzureUSGovernmentCloud"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and environment not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `environment` ({0}), must be one of {1}"  # noqa: E501
                .format(environment, allowed_values)
            )

        self._environment = environment

    @property
    def hosted_zone_name(self):
        """Gets the hosted_zone_name of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.  # noqa: E501

        name of the DNS zone that should be used  # noqa: E501

        :return: The hosted_zone_name of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.  # noqa: E501
        :rtype: str
        """
        return self._hosted_zone_name

    @hosted_zone_name.setter
    def hosted_zone_name(self, hosted_zone_name):
        """Sets the hosted_zone_name of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.

        name of the DNS zone that should be used  # noqa: E501

        :param hosted_zone_name: The hosted_zone_name of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.  # noqa: E501
        :type: str
        """

        self._hosted_zone_name = hosted_zone_name

    @property
    def managed_identity(self):
        """Gets the managed_identity of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.  # noqa: E501


        :return: The managed_identity of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.  # noqa: E501
        :rtype: IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNSManagedIdentity
        """
        return self._managed_identity

    @managed_identity.setter
    def managed_identity(self, managed_identity):
        """Sets the managed_identity of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.


        :param managed_identity: The managed_identity of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.  # noqa: E501
        :type: IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNSManagedIdentity
        """

        self._managed_identity = managed_identity

    @property
    def resource_group_name(self):
        """Gets the resource_group_name of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.  # noqa: E501

        resource group the DNS zone is located in  # noqa: E501

        :return: The resource_group_name of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.  # noqa: E501
        :rtype: str
        """
        return self._resource_group_name

    @resource_group_name.setter
    def resource_group_name(self, resource_group_name):
        """Sets the resource_group_name of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.

        resource group the DNS zone is located in  # noqa: E501

        :param resource_group_name: The resource_group_name of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and resource_group_name is None:  # noqa: E501
            raise ValueError("Invalid value for `resource_group_name`, must not be `None`")  # noqa: E501

        self._resource_group_name = resource_group_name

    @property
    def subscription_id(self):
        """Gets the subscription_id of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.  # noqa: E501

        ID of the Azure subscription  # noqa: E501

        :return: The subscription_id of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.

        ID of the Azure subscription  # noqa: E501

        :param subscription_id: The subscription_id of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and subscription_id is None:  # noqa: E501
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")  # noqa: E501

        self._subscription_id = subscription_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.  # noqa: E501

        when specifying ClientID and ClientSecret then this field is also needed  # noqa: E501

        :return: The tenant_id of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.

        when specifying ClientID and ClientSecret then this field is also needed  # noqa: E501

        :param tenant_id: The tenant_id of this IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoCertManagerAcmeV1ChallengeSpecSolverDns01AzureDNS):
            return True

        return self.to_dict() != other.to_dict()
