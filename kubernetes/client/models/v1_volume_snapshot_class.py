# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class V1VolumeSnapshotClass(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_version': 'str',
        'deletion_policy': 'str',
        'driver': 'str',
        'kind': 'str',
        'metadata': 'V1ObjectMeta',
        'parameters': 'dict(str, str)'
    }

    attribute_map = {
        'api_version': 'apiVersion',
        'deletion_policy': 'deletionPolicy',
        'driver': 'driver',
        'kind': 'kind',
        'metadata': 'metadata',
        'parameters': 'parameters'
    }

    def __init__(self, api_version=None, deletion_policy=None, driver=None, kind=None, metadata=None, parameters=None, local_vars_configuration=None):  # noqa: E501
        """V1VolumeSnapshotClass - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_version = None
        self._deletion_policy = None
        self._driver = None
        self._kind = None
        self._metadata = None
        self._parameters = None
        self.discriminator = None

        if api_version is not None:
            self.api_version = api_version
        self.deletion_policy = deletion_policy
        self.driver = driver
        if kind is not None:
            self.kind = kind
        if metadata is not None:
            self.metadata = metadata
        if parameters is not None:
            self.parameters = parameters

    @property
    def api_version(self):
        """Gets the api_version of this V1VolumeSnapshotClass.  # noqa: E501

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :return: The api_version of this V1VolumeSnapshotClass.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this V1VolumeSnapshotClass.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :param api_version: The api_version of this V1VolumeSnapshotClass.  # noqa: E501
        :type: str
        """

        self._api_version = api_version

    @property
    def deletion_policy(self):
        """Gets the deletion_policy of this V1VolumeSnapshotClass.  # noqa: E501

        deletionPolicy determines whether a VolumeSnapshotContent created through the VolumeSnapshotClass should be deleted when its bound VolumeSnapshot is deleted. Supported values are \"Retain\" and \"Delete\". \"Retain\" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. \"Delete\" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. Required.  # noqa: E501

        :return: The deletion_policy of this V1VolumeSnapshotClass.  # noqa: E501
        :rtype: str
        """
        return self._deletion_policy

    @deletion_policy.setter
    def deletion_policy(self, deletion_policy):
        """Sets the deletion_policy of this V1VolumeSnapshotClass.

        deletionPolicy determines whether a VolumeSnapshotContent created through the VolumeSnapshotClass should be deleted when its bound VolumeSnapshot is deleted. Supported values are \"Retain\" and \"Delete\". \"Retain\" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. \"Delete\" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. Required.  # noqa: E501

        :param deletion_policy: The deletion_policy of this V1VolumeSnapshotClass.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and deletion_policy is None:  # noqa: E501
            raise ValueError("Invalid value for `deletion_policy`, must not be `None`")  # noqa: E501
        allowed_values = ["Delete", "Retain"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and deletion_policy not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `deletion_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(deletion_policy, allowed_values)
            )

        self._deletion_policy = deletion_policy

    @property
    def driver(self):
        """Gets the driver of this V1VolumeSnapshotClass.  # noqa: E501

        driver is the name of the storage driver that handles this VolumeSnapshotClass. Required.  # noqa: E501

        :return: The driver of this V1VolumeSnapshotClass.  # noqa: E501
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this V1VolumeSnapshotClass.

        driver is the name of the storage driver that handles this VolumeSnapshotClass. Required.  # noqa: E501

        :param driver: The driver of this V1VolumeSnapshotClass.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and driver is None:  # noqa: E501
            raise ValueError("Invalid value for `driver`, must not be `None`")  # noqa: E501

        self._driver = driver

    @property
    def kind(self):
        """Gets the kind of this V1VolumeSnapshotClass.  # noqa: E501

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this V1VolumeSnapshotClass.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this V1VolumeSnapshotClass.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this V1VolumeSnapshotClass.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def metadata(self):
        """Gets the metadata of this V1VolumeSnapshotClass.  # noqa: E501


        :return: The metadata of this V1VolumeSnapshotClass.  # noqa: E501
        :rtype: V1ObjectMeta
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this V1VolumeSnapshotClass.


        :param metadata: The metadata of this V1VolumeSnapshotClass.  # noqa: E501
        :type: V1ObjectMeta
        """

        self._metadata = metadata

    @property
    def parameters(self):
        """Gets the parameters of this V1VolumeSnapshotClass.  # noqa: E501

        parameters is a key-value map with storage driver specific parameters for creating snapshots. These values are opaque to Kubernetes.  # noqa: E501

        :return: The parameters of this V1VolumeSnapshotClass.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this V1VolumeSnapshotClass.

        parameters is a key-value map with storage driver specific parameters for creating snapshots. These values are opaque to Kubernetes.  # noqa: E501

        :param parameters: The parameters of this V1VolumeSnapshotClass.  # noqa: E501
        :type: dict(str, str)
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1VolumeSnapshotClass):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1VolumeSnapshotClass):
            return True

        return self.to_dict() != other.to_dict()
