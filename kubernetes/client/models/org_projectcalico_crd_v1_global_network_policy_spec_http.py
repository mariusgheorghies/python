# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.25.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class OrgProjectcalicoCrdV1GlobalNetworkPolicySpecHttp(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'methods': 'list[str]',
        'paths': 'list[OrgProjectcalicoCrdV1GlobalNetworkPolicySpecHttpPaths]'
    }

    attribute_map = {
        'methods': 'methods',
        'paths': 'paths'
    }

    def __init__(self, methods=None, paths=None, local_vars_configuration=None):  # noqa: E501
        """OrgProjectcalicoCrdV1GlobalNetworkPolicySpecHttp - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._methods = None
        self._paths = None
        self.discriminator = None

        if methods is not None:
            self.methods = methods
        if paths is not None:
            self.paths = paths

    @property
    def methods(self):
        """Gets the methods of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecHttp.  # noqa: E501

        Methods is an optional field that restricts the rule to apply only to HTTP requests that use one of the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple methods are OR'd together.  # noqa: E501

        :return: The methods of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecHttp.  # noqa: E501
        :rtype: list[str]
        """
        return self._methods

    @methods.setter
    def methods(self, methods):
        """Sets the methods of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecHttp.

        Methods is an optional field that restricts the rule to apply only to HTTP requests that use one of the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple methods are OR'd together.  # noqa: E501

        :param methods: The methods of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecHttp.  # noqa: E501
        :type: list[str]
        """

        self._methods = methods

    @property
    def paths(self):
        """Gets the paths of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecHttp.  # noqa: E501

        Paths is an optional field that restricts the rule to apply to HTTP requests that use one of the listed HTTP Paths. Multiple paths are OR'd together. e.g: - exact: /foo - prefix: /bar NOTE: Each entry may ONLY specify either a `exact` or a `prefix` match. The validator will check for it.  # noqa: E501

        :return: The paths of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecHttp.  # noqa: E501
        :rtype: list[OrgProjectcalicoCrdV1GlobalNetworkPolicySpecHttpPaths]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecHttp.

        Paths is an optional field that restricts the rule to apply to HTTP requests that use one of the listed HTTP Paths. Multiple paths are OR'd together. e.g: - exact: /foo - prefix: /bar NOTE: Each entry may ONLY specify either a `exact` or a `prefix` match. The validator will check for it.  # noqa: E501

        :param paths: The paths of this OrgProjectcalicoCrdV1GlobalNetworkPolicySpecHttp.  # noqa: E501
        :type: list[OrgProjectcalicoCrdV1GlobalNetworkPolicySpecHttpPaths]
        """

        self._paths = paths

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgProjectcalicoCrdV1GlobalNetworkPolicySpecHttp):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrgProjectcalicoCrdV1GlobalNetworkPolicySpecHttp):
            return True

        return self.to_dict() != other.to_dict()
